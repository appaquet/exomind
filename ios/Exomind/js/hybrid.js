!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=416)}({1:function(e,t,n){"use strict";e.exports=n(85)},11:function(e,t,n){"use strict";var r,i={},o=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},a=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}();function u(e,t){for(var n=[],r={},i=0;i<e.length;i++){var o=e[i],a=t.base?o[0]+t.base:o[0],u={css:o[1],media:o[2],sourceMap:o[3]};r[a]?r[a].parts.push(u):n.push(r[a]={id:a,parts:[u]})}return n}function l(e,t){for(var n=0;n<e.length;n++){var r=e[n],o=i[r.id],a=0;if(o){for(o.refs++;a<o.parts.length;a++)o.parts[a](r.parts[a]);for(;a<r.parts.length;a++)o.parts.push(v(r.parts[a],t))}else{for(var u=[];a<r.parts.length;a++)u.push(v(r.parts[a],t));i[r.id]={id:r.id,refs:1,parts:u}}}}function c(e){var t=document.createElement("style");if(void 0===e.attributes.nonce){var r=n.nc;r&&(e.attributes.nonce=r)}if(Object.keys(e.attributes).forEach(function(n){t.setAttribute(n,e.attributes[n])}),"function"==typeof e.insert)e.insert(t);else{var i=a(e.insert||"head");if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(t)}return t}var s,f=(s=[],function(e,t){return s[e]=t,s.filter(Boolean).join("\n")});function d(e,t,n,r){var i=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=f(t,i);else{var o=document.createTextNode(i),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(o,a[t]):e.appendChild(o)}}var p=null,h=0;function v(e,t){var n,r,i;if(t.singleton){var o=h++;n=p||(p=c(t)),r=d.bind(null,n,o,!1),i=d.bind(null,n,o,!0)}else n=c(t),r=function(e,t,n){var r=n.css,i=n.media,o=n.sourceMap;if(i&&e.setAttribute("media",i),o&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}.bind(null,n,t),i=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else i()}}e.exports=function(e,t){(t=t||{}).attributes="object"==typeof t.attributes?t.attributes:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=o());var n=u(e,t);return l(n,t),function(e){for(var r=[],o=0;o<n.length;o++){var a=n[o],c=i[a.id];c&&(c.refs--,r.push(c))}e&&l(u(e,t),t);for(var s=0;s<r.length;s++){var f=r[s];if(0===f.refs){for(var d=0;d<f.parts.length;d++)f.parts[d]();delete i[f.id]}}}}},166:function(e,t,n){var r=n(167);"string"==typeof r&&(r=[[e.i,r,""]]);var i={insert:"head",singleton:!1};n(11)(r,i);r.locals&&(e.exports=r.locals)},167:function(e,t,n){(e.exports=n(9)(!1)).push([e.i,'.html-editor {\n  width: 100%;\n  height: 100%;\n  position: relative;\n}\n.html-editor iframe {\n  width: 100%;\n  height: 100%;\n  border: none;\n}\n.html-editor iframe html {\n  font: 12px/20px "Helvetica neue", Helvetica, Arial, sans-serif;\n}\n.html-editor .placeholder {\n  position: absolute;\n  top: 5px;\n  left: 5px;\n  font-style: italic;\n}\n',""])},169:function(e,t,n){"use strict";
/** @license React v16.9.0
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(1),i=n(49),o=n(170);function a(e){for(var t=e.message,n="https://reactjs.org/docs/error-decoder.html?invariant="+t,r=1;r<arguments.length;r++)n+="&args[]="+encodeURIComponent(arguments[r]);return e.message="Minified React error #"+t+"; visit "+n+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",e}if(!r)throw a(Error(227));var u=null,l={};function c(){if(u)for(var e in l){var t=l[e],n=u.indexOf(e);if(!(-1<n))throw a(Error(96),e);if(!f[n]){if(!t.extractEvents)throw a(Error(97),e);for(var r in f[n]=t,n=t.eventTypes){var i=void 0,o=n[r],c=t,p=r;if(d.hasOwnProperty(p))throw a(Error(99),p);d[p]=o;var h=o.phasedRegistrationNames;if(h){for(i in h)h.hasOwnProperty(i)&&s(h[i],c,p);i=!0}else o.registrationName?(s(o.registrationName,c,p),i=!0):i=!1;if(!i)throw a(Error(98),r,e)}}}}function s(e,t,n){if(p[e])throw a(Error(100),e);p[e]=t,h[e]=t.eventTypes[n].dependencies}var f=[],d={},p={},h={};var v=!1,m=null,g=!1,y=null,b={onError:function(e){v=!0,m=e}};function _(e,t,n,r,i,o,a,u,l){v=!1,m=null,function(e,t,n,r,i,o,a,u,l){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this.onError(e)}}.apply(b,arguments)}var w=null,k=null,C=null;function x(e,t,n){var r=e.type||"unknown-event";e.currentTarget=C(n),function(e,t,n,r,i,o,u,l,c){if(_.apply(this,arguments),v){if(!v)throw a(Error(198));var s=m;v=!1,m=null,g||(g=!0,y=s)}}(r,t,void 0,e),e.currentTarget=null}function E(e,t){if(null==t)throw a(Error(30));return null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function S(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var T=null;function N(e){if(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))for(var r=0;r<t.length&&!e.isPropagationStopped();r++)x(e,t[r],n[r]);else t&&x(e,t,n);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function P(e){if(null!==e&&(T=E(T,e)),e=T,T=null,e){if(S(e,N),T)throw a(Error(95));if(g)throw e=y,g=!1,y=null,e}}var O={injectEventPluginOrder:function(e){if(u)throw a(Error(101));u=Array.prototype.slice.call(e),c()},injectEventPluginsByName:function(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];if(!l.hasOwnProperty(t)||l[t]!==r){if(l[t])throw a(Error(102),t);l[t]=r,n=!0}}n&&c()}};function R(e,t){var n=e.stateNode;if(!n)return null;var r=w(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw a(Error(231),t,typeof n);return n}var L=Math.random().toString(36).slice(2),A="__reactInternalInstance$"+L,D="__reactEventHandlers$"+L;function I(e){if(e[A])return e[A];for(;!e[A];){if(!e.parentNode)return null;e=e.parentNode}return 5===(e=e[A]).tag||6===e.tag?e:null}function U(e){return!(e=e[A])||5!==e.tag&&6!==e.tag?null:e}function F(e){if(5===e.tag||6===e.tag)return e.stateNode;throw a(Error(33))}function B(e){return e[D]||null}function z(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function M(e,t,n){(t=R(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=E(n._dispatchListeners,t),n._dispatchInstances=E(n._dispatchInstances,e))}function j(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=z(t);for(t=n.length;0<t--;)M(n[t],"captured",e);for(t=0;t<n.length;t++)M(n[t],"bubbled",e)}}function W(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=R(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=E(n._dispatchListeners,t),n._dispatchInstances=E(n._dispatchInstances,e))}function H(e){e&&e.dispatchConfig.registrationName&&W(e._targetInst,null,e)}function $(e){S(e,j)}var V=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement);function q(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Q={animationend:q("Animation","AnimationEnd"),animationiteration:q("Animation","AnimationIteration"),animationstart:q("Animation","AnimationStart"),transitionend:q("Transition","TransitionEnd")},K={},Y={};function G(e){if(K[e])return K[e];if(!Q[e])return e;var t,n=Q[e];for(t in n)if(n.hasOwnProperty(t)&&t in Y)return K[e]=n[t];return e}V&&(Y=document.createElement("div").style,"AnimationEvent"in window||(delete Q.animationend.animation,delete Q.animationiteration.animation,delete Q.animationstart.animation),"TransitionEvent"in window||delete Q.transitionend.transition);var Z=G("animationend"),X=G("animationiteration"),J=G("animationstart"),ee=G("transitionend"),te="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),ne=null,re=null,ie=null;function oe(){if(ie)return ie;var e,t,n=re,r=n.length,i="value"in ne?ne.value:ne.textContent,o=i.length;for(e=0;e<r&&n[e]===i[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===i[o-t];t++);return ie=i.slice(e,1<t?1-t:void 0)}function ae(){return!0}function ue(){return!1}function le(e,t,n,r){for(var i in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(i)&&((t=e[i])?this[i]=t(n):"target"===i?this.target=r:this[i]=n[i]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?ae:ue,this.isPropagationStopped=ue,this}function ce(e,t,n,r){if(this.eventPool.length){var i=this.eventPool.pop();return this.call(i,e,t,n,r),i}return new this(e,t,n,r)}function se(e){if(!(e instanceof this))throw a(Error(279));e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function fe(e){e.eventPool=[],e.getPooled=ce,e.release=se}i(le.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=ae)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=ae)},persist:function(){this.isPersistent=ae},isPersistent:ue,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=ue,this._dispatchInstances=this._dispatchListeners=null}}),le.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},le.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var o=new t;return i(o,n.prototype),n.prototype=o,n.prototype.constructor=n,n.Interface=i({},r.Interface,e),n.extend=r.extend,fe(n),n},fe(le);var de=le.extend({data:null}),pe=le.extend({data:null}),he=[9,13,27,32],ve=V&&"CompositionEvent"in window,me=null;V&&"documentMode"in document&&(me=document.documentMode);var ge=V&&"TextEvent"in window&&!me,ye=V&&(!ve||me&&8<me&&11>=me),be=String.fromCharCode(32),_e={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},we=!1;function ke(e,t){switch(e){case"keyup":return-1!==he.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function Ce(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var xe=!1;var Ee={eventTypes:_e,extractEvents:function(e,t,n,r){var i=void 0,o=void 0;if(ve)e:{switch(e){case"compositionstart":i=_e.compositionStart;break e;case"compositionend":i=_e.compositionEnd;break e;case"compositionupdate":i=_e.compositionUpdate;break e}i=void 0}else xe?ke(e,n)&&(i=_e.compositionEnd):"keydown"===e&&229===n.keyCode&&(i=_e.compositionStart);return i?(ye&&"ko"!==n.locale&&(xe||i!==_e.compositionStart?i===_e.compositionEnd&&xe&&(o=oe()):(re="value"in(ne=r)?ne.value:ne.textContent,xe=!0)),i=de.getPooled(i,t,n,r),o?i.data=o:null!==(o=Ce(n))&&(i.data=o),$(i),o=i):o=null,(e=ge?function(e,t){switch(e){case"compositionend":return Ce(t);case"keypress":return 32!==t.which?null:(we=!0,be);case"textInput":return(e=t.data)===be&&we?null:e;default:return null}}(e,n):function(e,t){if(xe)return"compositionend"===e||!ve&&ke(e,t)?(e=oe(),ie=re=ne=null,xe=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return ye&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))?((t=pe.getPooled(_e.beforeInput,t,n,r)).data=e,$(t)):t=null,null===o?t:null===t?o:[o,t]}},Se=null,Te=null,Ne=null;function Pe(e){if(e=k(e)){if("function"!=typeof Se)throw a(Error(280));var t=w(e.stateNode);Se(e.stateNode,e.type,t)}}function Oe(e){Te?Ne?Ne.push(e):Ne=[e]:Te=e}function Re(){if(Te){var e=Te,t=Ne;if(Ne=Te=null,Pe(e),t)for(e=0;e<t.length;e++)Pe(t[e])}}function Le(e,t){return e(t)}function Ae(e,t,n,r){return e(t,n,r)}function De(){}var Ie=Le,Ue=!1;function Fe(){null===Te&&null===Ne||(De(),Re())}var Be={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function ze(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Be[e.type]:"textarea"===t}function Me(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function je(e){if(!V)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}function We(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function He(e){e._valueTracker||(e._valueTracker=function(e){var t=We(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var i=n.get,o=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return i.call(this)},set:function(e){r=""+e,o.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function $e(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=We(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}var Ve=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;Ve.hasOwnProperty("ReactCurrentDispatcher")||(Ve.ReactCurrentDispatcher={current:null}),Ve.hasOwnProperty("ReactCurrentBatchConfig")||(Ve.ReactCurrentBatchConfig={suspense:null});var qe=/^(.*)[\\\/]/,Qe="function"==typeof Symbol&&Symbol.for,Ke=Qe?Symbol.for("react.element"):60103,Ye=Qe?Symbol.for("react.portal"):60106,Ge=Qe?Symbol.for("react.fragment"):60107,Ze=Qe?Symbol.for("react.strict_mode"):60108,Xe=Qe?Symbol.for("react.profiler"):60114,Je=Qe?Symbol.for("react.provider"):60109,et=Qe?Symbol.for("react.context"):60110,tt=Qe?Symbol.for("react.concurrent_mode"):60111,nt=Qe?Symbol.for("react.forward_ref"):60112,rt=Qe?Symbol.for("react.suspense"):60113,it=Qe?Symbol.for("react.suspense_list"):60120,ot=Qe?Symbol.for("react.memo"):60115,at=Qe?Symbol.for("react.lazy"):60116;Qe&&Symbol.for("react.fundamental"),Qe&&Symbol.for("react.responder");var ut="function"==typeof Symbol&&Symbol.iterator;function lt(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=ut&&e[ut]||e["@@iterator"])?e:null}function ct(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case Ge:return"Fragment";case Ye:return"Portal";case Xe:return"Profiler";case Ze:return"StrictMode";case rt:return"Suspense";case it:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case et:return"Context.Consumer";case Je:return"Context.Provider";case nt:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case ot:return ct(e.type);case at:if(e=1===e._status?e._result:null)return ct(e)}return null}function st(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var n="";break e;default:var r=e._debugOwner,i=e._debugSource,o=ct(e.type);n=null,r&&(n=ct(r.type)),r=o,o="",i?o=" (at "+i.fileName.replace(qe,"")+":"+i.lineNumber+")":n&&(o=" (created by "+n+")"),n="\n    in "+(r||"Unknown")+o}t+=n,e=e.return}while(e);return t}var ft=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,dt=Object.prototype.hasOwnProperty,pt={},ht={};function vt(e,t,n,r,i,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=i,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=o}var mt={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){mt[e]=new vt(e,0,!1,e,null,!1)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];mt[t]=new vt(t,1,!1,e[1],null,!1)}),["contentEditable","draggable","spellCheck","value"].forEach(function(e){mt[e]=new vt(e,2,!1,e.toLowerCase(),null,!1)}),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(e){mt[e]=new vt(e,2,!1,e,null,!1)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){mt[e]=new vt(e,3,!1,e.toLowerCase(),null,!1)}),["checked","multiple","muted","selected"].forEach(function(e){mt[e]=new vt(e,3,!0,e,null,!1)}),["capture","download"].forEach(function(e){mt[e]=new vt(e,4,!1,e,null,!1)}),["cols","rows","size","span"].forEach(function(e){mt[e]=new vt(e,6,!1,e,null,!1)}),["rowSpan","start"].forEach(function(e){mt[e]=new vt(e,5,!1,e.toLowerCase(),null,!1)});var gt=/[\-:]([a-z])/g;function yt(e){return e[1].toUpperCase()}function bt(e,t,n,r){var i=mt.hasOwnProperty(t)?mt[t]:null;(null!==i?0===i.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,i,r)&&(n=null),r||null===i?function(e){return!!dt.call(ht,e)||!dt.call(pt,e)&&(ft.test(e)?ht[e]=!0:(pt[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):i.mustUseProperty?e[i.propertyName]=null===n?3!==i.type&&"":n:(t=i.attributeName,r=i.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(i=i.type)||4===i&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}function _t(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function wt(e,t){var n=t.checked;return i({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function kt(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=_t(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function Ct(e,t){null!=(t=t.checked)&&bt(e,"checked",t,!1)}function xt(e,t){Ct(e,t);var n=_t(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?St(e,t.type,n):t.hasOwnProperty("defaultValue")&&St(e,t.type,_t(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Et(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function St(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(gt,yt);mt[t]=new vt(t,1,!1,e,null,!1)}),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(gt,yt);mt[t]=new vt(t,1,!1,e,"http://www.w3.org/1999/xlink",!1)}),["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(gt,yt);mt[t]=new vt(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1)}),["tabIndex","crossOrigin"].forEach(function(e){mt[e]=new vt(e,1,!1,e.toLowerCase(),null,!1)}),mt.xlinkHref=new vt("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0),["src","href","action","formAction"].forEach(function(e){mt[e]=new vt(e,1,!1,e.toLowerCase(),null,!0)});var Tt={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function Nt(e,t,n){return(e=le.getPooled(Tt.change,e,t,n)).type="change",Oe(n),$(e),e}var Pt=null,Ot=null;function Rt(e){P(e)}function Lt(e){if($e(F(e)))return e}function At(e,t){if("change"===e)return t}var Dt=!1;function It(){Pt&&(Pt.detachEvent("onpropertychange",Ut),Ot=Pt=null)}function Ut(e){if("value"===e.propertyName&&Lt(Ot))if(e=Nt(Ot,e,Me(e)),Ue)P(e);else{Ue=!0;try{Le(Rt,e)}finally{Ue=!1,Fe()}}}function Ft(e,t,n){"focus"===e?(It(),Ot=n,(Pt=t).attachEvent("onpropertychange",Ut)):"blur"===e&&It()}function Bt(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Lt(Ot)}function zt(e,t){if("click"===e)return Lt(t)}function Mt(e,t){if("input"===e||"change"===e)return Lt(t)}V&&(Dt=je("input")&&(!document.documentMode||9<document.documentMode));var jt={eventTypes:Tt,_isInputEventSupported:Dt,extractEvents:function(e,t,n,r){var i=t?F(t):window,o=void 0,a=void 0,u=i.nodeName&&i.nodeName.toLowerCase();if("select"===u||"input"===u&&"file"===i.type?o=At:ze(i)?Dt?o=Mt:(o=Bt,a=Ft):(u=i.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===i.type||"radio"===i.type)&&(o=zt),o&&(o=o(e,t)))return Nt(o,n,r);a&&a(e,i,t),"blur"===e&&(e=i._wrapperState)&&e.controlled&&"number"===i.type&&St(i,"number",i.value)}},Wt=le.extend({view:null,detail:null}),Ht={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function $t(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Ht[e])&&!!t[e]}function Vt(){return $t}var qt=0,Qt=0,Kt=!1,Yt=!1,Gt=Wt.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Vt,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=qt;return qt=e.screenX,Kt?"mousemove"===e.type?e.screenX-t:0:(Kt=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=Qt;return Qt=e.screenY,Yt?"mousemove"===e.type?e.screenY-t:0:(Yt=!0,0)}}),Zt=Gt.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Xt={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},Jt={eventTypes:Xt,extractEvents:function(e,t,n,r){var i="mouseover"===e||"pointerover"===e,o="mouseout"===e||"pointerout"===e;if(i&&(n.relatedTarget||n.fromElement)||!o&&!i)return null;if(i=r.window===r?r:(i=r.ownerDocument)?i.defaultView||i.parentWindow:window,o?(o=t,t=(t=n.relatedTarget||n.toElement)?I(t):null):o=null,o===t)return null;var a=void 0,u=void 0,l=void 0,c=void 0;"mouseout"===e||"mouseover"===e?(a=Gt,u=Xt.mouseLeave,l=Xt.mouseEnter,c="mouse"):"pointerout"!==e&&"pointerover"!==e||(a=Zt,u=Xt.pointerLeave,l=Xt.pointerEnter,c="pointer");var s=null==o?i:F(o);if(i=null==t?i:F(t),(e=a.getPooled(u,o,n,r)).type=c+"leave",e.target=s,e.relatedTarget=i,(n=a.getPooled(l,t,n,r)).type=c+"enter",n.target=i,n.relatedTarget=s,r=t,o&&r)e:{for(i=r,c=0,a=t=o;a;a=z(a))c++;for(a=0,l=i;l;l=z(l))a++;for(;0<c-a;)t=z(t),c--;for(;0<a-c;)i=z(i),a--;for(;c--;){if(t===i||t===i.alternate)break e;t=z(t),i=z(i)}t=null}else t=null;for(i=t,t=[];o&&o!==i&&(null===(c=o.alternate)||c!==i);)t.push(o),o=z(o);for(o=[];r&&r!==i&&(null===(c=r.alternate)||c!==i);)o.push(r),r=z(r);for(r=0;r<t.length;r++)W(t[r],"bubbled",e);for(r=o.length;0<r--;)W(o[r],"captured",n);return[e,n]}};function en(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t}var tn=Object.prototype.hasOwnProperty;function nn(e,t){if(en(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!tn.call(t,n[r])||!en(e[n[r]],t[n[r]]))return!1;return!0}function rn(e,t){return{responder:e,props:t}}function on(e){var t=e;if(e.alternate)for(;t.return;)t=t.return;else{if(0!=(2&t.effectTag))return 1;for(;t.return;)if(0!=(2&(t=t.return).effectTag))return 1}return 3===t.tag?2:3}function an(e){if(2!==on(e))throw a(Error(188))}function un(e){if(!(e=function(e){var t=e.alternate;if(!t){if(3===(t=on(e)))throw a(Error(188));return 1===t?null:e}for(var n=e,r=t;;){var i=n.return;if(null===i)break;var o=i.alternate;if(null===o){if(null!==(r=i.return)){n=r;continue}break}if(i.child===o.child){for(o=i.child;o;){if(o===n)return an(i),e;if(o===r)return an(i),t;o=o.sibling}throw a(Error(188))}if(n.return!==r.return)n=i,r=o;else{for(var u=!1,l=i.child;l;){if(l===n){u=!0,n=i,r=o;break}if(l===r){u=!0,r=i,n=o;break}l=l.sibling}if(!u){for(l=o.child;l;){if(l===n){u=!0,n=o,r=i;break}if(l===r){u=!0,r=o,n=i;break}l=l.sibling}if(!u)throw a(Error(189))}}if(n.alternate!==r)throw a(Error(190))}if(3!==n.tag)throw a(Error(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}new Map,new Map,new Set,new Map;var ln=le.extend({animationName:null,elapsedTime:null,pseudoElement:null}),cn=le.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),sn=Wt.extend({relatedTarget:null});function fn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}for(var dn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},pn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},hn=Wt.extend({key:function(e){if(e.key){var t=dn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=fn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?pn[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Vt,charCode:function(e){return"keypress"===e.type?fn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?fn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),vn=Gt.extend({dataTransfer:null}),mn=Wt.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Vt}),gn=le.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),yn=Gt.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),bn=[["blur","blur",0],["cancel","cancel",0],["click","click",0],["close","close",0],["contextmenu","contextMenu",0],["copy","copy",0],["cut","cut",0],["auxclick","auxClick",0],["dblclick","doubleClick",0],["dragend","dragEnd",0],["dragstart","dragStart",0],["drop","drop",0],["focus","focus",0],["input","input",0],["invalid","invalid",0],["keydown","keyDown",0],["keypress","keyPress",0],["keyup","keyUp",0],["mousedown","mouseDown",0],["mouseup","mouseUp",0],["paste","paste",0],["pause","pause",0],["play","play",0],["pointercancel","pointerCancel",0],["pointerdown","pointerDown",0],["pointerup","pointerUp",0],["ratechange","rateChange",0],["reset","reset",0],["seeked","seeked",0],["submit","submit",0],["touchcancel","touchCancel",0],["touchend","touchEnd",0],["touchstart","touchStart",0],["volumechange","volumeChange",0],["drag","drag",1],["dragenter","dragEnter",1],["dragexit","dragExit",1],["dragleave","dragLeave",1],["dragover","dragOver",1],["mousemove","mouseMove",1],["mouseout","mouseOut",1],["mouseover","mouseOver",1],["pointermove","pointerMove",1],["pointerout","pointerOut",1],["pointerover","pointerOver",1],["scroll","scroll",1],["toggle","toggle",1],["touchmove","touchMove",1],["wheel","wheel",1],["abort","abort",2],[Z,"animationEnd",2],[X,"animationIteration",2],[J,"animationStart",2],["canplay","canPlay",2],["canplaythrough","canPlayThrough",2],["durationchange","durationChange",2],["emptied","emptied",2],["encrypted","encrypted",2],["ended","ended",2],["error","error",2],["gotpointercapture","gotPointerCapture",2],["load","load",2],["loadeddata","loadedData",2],["loadedmetadata","loadedMetadata",2],["loadstart","loadStart",2],["lostpointercapture","lostPointerCapture",2],["playing","playing",2],["progress","progress",2],["seeking","seeking",2],["stalled","stalled",2],["suspend","suspend",2],["timeupdate","timeUpdate",2],[ee,"transitionEnd",2],["waiting","waiting",2]],_n={},wn={},kn=0;kn<bn.length;kn++){var Cn=bn[kn],xn=Cn[0],En=Cn[1],Sn=Cn[2],Tn="on"+(En[0].toUpperCase()+En.slice(1)),Nn={phasedRegistrationNames:{bubbled:Tn,captured:Tn+"Capture"},dependencies:[xn],eventPriority:Sn};_n[En]=Nn,wn[xn]=Nn}var Pn={eventTypes:_n,getEventPriority:function(e){return void 0!==(e=wn[e])?e.eventPriority:2},extractEvents:function(e,t,n,r){var i=wn[e];if(!i)return null;switch(e){case"keypress":if(0===fn(n))return null;case"keydown":case"keyup":e=hn;break;case"blur":case"focus":e=sn;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=Gt;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=vn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=mn;break;case Z:case X:case J:e=ln;break;case ee:e=gn;break;case"scroll":e=Wt;break;case"wheel":e=yn;break;case"copy":case"cut":case"paste":e=cn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=Zt;break;default:e=le}return $(t=e.getPooled(i,t,n,r)),t}},On=Pn.getEventPriority,Rn=[];function Ln(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r;for(r=n;r.return;)r=r.return;if(!(r=3!==r.tag?null:r.stateNode.containerInfo))break;e.ancestors.push(n),n=I(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var i=Me(e.nativeEvent);r=e.topLevelType;for(var o=e.nativeEvent,a=null,u=0;u<f.length;u++){var l=f[u];l&&(l=l.extractEvents(r,t,o,i))&&(a=E(a,l))}P(a)}}var An=!0;function Dn(e,t){In(t,e,!1)}function In(e,t,n){switch(On(t)){case 0:var r=function(e,t,n){Ue||De();var r=Un,i=Ue;Ue=!0;try{Ae(r,e,t,n)}finally{(Ue=i)||Fe()}}.bind(null,t,1);break;case 1:r=function(e,t,n){Un(e,t,n)}.bind(null,t,1);break;default:r=Un.bind(null,t,1)}n?e.addEventListener(t,r,!0):e.addEventListener(t,r,!1)}function Un(e,t,n){if(An){if(null===(t=I(t=Me(n)))||"number"!=typeof t.tag||2===on(t)||(t=null),Rn.length){var r=Rn.pop();r.topLevelType=e,r.nativeEvent=n,r.targetInst=t,e=r}else e={topLevelType:e,nativeEvent:n,targetInst:t,ancestors:[]};try{if(n=e,Ue)Ln(n);else{Ue=!0;try{Ie(Ln,n,void 0)}finally{Ue=!1,Fe()}}}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>Rn.length&&Rn.push(e)}}}var Fn=new("function"==typeof WeakMap?WeakMap:Map);function Bn(e){var t=Fn.get(e);return void 0===t&&(t=new Set,Fn.set(e,t)),t}function zn(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Mn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function jn(e,t){var n,r=Mn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=Mn(r)}}function Wn(){for(var e=window,t=zn();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=zn((e=t.contentWindow).document)}return t}function Hn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var $n=V&&"documentMode"in document&&11>=document.documentMode,Vn={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},qn=null,Qn=null,Kn=null,Yn=!1;function Gn(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return Yn||null==qn||qn!==zn(n)?null:("selectionStart"in(n=qn)&&Hn(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},Kn&&nn(Kn,n)?null:(Kn=n,(e=le.getPooled(Vn.select,Qn,e,t)).type="select",e.target=qn,$(e),e))}var Zn={eventTypes:Vn,extractEvents:function(e,t,n,r){var i,o=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(i=!o)){e:{o=Bn(o),i=h.onSelect;for(var a=0;a<i.length;a++)if(!o.has(i[a])){o=!1;break e}o=!0}i=!o}if(i)return null;switch(o=t?F(t):window,e){case"focus":(ze(o)||"true"===o.contentEditable)&&(qn=o,Qn=t,Kn=null);break;case"blur":Kn=Qn=qn=null;break;case"mousedown":Yn=!0;break;case"contextmenu":case"mouseup":case"dragend":return Yn=!1,Gn(n,r);case"selectionchange":if($n)break;case"keydown":case"keyup":return Gn(n,r)}return null}};function Xn(e,t){return e=i({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,function(e){null!=e&&(t+=e)}),t}(t.children))&&(e.children=t),e}function Jn(e,t,n,r){if(e=e.options,t){t={};for(var i=0;i<n.length;i++)t["$"+n[i]]=!0;for(n=0;n<e.length;n++)i=t.hasOwnProperty("$"+e[n].value),e[n].selected!==i&&(e[n].selected=i),i&&r&&(e[n].defaultSelected=!0)}else{for(n=""+_t(n),t=null,i=0;i<e.length;i++){if(e[i].value===n)return e[i].selected=!0,void(r&&(e[i].defaultSelected=!0));null!==t||e[i].disabled||(t=e[i])}null!==t&&(t.selected=!0)}}function er(e,t){if(null!=t.dangerouslySetInnerHTML)throw a(Error(91));return i({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function tr(e,t){var n=t.value;if(null==n){if(n=t.defaultValue,null!=(t=t.children)){if(null!=n)throw a(Error(92));if(Array.isArray(t)){if(!(1>=t.length))throw a(Error(93));t=t[0]}n=t}null==n&&(n="")}e._wrapperState={initialValue:_t(n)}}function nr(e,t){var n=_t(t.value),r=_t(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function rr(e){var t=e.textContent;t===e._wrapperState.initialValue&&(e.value=t)}O.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),w=B,k=U,C=F,O.injectEventPluginsByName({SimpleEventPlugin:Pn,EnterLeaveEventPlugin:Jt,ChangeEventPlugin:jt,SelectEventPlugin:Zn,BeforeInputEventPlugin:Ee});var ir={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function or(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function ar(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?or(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var ur=void 0,lr=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,i){MSApp.execUnsafeLocalFunction(function(){return e(t,n)})}:e}(function(e,t){if(e.namespaceURI!==ir.svg||"innerHTML"in e)e.innerHTML=t;else{for((ur=ur||document.createElement("div")).innerHTML="<svg>"+t+"</svg>",t=ur.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}});function cr(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var sr={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},fr=["Webkit","ms","Moz","O"];function dr(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||sr.hasOwnProperty(e)&&sr[e]?(""+t).trim():t+"px"}function pr(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),i=dr(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,i):e[n]=i}}Object.keys(sr).forEach(function(e){fr.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),sr[t]=sr[e]})});var hr=i({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function vr(e,t){if(t){if(hr[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw a(Error(137),e,"");if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw a(Error(60));if(!("object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML))throw a(Error(61))}if(null!=t.style&&"object"!=typeof t.style)throw a(Error(62),"")}}function mr(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function gr(e,t){var n=Bn(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=h[t];for(var r=0;r<t.length;r++){var i=t[r];if(!n.has(i)){switch(i){case"scroll":In(e,"scroll",!0);break;case"focus":case"blur":In(e,"focus",!0),In(e,"blur",!0),n.add("blur"),n.add("focus");break;case"cancel":case"close":je(i)&&In(e,i,!0);break;case"invalid":case"submit":case"reset":break;default:-1===te.indexOf(i)&&Dn(i,e)}n.add(i)}}}function yr(){}var br=null,_r=null;function wr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function kr(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var Cr="function"==typeof setTimeout?setTimeout:void 0,xr="function"==typeof clearTimeout?clearTimeout:void 0;function Er(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}new Set;var Sr=[],Tr=-1;function Nr(e){0>Tr||(e.current=Sr[Tr],Sr[Tr]=null,Tr--)}function Pr(e,t){Sr[++Tr]=e.current,e.current=t}var Or={},Rr={current:Or},Lr={current:!1},Ar=Or;function Dr(e,t){var n=e.type.contextTypes;if(!n)return Or;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var i,o={};for(i in n)o[i]=t[i];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=o),o}function Ir(e){return null!=(e=e.childContextTypes)}function Ur(e){Nr(Lr),Nr(Rr)}function Fr(e){Nr(Lr),Nr(Rr)}function Br(e,t,n){if(Rr.current!==Or)throw a(Error(168));Pr(Rr,t),Pr(Lr,n)}function zr(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var o in r=r.getChildContext())if(!(o in e))throw a(Error(108),ct(t)||"Unknown",o);return i({},n,r)}function Mr(e){var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||Or,Ar=Rr.current,Pr(Rr,t),Pr(Lr,Lr.current),!0}function jr(e,t,n){var r=e.stateNode;if(!r)throw a(Error(169));n?(t=zr(e,t,Ar),r.__reactInternalMemoizedMergedChildContext=t,Nr(Lr),Nr(Rr),Pr(Rr,t)):Nr(Lr),Pr(Lr,n)}var Wr=o.unstable_runWithPriority,Hr=o.unstable_scheduleCallback,$r=o.unstable_cancelCallback,Vr=o.unstable_shouldYield,qr=o.unstable_requestPaint,Qr=o.unstable_now,Kr=o.unstable_getCurrentPriorityLevel,Yr=o.unstable_ImmediatePriority,Gr=o.unstable_UserBlockingPriority,Zr=o.unstable_NormalPriority,Xr=o.unstable_LowPriority,Jr=o.unstable_IdlePriority,ei={},ti=void 0!==qr?qr:function(){},ni=null,ri=null,ii=!1,oi=Qr(),ai=1e4>oi?Qr:function(){return Qr()-oi};function ui(){switch(Kr()){case Yr:return 99;case Gr:return 98;case Zr:return 97;case Xr:return 96;case Jr:return 95;default:throw a(Error(332))}}function li(e){switch(e){case 99:return Yr;case 98:return Gr;case 97:return Zr;case 96:return Xr;case 95:return Jr;default:throw a(Error(332))}}function ci(e,t){return e=li(e),Wr(e,t)}function si(e,t,n){return e=li(e),Hr(e,t,n)}function fi(e){return null===ni?(ni=[e],ri=Hr(Yr,pi)):ni.push(e),ei}function di(){null!==ri&&$r(ri),pi()}function pi(){if(!ii&&null!==ni){ii=!0;var e=0;try{var t=ni;ci(99,function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}}),ni=null}catch(t){throw null!==ni&&(ni=ni.slice(e+1)),Hr(Yr,di),t}finally{ii=!1}}}function hi(e,t){return 1073741823===t?99:1===t?95:0>=(e=10*(1073741821-t)-10*(1073741821-e))?99:250>=e?98:5250>=e?97:95}function vi(e,t){if(e&&e.defaultProps)for(var n in t=i({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}var mi={current:null},gi=null,yi=null,bi=null;function _i(){bi=yi=gi=null}function wi(e,t){var n=e.type._context;Pr(mi,n._currentValue),n._currentValue=t}function ki(e){var t=mi.current;Nr(mi),e.type._context._currentValue=t}function Ci(e,t){for(;null!==e;){var n=e.alternate;if(e.childExpirationTime<t)e.childExpirationTime=t,null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t);else{if(!(null!==n&&n.childExpirationTime<t))break;n.childExpirationTime=t}e=e.return}}function xi(e,t){gi=e,bi=yi=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(e.expirationTime>=t&&(la=!0),e.firstContext=null)}function Ei(e,t){if(bi!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(bi=e,t=1073741823),t={context:e,observedBits:t,next:null},null===yi){if(null===gi)throw a(Error(308));yi=t,gi.dependencies={expirationTime:0,firstContext:t,responders:null}}else yi=yi.next=t;return e._currentValue}var Si=!1;function Ti(e){return{baseState:e,firstUpdate:null,lastUpdate:null,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Ni(e){return{baseState:e.baseState,firstUpdate:e.firstUpdate,lastUpdate:e.lastUpdate,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Pi(e,t){return{expirationTime:e,suspenseConfig:t,tag:0,payload:null,callback:null,next:null,nextEffect:null}}function Oi(e,t){null===e.lastUpdate?e.firstUpdate=e.lastUpdate=t:(e.lastUpdate.next=t,e.lastUpdate=t)}function Ri(e,t){var n=e.alternate;if(null===n){var r=e.updateQueue,i=null;null===r&&(r=e.updateQueue=Ti(e.memoizedState))}else r=e.updateQueue,i=n.updateQueue,null===r?null===i?(r=e.updateQueue=Ti(e.memoizedState),i=n.updateQueue=Ti(n.memoizedState)):r=e.updateQueue=Ni(i):null===i&&(i=n.updateQueue=Ni(r));null===i||r===i?Oi(r,t):null===r.lastUpdate||null===i.lastUpdate?(Oi(r,t),Oi(i,t)):(Oi(r,t),i.lastUpdate=t)}function Li(e,t){var n=e.updateQueue;null===(n=null===n?e.updateQueue=Ti(e.memoizedState):Ai(e,n)).lastCapturedUpdate?n.firstCapturedUpdate=n.lastCapturedUpdate=t:(n.lastCapturedUpdate.next=t,n.lastCapturedUpdate=t)}function Ai(e,t){var n=e.alternate;return null!==n&&t===n.updateQueue&&(t=e.updateQueue=Ni(t)),t}function Di(e,t,n,r,o,a){switch(n.tag){case 1:return"function"==typeof(e=n.payload)?e.call(a,r,o):e;case 3:e.effectTag=-2049&e.effectTag|64;case 0:if(null==(o="function"==typeof(e=n.payload)?e.call(a,r,o):e))break;return i({},r,o);case 2:Si=!0}return r}function Ii(e,t,n,r,i){Si=!1;for(var o=(t=Ai(e,t)).baseState,a=null,u=0,l=t.firstUpdate,c=o;null!==l;){var s=l.expirationTime;s<i?(null===a&&(a=l,o=c),u<s&&(u=s)):(zu(s,l.suspenseConfig),c=Di(e,0,l,c,n,r),null!==l.callback&&(e.effectTag|=32,l.nextEffect=null,null===t.lastEffect?t.firstEffect=t.lastEffect=l:(t.lastEffect.nextEffect=l,t.lastEffect=l))),l=l.next}for(s=null,l=t.firstCapturedUpdate;null!==l;){var f=l.expirationTime;f<i?(null===s&&(s=l,null===a&&(o=c)),u<f&&(u=f)):(c=Di(e,0,l,c,n,r),null!==l.callback&&(e.effectTag|=32,l.nextEffect=null,null===t.lastCapturedEffect?t.firstCapturedEffect=t.lastCapturedEffect=l:(t.lastCapturedEffect.nextEffect=l,t.lastCapturedEffect=l))),l=l.next}null===a&&(t.lastUpdate=null),null===s?t.lastCapturedUpdate=null:e.effectTag|=32,null===a&&null===s&&(o=c),t.baseState=o,t.firstUpdate=a,t.firstCapturedUpdate=s,e.expirationTime=u,e.memoizedState=c}function Ui(e,t,n){null!==t.firstCapturedUpdate&&(null!==t.lastUpdate&&(t.lastUpdate.next=t.firstCapturedUpdate,t.lastUpdate=t.lastCapturedUpdate),t.firstCapturedUpdate=t.lastCapturedUpdate=null),Fi(t.firstEffect,n),t.firstEffect=t.lastEffect=null,Fi(t.firstCapturedEffect,n),t.firstCapturedEffect=t.lastCapturedEffect=null}function Fi(e,t){for(;null!==e;){var n=e.callback;if(null!==n){e.callback=null;var r=t;if("function"!=typeof n)throw a(Error(191),n);n.call(r)}e=e.nextEffect}}var Bi=Ve.ReactCurrentBatchConfig,zi=(new r.Component).refs;function Mi(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:i({},t,n),e.memoizedState=n,null!==(r=e.updateQueue)&&0===e.expirationTime&&(r.baseState=n)}var ji={isMounted:function(e){return!!(e=e._reactInternalFiber)&&2===on(e)},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=Su(),i=Bi.suspense;(i=Pi(r=Tu(r,e,i),i)).payload=t,null!=n&&(i.callback=n),Ri(e,i),Pu(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=Su(),i=Bi.suspense;(i=Pi(r=Tu(r,e,i),i)).tag=1,i.payload=t,null!=n&&(i.callback=n),Ri(e,i),Pu(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=Su(),r=Bi.suspense;(r=Pi(n=Tu(n,e,r),r)).tag=2,null!=t&&(r.callback=t),Ri(e,r),Pu(e,n)}};function Wi(e,t,n,r,i,o,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,o,a):!t.prototype||!t.prototype.isPureReactComponent||(!nn(n,r)||!nn(i,o))}function Hi(e,t,n){var r=!1,i=Or,o=t.contextType;return"object"==typeof o&&null!==o?o=Ei(o):(i=Ir(t)?Ar:Rr.current,o=(r=null!=(r=t.contextTypes))?Dr(e,i):Or),t=new t(n,o),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=ji,e.stateNode=t,t._reactInternalFiber=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=i,e.__reactInternalMemoizedMaskedChildContext=o),t}function $i(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&ji.enqueueReplaceState(t,t.state,null)}function Vi(e,t,n,r){var i=e.stateNode;i.props=n,i.state=e.memoizedState,i.refs=zi;var o=t.contextType;"object"==typeof o&&null!==o?i.context=Ei(o):(o=Ir(t)?Ar:Rr.current,i.context=Dr(e,o)),null!==(o=e.updateQueue)&&(Ii(e,o,n,i,r),i.state=e.memoizedState),"function"==typeof(o=t.getDerivedStateFromProps)&&(Mi(e,t,o,n),i.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof i.getSnapshotBeforeUpdate||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||(t=i.state,"function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount(),t!==i.state&&ji.enqueueReplaceState(i,i.state,null),null!==(o=e.updateQueue)&&(Ii(e,o,n,i,r),i.state=e.memoizedState)),"function"==typeof i.componentDidMount&&(e.effectTag|=4)}var qi=Array.isArray;function Qi(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){n=n._owner;var r=void 0;if(n){if(1!==n.tag)throw a(Error(309));r=n.stateNode}if(!r)throw a(Error(147),e);var i=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===i?t.ref:((t=function(e){var t=r.refs;t===zi&&(t=r.refs={}),null===e?delete t[i]:t[i]=e})._stringRef=i,t)}if("string"!=typeof e)throw a(Error(284));if(!n._owner)throw a(Error(290),e)}return e}function Ki(e,t){if("textarea"!==e.type)throw a(Error(31),"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,"")}function Yi(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function i(e,t,n){return(e=Ju(e,t)).index=0,e.sibling=null,e}function o(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function u(t){return e&&null===t.alternate&&(t.effectTag=2),t}function l(e,t,n,r){return null===t||6!==t.tag?((t=nl(n,e.mode,r)).return=e,t):((t=i(t,n)).return=e,t)}function c(e,t,n,r){return null!==t&&t.elementType===n.type?((r=i(t,n.props)).ref=Qi(e,t,n),r.return=e,r):((r=el(n.type,n.key,n.props,null,e.mode,r)).ref=Qi(e,t,n),r.return=e,r)}function s(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=rl(n,e.mode,r)).return=e,t):((t=i(t,n.children||[])).return=e,t)}function f(e,t,n,r,o){return null===t||7!==t.tag?((t=tl(n,e.mode,r,o)).return=e,t):((t=i(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=nl(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case Ke:return(n=el(t.type,t.key,t.props,null,e.mode,n)).ref=Qi(e,null,t),n.return=e,n;case Ye:return(t=rl(t,e.mode,n)).return=e,t}if(qi(t)||lt(t))return(t=tl(t,e.mode,n,null)).return=e,t;Ki(e,t)}return null}function p(e,t,n,r){var i=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==i?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case Ke:return n.key===i?n.type===Ge?f(e,t,n.props.children,r,i):c(e,t,n,r):null;case Ye:return n.key===i?s(e,t,n,r):null}if(qi(n)||lt(n))return null!==i?null:f(e,t,n,r,null);Ki(e,n)}return null}function h(e,t,n,r,i){if("string"==typeof r||"number"==typeof r)return l(t,e=e.get(n)||null,""+r,i);if("object"==typeof r&&null!==r){switch(r.$$typeof){case Ke:return e=e.get(null===r.key?n:r.key)||null,r.type===Ge?f(t,e,r.props.children,i,r.key):c(t,e,r,i);case Ye:return s(t,e=e.get(null===r.key?n:r.key)||null,r,i)}if(qi(r)||lt(r))return f(t,e=e.get(n)||null,r,i,null);Ki(t,r)}return null}function v(i,a,u,l){for(var c=null,s=null,f=a,v=a=0,m=null;null!==f&&v<u.length;v++){f.index>v?(m=f,f=null):m=f.sibling;var g=p(i,f,u[v],l);if(null===g){null===f&&(f=m);break}e&&f&&null===g.alternate&&t(i,f),a=o(g,a,v),null===s?c=g:s.sibling=g,s=g,f=m}if(v===u.length)return n(i,f),c;if(null===f){for(;v<u.length;v++)null!==(f=d(i,u[v],l))&&(a=o(f,a,v),null===s?c=f:s.sibling=f,s=f);return c}for(f=r(i,f);v<u.length;v++)null!==(m=h(f,i,v,u[v],l))&&(e&&null!==m.alternate&&f.delete(null===m.key?v:m.key),a=o(m,a,v),null===s?c=m:s.sibling=m,s=m);return e&&f.forEach(function(e){return t(i,e)}),c}function m(i,u,l,c){var s=lt(l);if("function"!=typeof s)throw a(Error(150));if(null==(l=s.call(l)))throw a(Error(151));for(var f=s=null,v=u,m=u=0,g=null,y=l.next();null!==v&&!y.done;m++,y=l.next()){v.index>m?(g=v,v=null):g=v.sibling;var b=p(i,v,y.value,c);if(null===b){null===v&&(v=g);break}e&&v&&null===b.alternate&&t(i,v),u=o(b,u,m),null===f?s=b:f.sibling=b,f=b,v=g}if(y.done)return n(i,v),s;if(null===v){for(;!y.done;m++,y=l.next())null!==(y=d(i,y.value,c))&&(u=o(y,u,m),null===f?s=y:f.sibling=y,f=y);return s}for(v=r(i,v);!y.done;m++,y=l.next())null!==(y=h(v,i,m,y.value,c))&&(e&&null!==y.alternate&&v.delete(null===y.key?m:y.key),u=o(y,u,m),null===f?s=y:f.sibling=y,f=y);return e&&v.forEach(function(e){return t(i,e)}),s}return function(e,r,o,l){var c="object"==typeof o&&null!==o&&o.type===Ge&&null===o.key;c&&(o=o.props.children);var s="object"==typeof o&&null!==o;if(s)switch(o.$$typeof){case Ke:e:{for(s=o.key,c=r;null!==c;){if(c.key===s){if(7===c.tag?o.type===Ge:c.elementType===o.type){n(e,c.sibling),(r=i(c,o.type===Ge?o.props.children:o.props)).ref=Qi(e,c,o),r.return=e,e=r;break e}n(e,c);break}t(e,c),c=c.sibling}o.type===Ge?((r=tl(o.props.children,e.mode,l,o.key)).return=e,e=r):((l=el(o.type,o.key,o.props,null,e.mode,l)).ref=Qi(e,r,o),l.return=e,e=l)}return u(e);case Ye:e:{for(c=o.key;null!==r;){if(r.key===c){if(4===r.tag&&r.stateNode.containerInfo===o.containerInfo&&r.stateNode.implementation===o.implementation){n(e,r.sibling),(r=i(r,o.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=rl(o,e.mode,l)).return=e,e=r}return u(e)}if("string"==typeof o||"number"==typeof o)return o=""+o,null!==r&&6===r.tag?(n(e,r.sibling),(r=i(r,o)).return=e,e=r):(n(e,r),(r=nl(o,e.mode,l)).return=e,e=r),u(e);if(qi(o))return v(e,r,o,l);if(lt(o))return m(e,r,o,l);if(s&&Ki(e,o),void 0===o&&!c)switch(e.tag){case 1:case 0:throw e=e.type,a(Error(152),e.displayName||e.name||"Component")}return n(e,r)}}var Gi=Yi(!0),Zi=Yi(!1),Xi={},Ji={current:Xi},eo={current:Xi},to={current:Xi};function no(e){if(e===Xi)throw a(Error(174));return e}function ro(e,t){Pr(to,t),Pr(eo,e),Pr(Ji,Xi);var n=t.nodeType;switch(n){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:ar(null,"");break;default:t=ar(t=(n=8===n?t.parentNode:t).namespaceURI||null,n=n.tagName)}Nr(Ji),Pr(Ji,t)}function io(e){Nr(Ji),Nr(eo),Nr(to)}function oo(e){no(to.current);var t=no(Ji.current),n=ar(t,e.type);t!==n&&(Pr(eo,e),Pr(Ji,n))}function ao(e){eo.current===e&&(Nr(Ji),Nr(eo))}var uo=1,lo=1,co=2,so={current:0};function fo(e){for(var t=e;null!==t;){if(13===t.tag){if(null!==t.memoizedState)return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.effectTag))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var po=0,ho=2,vo=4,mo=8,go=16,yo=32,bo=64,_o=128,wo=Ve.ReactCurrentDispatcher,ko=0,Co=null,xo=null,Eo=null,So=null,To=null,No=null,Po=0,Oo=null,Ro=0,Lo=!1,Ao=null,Do=0;function Io(){throw a(Error(321))}function Uo(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!en(e[n],t[n]))return!1;return!0}function Fo(e,t,n,r,i,o){if(ko=o,Co=t,Eo=null!==e?e.memoizedState:null,wo.current=null===Eo?Go:Zo,t=n(r,i),Lo){do{Lo=!1,Do+=1,Eo=null!==e?e.memoizedState:null,No=So,Oo=To=xo=null,wo.current=Zo,t=n(r,i)}while(Lo);Ao=null,Do=0}if(wo.current=Yo,(e=Co).memoizedState=So,e.expirationTime=Po,e.updateQueue=Oo,e.effectTag|=Ro,e=null!==xo&&null!==xo.next,ko=0,No=To=So=Eo=xo=Co=null,Po=0,Oo=null,Ro=0,e)throw a(Error(300));return t}function Bo(){wo.current=Yo,ko=0,No=To=So=Eo=xo=Co=null,Po=0,Oo=null,Ro=0,Lo=!1,Ao=null,Do=0}function zo(){var e={memoizedState:null,baseState:null,queue:null,baseUpdate:null,next:null};return null===To?So=To=e:To=To.next=e,To}function Mo(){if(null!==No)No=(To=No).next,Eo=null!==(xo=Eo)?xo.next:null;else{if(null===Eo)throw a(Error(310));var e={memoizedState:(xo=Eo).memoizedState,baseState:xo.baseState,queue:xo.queue,baseUpdate:xo.baseUpdate,next:null};To=null===To?So=e:To.next=e,Eo=xo.next}return To}function jo(e,t){return"function"==typeof t?t(e):t}function Wo(e){var t=Mo(),n=t.queue;if(null===n)throw a(Error(311));if(n.lastRenderedReducer=e,0<Do){var r=n.dispatch;if(null!==Ao){var i=Ao.get(n);if(void 0!==i){Ao.delete(n);var o=t.memoizedState;do{o=e(o,i.action),i=i.next}while(null!==i);return en(o,t.memoizedState)||(la=!0),t.memoizedState=o,t.baseUpdate===n.last&&(t.baseState=o),n.lastRenderedState=o,[o,r]}}return[t.memoizedState,r]}r=n.last;var u=t.baseUpdate;if(o=t.baseState,null!==u?(null!==r&&(r.next=null),r=u.next):r=null!==r?r.next:null,null!==r){var l=i=null,c=r,s=!1;do{var f=c.expirationTime;f<ko?(s||(s=!0,l=u,i=o),f>Po&&(Po=f)):(zu(f,c.suspenseConfig),o=c.eagerReducer===e?c.eagerState:e(o,c.action)),u=c,c=c.next}while(null!==c&&c!==r);s||(l=u,i=o),en(o,t.memoizedState)||(la=!0),t.memoizedState=o,t.baseUpdate=l,t.baseState=i,n.lastRenderedState=o}return[t.memoizedState,n.dispatch]}function Ho(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===Oo?(Oo={lastEffect:null}).lastEffect=e.next=e:null===(t=Oo.lastEffect)?Oo.lastEffect=e.next=e:(n=t.next,t.next=e,e.next=n,Oo.lastEffect=e),e}function $o(e,t,n,r){var i=zo();Ro|=e,i.memoizedState=Ho(t,n,void 0,void 0===r?null:r)}function Vo(e,t,n,r){var i=Mo();r=void 0===r?null:r;var o=void 0;if(null!==xo){var a=xo.memoizedState;if(o=a.destroy,null!==r&&Uo(r,a.deps))return void Ho(po,n,o,r)}Ro|=e,i.memoizedState=Ho(t,n,o,r)}function qo(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Qo(){}function Ko(e,t,n){if(!(25>Do))throw a(Error(301));var r=e.alternate;if(e===Co||null!==r&&r===Co)if(Lo=!0,e={expirationTime:ko,suspenseConfig:null,action:n,eagerReducer:null,eagerState:null,next:null},null===Ao&&(Ao=new Map),void 0===(n=Ao.get(t)))Ao.set(t,e);else{for(t=n;null!==t.next;)t=t.next;t.next=e}else{var i=Su(),o=Bi.suspense;o={expirationTime:i=Tu(i,e,o),suspenseConfig:o,action:n,eagerReducer:null,eagerState:null,next:null};var u=t.last;if(null===u)o.next=o;else{var l=u.next;null!==l&&(o.next=l),u.next=o}if(t.last=o,0===e.expirationTime&&(null===r||0===r.expirationTime)&&null!==(r=t.lastRenderedReducer))try{var c=t.lastRenderedState,s=r(c,n);if(o.eagerReducer=r,o.eagerState=s,en(s,c))return}catch(e){}Pu(e,i)}}var Yo={readContext:Ei,useCallback:Io,useContext:Io,useEffect:Io,useImperativeHandle:Io,useLayoutEffect:Io,useMemo:Io,useReducer:Io,useRef:Io,useState:Io,useDebugValue:Io,useResponder:Io},Go={readContext:Ei,useCallback:function(e,t){return zo().memoizedState=[e,void 0===t?null:t],e},useContext:Ei,useEffect:function(e,t){return $o(516,_o|bo,e,t)},useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,$o(4,vo|yo,qo.bind(null,t,e),n)},useLayoutEffect:function(e,t){return $o(4,vo|yo,e,t)},useMemo:function(e,t){var n=zo();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=zo();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={last:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=Ko.bind(null,Co,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},zo().memoizedState=e},useState:function(e){var t=zo();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={last:null,dispatch:null,lastRenderedReducer:jo,lastRenderedState:e}).dispatch=Ko.bind(null,Co,e),[t.memoizedState,e]},useDebugValue:Qo,useResponder:rn},Zo={readContext:Ei,useCallback:function(e,t){var n=Mo();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Uo(t,r[1])?r[0]:(n.memoizedState=[e,t],e)},useContext:Ei,useEffect:function(e,t){return Vo(516,_o|bo,e,t)},useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Vo(4,vo|yo,qo.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Vo(4,vo|yo,e,t)},useMemo:function(e,t){var n=Mo();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Uo(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)},useReducer:Wo,useRef:function(){return Mo().memoizedState},useState:function(e){return Wo(jo)},useDebugValue:Qo,useResponder:rn},Xo=null,Jo=null,ea=!1;function ta(e,t){var n=Zu(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function na(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function ra(e){if(ea){var t=Jo;if(t){var n=t;if(!na(e,t)){if(!(t=Er(n.nextSibling))||!na(e,t))return e.effectTag|=2,ea=!1,void(Xo=e);ta(Xo,n)}Xo=e,Jo=Er(t.firstChild)}else e.effectTag|=2,ea=!1,Xo=e}}function ia(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&18!==e.tag;)e=e.return;Xo=e}function oa(e){if(e!==Xo)return!1;if(!ea)return ia(e),ea=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!kr(t,e.memoizedProps))for(t=Jo;t;)ta(e,t),t=Er(t.nextSibling);return ia(e),Jo=Xo?Er(e.stateNode.nextSibling):null,!0}function aa(){Jo=Xo=null,ea=!1}var ua=Ve.ReactCurrentOwner,la=!1;function ca(e,t,n,r){t.child=null===e?Zi(t,null,n,r):Gi(t,e.child,n,r)}function sa(e,t,n,r,i){n=n.render;var o=t.ref;return xi(t,i),r=Fo(e,t,n,r,o,i),null===e||la?(t.effectTag|=1,ca(e,t,r,i),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=i&&(e.expirationTime=0),ka(e,t,i))}function fa(e,t,n,r,i,o){if(null===e){var a=n.type;return"function"!=typeof a||Xu(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=el(n.type,null,r,null,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,da(e,t,a,r,i,o))}return a=e.child,i<o&&(i=a.memoizedProps,(n=null!==(n=n.compare)?n:nn)(i,r)&&e.ref===t.ref)?ka(e,t,o):(t.effectTag|=1,(e=Ju(a,r)).ref=t.ref,e.return=t,t.child=e)}function da(e,t,n,r,i,o){return null!==e&&nn(e.memoizedProps,r)&&e.ref===t.ref&&(la=!1,i<o)?ka(e,t,o):ha(e,t,n,r,o)}function pa(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function ha(e,t,n,r,i){var o=Ir(n)?Ar:Rr.current;return o=Dr(t,o),xi(t,i),n=Fo(e,t,n,r,o,i),null===e||la?(t.effectTag|=1,ca(e,t,n,i),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=i&&(e.expirationTime=0),ka(e,t,i))}function va(e,t,n,r,i){if(Ir(n)){var o=!0;Mr(t)}else o=!1;if(xi(t,i),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),Hi(t,n,r),Vi(t,n,r,i),r=!0;else if(null===e){var a=t.stateNode,u=t.memoizedProps;a.props=u;var l=a.context,c=n.contextType;"object"==typeof c&&null!==c?c=Ei(c):c=Dr(t,c=Ir(n)?Ar:Rr.current);var s=n.getDerivedStateFromProps,f="function"==typeof s||"function"==typeof a.getSnapshotBeforeUpdate;f||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(u!==r||l!==c)&&$i(t,a,r,c),Si=!1;var d=t.memoizedState;l=a.state=d;var p=t.updateQueue;null!==p&&(Ii(t,p,r,a,i),l=t.memoizedState),u!==r||d!==l||Lr.current||Si?("function"==typeof s&&(Mi(t,n,s,r),l=t.memoizedState),(u=Si||Wi(t,n,u,r,d,l,c))?(f||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.effectTag|=4)):("function"==typeof a.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=l),a.props=r,a.state=l,a.context=c,r=u):("function"==typeof a.componentDidMount&&(t.effectTag|=4),r=!1)}else a=t.stateNode,u=t.memoizedProps,a.props=t.type===t.elementType?u:vi(t.type,u),l=a.context,"object"==typeof(c=n.contextType)&&null!==c?c=Ei(c):c=Dr(t,c=Ir(n)?Ar:Rr.current),(f="function"==typeof(s=n.getDerivedStateFromProps)||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(u!==r||l!==c)&&$i(t,a,r,c),Si=!1,l=t.memoizedState,d=a.state=l,null!==(p=t.updateQueue)&&(Ii(t,p,r,a,i),d=t.memoizedState),u!==r||l!==d||Lr.current||Si?("function"==typeof s&&(Mi(t,n,s,r),d=t.memoizedState),(s=Si||Wi(t,n,u,r,l,d,c))?(f||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,d,c),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,d,c)),"function"==typeof a.componentDidUpdate&&(t.effectTag|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof a.componentDidUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=d),a.props=r,a.state=d,a.context=c,r=s):("function"!=typeof a.componentDidUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=256),r=!1);return ma(e,t,n,r,o,i)}function ma(e,t,n,r,i,o){pa(e,t);var a=0!=(64&t.effectTag);if(!r&&!a)return i&&jr(t,n,!1),ka(e,t,o);r=t.stateNode,ua.current=t;var u=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.effectTag|=1,null!==e&&a?(t.child=Gi(t,e.child,null,o),t.child=Gi(t,null,u,o)):ca(e,t,u,o),t.memoizedState=r.state,i&&jr(t,n,!0),t.child}function ga(e){var t=e.stateNode;t.pendingContext?Br(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Br(0,t.context,!1),ro(e,t.containerInfo)}var ya={};function ba(e,t,n){var r,i=t.mode,o=t.pendingProps,a=so.current,u=null,l=!1;if((r=0!=(64&t.effectTag))||(r=0!=(a&co)&&(null===e||null!==e.memoizedState)),r?(u=ya,l=!0,t.effectTag&=-65):null!==e&&null===e.memoizedState||void 0===o.fallback||!0===o.unstable_avoidThisFallback||(a|=lo),Pr(so,a&=uo),null===e)if(l){if(o=o.fallback,(e=tl(null,i,0,null)).return=t,0==(2&t.mode))for(l=null!==t.memoizedState?t.child.child:t.child,e.child=l;null!==l;)l.return=e,l=l.sibling;(n=tl(o,i,n,null)).return=t,e.sibling=n,i=e}else i=n=Zi(t,null,o.children,n);else{if(null!==e.memoizedState)if(i=(a=e.child).sibling,l){if(o=o.fallback,(n=Ju(a,a.pendingProps)).return=t,0==(2&t.mode)&&(l=null!==t.memoizedState?t.child.child:t.child)!==a.child)for(n.child=l;null!==l;)l.return=n,l=l.sibling;(o=Ju(i,o,i.expirationTime)).return=t,n.sibling=o,i=n,n.childExpirationTime=0,n=o}else i=n=Gi(t,a.child,o.children,n);else if(a=e.child,l){if(l=o.fallback,(o=tl(null,i,0,null)).return=t,o.child=a,null!==a&&(a.return=o),0==(2&t.mode))for(a=null!==t.memoizedState?t.child.child:t.child,o.child=a;null!==a;)a.return=o,a=a.sibling;(n=tl(l,i,n,null)).return=t,o.sibling=n,n.effectTag|=2,i=o,o.childExpirationTime=0}else n=i=Gi(t,a,o.children,n);t.stateNode=e.stateNode}return t.memoizedState=u,t.child=i,n}function _a(e,t,n,r,i){var o=e.memoizedState;null===o?e.memoizedState={isBackwards:t,rendering:null,last:r,tail:n,tailExpiration:0,tailMode:i}:(o.isBackwards=t,o.rendering=null,o.last=r,o.tail=n,o.tailExpiration=0,o.tailMode=i)}function wa(e,t,n){var r=t.pendingProps,i=r.revealOrder,o=r.tail;if(ca(e,t,r.children,n),0!=((r=so.current)&co))r=r&uo|co,t.effectTag|=64;else{if(null!==e&&0!=(64&e.effectTag))e:for(e=t.child;null!==e;){if(13===e.tag){if(null!==e.memoizedState){e.expirationTime<n&&(e.expirationTime=n);var a=e.alternate;null!==a&&a.expirationTime<n&&(a.expirationTime=n),Ci(e.return,n)}}else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=uo}if(Pr(so,r),0==(2&t.mode))t.memoizedState=null;else switch(i){case"forwards":for(n=t.child,i=null;null!==n;)null!==(r=n.alternate)&&null===fo(r)&&(i=n),n=n.sibling;null===(n=i)?(i=t.child,t.child=null):(i=n.sibling,n.sibling=null),_a(t,!1,i,n,o);break;case"backwards":for(n=null,i=t.child,t.child=null;null!==i;){if(null!==(r=i.alternate)&&null===fo(r)){t.child=i;break}r=i.sibling,i.sibling=n,n=i,i=r}_a(t,!0,n,null,o);break;case"together":_a(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function ka(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),t.childExpirationTime<n)return null;if(null!==e&&t.child!==e.child)throw a(Error(153));if(null!==t.child){for(n=Ju(e=t.child,e.pendingProps,e.expirationTime),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Ju(e,e.pendingProps,e.expirationTime)).return=t;n.sibling=null}return t.child}function Ca(e){e.effectTag|=4}var xa=void 0,Ea=void 0,Sa=void 0,Ta=void 0;function Na(e,t){switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Pa(e){switch(e.tag){case 1:Ir(e.type)&&Ur();var t=e.effectTag;return 2048&t?(e.effectTag=-2049&t|64,e):null;case 3:if(io(),Fr(),0!=(64&(t=e.effectTag)))throw a(Error(285));return e.effectTag=-2049&t|64,e;case 5:return ao(e),null;case 13:return Nr(so),2048&(t=e.effectTag)?(e.effectTag=-2049&t|64,e):null;case 18:return null;case 19:return Nr(so),null;case 4:return io(),null;case 10:return ki(e),null;default:return null}}function Oa(e,t){return{value:e,source:t,stack:st(t)}}xa=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(20===n.tag)e.appendChild(n.stateNode.instance);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Ea=function(){},Sa=function(e,t,n,r,o){var a=e.memoizedProps;if(a!==r){var u=t.stateNode;switch(no(Ji.current),e=null,n){case"input":a=wt(u,a),r=wt(u,r),e=[];break;case"option":a=Xn(u,a),r=Xn(u,r),e=[];break;case"select":a=i({},a,{value:void 0}),r=i({},r,{value:void 0}),e=[];break;case"textarea":a=er(u,a),r=er(u,r),e=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(u.onclick=yr)}vr(n,r),u=n=void 0;var l=null;for(n in a)if(!r.hasOwnProperty(n)&&a.hasOwnProperty(n)&&null!=a[n])if("style"===n){var c=a[n];for(u in c)c.hasOwnProperty(u)&&(l||(l={}),l[u]="")}else"dangerouslySetInnerHTML"!==n&&"children"!==n&&"suppressContentEditableWarning"!==n&&"suppressHydrationWarning"!==n&&"autoFocus"!==n&&(p.hasOwnProperty(n)?e||(e=[]):(e=e||[]).push(n,null));for(n in r){var s=r[n];if(c=null!=a?a[n]:void 0,r.hasOwnProperty(n)&&s!==c&&(null!=s||null!=c))if("style"===n)if(c){for(u in c)!c.hasOwnProperty(u)||s&&s.hasOwnProperty(u)||(l||(l={}),l[u]="");for(u in s)s.hasOwnProperty(u)&&c[u]!==s[u]&&(l||(l={}),l[u]=s[u])}else l||(e||(e=[]),e.push(n,l)),l=s;else"dangerouslySetInnerHTML"===n?(s=s?s.__html:void 0,c=c?c.__html:void 0,null!=s&&c!==s&&(e=e||[]).push(n,""+s)):"children"===n?c===s||"string"!=typeof s&&"number"!=typeof s||(e=e||[]).push(n,""+s):"suppressContentEditableWarning"!==n&&"suppressHydrationWarning"!==n&&(p.hasOwnProperty(n)?(null!=s&&gr(o,n),e||c===s||(e=[])):(e=e||[]).push(n,s))}l&&(e=e||[]).push("style",l),o=e,(t.updateQueue=o)&&Ca(t)}},Ta=function(e,t,n,r){n!==r&&Ca(t)};var Ra="function"==typeof WeakSet?WeakSet:Set;function La(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=st(n)),null!==n&&ct(n.type),t=t.value,null!==e&&1===e.tag&&ct(e.type);try{console.error(t)}catch(e){setTimeout(function(){throw e})}}function Aa(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Vu(e,t)}else t.current=null}function Da(e,t,n){if(null!==(n=null!==(n=n.updateQueue)?n.lastEffect:null)){var r=n=n.next;do{if((r.tag&e)!==po){var i=r.destroy;r.destroy=void 0,void 0!==i&&i()}(r.tag&t)!==po&&(i=r.create,r.destroy=i()),r=r.next}while(r!==n)}}function Ia(e,t){switch("function"==typeof Yu&&Yu(e),e.tag){case 0:case 11:case 14:case 15:var n=e.updateQueue;if(null!==n&&null!==(n=n.lastEffect)){var r=n.next;ci(97<t?97:t,function(){var t=r;do{var n=t.destroy;if(void 0!==n){var i=e;try{n()}catch(e){Vu(i,e)}}t=t.next}while(t!==r)})}break;case 1:Aa(e),"function"==typeof(t=e.stateNode).componentWillUnmount&&function(e,t){try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){Vu(e,t)}}(e,t);break;case 5:Aa(e);break;case 4:za(e,t)}}function Ua(e,t){for(var n=e;;)if(Ia(n,t),null!==n.child&&4!==n.tag)n.child.return=n,n=n.child;else{if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function Fa(e){return 5===e.tag||3===e.tag||4===e.tag}function Ba(e){e:{for(var t=e.return;null!==t;){if(Fa(t)){var n=t;break e}t=t.return}throw a(Error(160))}switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw a(Error(161))}16&n.effectTag&&(cr(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||Fa(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var i=e;;){var o=5===i.tag||6===i.tag;if(o||20===i.tag){var u=o?i.stateNode:i.stateNode.instance;if(n)if(r){var l=u;u=n,8===(o=t).nodeType?o.parentNode.insertBefore(l,u):o.insertBefore(l,u)}else t.insertBefore(u,n);else r?(8===(l=t).nodeType?(o=l.parentNode).insertBefore(u,l):(o=l).appendChild(u),null!=(l=l._reactRootContainer)||null!==o.onclick||(o.onclick=yr)):t.appendChild(u)}else if(4!==i.tag&&null!==i.child){i.child.return=i,i=i.child;continue}if(i===e)break;for(;null===i.sibling;){if(null===i.return||i.return===e)return;i=i.return}i.sibling.return=i.return,i=i.sibling}}function za(e,t){for(var n=e,r=!1,i=void 0,o=void 0;;){if(!r){r=n.return;e:for(;;){if(null===r)throw a(Error(160));switch(i=r.stateNode,r.tag){case 5:o=!1;break e;case 3:case 4:i=i.containerInfo,o=!0;break e}r=r.return}r=!0}if(5===n.tag||6===n.tag)if(Ua(n,t),o){var u=i,l=n.stateNode;8===u.nodeType?u.parentNode.removeChild(l):u.removeChild(l)}else i.removeChild(n.stateNode);else if(20===n.tag)l=n.stateNode.instance,Ua(n,t),o?8===(u=i).nodeType?u.parentNode.removeChild(l):u.removeChild(l):i.removeChild(l);else if(4===n.tag){if(null!==n.child){i=n.stateNode.containerInfo,o=!0,n.child.return=n,n=n.child;continue}}else if(Ia(n,t),null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;4===(n=n.return).tag&&(r=!1)}n.sibling.return=n.return,n=n.sibling}}function Ma(e,t){switch(t.tag){case 0:case 11:case 14:case 15:Da(vo,mo,t);break;case 1:break;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps,i=null!==e?e.memoizedProps:r;e=t.type;var o=t.updateQueue;if(t.updateQueue=null,null!==o){for(n[D]=r,"input"===e&&"radio"===r.type&&null!=r.name&&Ct(n,r),mr(e,i),t=mr(e,r),i=0;i<o.length;i+=2){var u=o[i],l=o[i+1];"style"===u?pr(n,l):"dangerouslySetInnerHTML"===u?lr(n,l):"children"===u?cr(n,l):bt(n,u,l,t)}switch(e){case"input":xt(n,r);break;case"textarea":nr(n,r);break;case"select":t=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(e=r.value)?Jn(n,!!r.multiple,e,!1):t!==!!r.multiple&&(null!=r.defaultValue?Jn(n,!!r.multiple,r.defaultValue,!0):Jn(n,!!r.multiple,r.multiple?[]:"",!1))}}}break;case 6:if(null===t.stateNode)throw a(Error(162));t.stateNode.nodeValue=t.memoizedProps;break;case 3:case 12:break;case 13:if(n=t,null===t.memoizedState?r=!1:(r=!0,n=t.child,du=ai()),null!==n)e:for(e=n;;){if(5===e.tag)o=e.stateNode,r?"function"==typeof(o=o.style).setProperty?o.setProperty("display","none","important"):o.display="none":(o=e.stateNode,i=null!=(i=e.memoizedProps.style)&&i.hasOwnProperty("display")?i.display:null,o.style.display=dr("display",i));else if(6===e.tag)e.stateNode.nodeValue=r?"":e.memoizedProps;else{if(13===e.tag&&null!==e.memoizedState){(o=e.child.sibling).return=e,e=o;continue}if(null!==e.child){e.child.return=e,e=e.child;continue}}if(e===n)break e;for(;null===e.sibling;){if(null===e.return||e.return===n)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}ja(t);break;case 19:ja(t);break;case 17:case 20:break;default:throw a(Error(163))}}function ja(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Ra),t.forEach(function(t){var r=function(e,t){var n=e.stateNode;null!==n&&n.delete(t),n=Su(),t=Tu(n,e,null),n=hi(n,t),null!==(e=Ou(e,t))&&Ru(e,n,t)}.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))})}}var Wa="function"==typeof WeakMap?WeakMap:Map;function Ha(e,t,n){(n=Pi(n,null)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){vu||(vu=!0,mu=r),La(e,t)},n}function $a(e,t,n){(n=Pi(n,null)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var i=t.value;n.payload=function(){return La(e,t),r(i)}}var o=e.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===gu?gu=new Set([this]):gu.add(this),La(e,t));var n=t.stack;this.componentDidCatch(t.value,{componentStack:null!==n?n:""})}),n}var Va=Math.ceil,qa=Ve.ReactCurrentDispatcher,Qa=Ve.ReactCurrentOwner,Ka=0,Ya=8,Ga=16,Za=32,Xa=0,Ja=1,eu=2,tu=3,nu=4,ru=Ka,iu=null,ou=null,au=0,uu=Xa,lu=1073741823,cu=1073741823,su=null,fu=!1,du=0,pu=500,hu=null,vu=!1,mu=null,gu=null,yu=!1,bu=null,_u=90,wu=0,ku=null,Cu=0,xu=null,Eu=0;function Su(){return(ru&(Ga|Za))!==Ka?1073741821-(ai()/10|0):0!==Eu?Eu:Eu=1073741821-(ai()/10|0)}function Tu(e,t,n){if(0==(2&(t=t.mode)))return 1073741823;var r=ui();if(0==(4&t))return 99===r?1073741823:1073741822;if((ru&Ga)!==Ka)return au;if(null!==n)e=1073741821-25*(1+((1073741821-e+(0|n.timeoutMs||5e3)/10)/25|0));else switch(r){case 99:e=1073741823;break;case 98:e=1073741821-10*(1+((1073741821-e+15)/10|0));break;case 97:case 96:e=1073741821-25*(1+((1073741821-e+500)/25|0));break;case 95:e=1;break;default:throw a(Error(326))}return null!==iu&&e===au&&--e,e}var Nu=0;function Pu(e,t){if(50<Cu)throw Cu=0,xu=null,a(Error(185));if(null!==(e=Ou(e,t))){e.pingTime=0;var n=ui();if(1073741823===t)if((ru&Ya)!==Ka&&(ru&(Ga|Za))===Ka)for(var r=Bu(e,1073741823,!0);null!==r;)r=r(!0);else Ru(e,99,1073741823),ru===Ka&&di();else Ru(e,n,t);(4&ru)===Ka||98!==n&&99!==n||(null===ku?ku=new Map([[e,t]]):(void 0===(n=ku.get(e))||n>t)&&ku.set(e,t))}}function Ou(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t);var r=e.return,i=null;if(null===r&&3===e.tag)i=e.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<t&&(r.childExpirationTime=t),null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t),null===r.return&&3===r.tag){i=r.stateNode;break}r=r.return}return null!==i&&(t>i.firstPendingTime&&(i.firstPendingTime=t),0===(e=i.lastPendingTime)||t<e)&&(i.lastPendingTime=t),i}function Ru(e,t,n){if(e.callbackExpirationTime<n){var r=e.callbackNode;null!==r&&r!==ei&&$r(r),e.callbackExpirationTime=n,1073741823===n?e.callbackNode=fi(Lu.bind(null,e,Bu.bind(null,e,n))):(r=null,1!==n&&(r={timeout:10*(1073741821-n)-ai()}),e.callbackNode=si(t,Lu.bind(null,e,Bu.bind(null,e,n)),r))}}function Lu(e,t,n){var r=e.callbackNode,i=null;try{return null!==(i=t(n))?Lu.bind(null,e,i):null}finally{null===i&&r===e.callbackNode&&(e.callbackNode=null,e.callbackExpirationTime=0)}}function Au(){(ru&(1|Ga|Za))===Ka&&(function(){if(null!==ku){var e=ku;ku=null,e.forEach(function(e,t){fi(Bu.bind(null,t,e))}),di()}}(),Hu())}function Du(e,t){var n=ru;ru|=1;try{return e(t)}finally{(ru=n)===Ka&&di()}}function Iu(e,t,n,r){var i=ru;ru|=4;try{return ci(98,e.bind(null,t,n,r))}finally{(ru=i)===Ka&&di()}}function Uu(e,t){var n=ru;ru&=-2,ru|=Ya;try{return e(t)}finally{(ru=n)===Ka&&di()}}function Fu(e,t){e.finishedWork=null,e.finishedExpirationTime=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,xr(n)),null!==ou)for(n=ou.return;null!==n;){var r=n;switch(r.tag){case 1:var i=r.type.childContextTypes;null!=i&&Ur();break;case 3:io(),Fr();break;case 5:ao(r);break;case 4:io();break;case 13:case 19:Nr(so);break;case 10:ki(r)}n=n.return}iu=e,ou=Ju(e.current,null),au=t,uu=Xa,cu=lu=1073741823,su=null,fu=!1}function Bu(e,t,n){if((ru&(Ga|Za))!==Ka)throw a(Error(327));if(e.firstPendingTime<t)return null;if(n&&e.finishedExpirationTime===t)return Wu.bind(null,e);if(Hu(),e!==iu||t!==au)Fu(e,t);else if(uu===tu)if(fu)Fu(e,t);else{var r=e.lastPendingTime;if(r<t)return Bu.bind(null,e,r)}if(null!==ou){r=ru,ru|=Ga;var i=qa.current;if(null===i&&(i=Yo),qa.current=Yo,n){if(1073741823!==t){var o=Su();if(o<t)return ru=r,_i(),qa.current=i,Bu.bind(null,e,o)}}else Eu=0;for(;;)try{if(n)for(;null!==ou;)ou=Mu(ou);else for(;null!==ou&&!Vr();)ou=Mu(ou);break}catch(n){if(_i(),Bo(),null===(o=ou)||null===o.return)throw Fu(e,t),ru=r,n;e:{var u=e,l=o.return,c=o,s=n,f=au;if(c.effectTag|=1024,c.firstEffect=c.lastEffect=null,null!==s&&"object"==typeof s&&"function"==typeof s.then){var d=s,p=0!=(so.current&lo);s=l;do{var h;if((h=13===s.tag)&&(null!==s.memoizedState?h=!1:h=void 0!==(h=s.memoizedProps).fallback&&(!0!==h.unstable_avoidThisFallback||!p)),h){if(null===(l=s.updateQueue)?((l=new Set).add(d),s.updateQueue=l):l.add(d),0==(2&s.mode)){s.effectTag|=64,c.effectTag&=-1957,1===c.tag&&(null===c.alternate?c.tag=17:((f=Pi(1073741823,null)).tag=2,Ri(c,f))),c.expirationTime=1073741823;break e}c=u,u=f,null===(p=c.pingCache)?(p=c.pingCache=new Wa,l=new Set,p.set(d,l)):void 0===(l=p.get(d))&&(l=new Set,p.set(d,l)),l.has(u)||(l.add(u),c=qu.bind(null,c,d,u),d.then(c,c)),s.effectTag|=2048,s.expirationTime=f;break e}s=s.return}while(null!==s);s=Error((ct(c.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+st(c))}uu!==nu&&(uu=Ja),s=Oa(s,c),c=l;do{switch(c.tag){case 3:c.effectTag|=2048,c.expirationTime=f,Li(c,f=Ha(c,s,f));break e;case 1:if(d=s,u=c.type,l=c.stateNode,0==(64&c.effectTag)&&("function"==typeof u.getDerivedStateFromError||null!==l&&"function"==typeof l.componentDidCatch&&(null===gu||!gu.has(l)))){c.effectTag|=2048,c.expirationTime=f,Li(c,f=$a(c,d,f));break e}}c=c.return}while(null!==c)}ou=ju(o)}if(ru=r,_i(),qa.current=i,null!==ou)return Bu.bind(null,e,t)}if(e.finishedWork=e.current.alternate,e.finishedExpirationTime=t,function(e,t){var n=e.firstBatch;return!!(null!==n&&n._defer&&n._expirationTime>=t)&&(si(97,function(){return n._onComplete(),null}),!0)}(e,t))return null;switch(iu=null,uu){case Xa:throw a(Error(328));case Ja:return(r=e.lastPendingTime)<t?Bu.bind(null,e,r):n?Wu.bind(null,e):(Fu(e,t),fi(Bu.bind(null,e,t)),null);case eu:return 1073741823===lu&&!n&&10<(n=du+pu-ai())?fu?(Fu(e,t),Bu.bind(null,e,t)):(r=e.lastPendingTime)<t?Bu.bind(null,e,r):(e.timeoutHandle=Cr(Wu.bind(null,e),n),null):Wu.bind(null,e);case tu:if(!n){if(fu)return Fu(e,t),Bu.bind(null,e,t);if((n=e.lastPendingTime)<t)return Bu.bind(null,e,n);if(1073741823!==cu?n=10*(1073741821-cu)-ai():1073741823===lu?n=0:(n=10*(1073741821-lu)-5e3,0>(n=(r=ai())-n)&&(n=0),(t=10*(1073741821-t)-r)<(n=(120>n?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*Va(n/1960))-n)&&(n=t)),10<n)return e.timeoutHandle=Cr(Wu.bind(null,e),n),null}return Wu.bind(null,e);case nu:return!n&&1073741823!==lu&&null!==su&&(r=lu,0>=(t=0|(i=su).busyMinDurationMs)?t=0:(n=0|i.busyDelayMs,t=(r=ai()-(10*(1073741821-r)-(0|i.timeoutMs||5e3)))<=n?0:n+t-r),10<t)?(e.timeoutHandle=Cr(Wu.bind(null,e),t),null):Wu.bind(null,e);default:throw a(Error(329))}}function zu(e,t){e<lu&&1<e&&(lu=e),null!==t&&e<cu&&1<e&&(cu=e,su=t)}function Mu(e){var t=Qu(e.alternate,e,au);return e.memoizedProps=e.pendingProps,null===t&&(t=ju(e)),Qa.current=null,t}function ju(e){ou=e;do{var t=ou.alternate;if(e=ou.return,0==(1024&ou.effectTag)){e:{var n=t,r=au,o=(t=ou).pendingProps;switch(t.tag){case 2:case 16:break;case 15:case 0:break;case 1:Ir(t.type)&&Ur();break;case 3:io(),Fr(),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==n&&null!==n.child||(oa(t),t.effectTag&=-3),Ea(t);break;case 5:ao(t),r=no(to.current);var u=t.type;if(null!==n&&null!=t.stateNode)Sa(n,t,u,o,r),n.ref!==t.ref&&(t.effectTag|=128);else if(o){var l=no(Ji.current);if(oa(t)){o=void 0,u=(n=t).stateNode;var c=n.type,s=n.memoizedProps;switch(u[A]=n,u[D]=s,c){case"iframe":case"object":case"embed":Dn("load",u);break;case"video":case"audio":for(var f=0;f<te.length;f++)Dn(te[f],u);break;case"source":Dn("error",u);break;case"img":case"image":case"link":Dn("error",u),Dn("load",u);break;case"form":Dn("reset",u),Dn("submit",u);break;case"details":Dn("toggle",u);break;case"input":kt(u,s),Dn("invalid",u),gr(r,"onChange");break;case"select":u._wrapperState={wasMultiple:!!s.multiple},Dn("invalid",u),gr(r,"onChange");break;case"textarea":tr(u,s),Dn("invalid",u),gr(r,"onChange")}for(o in vr(c,s),f=null,s)s.hasOwnProperty(o)&&(l=s[o],"children"===o?"string"==typeof l?u.textContent!==l&&(f=["children",l]):"number"==typeof l&&u.textContent!==""+l&&(f=["children",""+l]):p.hasOwnProperty(o)&&null!=l&&gr(r,o));switch(c){case"input":He(u),Et(u,s,!0);break;case"textarea":He(u),rr(u);break;case"select":case"option":break;default:"function"==typeof s.onClick&&(u.onclick=yr)}r=f,n.updateQueue=r,null!==r&&Ca(t)}else{s=u,n=o,c=t,f=9===r.nodeType?r:r.ownerDocument,l===ir.html&&(l=or(s)),l===ir.html?"script"===s?((s=f.createElement("div")).innerHTML="<script><\/script>",f=s.removeChild(s.firstChild)):"string"==typeof n.is?f=f.createElement(s,{is:n.is}):(f=f.createElement(s),"select"===s&&(s=f,n.multiple?s.multiple=!0:n.size&&(s.size=n.size))):f=f.createElementNS(l,s),(s=f)[A]=c,s[D]=n,xa(n=s,t,!1,!1),c=n;var d=r,h=mr(u,o);switch(u){case"iframe":case"object":case"embed":Dn("load",c),r=o;break;case"video":case"audio":for(r=0;r<te.length;r++)Dn(te[r],c);r=o;break;case"source":Dn("error",c),r=o;break;case"img":case"image":case"link":Dn("error",c),Dn("load",c),r=o;break;case"form":Dn("reset",c),Dn("submit",c),r=o;break;case"details":Dn("toggle",c),r=o;break;case"input":kt(c,o),r=wt(c,o),Dn("invalid",c),gr(d,"onChange");break;case"option":r=Xn(c,o);break;case"select":c._wrapperState={wasMultiple:!!o.multiple},r=i({},o,{value:void 0}),Dn("invalid",c),gr(d,"onChange");break;case"textarea":tr(c,o),r=er(c,o),Dn("invalid",c),gr(d,"onChange");break;default:r=o}vr(u,r),s=void 0,f=u,l=c;var v=r;for(s in v)if(v.hasOwnProperty(s)){var m=v[s];"style"===s?pr(l,m):"dangerouslySetInnerHTML"===s?null!=(m=m?m.__html:void 0)&&lr(l,m):"children"===s?"string"==typeof m?("textarea"!==f||""!==m)&&cr(l,m):"number"==typeof m&&cr(l,""+m):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(p.hasOwnProperty(s)?null!=m&&gr(d,s):null!=m&&bt(l,s,m,h))}switch(u){case"input":He(c),Et(c,o,!1);break;case"textarea":He(c),rr(c);break;case"option":null!=o.value&&c.setAttribute("value",""+_t(o.value));break;case"select":r=c,c=o,r.multiple=!!c.multiple,null!=(s=c.value)?Jn(r,!!c.multiple,s,!1):null!=c.defaultValue&&Jn(r,!!c.multiple,c.defaultValue,!0);break;default:"function"==typeof r.onClick&&(c.onclick=yr)}wr(u,o)&&Ca(t),t.stateNode=n}null!==t.ref&&(t.effectTag|=128)}else if(null===t.stateNode)throw a(Error(166));break;case 6:if(n&&null!=t.stateNode)Ta(n,t,n.memoizedProps,o);else{if("string"!=typeof o&&null===t.stateNode)throw a(Error(166));n=no(to.current),no(Ji.current),oa(t)?(r=t.stateNode,n=t.memoizedProps,r[A]=t,r.nodeValue!==n&&Ca(t)):(r=t,(n=(9===n.nodeType?n:n.ownerDocument).createTextNode(o))[A]=t,r.stateNode=n)}break;case 11:break;case 13:if(Nr(so),o=t.memoizedState,0!=(64&t.effectTag)){t.expirationTime=r;break e}r=null!==o,o=!1,null===n?oa(t):(o=null!==(u=n.memoizedState),r||null===u||null!==(u=n.child.sibling)&&(null!==(c=t.firstEffect)?(t.firstEffect=u,u.nextEffect=c):(t.firstEffect=t.lastEffect=u,u.nextEffect=null),u.effectTag=8)),r&&!o&&0!=(2&t.mode)&&(null===n&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(so.current&lo)?uu===Xa&&(uu=eu):uu!==Xa&&uu!==eu||(uu=tu)),(r||o)&&(t.effectTag|=4);break;case 7:case 8:case 12:break;case 4:io(),Ea(t);break;case 10:ki(t);break;case 9:case 14:break;case 17:Ir(t.type)&&Ur();break;case 18:break;case 19:if(Nr(so),null===(o=t.memoizedState))break;if(u=0!=(64&t.effectTag),null===(c=o.rendering)){if(u)Na(o,!1);else if(uu!==Xa||null!==n&&0!=(64&n.effectTag))for(n=t.child;null!==n;){if(null!==(c=fo(n))){for(t.effectTag|=64,Na(o,!1),null!==(n=c.updateQueue)&&(t.updateQueue=n,t.effectTag|=4),t.firstEffect=t.lastEffect=null,n=t.child;null!==n;)u=r,(o=n).effectTag&=2,o.nextEffect=null,o.firstEffect=null,o.lastEffect=null,null===(c=o.alternate)?(o.childExpirationTime=0,o.expirationTime=u,o.child=null,o.memoizedProps=null,o.memoizedState=null,o.updateQueue=null,o.dependencies=null):(o.childExpirationTime=c.childExpirationTime,o.expirationTime=c.expirationTime,o.child=c.child,o.memoizedProps=c.memoizedProps,o.memoizedState=c.memoizedState,o.updateQueue=c.updateQueue,u=c.dependencies,o.dependencies=null===u?null:{expirationTime:u.expirationTime,firstContext:u.firstContext,responders:u.responders}),n=n.sibling;Pr(so,so.current&uo|co),t=t.child;break e}n=n.sibling}}else{if(!u)if(null!==(n=fo(c))){if(t.effectTag|=64,u=!0,Na(o,!0),null===o.tail&&"hidden"===o.tailMode){null!==(r=n.updateQueue)&&(t.updateQueue=r,t.effectTag|=4),null!==(t=t.lastEffect=o.lastEffect)&&(t.nextEffect=null);break}}else ai()>o.tailExpiration&&1<r&&(t.effectTag|=64,u=!0,Na(o,!1),t.expirationTime=t.childExpirationTime=r-1);o.isBackwards?(c.sibling=t.child,t.child=c):(null!==(r=o.last)?r.sibling=c:t.child=c,o.last=c)}if(null!==o.tail){0===o.tailExpiration&&(o.tailExpiration=ai()+500),r=o.tail,o.rendering=r,o.tail=r.sibling,o.lastEffect=t.lastEffect,r.sibling=null,n=so.current,Pr(so,n=u?n&uo|co:n&uo),t=r;break e}break;case 20:break;default:throw a(Error(156))}t=null}if(r=ou,1===au||1!==r.childExpirationTime){for(n=0,o=r.child;null!==o;)(u=o.expirationTime)>n&&(n=u),(c=o.childExpirationTime)>n&&(n=c),o=o.sibling;r.childExpirationTime=n}if(null!==t)return t;null!==e&&0==(1024&e.effectTag)&&(null===e.firstEffect&&(e.firstEffect=ou.firstEffect),null!==ou.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=ou.firstEffect),e.lastEffect=ou.lastEffect),1<ou.effectTag&&(null!==e.lastEffect?e.lastEffect.nextEffect=ou:e.firstEffect=ou,e.lastEffect=ou))}else{if(null!==(t=Pa(ou)))return t.effectTag&=1023,t;null!==e&&(e.firstEffect=e.lastEffect=null,e.effectTag|=1024)}if(null!==(t=ou.sibling))return t;ou=e}while(null!==ou);return uu===Xa&&(uu=nu),null}function Wu(e){var t=ui();return ci(99,function(e,t){if(Hu(),(ru&(Ga|Za))!==Ka)throw a(Error(327));var n=e.finishedWork,r=e.finishedExpirationTime;if(null===n)return null;if(e.finishedWork=null,e.finishedExpirationTime=0,n===e.current)throw a(Error(177));e.callbackNode=null,e.callbackExpirationTime=0;var i=n.expirationTime,o=n.childExpirationTime;if(i=o>i?o:i,e.firstPendingTime=i,i<e.lastPendingTime&&(e.lastPendingTime=i),e===iu&&(ou=iu=null,au=0),1<n.effectTag?null!==n.lastEffect?(n.lastEffect.nextEffect=n,i=n.firstEffect):i=n:i=n.firstEffect,null!==i){o=ru,ru|=Za,Qa.current=null,br=An;var u=Wn();if(Hn(u)){if("selectionStart"in u)var l={start:u.selectionStart,end:u.selectionEnd};else e:{var c=(l=(l=u.ownerDocument)&&l.defaultView||window).getSelection&&l.getSelection();if(c&&0!==c.rangeCount){l=c.anchorNode;var s=c.anchorOffset,f=c.focusNode;c=c.focusOffset;try{l.nodeType,f.nodeType}catch(e){l=null;break e}var d=0,p=-1,h=-1,v=0,m=0,g=u,y=null;t:for(;;){for(var b;g!==l||0!==s&&3!==g.nodeType||(p=d+s),g!==f||0!==c&&3!==g.nodeType||(h=d+c),3===g.nodeType&&(d+=g.nodeValue.length),null!==(b=g.firstChild);)y=g,g=b;for(;;){if(g===u)break t;if(y===l&&++v===s&&(p=d),y===f&&++m===c&&(h=d),null!==(b=g.nextSibling))break;y=(g=y).parentNode}g=b}l=-1===p||-1===h?null:{start:p,end:h}}else l=null}l=l||{start:0,end:0}}else l=null;_r={focusedElem:u,selectionRange:l},An=!1,hu=i;do{try{for(;null!==hu;){if(0!=(256&hu.effectTag)){var _=hu.alternate;switch((u=hu).tag){case 0:case 11:case 15:Da(ho,po,u);break;case 1:if(256&u.effectTag&&null!==_){var w=_.memoizedProps,k=_.memoizedState,C=u.stateNode,x=C.getSnapshotBeforeUpdate(u.elementType===u.type?w:vi(u.type,w),k);C.__reactInternalSnapshotBeforeUpdate=x}break;case 3:case 5:case 6:case 4:case 17:break;default:throw a(Error(163))}}hu=hu.nextEffect}}catch(e){if(null===hu)throw a(Error(330));Vu(hu,e),hu=hu.nextEffect}}while(null!==hu);hu=i;do{try{for(_=t;null!==hu;){var E=hu.effectTag;if(16&E&&cr(hu.stateNode,""),128&E){var S=hu.alternate;if(null!==S){var T=S.ref;null!==T&&("function"==typeof T?T(null):T.current=null)}}switch(14&E){case 2:Ba(hu),hu.effectTag&=-3;break;case 6:Ba(hu),hu.effectTag&=-3,Ma(hu.alternate,hu);break;case 4:Ma(hu.alternate,hu);break;case 8:za(w=hu,_),w.return=null,w.child=null,w.memoizedState=null,w.updateQueue=null,w.dependencies=null;var N=w.alternate;null!==N&&(N.return=null,N.child=null,N.memoizedState=null,N.updateQueue=null,N.dependencies=null)}hu=hu.nextEffect}}catch(e){if(null===hu)throw a(Error(330));Vu(hu,e),hu=hu.nextEffect}}while(null!==hu);if(T=_r,S=Wn(),E=T.focusedElem,_=T.selectionRange,S!==E&&E&&E.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(E.ownerDocument.documentElement,E)){null!==_&&Hn(E)&&(S=_.start,void 0===(T=_.end)&&(T=S),"selectionStart"in E?(E.selectionStart=S,E.selectionEnd=Math.min(T,E.value.length)):(T=(S=E.ownerDocument||document)&&S.defaultView||window).getSelection&&(T=T.getSelection(),w=E.textContent.length,N=Math.min(_.start,w),_=void 0===_.end?N:Math.min(_.end,w),!T.extend&&N>_&&(w=_,_=N,N=w),w=jn(E,N),k=jn(E,_),w&&k&&(1!==T.rangeCount||T.anchorNode!==w.node||T.anchorOffset!==w.offset||T.focusNode!==k.node||T.focusOffset!==k.offset)&&((S=S.createRange()).setStart(w.node,w.offset),T.removeAllRanges(),N>_?(T.addRange(S),T.extend(k.node,k.offset)):(S.setEnd(k.node,k.offset),T.addRange(S))))),S=[];for(T=E;T=T.parentNode;)1===T.nodeType&&S.push({element:T,left:T.scrollLeft,top:T.scrollTop});for("function"==typeof E.focus&&E.focus(),E=0;E<S.length;E++)(T=S[E]).element.scrollLeft=T.left,T.element.scrollTop=T.top}_r=null,An=!!br,br=null,e.current=n,hu=i;do{try{for(E=r;null!==hu;){var P=hu.effectTag;if(36&P){var O=hu.alternate;switch(T=E,(S=hu).tag){case 0:case 11:case 15:Da(go,yo,S);break;case 1:var R=S.stateNode;if(4&S.effectTag)if(null===O)R.componentDidMount();else{var L=S.elementType===S.type?O.memoizedProps:vi(S.type,O.memoizedProps);R.componentDidUpdate(L,O.memoizedState,R.__reactInternalSnapshotBeforeUpdate)}var A=S.updateQueue;null!==A&&Ui(0,A,R);break;case 3:var D=S.updateQueue;if(null!==D){if(N=null,null!==S.child)switch(S.child.tag){case 5:N=S.child.stateNode;break;case 1:N=S.child.stateNode}Ui(0,D,N)}break;case 5:var I=S.stateNode;null===O&&4&S.effectTag&&(T=I,wr(S.type,S.memoizedProps)&&T.focus());break;case 6:case 4:case 12:break;case 13:case 19:case 17:case 20:break;default:throw a(Error(163))}}if(128&P){var U=hu.ref;if(null!==U){var F=hu.stateNode;switch(hu.tag){case 5:var B=F;break;default:B=F}"function"==typeof U?U(B):U.current=B}}512&P&&(yu=!0),hu=hu.nextEffect}}catch(e){if(null===hu)throw a(Error(330));Vu(hu,e),hu=hu.nextEffect}}while(null!==hu);hu=null,ti(),ru=o}else e.current=n;if(yu)yu=!1,bu=e,wu=r,_u=t;else for(hu=i;null!==hu;)t=hu.nextEffect,hu.nextEffect=null,hu=t;if(0!==(t=e.firstPendingTime)?(P=hi(P=Su(),t),Ru(e,P,t)):gu=null,"function"==typeof Ku&&Ku(n.stateNode,r),1073741823===t?e===xu?Cu++:(Cu=0,xu=e):Cu=0,vu)throw vu=!1,e=mu,mu=null,e;return(ru&Ya)!==Ka?null:(di(),null)}.bind(null,e,t)),null!==bu&&si(97,function(){return Hu(),null}),null}function Hu(){if(null===bu)return!1;var e=bu,t=wu,n=_u;return bu=null,wu=0,_u=90,ci(97<n?97:n,function(e){if((ru&(Ga|Za))!==Ka)throw a(Error(331));var t=ru;for(ru|=Za,e=e.current.firstEffect;null!==e;){try{var n=e;if(0!=(512&n.effectTag))switch(n.tag){case 0:case 11:case 15:Da(_o,po,n),Da(po,bo,n)}}catch(t){if(null===e)throw a(Error(330));Vu(e,t)}n=e.nextEffect,e.nextEffect=null,e=n}return ru=t,di(),!0}.bind(null,e,t))}function $u(e,t,n){Ri(e,t=Ha(e,t=Oa(n,t),1073741823)),null!==(e=Ou(e,1073741823))&&Ru(e,99,1073741823)}function Vu(e,t){if(3===e.tag)$u(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){$u(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===gu||!gu.has(r))){Ri(n,e=$a(n,e=Oa(t,e),1073741823)),null!==(n=Ou(n,1073741823))&&Ru(n,99,1073741823);break}}n=n.return}}function qu(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),iu===e&&au===n?uu===tu||uu===eu&&1073741823===lu&&ai()-du<pu?Fu(e,au):fu=!0:e.lastPendingTime<n||(0!==(t=e.pingTime)&&t<n||(e.pingTime=n,e.finishedExpirationTime===n&&(e.finishedExpirationTime=0,e.finishedWork=null),Ru(e,t=hi(t=Su(),n),n)))}var Qu=void 0;Qu=function(e,t,n){var r=t.expirationTime;if(null!==e){var i=t.pendingProps;if(e.memoizedProps!==i||Lr.current)la=!0;else if(r<n){switch(la=!1,t.tag){case 3:ga(t),aa();break;case 5:if(oo(t),4&t.mode&&1!==n&&i.hidden)return t.expirationTime=t.childExpirationTime=1,null;break;case 1:Ir(t.type)&&Mr(t);break;case 4:ro(t,t.stateNode.containerInfo);break;case 10:wi(t,t.memoizedProps.value);break;case 13:if(null!==t.memoizedState)return 0!==(r=t.child.childExpirationTime)&&r>=n?ba(e,t,n):(Pr(so,so.current&uo),null!==(t=ka(e,t,n))?t.sibling:null);Pr(so,so.current&uo);break;case 19:if(r=t.childExpirationTime>=n,0!=(64&e.effectTag)){if(r)return wa(e,t,n);t.effectTag|=64}if(null!==(i=t.memoizedState)&&(i.rendering=null,i.tail=null),Pr(so,so.current),!r)return null}return ka(e,t,n)}}else la=!1;switch(t.expirationTime=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,i=Dr(t,Rr.current),xi(t,n),i=Fo(null,t,r,e,i,n),t.effectTag|=1,"object"==typeof i&&null!==i&&"function"==typeof i.render&&void 0===i.$$typeof){if(t.tag=1,Bo(),Ir(r)){var o=!0;Mr(t)}else o=!1;t.memoizedState=null!==i.state&&void 0!==i.state?i.state:null;var u=r.getDerivedStateFromProps;"function"==typeof u&&Mi(t,r,u,e),i.updater=ji,t.stateNode=i,i._reactInternalFiber=t,Vi(t,r,e,n),t=ma(null,t,r,!0,o,n)}else t.tag=0,ca(null,t,i,n),t=t.child;return t;case 16:switch(i=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,i=function(e){var t=e._result;switch(e._status){case 1:return t;case 2:case 0:throw t;default:switch(e._status=0,(t=(t=e._ctor)()).then(function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)},function(t){0===e._status&&(e._status=2,e._result=t)}),e._status){case 1:return e._result;case 2:throw e._result}throw e._result=t,t}}(i),t.type=i,o=t.tag=function(e){if("function"==typeof e)return Xu(e)?1:0;if(null!=e){if((e=e.$$typeof)===nt)return 11;if(e===ot)return 14}return 2}(i),e=vi(i,e),o){case 0:t=ha(null,t,i,e,n);break;case 1:t=va(null,t,i,e,n);break;case 11:t=sa(null,t,i,e,n);break;case 14:t=fa(null,t,i,vi(i.type,e),r,n);break;default:throw a(Error(306),i,"")}return t;case 0:return r=t.type,i=t.pendingProps,ha(e,t,r,i=t.elementType===r?i:vi(r,i),n);case 1:return r=t.type,i=t.pendingProps,va(e,t,r,i=t.elementType===r?i:vi(r,i),n);case 3:if(ga(t),null===(r=t.updateQueue))throw a(Error(282));return i=null!==(i=t.memoizedState)?i.element:null,Ii(t,r,t.pendingProps,null,n),(r=t.memoizedState.element)===i?(aa(),t=ka(e,t,n)):(i=t.stateNode,(i=(null===e||null===e.child)&&i.hydrate)&&(Jo=Er(t.stateNode.containerInfo.firstChild),Xo=t,i=ea=!0),i?(t.effectTag|=2,t.child=Zi(t,null,r,n)):(ca(e,t,r,n),aa()),t=t.child),t;case 5:return oo(t),null===e&&ra(t),r=t.type,i=t.pendingProps,o=null!==e?e.memoizedProps:null,u=i.children,kr(r,i)?u=null:null!==o&&kr(r,o)&&(t.effectTag|=16),pa(e,t),4&t.mode&&1!==n&&i.hidden?(t.expirationTime=t.childExpirationTime=1,t=null):(ca(e,t,u,n),t=t.child),t;case 6:return null===e&&ra(t),null;case 13:return ba(e,t,n);case 4:return ro(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Gi(t,null,r,n):ca(e,t,r,n),t.child;case 11:return r=t.type,i=t.pendingProps,sa(e,t,r,i=t.elementType===r?i:vi(r,i),n);case 7:return ca(e,t,t.pendingProps,n),t.child;case 8:case 12:return ca(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,i=t.pendingProps,u=t.memoizedProps,wi(t,o=i.value),null!==u){var l=u.value;if(0===(o=en(l,o)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(l,o):1073741823))){if(u.children===i.children&&!Lr.current){t=ka(e,t,n);break e}}else for(null!==(l=t.child)&&(l.return=t);null!==l;){var c=l.dependencies;if(null!==c){u=l.child;for(var s=c.firstContext;null!==s;){if(s.context===r&&0!=(s.observedBits&o)){1===l.tag&&((s=Pi(n,null)).tag=2,Ri(l,s)),l.expirationTime<n&&(l.expirationTime=n),null!==(s=l.alternate)&&s.expirationTime<n&&(s.expirationTime=n),Ci(l.return,n),c.expirationTime<n&&(c.expirationTime=n);break}s=s.next}}else u=10===l.tag&&l.type===t.type?null:l.child;if(null!==u)u.return=l;else for(u=l;null!==u;){if(u===t){u=null;break}if(null!==(l=u.sibling)){l.return=u.return,u=l;break}u=u.return}l=u}}ca(e,t,i.children,n),t=t.child}return t;case 9:return i=t.type,r=(o=t.pendingProps).children,xi(t,n),r=r(i=Ei(i,o.unstable_observedBits)),t.effectTag|=1,ca(e,t,r,n),t.child;case 14:return o=vi(i=t.type,t.pendingProps),fa(e,t,i,o=vi(i.type,o),r,n);case 15:return da(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,i=t.pendingProps,i=t.elementType===r?i:vi(r,i),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,Ir(r)?(e=!0,Mr(t)):e=!1,xi(t,n),Hi(t,r,i),Vi(t,r,i,n),ma(null,t,r,!0,e,n);case 19:return wa(e,t,n)}throw a(Error(156))};var Ku=null,Yu=null;function Gu(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function Zu(e,t,n,r){return new Gu(e,t,n,r)}function Xu(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Ju(e,t){var n=e.alternate;return null===n?((n=Zu(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{expirationTime:t.expirationTime,firstContext:t.firstContext,responders:t.responders},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function el(e,t,n,r,i,o){var u=2;if(r=e,"function"==typeof e)Xu(e)&&(u=1);else if("string"==typeof e)u=5;else e:switch(e){case Ge:return tl(n.children,i,o,t);case tt:u=8,i|=7;break;case Ze:u=8,i|=1;break;case Xe:return(e=Zu(12,n,t,8|i)).elementType=Xe,e.type=Xe,e.expirationTime=o,e;case rt:return(e=Zu(13,n,t,i)).type=rt,e.elementType=rt,e.expirationTime=o,e;case it:return(e=Zu(19,n,t,i)).elementType=it,e.expirationTime=o,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case Je:u=10;break e;case et:u=9;break e;case nt:u=11;break e;case ot:u=14;break e;case at:u=16,r=null;break e}throw a(Error(130),null==e?e:typeof e,"")}return(t=Zu(u,n,t,i)).elementType=e,t.type=r,t.expirationTime=o,t}function tl(e,t,n,r){return(e=Zu(7,e,r,t)).expirationTime=n,e}function nl(e,t,n){return(e=Zu(6,e,null,t)).expirationTime=n,e}function rl(e,t,n){return(t=Zu(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function il(e,t,n){this.tag=t,this.current=null,this.containerInfo=e,this.pingCache=this.pendingChildren=null,this.finishedExpirationTime=0,this.finishedWork=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=this.firstBatch=null,this.pingTime=this.lastPendingTime=this.firstPendingTime=this.callbackExpirationTime=0}function ol(e,t,n){return e=new il(e,t,n),t=Zu(3,null,null,2===t?7:1===t?3:0),e.current=t,t.stateNode=e}function al(e,t,n,r,i,o){var u=t.current;e:if(n){t:{if(2!==on(n=n._reactInternalFiber)||1!==n.tag)throw a(Error(170));var l=n;do{switch(l.tag){case 3:l=l.stateNode.context;break t;case 1:if(Ir(l.type)){l=l.stateNode.__reactInternalMemoizedMergedChildContext;break t}}l=l.return}while(null!==l);throw a(Error(171))}if(1===n.tag){var c=n.type;if(Ir(c)){n=zr(n,c,l);break e}}n=l}else n=Or;return null===t.context?t.context=n:t.pendingContext=n,t=o,(i=Pi(r,i)).payload={element:e},null!==(t=void 0===t?null:t)&&(i.callback=t),Ri(u,i),Pu(u,r),r}function ul(e,t,n,r){var i=t.current,o=Su(),a=Bi.suspense;return al(e,t,n,i=Tu(o,i,a),a,r)}function ll(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function cl(e){var t=1073741821-25*(1+((1073741821-Su()+500)/25|0));t<=Nu&&--t,this._expirationTime=Nu=t,this._root=e,this._callbacks=this._next=null,this._hasChildren=this._didComplete=!1,this._children=null,this._defer=!0}function sl(){this._callbacks=null,this._didCommit=!1,this._onCommit=this._onCommit.bind(this)}function fl(e,t,n){this._internalRoot=ol(e,t,n)}function dl(e,t){this._internalRoot=ol(e,2,t)}function pl(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function hl(e,t,n,r,i){var o=n._reactRootContainer,a=void 0;if(o){if(a=o._internalRoot,"function"==typeof i){var u=i;i=function(){var e=ll(a);u.call(e)}}ul(t,a,e,i)}else{if(o=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new fl(e,0,t)}(n,r),a=o._internalRoot,"function"==typeof i){var l=i;i=function(){var e=ll(a);l.call(e)}}Uu(function(){ul(t,a,e,i)})}return ll(a)}function vl(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!pl(t))throw a(Error(200));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:Ye,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)}Se=function(e,t,n){switch(t){case"input":if(xt(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var i=B(r);if(!i)throw a(Error(90));$e(r),xt(r,i)}}}break;case"textarea":nr(e,n);break;case"select":null!=(t=n.value)&&Jn(e,!!n.multiple,t,!1)}},cl.prototype.render=function(e){if(!this._defer)throw a(Error(250));this._hasChildren=!0,this._children=e;var t=this._root._internalRoot,n=this._expirationTime,r=new sl;return al(e,t,null,n,null,r._onCommit),r},cl.prototype.then=function(e){if(this._didComplete)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},cl.prototype.commit=function(){var e=this._root._internalRoot,t=e.firstBatch;if(!this._defer||null===t)throw a(Error(251));if(this._hasChildren){var n=this._expirationTime;if(t!==this){this._hasChildren&&(n=this._expirationTime=t._expirationTime,this.render(this._children));for(var r=null,i=t;i!==this;)r=i,i=i._next;if(null===r)throw a(Error(251));r._next=i._next,this._next=t,e.firstBatch=this}if(this._defer=!1,t=n,(ru&(Ga|Za))!==Ka)throw a(Error(253));fi(Bu.bind(null,e,t)),di(),t=this._next,this._next=null,null!==(t=e.firstBatch=t)&&t._hasChildren&&t.render(t._children)}else this._next=null,this._defer=!1},cl.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++)(0,e[t])()}},sl.prototype.then=function(e){if(this._didCommit)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},sl.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++){var n=e[t];if("function"!=typeof n)throw a(Error(191),n);n()}}},dl.prototype.render=fl.prototype.render=function(e,t){var n=this._internalRoot,r=new sl;return null!==(t=void 0===t?null:t)&&r.then(t),ul(e,n,null,r._onCommit),r},dl.prototype.unmount=fl.prototype.unmount=function(e){var t=this._internalRoot,n=new sl;return null!==(e=void 0===e?null:e)&&n.then(e),ul(null,t,null,n._onCommit),n},dl.prototype.createBatch=function(){var e=new cl(this),t=e._expirationTime,n=this._internalRoot,r=n.firstBatch;if(null===r)n.firstBatch=e,e._next=null;else{for(n=null;null!==r&&r._expirationTime>=t;)n=r,r=r._next;e._next=r,null!==n&&(n._next=e)}return e},Le=Du,Ae=Iu,De=Au,Ie=function(e,t){var n=ru;ru|=2;try{return e(t)}finally{(ru=n)===Ka&&di()}};var ml,gl,yl={createPortal:vl,findDOMNode:function(e){if(null==e)e=null;else if(1!==e.nodeType){var t=e._reactInternalFiber;if(void 0===t){if("function"==typeof e.render)throw a(Error(188));throw a(Error(268),Object.keys(e))}e=null===(e=un(t))?null:e.stateNode}return e},hydrate:function(e,t,n){if(!pl(t))throw a(Error(200));return hl(null,e,t,!0,n)},render:function(e,t,n){if(!pl(t))throw a(Error(200));return hl(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,r){if(!pl(n))throw a(Error(200));if(null==e||void 0===e._reactInternalFiber)throw a(Error(38));return hl(e,t,n,!1,r)},unmountComponentAtNode:function(e){if(!pl(e))throw a(Error(40));return!!e._reactRootContainer&&(Uu(function(){hl(null,null,e,!1,function(){e._reactRootContainer=null})}),!0)},unstable_createPortal:function(){return vl.apply(void 0,arguments)},unstable_batchedUpdates:Du,unstable_interactiveUpdates:function(e,t,n,r){return Au(),Iu(e,t,n,r)},unstable_discreteUpdates:Iu,unstable_flushDiscreteUpdates:Au,flushSync:function(e,t){if((ru&(Ga|Za))!==Ka)throw a(Error(187));var n=ru;ru|=1;try{return ci(99,e.bind(null,t))}finally{ru=n,di()}},unstable_createRoot:function(e,t){if(!pl(e))throw a(Error(299),"unstable_createRoot");return new dl(e,null!=t&&!0===t.hydrate)},unstable_createSyncRoot:function(e,t){if(!pl(e))throw a(Error(299),"unstable_createRoot");return new fl(e,1,null!=t&&!0===t.hydrate)},unstable_flushControlled:function(e){var t=ru;ru|=1;try{ci(99,e)}finally{(ru=t)===Ka&&di()}},__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{Events:[U,F,B,O.injectEventPluginsByName,d,$,function(e){S(e,H)},Oe,Re,Un,P,Hu,{current:!1}]}};gl=(ml={findFiberByHostInstance:I,bundleType:0,version:"16.9.0",rendererPackageName:"react-dom"}).findFiberByHostInstance,function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);Ku=function(e){try{t.onCommitFiberRoot(n,e,void 0,64==(64&e.current.effectTag))}catch(e){}},Yu=function(e){try{t.onCommitFiberUnmount(n,e)}catch(e){}}}catch(e){}}(i({},ml,{overrideHookState:null,overrideProps:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:Ve.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=un(e))?null:e.stateNode},findFiberByHostInstance:function(e){return gl?gl(e):null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null}));var bl={default:yl},_l=bl&&yl||bl;e.exports=_l.default||_l},170:function(e,t,n){"use strict";e.exports=n(171)},171:function(e,t,n){"use strict";
/** @license React v0.15.0
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */Object.defineProperty(t,"__esModule",{value:!0});var r=void 0,i=void 0,o=void 0,a=void 0,u=void 0;if(t.unstable_now=void 0,t.unstable_forceFrameRate=void 0,"undefined"==typeof window||"function"!=typeof MessageChannel){var l=null,c=null,s=function(){if(null!==l)try{var e=t.unstable_now();l(!0,e),l=null}catch(e){throw setTimeout(s,0),e}};t.unstable_now=function(){return Date.now()},r=function(e){null!==l?setTimeout(r,0,e):(l=e,setTimeout(s,0))},i=function(e,t){c=setTimeout(e,t)},o=function(){clearTimeout(c)},a=function(){return!1},u=t.unstable_forceFrameRate=function(){}}else{var f=window.performance,d=window.Date,p=window.setTimeout,h=window.clearTimeout,v=window.requestAnimationFrame,m=window.cancelAnimationFrame;"undefined"!=typeof console&&("function"!=typeof v&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof m&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills")),t.unstable_now="object"==typeof f&&"function"==typeof f.now?function(){return f.now()}:function(){return d.now()};var g=!1,y=null,b=-1,_=-1,w=33.33,k=-1,C=-1,x=0,E=!1;a=function(){return t.unstable_now()>=x},u=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported"):0<e?(w=Math.floor(1e3/e),E=!0):(w=33.33,E=!1)};var S=function(){if(null!==y){var e=t.unstable_now(),n=0<x-e;try{y(n,e)||(y=null)}catch(e){throw N.postMessage(null),e}}},T=new MessageChannel,N=T.port2;T.port1.onmessage=S;var P=function(e){if(null===y)C=k=-1,g=!1;else{g=!0,v(function(e){h(b),P(e)});var n=function(){x=t.unstable_now()+w/2,S(),b=p(n,3*w)};if(b=p(n,3*w),-1!==k&&.1<e-k){var r=e-k;!E&&-1!==C&&r<w&&C<w&&(8.33>(w=r<C?C:r)&&(w=8.33)),C=r}k=e,x=e+w,N.postMessage(null)}};r=function(e){y=e,g||(g=!0,v(function(e){P(e)}))},i=function(e,n){_=p(function(){e(t.unstable_now())},n)},o=function(){h(_),_=-1}}var O=null,R=null,L=null,A=3,D=!1,I=!1,U=!1;function F(e,t){var n=e.next;if(n===e)O=null;else{e===O&&(O=n);var r=e.previous;r.next=n,n.previous=r}e.next=e.previous=null,n=e.callback,r=A;var i=L;A=e.priorityLevel,L=e;try{var o=e.expirationTime<=t;switch(A){case 1:var a=n(o);break;case 2:case 3:case 4:a=n(o);break;case 5:a=n(o)}}catch(e){throw e}finally{A=r,L=i}if("function"==typeof a)if(t=e.expirationTime,e.callback=a,null===O)O=e.next=e.previous=e;else{a=null,o=O;do{if(t<=o.expirationTime){a=o;break}o=o.next}while(o!==O);null===a?a=O:a===O&&(O=e),(t=a.previous).next=a.previous=e,e.next=a,e.previous=t}}function B(e){if(null!==R&&R.startTime<=e)do{var t=R,n=t.next;if(t===n)R=null;else{R=n;var r=t.previous;r.next=n,n.previous=r}t.next=t.previous=null,W(t,t.expirationTime)}while(null!==R&&R.startTime<=e)}function z(e){U=!1,B(e),I||(null!==O?(I=!0,r(M)):null!==R&&i(z,R.startTime-e))}function M(e,n){I=!1,U&&(U=!1,o()),B(n),D=!0;try{if(e){if(null!==O)do{F(O,n),B(n=t.unstable_now())}while(null!==O&&!a())}else for(;null!==O&&O.expirationTime<=n;)F(O,n),B(n=t.unstable_now());return null!==O||(null!==R&&i(z,R.startTime-n),!1)}finally{D=!1}}function j(e){switch(e){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1e4;default:return 5e3}}function W(e,t){if(null===O)O=e.next=e.previous=e;else{var n=null,r=O;do{if(t<r.expirationTime){n=r;break}r=r.next}while(r!==O);null===n?n=O:n===O&&(O=e),(t=n.previous).next=n.previous=e,e.next=n,e.previous=t}}var H=u;t.unstable_ImmediatePriority=1,t.unstable_UserBlockingPriority=2,t.unstable_NormalPriority=3,t.unstable_IdlePriority=5,t.unstable_LowPriority=4,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=A;A=e;try{return t()}finally{A=n}},t.unstable_next=function(e){switch(A){case 1:case 2:case 3:var t=3;break;default:t=A}var n=A;A=t;try{return e()}finally{A=n}},t.unstable_scheduleCallback=function(e,n,a){var u=t.unstable_now();if("object"==typeof a&&null!==a){var l=a.delay;l="number"==typeof l&&0<l?u+l:u,a="number"==typeof a.timeout?a.timeout:j(e)}else a=j(e),l=u;if(e={callback:n,priorityLevel:e,startTime:l,expirationTime:a=l+a,next:null,previous:null},l>u){if(a=l,null===R)R=e.next=e.previous=e;else{n=null;var c=R;do{if(a<c.startTime){n=c;break}c=c.next}while(c!==R);null===n?n=R:n===R&&(R=e),(a=n.previous).next=n.previous=e,e.next=n,e.previous=a}null===O&&R===e&&(U?o():U=!0,i(z,l-u))}else W(e,a),I||D||(I=!0,r(M));return e},t.unstable_cancelCallback=function(e){var t=e.next;if(null!==t){if(e===t)e===O?O=null:e===R&&(R=null);else{e===O?O=t:e===R&&(R=t);var n=e.previous;n.next=t,t.previous=n}e.next=e.previous=null}},t.unstable_wrapCallback=function(e){var t=A;return function(){var n=A;A=t;try{return e.apply(this,arguments)}finally{A=n}}},t.unstable_getCurrentPriorityLevel=function(){return A},t.unstable_shouldYield=function(){var e=t.unstable_now();return B(e),null!==L&&null!==O&&O.startTime<=e&&O.expirationTime<L.expirationTime||a()},t.unstable_requestPaint=H,t.unstable_continueExecution=function(){I||D||(I=!0,r(M))},t.unstable_pauseExecution=function(){},t.unstable_getFirstCallbackNode=function(){return O}},2:function(e,t,n){e.exports=n(86)()},21:function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},24:function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},36:function(e,t,n){"use strict";n.d(t,"a",function(){return m});var r=n(1),i=n.n(r),o=(n(166),n(83)),a=n.n(o),u=n(2),l=n.n(u),c=n(4);function s(e){return(s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function f(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function d(e){return(d=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function p(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function h(e,t){return(h=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function v(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var m=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),n=function(e,t){return!t||"object"!==s(t)&&"function"!=typeof t?p(e):t}(this,d(t).call(this,e)),v(p(n),"editor",null),n.state={content:null,isFocus:e.initialFocus},n}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&h(e,t)}(t,i.a.Component),n=t,(r=[{key:"componentDidMount",value:function(){this.loadEditor(),this.props.onBound&&this.props.onBound(this)}},{key:"componentWillUnmount",value:function(){this.editor&&this.editor.destroy()}},{key:"UNSAFE_componentWillReceiveProps",value:function(e){e.content!==this.props.content&&e.content!==this.state.content&&this.editor&&(this.setState({content:e.content}),this.editor.setHTML(e.content))}},{key:"render",value:function(){var e=null;return c.isEmpty(this.state.content)&&c.isEmpty(this.props.content)&&!this.state.isFocus&&this.props.placeholder&&(e=i.a.createElement("div",{className:"placeholder",onClick:this.handlePlaceholderClick.bind(this)},this.props.placeholder)),i.a.createElement("div",{className:"html-editor"},e,i.a.createElement("iframe",{ref:"iframe"}))}},{key:"loadEditor",value:function(){var e=this,t=this.refs.iframe.contentDocument;t.open(),t.write('<!DOCTYPE html><html style="height: 100%"><meta><title></title></meta><style>@media (prefers-color-scheme: dark) { body { color: white; background-color: black } a { color: #4285f4; } }</style><body style="height: 100%; margin: 0; -webkit-tap-highlight-color: transparent; width: 1px; min-width: 100%;"></body></html>'),t.close(),this.editor=new a.a(t,{}),this.editor.addEventListener("input",function(t,n){return e.handleContentChange(n)}),this.editor.addEventListener("blur",function(t,n){return e.handleBlur(n)}),this.editor.addEventListener("focus",function(t,n){return e.handleFocus(n)}),this.editor.addEventListener("pathChange",function(t,n){return e.handleCursorChange(n)}),this.editor.setKeyHandler("meta-[",function(t,n,r){return e.outdent(n,r)}),this.editor.setKeyHandler("meta-]",function(t,n,r){return e.indent(n,r)}),this.editor.setKeyHandler("meta-shift-o",function(t,n,r){return e.makeOrderedList(n,r)}),this.editor.setKeyHandler("meta-shift-u",function(t,n,r){return e.makeUnorderedList(n,r)}),this.editor.setHTML(this.state.content||this.props.content||""),this.props.initialFocus&&this.editor.focus()}},{key:"handlePlaceholderClick",value:function(){this.editor.focus()}},{key:"handleContentChange",value:function(){var e=this.getContent();this.setState({content:e}),this.props.onChange&&this.props.onChange(e)}},{key:"handleBlur",value:function(){this.setState({isFocus:!1}),this.props.onBlur&&this.props.onBlur()}},{key:"handleFocus",value:function(){this.setState({isFocus:!0}),this.props.onFocus&&this.props.onFocus()}},{key:"handleCursorChange",value:function(e){this.props.onCursorChange&&this.props.onCursorChange()}},{key:"getContent",value:function(){return this.editor?this.editor.getHTML():null}},{key:"toggleSelectionTag",value:function(e){var t=this.editor.getSelection();this.editor.hasFormat(e,null,t)?this.editor.changeFormat(null,{tag:e},t):this.editor.changeFormat({tag:e},null,t)}},{key:"increaseQuoteLevel",value:function(e){this.maybePreventDefault(e),this.editor.increaseQuoteLevel()}},{key:"decreaseQuoteLevel",value:function(e){this.maybePreventDefault(e),this.editor.decreaseQuoteLevel()}},{key:"makeUnorderedList",value:function(e){this.maybePreventDefault(e),this.editor.makeUnorderedList()}},{key:"makeOrderedList",value:function(e){this.maybePreventDefault(e),this.editor.makeOrderedList()}},{key:"removeList",value:function(e){this.maybePreventDefault(e),this.editor.removeList()}},{key:"increaseListLevel",value:function(e){this.maybePreventDefault(e),this.editor.increaseListLevel()}},{key:"decreaseListLevel",value:function(e){this.maybePreventDefault(e),this.editor.decreaseListLevel()}},{key:"indent",value:function(e,t){this.maybePreventDefault(e),t||(t=this.editor.getSelection());var n=t.commonAncestorContainer;this.inList(n)?this.increaseListLevel():this.increaseQuoteLevel()}},{key:"outdent",value:function(e,t){this.maybePreventDefault(e),t||(t=this.editor.getSelection());var n=t.commonAncestorContainer;this.inList(n)?this.decreaseListLevel():this.decreaseQuoteLevel()}},{key:"maybePreventDefault",value:function(e){e&&e.preventDefault()}},{key:"findParent",value:function(e,t){do{if(t(e))return e}while(e=e.parentNode);return null}},{key:"inList",value:function(e){return!!this.findParent(e,function(e){return"LI"===e.nodeName})}}])&&f(n.prototype,r),o&&f(n,o),t}();v(m,"propTypes",{onBound:l.a.func,content:l.a.string,placeholder:l.a.string,onChange:l.a.func,onBlur:l.a.func,onFocus:l.a.func,onCursorChange:l.a.func,initialFocus:l.a.bool}),v(m,"defaultProps",{initialFocus:!0})},4:function(e,t,n){(function(e,r){var i;
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */(function(){var o,a=200,u="Unsupported core-js use. Try https://npms.io/search?q=ponyfill.",l="Expected a function",c="__lodash_hash_undefined__",s=500,f="__lodash_placeholder__",d=1,p=2,h=4,v=1,m=2,g=1,y=2,b=4,_=8,w=16,k=32,C=64,x=128,E=256,S=512,T=30,N="...",P=800,O=16,R=1,L=2,A=1/0,D=9007199254740991,I=17976931348623157e292,U=NaN,F=4294967295,B=F-1,z=F>>>1,M=[["ary",x],["bind",g],["bindKey",y],["curry",_],["curryRight",w],["flip",S],["partial",k],["partialRight",C],["rearg",E]],j="[object Arguments]",W="[object Array]",H="[object AsyncFunction]",$="[object Boolean]",V="[object Date]",q="[object DOMException]",Q="[object Error]",K="[object Function]",Y="[object GeneratorFunction]",G="[object Map]",Z="[object Number]",X="[object Null]",J="[object Object]",ee="[object Proxy]",te="[object RegExp]",ne="[object Set]",re="[object String]",ie="[object Symbol]",oe="[object Undefined]",ae="[object WeakMap]",ue="[object WeakSet]",le="[object ArrayBuffer]",ce="[object DataView]",se="[object Float32Array]",fe="[object Float64Array]",de="[object Int8Array]",pe="[object Int16Array]",he="[object Int32Array]",ve="[object Uint8Array]",me="[object Uint8ClampedArray]",ge="[object Uint16Array]",ye="[object Uint32Array]",be=/\b__p \+= '';/g,_e=/\b(__p \+=) '' \+/g,we=/(__e\(.*?\)|\b__t\)) \+\n'';/g,ke=/&(?:amp|lt|gt|quot|#39);/g,Ce=/[&<>"']/g,xe=RegExp(ke.source),Ee=RegExp(Ce.source),Se=/<%-([\s\S]+?)%>/g,Te=/<%([\s\S]+?)%>/g,Ne=/<%=([\s\S]+?)%>/g,Pe=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,Oe=/^\w*$/,Re=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,Le=/[\\^$.*+?()[\]{}|]/g,Ae=RegExp(Le.source),De=/^\s+|\s+$/g,Ie=/^\s+/,Ue=/\s+$/,Fe=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,Be=/\{\n\/\* \[wrapped with (.+)\] \*/,ze=/,? & /,Me=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,je=/\\(\\)?/g,We=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,He=/\w*$/,$e=/^[-+]0x[0-9a-f]+$/i,Ve=/^0b[01]+$/i,qe=/^\[object .+?Constructor\]$/,Qe=/^0o[0-7]+$/i,Ke=/^(?:0|[1-9]\d*)$/,Ye=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,Ge=/($^)/,Ze=/['\n\r\u2028\u2029\\]/g,Xe="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",Je="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",et="[\\ud800-\\udfff]",tt="["+Je+"]",nt="["+Xe+"]",rt="\\d+",it="[\\u2700-\\u27bf]",ot="[a-z\\xdf-\\xf6\\xf8-\\xff]",at="[^\\ud800-\\udfff"+Je+rt+"\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",ut="\\ud83c[\\udffb-\\udfff]",lt="[^\\ud800-\\udfff]",ct="(?:\\ud83c[\\udde6-\\uddff]){2}",st="[\\ud800-\\udbff][\\udc00-\\udfff]",ft="[A-Z\\xc0-\\xd6\\xd8-\\xde]",dt="(?:"+ot+"|"+at+")",pt="(?:"+ft+"|"+at+")",ht="(?:"+nt+"|"+ut+")"+"?",vt="[\\ufe0e\\ufe0f]?"+ht+("(?:\\u200d(?:"+[lt,ct,st].join("|")+")[\\ufe0e\\ufe0f]?"+ht+")*"),mt="(?:"+[it,ct,st].join("|")+")"+vt,gt="(?:"+[lt+nt+"?",nt,ct,st,et].join("|")+")",yt=RegExp("['’]","g"),bt=RegExp(nt,"g"),_t=RegExp(ut+"(?="+ut+")|"+gt+vt,"g"),wt=RegExp([ft+"?"+ot+"+(?:['’](?:d|ll|m|re|s|t|ve))?(?="+[tt,ft,"$"].join("|")+")",pt+"+(?:['’](?:D|LL|M|RE|S|T|VE))?(?="+[tt,ft+dt,"$"].join("|")+")",ft+"?"+dt+"+(?:['’](?:d|ll|m|re|s|t|ve))?",ft+"+(?:['’](?:D|LL|M|RE|S|T|VE))?","\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",rt,mt].join("|"),"g"),kt=RegExp("[\\u200d\\ud800-\\udfff"+Xe+"\\ufe0e\\ufe0f]"),Ct=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,xt=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],Et=-1,St={};St[se]=St[fe]=St[de]=St[pe]=St[he]=St[ve]=St[me]=St[ge]=St[ye]=!0,St[j]=St[W]=St[le]=St[$]=St[ce]=St[V]=St[Q]=St[K]=St[G]=St[Z]=St[J]=St[te]=St[ne]=St[re]=St[ae]=!1;var Tt={};Tt[j]=Tt[W]=Tt[le]=Tt[ce]=Tt[$]=Tt[V]=Tt[se]=Tt[fe]=Tt[de]=Tt[pe]=Tt[he]=Tt[G]=Tt[Z]=Tt[J]=Tt[te]=Tt[ne]=Tt[re]=Tt[ie]=Tt[ve]=Tt[me]=Tt[ge]=Tt[ye]=!0,Tt[Q]=Tt[K]=Tt[ae]=!1;var Nt={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},Pt=parseFloat,Ot=parseInt,Rt="object"==typeof e&&e&&e.Object===Object&&e,Lt="object"==typeof self&&self&&self.Object===Object&&self,At=Rt||Lt||Function("return this")(),Dt=t&&!t.nodeType&&t,It=Dt&&"object"==typeof r&&r&&!r.nodeType&&r,Ut=It&&It.exports===Dt,Ft=Ut&&Rt.process,Bt=function(){try{var e=It&&It.require&&It.require("util").types;return e||Ft&&Ft.binding&&Ft.binding("util")}catch(e){}}(),zt=Bt&&Bt.isArrayBuffer,Mt=Bt&&Bt.isDate,jt=Bt&&Bt.isMap,Wt=Bt&&Bt.isRegExp,Ht=Bt&&Bt.isSet,$t=Bt&&Bt.isTypedArray;function Vt(e,t,n){switch(n.length){case 0:return e.call(t);case 1:return e.call(t,n[0]);case 2:return e.call(t,n[0],n[1]);case 3:return e.call(t,n[0],n[1],n[2])}return e.apply(t,n)}function qt(e,t,n,r){for(var i=-1,o=null==e?0:e.length;++i<o;){var a=e[i];t(r,a,n(a),e)}return r}function Qt(e,t){for(var n=-1,r=null==e?0:e.length;++n<r&&!1!==t(e[n],n,e););return e}function Kt(e,t){for(var n=null==e?0:e.length;n--&&!1!==t(e[n],n,e););return e}function Yt(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(!t(e[n],n,e))return!1;return!0}function Gt(e,t){for(var n=-1,r=null==e?0:e.length,i=0,o=[];++n<r;){var a=e[n];t(a,n,e)&&(o[i++]=a)}return o}function Zt(e,t){return!!(null==e?0:e.length)&&ln(e,t,0)>-1}function Xt(e,t,n){for(var r=-1,i=null==e?0:e.length;++r<i;)if(n(t,e[r]))return!0;return!1}function Jt(e,t){for(var n=-1,r=null==e?0:e.length,i=Array(r);++n<r;)i[n]=t(e[n],n,e);return i}function en(e,t){for(var n=-1,r=t.length,i=e.length;++n<r;)e[i+n]=t[n];return e}function tn(e,t,n,r){var i=-1,o=null==e?0:e.length;for(r&&o&&(n=e[++i]);++i<o;)n=t(n,e[i],i,e);return n}function nn(e,t,n,r){var i=null==e?0:e.length;for(r&&i&&(n=e[--i]);i--;)n=t(n,e[i],i,e);return n}function rn(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(t(e[n],n,e))return!0;return!1}var on=dn("length");function an(e,t,n){var r;return n(e,function(e,n,i){if(t(e,n,i))return r=n,!1}),r}function un(e,t,n,r){for(var i=e.length,o=n+(r?1:-1);r?o--:++o<i;)if(t(e[o],o,e))return o;return-1}function ln(e,t,n){return t==t?function(e,t,n){var r=n-1,i=e.length;for(;++r<i;)if(e[r]===t)return r;return-1}(e,t,n):un(e,sn,n)}function cn(e,t,n,r){for(var i=n-1,o=e.length;++i<o;)if(r(e[i],t))return i;return-1}function sn(e){return e!=e}function fn(e,t){var n=null==e?0:e.length;return n?vn(e,t)/n:U}function dn(e){return function(t){return null==t?o:t[e]}}function pn(e){return function(t){return null==e?o:e[t]}}function hn(e,t,n,r,i){return i(e,function(e,i,o){n=r?(r=!1,e):t(n,e,i,o)}),n}function vn(e,t){for(var n,r=-1,i=e.length;++r<i;){var a=t(e[r]);a!==o&&(n=n===o?a:n+a)}return n}function mn(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}function gn(e){return function(t){return e(t)}}function yn(e,t){return Jt(t,function(t){return e[t]})}function bn(e,t){return e.has(t)}function _n(e,t){for(var n=-1,r=e.length;++n<r&&ln(t,e[n],0)>-1;);return n}function wn(e,t){for(var n=e.length;n--&&ln(t,e[n],0)>-1;);return n}var kn=pn({"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"s"}),Cn=pn({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function xn(e){return"\\"+Nt[e]}function En(e){return kt.test(e)}function Sn(e){var t=-1,n=Array(e.size);return e.forEach(function(e,r){n[++t]=[r,e]}),n}function Tn(e,t){return function(n){return e(t(n))}}function Nn(e,t){for(var n=-1,r=e.length,i=0,o=[];++n<r;){var a=e[n];a!==t&&a!==f||(e[n]=f,o[i++]=n)}return o}function Pn(e){var t=-1,n=Array(e.size);return e.forEach(function(e){n[++t]=e}),n}function On(e){var t=-1,n=Array(e.size);return e.forEach(function(e){n[++t]=[e,e]}),n}function Rn(e){return En(e)?function(e){var t=_t.lastIndex=0;for(;_t.test(e);)++t;return t}(e):on(e)}function Ln(e){return En(e)?function(e){return e.match(_t)||[]}(e):function(e){return e.split("")}(e)}var An=pn({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"});var Dn=function e(t){var n,r=(t=null==t?At:Dn.defaults(At.Object(),t,Dn.pick(At,xt))).Array,i=t.Date,Xe=t.Error,Je=t.Function,et=t.Math,tt=t.Object,nt=t.RegExp,rt=t.String,it=t.TypeError,ot=r.prototype,at=Je.prototype,ut=tt.prototype,lt=t["__core-js_shared__"],ct=at.toString,st=ut.hasOwnProperty,ft=0,dt=(n=/[^.]+$/.exec(lt&&lt.keys&&lt.keys.IE_PROTO||""))?"Symbol(src)_1."+n:"",pt=ut.toString,ht=ct.call(tt),vt=At._,mt=nt("^"+ct.call(st).replace(Le,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),gt=Ut?t.Buffer:o,_t=t.Symbol,kt=t.Uint8Array,Nt=gt?gt.allocUnsafe:o,Rt=Tn(tt.getPrototypeOf,tt),Lt=tt.create,Dt=ut.propertyIsEnumerable,It=ot.splice,Ft=_t?_t.isConcatSpreadable:o,Bt=_t?_t.iterator:o,on=_t?_t.toStringTag:o,pn=function(){try{var e=zo(tt,"defineProperty");return e({},"",{}),e}catch(e){}}(),In=t.clearTimeout!==At.clearTimeout&&t.clearTimeout,Un=i&&i.now!==At.Date.now&&i.now,Fn=t.setTimeout!==At.setTimeout&&t.setTimeout,Bn=et.ceil,zn=et.floor,Mn=tt.getOwnPropertySymbols,jn=gt?gt.isBuffer:o,Wn=t.isFinite,Hn=ot.join,$n=Tn(tt.keys,tt),Vn=et.max,qn=et.min,Qn=i.now,Kn=t.parseInt,Yn=et.random,Gn=ot.reverse,Zn=zo(t,"DataView"),Xn=zo(t,"Map"),Jn=zo(t,"Promise"),er=zo(t,"Set"),tr=zo(t,"WeakMap"),nr=zo(tt,"create"),rr=tr&&new tr,ir={},or=fa(Zn),ar=fa(Xn),ur=fa(Jn),lr=fa(er),cr=fa(tr),sr=_t?_t.prototype:o,fr=sr?sr.valueOf:o,dr=sr?sr.toString:o;function pr(e){if(Nu(e)&&!gu(e)&&!(e instanceof gr)){if(e instanceof mr)return e;if(st.call(e,"__wrapped__"))return da(e)}return new mr(e)}var hr=function(){function e(){}return function(t){if(!Tu(t))return{};if(Lt)return Lt(t);e.prototype=t;var n=new e;return e.prototype=o,n}}();function vr(){}function mr(e,t){this.__wrapped__=e,this.__actions__=[],this.__chain__=!!t,this.__index__=0,this.__values__=o}function gr(e){this.__wrapped__=e,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=F,this.__views__=[]}function yr(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function br(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function _r(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function wr(e){var t=-1,n=null==e?0:e.length;for(this.__data__=new _r;++t<n;)this.add(e[t])}function kr(e){var t=this.__data__=new br(e);this.size=t.size}function Cr(e,t){var n=gu(e),r=!n&&mu(e),i=!n&&!r&&wu(e),o=!n&&!r&&!i&&Uu(e),a=n||r||i||o,u=a?mn(e.length,rt):[],l=u.length;for(var c in e)!t&&!st.call(e,c)||a&&("length"==c||i&&("offset"==c||"parent"==c)||o&&("buffer"==c||"byteLength"==c||"byteOffset"==c)||qo(c,l))||u.push(c);return u}function xr(e){var t=e.length;return t?e[wi(0,t-1)]:o}function Er(e,t){return la(no(e),Dr(t,0,e.length))}function Sr(e){return la(no(e))}function Tr(e,t,n){(n===o||pu(e[t],n))&&(n!==o||t in e)||Lr(e,t,n)}function Nr(e,t,n){var r=e[t];st.call(e,t)&&pu(r,n)&&(n!==o||t in e)||Lr(e,t,n)}function Pr(e,t){for(var n=e.length;n--;)if(pu(e[n][0],t))return n;return-1}function Or(e,t,n,r){return zr(e,function(e,i,o){t(r,e,n(e),o)}),r}function Rr(e,t){return e&&ro(t,il(t),e)}function Lr(e,t,n){"__proto__"==t&&pn?pn(e,t,{configurable:!0,enumerable:!0,value:n,writable:!0}):e[t]=n}function Ar(e,t){for(var n=-1,i=t.length,a=r(i),u=null==e;++n<i;)a[n]=u?o:Ju(e,t[n]);return a}function Dr(e,t,n){return e==e&&(n!==o&&(e=e<=n?e:n),t!==o&&(e=e>=t?e:t)),e}function Ir(e,t,n,r,i,a){var u,l=t&d,c=t&p,s=t&h;if(n&&(u=i?n(e,r,i,a):n(e)),u!==o)return u;if(!Tu(e))return e;var f=gu(e);if(f){if(u=function(e){var t=e.length,n=new e.constructor(t);t&&"string"==typeof e[0]&&st.call(e,"index")&&(n.index=e.index,n.input=e.input);return n}(e),!l)return no(e,u)}else{var v=Wo(e),m=v==K||v==Y;if(wu(e))return Gi(e,l);if(v==J||v==j||m&&!i){if(u=c||m?{}:$o(e),!l)return c?function(e,t){return ro(e,jo(e),t)}(e,function(e,t){return e&&ro(t,ol(t),e)}(u,e)):function(e,t){return ro(e,Mo(e),t)}(e,Rr(u,e))}else{if(!Tt[v])return i?e:{};u=function(e,t,n){var r=e.constructor;switch(t){case le:return Zi(e);case $:case V:return new r(+e);case ce:return function(e,t){var n=t?Zi(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.byteLength)}(e,n);case se:case fe:case de:case pe:case he:case ve:case me:case ge:case ye:return Xi(e,n);case G:return new r;case Z:case re:return new r(e);case te:return function(e){var t=new e.constructor(e.source,He.exec(e));return t.lastIndex=e.lastIndex,t}(e);case ne:return new r;case ie:return i=e,fr?tt(fr.call(i)):{}}var i}(e,v,l)}}a||(a=new kr);var g=a.get(e);if(g)return g;a.set(e,u),Au(e)?e.forEach(function(r){u.add(Ir(r,t,n,r,e,a))}):Pu(e)&&e.forEach(function(r,i){u.set(i,Ir(r,t,n,i,e,a))});var y=f?o:(s?c?Lo:Ro:c?ol:il)(e);return Qt(y||e,function(r,i){y&&(r=e[i=r]),Nr(u,i,Ir(r,t,n,i,e,a))}),u}function Ur(e,t,n){var r=n.length;if(null==e)return!r;for(e=tt(e);r--;){var i=n[r],a=t[i],u=e[i];if(u===o&&!(i in e)||!a(u))return!1}return!0}function Fr(e,t,n){if("function"!=typeof e)throw new it(l);return ia(function(){e.apply(o,n)},t)}function Br(e,t,n,r){var i=-1,o=Zt,u=!0,l=e.length,c=[],s=t.length;if(!l)return c;n&&(t=Jt(t,gn(n))),r?(o=Xt,u=!1):t.length>=a&&(o=bn,u=!1,t=new wr(t));e:for(;++i<l;){var f=e[i],d=null==n?f:n(f);if(f=r||0!==f?f:0,u&&d==d){for(var p=s;p--;)if(t[p]===d)continue e;c.push(f)}else o(t,d,r)||c.push(f)}return c}pr.templateSettings={escape:Se,evaluate:Te,interpolate:Ne,variable:"",imports:{_:pr}},pr.prototype=vr.prototype,pr.prototype.constructor=pr,mr.prototype=hr(vr.prototype),mr.prototype.constructor=mr,gr.prototype=hr(vr.prototype),gr.prototype.constructor=gr,yr.prototype.clear=function(){this.__data__=nr?nr(null):{},this.size=0},yr.prototype.delete=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t},yr.prototype.get=function(e){var t=this.__data__;if(nr){var n=t[e];return n===c?o:n}return st.call(t,e)?t[e]:o},yr.prototype.has=function(e){var t=this.__data__;return nr?t[e]!==o:st.call(t,e)},yr.prototype.set=function(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=nr&&t===o?c:t,this},br.prototype.clear=function(){this.__data__=[],this.size=0},br.prototype.delete=function(e){var t=this.__data__,n=Pr(t,e);return!(n<0)&&(n==t.length-1?t.pop():It.call(t,n,1),--this.size,!0)},br.prototype.get=function(e){var t=this.__data__,n=Pr(t,e);return n<0?o:t[n][1]},br.prototype.has=function(e){return Pr(this.__data__,e)>-1},br.prototype.set=function(e,t){var n=this.__data__,r=Pr(n,e);return r<0?(++this.size,n.push([e,t])):n[r][1]=t,this},_r.prototype.clear=function(){this.size=0,this.__data__={hash:new yr,map:new(Xn||br),string:new yr}},_r.prototype.delete=function(e){var t=Fo(this,e).delete(e);return this.size-=t?1:0,t},_r.prototype.get=function(e){return Fo(this,e).get(e)},_r.prototype.has=function(e){return Fo(this,e).has(e)},_r.prototype.set=function(e,t){var n=Fo(this,e),r=n.size;return n.set(e,t),this.size+=n.size==r?0:1,this},wr.prototype.add=wr.prototype.push=function(e){return this.__data__.set(e,c),this},wr.prototype.has=function(e){return this.__data__.has(e)},kr.prototype.clear=function(){this.__data__=new br,this.size=0},kr.prototype.delete=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n},kr.prototype.get=function(e){return this.__data__.get(e)},kr.prototype.has=function(e){return this.__data__.has(e)},kr.prototype.set=function(e,t){var n=this.__data__;if(n instanceof br){var r=n.__data__;if(!Xn||r.length<a-1)return r.push([e,t]),this.size=++n.size,this;n=this.__data__=new _r(r)}return n.set(e,t),this.size=n.size,this};var zr=ao(Qr),Mr=ao(Kr,!0);function jr(e,t){var n=!0;return zr(e,function(e,r,i){return n=!!t(e,r,i)}),n}function Wr(e,t,n){for(var r=-1,i=e.length;++r<i;){var a=e[r],u=t(a);if(null!=u&&(l===o?u==u&&!Iu(u):n(u,l)))var l=u,c=a}return c}function Hr(e,t){var n=[];return zr(e,function(e,r,i){t(e,r,i)&&n.push(e)}),n}function $r(e,t,n,r,i){var o=-1,a=e.length;for(n||(n=Vo),i||(i=[]);++o<a;){var u=e[o];t>0&&n(u)?t>1?$r(u,t-1,n,r,i):en(i,u):r||(i[i.length]=u)}return i}var Vr=uo(),qr=uo(!0);function Qr(e,t){return e&&Vr(e,t,il)}function Kr(e,t){return e&&qr(e,t,il)}function Yr(e,t){return Gt(t,function(t){return xu(e[t])})}function Gr(e,t){for(var n=0,r=(t=qi(t,e)).length;null!=e&&n<r;)e=e[sa(t[n++])];return n&&n==r?e:o}function Zr(e,t,n){var r=t(e);return gu(e)?r:en(r,n(e))}function Xr(e){return null==e?e===o?oe:X:on&&on in tt(e)?function(e){var t=st.call(e,on),n=e[on];try{e[on]=o;var r=!0}catch(e){}var i=pt.call(e);r&&(t?e[on]=n:delete e[on]);return i}(e):function(e){return pt.call(e)}(e)}function Jr(e,t){return e>t}function ei(e,t){return null!=e&&st.call(e,t)}function ti(e,t){return null!=e&&t in tt(e)}function ni(e,t,n){for(var i=n?Xt:Zt,a=e[0].length,u=e.length,l=u,c=r(u),s=1/0,f=[];l--;){var d=e[l];l&&t&&(d=Jt(d,gn(t))),s=qn(d.length,s),c[l]=!n&&(t||a>=120&&d.length>=120)?new wr(l&&d):o}d=e[0];var p=-1,h=c[0];e:for(;++p<a&&f.length<s;){var v=d[p],m=t?t(v):v;if(v=n||0!==v?v:0,!(h?bn(h,m):i(f,m,n))){for(l=u;--l;){var g=c[l];if(!(g?bn(g,m):i(e[l],m,n)))continue e}h&&h.push(m),f.push(v)}}return f}function ri(e,t,n){var r=null==(e=ta(e,t=qi(t,e)))?e:e[sa(Ca(t))];return null==r?o:Vt(r,e,n)}function ii(e){return Nu(e)&&Xr(e)==j}function oi(e,t,n,r,i){return e===t||(null==e||null==t||!Nu(e)&&!Nu(t)?e!=e&&t!=t:function(e,t,n,r,i,a){var u=gu(e),l=gu(t),c=u?W:Wo(e),s=l?W:Wo(t),f=(c=c==j?J:c)==J,d=(s=s==j?J:s)==J,p=c==s;if(p&&wu(e)){if(!wu(t))return!1;u=!0,f=!1}if(p&&!f)return a||(a=new kr),u||Uu(e)?Po(e,t,n,r,i,a):function(e,t,n,r,i,o,a){switch(n){case ce:if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case le:return!(e.byteLength!=t.byteLength||!o(new kt(e),new kt(t)));case $:case V:case Z:return pu(+e,+t);case Q:return e.name==t.name&&e.message==t.message;case te:case re:return e==t+"";case G:var u=Sn;case ne:var l=r&v;if(u||(u=Pn),e.size!=t.size&&!l)return!1;var c=a.get(e);if(c)return c==t;r|=m,a.set(e,t);var s=Po(u(e),u(t),r,i,o,a);return a.delete(e),s;case ie:if(fr)return fr.call(e)==fr.call(t)}return!1}(e,t,c,n,r,i,a);if(!(n&v)){var h=f&&st.call(e,"__wrapped__"),g=d&&st.call(t,"__wrapped__");if(h||g){var y=h?e.value():e,b=g?t.value():t;return a||(a=new kr),i(y,b,n,r,a)}}if(!p)return!1;return a||(a=new kr),function(e,t,n,r,i,a){var u=n&v,l=Ro(e),c=l.length,s=Ro(t).length;if(c!=s&&!u)return!1;var f=c;for(;f--;){var d=l[f];if(!(u?d in t:st.call(t,d)))return!1}var p=a.get(e);if(p&&a.get(t))return p==t;var h=!0;a.set(e,t),a.set(t,e);var m=u;for(;++f<c;){d=l[f];var g=e[d],y=t[d];if(r)var b=u?r(y,g,d,t,e,a):r(g,y,d,e,t,a);if(!(b===o?g===y||i(g,y,n,r,a):b)){h=!1;break}m||(m="constructor"==d)}if(h&&!m){var _=e.constructor,w=t.constructor;_!=w&&"constructor"in e&&"constructor"in t&&!("function"==typeof _&&_ instanceof _&&"function"==typeof w&&w instanceof w)&&(h=!1)}return a.delete(e),a.delete(t),h}(e,t,n,r,i,a)}(e,t,n,r,oi,i))}function ai(e,t,n,r){var i=n.length,a=i,u=!r;if(null==e)return!a;for(e=tt(e);i--;){var l=n[i];if(u&&l[2]?l[1]!==e[l[0]]:!(l[0]in e))return!1}for(;++i<a;){var c=(l=n[i])[0],s=e[c],f=l[1];if(u&&l[2]){if(s===o&&!(c in e))return!1}else{var d=new kr;if(r)var p=r(s,f,c,e,t,d);if(!(p===o?oi(f,s,v|m,r,d):p))return!1}}return!0}function ui(e){return!(!Tu(e)||(t=e,dt&&dt in t))&&(xu(e)?mt:qe).test(fa(e));var t}function li(e){return"function"==typeof e?e:null==e?Ol:"object"==typeof e?gu(e)?hi(e[0],e[1]):pi(e):zl(e)}function ci(e){if(!Zo(e))return $n(e);var t=[];for(var n in tt(e))st.call(e,n)&&"constructor"!=n&&t.push(n);return t}function si(e){if(!Tu(e))return function(e){var t=[];if(null!=e)for(var n in tt(e))t.push(n);return t}(e);var t=Zo(e),n=[];for(var r in e)("constructor"!=r||!t&&st.call(e,r))&&n.push(r);return n}function fi(e,t){return e<t}function di(e,t){var n=-1,i=bu(e)?r(e.length):[];return zr(e,function(e,r,o){i[++n]=t(e,r,o)}),i}function pi(e){var t=Bo(e);return 1==t.length&&t[0][2]?Jo(t[0][0],t[0][1]):function(n){return n===e||ai(n,e,t)}}function hi(e,t){return Ko(e)&&Xo(t)?Jo(sa(e),t):function(n){var r=Ju(n,e);return r===o&&r===t?el(n,e):oi(t,r,v|m)}}function vi(e,t,n,r,i){e!==t&&Vr(t,function(a,u){if(i||(i=new kr),Tu(a))!function(e,t,n,r,i,a,u){var l=na(e,n),c=na(t,n),s=u.get(c);if(s)return void Tr(e,n,s);var f=a?a(l,c,n+"",e,t,u):o,d=f===o;if(d){var p=gu(c),h=!p&&wu(c),v=!p&&!h&&Uu(c);f=c,p||h||v?gu(l)?f=l:_u(l)?f=no(l):h?(d=!1,f=Gi(c,!0)):v?(d=!1,f=Xi(c,!0)):f=[]:Ru(c)||mu(c)?(f=l,mu(l)?f=$u(l):Tu(l)&&!xu(l)||(f=$o(c))):d=!1}d&&(u.set(c,f),i(f,c,r,a,u),u.delete(c));Tr(e,n,f)}(e,t,u,n,vi,r,i);else{var l=r?r(na(e,u),a,u+"",e,t,i):o;l===o&&(l=a),Tr(e,u,l)}},ol)}function mi(e,t){var n=e.length;if(n)return qo(t+=t<0?n:0,n)?e[t]:o}function gi(e,t,n){var r=-1;return t=Jt(t.length?t:[Ol],gn(Uo())),function(e,t){var n=e.length;for(e.sort(t);n--;)e[n]=e[n].value;return e}(di(e,function(e,n,i){return{criteria:Jt(t,function(t){return t(e)}),index:++r,value:e}}),function(e,t){return function(e,t,n){var r=-1,i=e.criteria,o=t.criteria,a=i.length,u=n.length;for(;++r<a;){var l=Ji(i[r],o[r]);if(l){if(r>=u)return l;var c=n[r];return l*("desc"==c?-1:1)}}return e.index-t.index}(e,t,n)})}function yi(e,t,n){for(var r=-1,i=t.length,o={};++r<i;){var a=t[r],u=Gr(e,a);n(u,a)&&Si(o,qi(a,e),u)}return o}function bi(e,t,n,r){var i=r?cn:ln,o=-1,a=t.length,u=e;for(e===t&&(t=no(t)),n&&(u=Jt(e,gn(n)));++o<a;)for(var l=0,c=t[o],s=n?n(c):c;(l=i(u,s,l,r))>-1;)u!==e&&It.call(u,l,1),It.call(e,l,1);return e}function _i(e,t){for(var n=e?t.length:0,r=n-1;n--;){var i=t[n];if(n==r||i!==o){var o=i;qo(i)?It.call(e,i,1):Bi(e,i)}}return e}function wi(e,t){return e+zn(Yn()*(t-e+1))}function ki(e,t){var n="";if(!e||t<1||t>D)return n;do{t%2&&(n+=e),(t=zn(t/2))&&(e+=e)}while(t);return n}function Ci(e,t){return oa(ea(e,t,Ol),e+"")}function xi(e){return xr(pl(e))}function Ei(e,t){var n=pl(e);return la(n,Dr(t,0,n.length))}function Si(e,t,n,r){if(!Tu(e))return e;for(var i=-1,a=(t=qi(t,e)).length,u=a-1,l=e;null!=l&&++i<a;){var c=sa(t[i]),s=n;if(i!=u){var f=l[c];(s=r?r(f,c,l):o)===o&&(s=Tu(f)?f:qo(t[i+1])?[]:{})}Nr(l,c,s),l=l[c]}return e}var Ti=rr?function(e,t){return rr.set(e,t),e}:Ol,Ni=pn?function(e,t){return pn(e,"toString",{configurable:!0,enumerable:!1,value:Tl(t),writable:!0})}:Ol;function Pi(e){return la(pl(e))}function Oi(e,t,n){var i=-1,o=e.length;t<0&&(t=-t>o?0:o+t),(n=n>o?o:n)<0&&(n+=o),o=t>n?0:n-t>>>0,t>>>=0;for(var a=r(o);++i<o;)a[i]=e[i+t];return a}function Ri(e,t){var n;return zr(e,function(e,r,i){return!(n=t(e,r,i))}),!!n}function Li(e,t,n){var r=0,i=null==e?r:e.length;if("number"==typeof t&&t==t&&i<=z){for(;r<i;){var o=r+i>>>1,a=e[o];null!==a&&!Iu(a)&&(n?a<=t:a<t)?r=o+1:i=o}return i}return Ai(e,t,Ol,n)}function Ai(e,t,n,r){t=n(t);for(var i=0,a=null==e?0:e.length,u=t!=t,l=null===t,c=Iu(t),s=t===o;i<a;){var f=zn((i+a)/2),d=n(e[f]),p=d!==o,h=null===d,v=d==d,m=Iu(d);if(u)var g=r||v;else g=s?v&&(r||p):l?v&&p&&(r||!h):c?v&&p&&!h&&(r||!m):!h&&!m&&(r?d<=t:d<t);g?i=f+1:a=f}return qn(a,B)}function Di(e,t){for(var n=-1,r=e.length,i=0,o=[];++n<r;){var a=e[n],u=t?t(a):a;if(!n||!pu(u,l)){var l=u;o[i++]=0===a?0:a}}return o}function Ii(e){return"number"==typeof e?e:Iu(e)?U:+e}function Ui(e){if("string"==typeof e)return e;if(gu(e))return Jt(e,Ui)+"";if(Iu(e))return dr?dr.call(e):"";var t=e+"";return"0"==t&&1/e==-A?"-0":t}function Fi(e,t,n){var r=-1,i=Zt,o=e.length,u=!0,l=[],c=l;if(n)u=!1,i=Xt;else if(o>=a){var s=t?null:Co(e);if(s)return Pn(s);u=!1,i=bn,c=new wr}else c=t?[]:l;e:for(;++r<o;){var f=e[r],d=t?t(f):f;if(f=n||0!==f?f:0,u&&d==d){for(var p=c.length;p--;)if(c[p]===d)continue e;t&&c.push(d),l.push(f)}else i(c,d,n)||(c!==l&&c.push(d),l.push(f))}return l}function Bi(e,t){return null==(e=ta(e,t=qi(t,e)))||delete e[sa(Ca(t))]}function zi(e,t,n,r){return Si(e,t,n(Gr(e,t)),r)}function Mi(e,t,n,r){for(var i=e.length,o=r?i:-1;(r?o--:++o<i)&&t(e[o],o,e););return n?Oi(e,r?0:o,r?o+1:i):Oi(e,r?o+1:0,r?i:o)}function ji(e,t){var n=e;return n instanceof gr&&(n=n.value()),tn(t,function(e,t){return t.func.apply(t.thisArg,en([e],t.args))},n)}function Wi(e,t,n){var i=e.length;if(i<2)return i?Fi(e[0]):[];for(var o=-1,a=r(i);++o<i;)for(var u=e[o],l=-1;++l<i;)l!=o&&(a[o]=Br(a[o]||u,e[l],t,n));return Fi($r(a,1),t,n)}function Hi(e,t,n){for(var r=-1,i=e.length,a=t.length,u={};++r<i;){var l=r<a?t[r]:o;n(u,e[r],l)}return u}function $i(e){return _u(e)?e:[]}function Vi(e){return"function"==typeof e?e:Ol}function qi(e,t){return gu(e)?e:Ko(e,t)?[e]:ca(Vu(e))}var Qi=Ci;function Ki(e,t,n){var r=e.length;return n=n===o?r:n,!t&&n>=r?e:Oi(e,t,n)}var Yi=In||function(e){return At.clearTimeout(e)};function Gi(e,t){if(t)return e.slice();var n=e.length,r=Nt?Nt(n):new e.constructor(n);return e.copy(r),r}function Zi(e){var t=new e.constructor(e.byteLength);return new kt(t).set(new kt(e)),t}function Xi(e,t){var n=t?Zi(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.length)}function Ji(e,t){if(e!==t){var n=e!==o,r=null===e,i=e==e,a=Iu(e),u=t!==o,l=null===t,c=t==t,s=Iu(t);if(!l&&!s&&!a&&e>t||a&&u&&c&&!l&&!s||r&&u&&c||!n&&c||!i)return 1;if(!r&&!a&&!s&&e<t||s&&n&&i&&!r&&!a||l&&n&&i||!u&&i||!c)return-1}return 0}function eo(e,t,n,i){for(var o=-1,a=e.length,u=n.length,l=-1,c=t.length,s=Vn(a-u,0),f=r(c+s),d=!i;++l<c;)f[l]=t[l];for(;++o<u;)(d||o<a)&&(f[n[o]]=e[o]);for(;s--;)f[l++]=e[o++];return f}function to(e,t,n,i){for(var o=-1,a=e.length,u=-1,l=n.length,c=-1,s=t.length,f=Vn(a-l,0),d=r(f+s),p=!i;++o<f;)d[o]=e[o];for(var h=o;++c<s;)d[h+c]=t[c];for(;++u<l;)(p||o<a)&&(d[h+n[u]]=e[o++]);return d}function no(e,t){var n=-1,i=e.length;for(t||(t=r(i));++n<i;)t[n]=e[n];return t}function ro(e,t,n,r){var i=!n;n||(n={});for(var a=-1,u=t.length;++a<u;){var l=t[a],c=r?r(n[l],e[l],l,n,e):o;c===o&&(c=e[l]),i?Lr(n,l,c):Nr(n,l,c)}return n}function io(e,t){return function(n,r){var i=gu(n)?qt:Or,o=t?t():{};return i(n,e,Uo(r,2),o)}}function oo(e){return Ci(function(t,n){var r=-1,i=n.length,a=i>1?n[i-1]:o,u=i>2?n[2]:o;for(a=e.length>3&&"function"==typeof a?(i--,a):o,u&&Qo(n[0],n[1],u)&&(a=i<3?o:a,i=1),t=tt(t);++r<i;){var l=n[r];l&&e(t,l,r,a)}return t})}function ao(e,t){return function(n,r){if(null==n)return n;if(!bu(n))return e(n,r);for(var i=n.length,o=t?i:-1,a=tt(n);(t?o--:++o<i)&&!1!==r(a[o],o,a););return n}}function uo(e){return function(t,n,r){for(var i=-1,o=tt(t),a=r(t),u=a.length;u--;){var l=a[e?u:++i];if(!1===n(o[l],l,o))break}return t}}function lo(e){return function(t){var n=En(t=Vu(t))?Ln(t):o,r=n?n[0]:t.charAt(0),i=n?Ki(n,1).join(""):t.slice(1);return r[e]()+i}}function co(e){return function(t){return tn(xl(ml(t).replace(yt,"")),e,"")}}function so(e){return function(){var t=arguments;switch(t.length){case 0:return new e;case 1:return new e(t[0]);case 2:return new e(t[0],t[1]);case 3:return new e(t[0],t[1],t[2]);case 4:return new e(t[0],t[1],t[2],t[3]);case 5:return new e(t[0],t[1],t[2],t[3],t[4]);case 6:return new e(t[0],t[1],t[2],t[3],t[4],t[5]);case 7:return new e(t[0],t[1],t[2],t[3],t[4],t[5],t[6])}var n=hr(e.prototype),r=e.apply(n,t);return Tu(r)?r:n}}function fo(e){return function(t,n,r){var i=tt(t);if(!bu(t)){var a=Uo(n,3);t=il(t),n=function(e){return a(i[e],e,i)}}var u=e(t,n,r);return u>-1?i[a?t[u]:u]:o}}function po(e){return Oo(function(t){var n=t.length,r=n,i=mr.prototype.thru;for(e&&t.reverse();r--;){var a=t[r];if("function"!=typeof a)throw new it(l);if(i&&!u&&"wrapper"==Do(a))var u=new mr([],!0)}for(r=u?r:n;++r<n;){var c=Do(a=t[r]),s="wrapper"==c?Ao(a):o;u=s&&Yo(s[0])&&s[1]==(x|_|k|E)&&!s[4].length&&1==s[9]?u[Do(s[0])].apply(u,s[3]):1==a.length&&Yo(a)?u[c]():u.thru(a)}return function(){var e=arguments,r=e[0];if(u&&1==e.length&&gu(r))return u.plant(r).value();for(var i=0,o=n?t[i].apply(this,e):r;++i<n;)o=t[i].call(this,o);return o}})}function ho(e,t,n,i,a,u,l,c,s,f){var d=t&x,p=t&g,h=t&y,v=t&(_|w),m=t&S,b=h?o:so(e);return function g(){for(var y=arguments.length,_=r(y),w=y;w--;)_[w]=arguments[w];if(v)var k=Io(g),C=function(e,t){for(var n=e.length,r=0;n--;)e[n]===t&&++r;return r}(_,k);if(i&&(_=eo(_,i,a,v)),u&&(_=to(_,u,l,v)),y-=C,v&&y<f){var x=Nn(_,k);return wo(e,t,ho,g.placeholder,n,_,x,c,s,f-y)}var E=p?n:this,S=h?E[e]:e;return y=_.length,c?_=function(e,t){for(var n=e.length,r=qn(t.length,n),i=no(e);r--;){var a=t[r];e[r]=qo(a,n)?i[a]:o}return e}(_,c):m&&y>1&&_.reverse(),d&&s<y&&(_.length=s),this&&this!==At&&this instanceof g&&(S=b||so(S)),S.apply(E,_)}}function vo(e,t){return function(n,r){return function(e,t,n,r){return Qr(e,function(e,i,o){t(r,n(e),i,o)}),r}(n,e,t(r),{})}}function mo(e,t){return function(n,r){var i;if(n===o&&r===o)return t;if(n!==o&&(i=n),r!==o){if(i===o)return r;"string"==typeof n||"string"==typeof r?(n=Ui(n),r=Ui(r)):(n=Ii(n),r=Ii(r)),i=e(n,r)}return i}}function go(e){return Oo(function(t){return t=Jt(t,gn(Uo())),Ci(function(n){var r=this;return e(t,function(e){return Vt(e,r,n)})})})}function yo(e,t){var n=(t=t===o?" ":Ui(t)).length;if(n<2)return n?ki(t,e):t;var r=ki(t,Bn(e/Rn(t)));return En(t)?Ki(Ln(r),0,e).join(""):r.slice(0,e)}function bo(e){return function(t,n,i){return i&&"number"!=typeof i&&Qo(t,n,i)&&(n=i=o),t=Mu(t),n===o?(n=t,t=0):n=Mu(n),function(e,t,n,i){for(var o=-1,a=Vn(Bn((t-e)/(n||1)),0),u=r(a);a--;)u[i?a:++o]=e,e+=n;return u}(t,n,i=i===o?t<n?1:-1:Mu(i),e)}}function _o(e){return function(t,n){return"string"==typeof t&&"string"==typeof n||(t=Hu(t),n=Hu(n)),e(t,n)}}function wo(e,t,n,r,i,a,u,l,c,s){var f=t&_;t|=f?k:C,(t&=~(f?C:k))&b||(t&=~(g|y));var d=[e,t,i,f?a:o,f?u:o,f?o:a,f?o:u,l,c,s],p=n.apply(o,d);return Yo(e)&&ra(p,d),p.placeholder=r,aa(p,e,t)}function ko(e){var t=et[e];return function(e,n){if(e=Hu(e),(n=null==n?0:qn(ju(n),292))&&Wn(e)){var r=(Vu(e)+"e").split("e");return+((r=(Vu(t(r[0]+"e"+(+r[1]+n)))+"e").split("e"))[0]+"e"+(+r[1]-n))}return t(e)}}var Co=er&&1/Pn(new er([,-0]))[1]==A?function(e){return new er(e)}:Il;function xo(e){return function(t){var n=Wo(t);return n==G?Sn(t):n==ne?On(t):function(e,t){return Jt(t,function(t){return[t,e[t]]})}(t,e(t))}}function Eo(e,t,n,i,a,u,c,s){var d=t&y;if(!d&&"function"!=typeof e)throw new it(l);var p=i?i.length:0;if(p||(t&=~(k|C),i=a=o),c=c===o?c:Vn(ju(c),0),s=s===o?s:ju(s),p-=a?a.length:0,t&C){var h=i,v=a;i=a=o}var m=d?o:Ao(e),S=[e,t,n,i,a,h,v,u,c,s];if(m&&function(e,t){var n=e[1],r=t[1],i=n|r,o=i<(g|y|x),a=r==x&&n==_||r==x&&n==E&&e[7].length<=t[8]||r==(x|E)&&t[7].length<=t[8]&&n==_;if(!o&&!a)return e;r&g&&(e[2]=t[2],i|=n&g?0:b);var u=t[3];if(u){var l=e[3];e[3]=l?eo(l,u,t[4]):u,e[4]=l?Nn(e[3],f):t[4]}(u=t[5])&&(l=e[5],e[5]=l?to(l,u,t[6]):u,e[6]=l?Nn(e[5],f):t[6]);(u=t[7])&&(e[7]=u);r&x&&(e[8]=null==e[8]?t[8]:qn(e[8],t[8]));null==e[9]&&(e[9]=t[9]);e[0]=t[0],e[1]=i}(S,m),e=S[0],t=S[1],n=S[2],i=S[3],a=S[4],!(s=S[9]=S[9]===o?d?0:e.length:Vn(S[9]-p,0))&&t&(_|w)&&(t&=~(_|w)),t&&t!=g)T=t==_||t==w?function(e,t,n){var i=so(e);return function a(){for(var u=arguments.length,l=r(u),c=u,s=Io(a);c--;)l[c]=arguments[c];var f=u<3&&l[0]!==s&&l[u-1]!==s?[]:Nn(l,s);return(u-=f.length)<n?wo(e,t,ho,a.placeholder,o,l,f,o,o,n-u):Vt(this&&this!==At&&this instanceof a?i:e,this,l)}}(e,t,s):t!=k&&t!=(g|k)||a.length?ho.apply(o,S):function(e,t,n,i){var o=t&g,a=so(e);return function t(){for(var u=-1,l=arguments.length,c=-1,s=i.length,f=r(s+l),d=this&&this!==At&&this instanceof t?a:e;++c<s;)f[c]=i[c];for(;l--;)f[c++]=arguments[++u];return Vt(d,o?n:this,f)}}(e,t,n,i);else var T=function(e,t,n){var r=t&g,i=so(e);return function t(){return(this&&this!==At&&this instanceof t?i:e).apply(r?n:this,arguments)}}(e,t,n);return aa((m?Ti:ra)(T,S),e,t)}function So(e,t,n,r){return e===o||pu(e,ut[n])&&!st.call(r,n)?t:e}function To(e,t,n,r,i,a){return Tu(e)&&Tu(t)&&(a.set(t,e),vi(e,t,o,To,a),a.delete(t)),e}function No(e){return Ru(e)?o:e}function Po(e,t,n,r,i,a){var u=n&v,l=e.length,c=t.length;if(l!=c&&!(u&&c>l))return!1;var s=a.get(e);if(s&&a.get(t))return s==t;var f=-1,d=!0,p=n&m?new wr:o;for(a.set(e,t),a.set(t,e);++f<l;){var h=e[f],g=t[f];if(r)var y=u?r(g,h,f,t,e,a):r(h,g,f,e,t,a);if(y!==o){if(y)continue;d=!1;break}if(p){if(!rn(t,function(e,t){if(!bn(p,t)&&(h===e||i(h,e,n,r,a)))return p.push(t)})){d=!1;break}}else if(h!==g&&!i(h,g,n,r,a)){d=!1;break}}return a.delete(e),a.delete(t),d}function Oo(e){return oa(ea(e,o,ya),e+"")}function Ro(e){return Zr(e,il,Mo)}function Lo(e){return Zr(e,ol,jo)}var Ao=rr?function(e){return rr.get(e)}:Il;function Do(e){for(var t=e.name+"",n=ir[t],r=st.call(ir,t)?n.length:0;r--;){var i=n[r],o=i.func;if(null==o||o==e)return i.name}return t}function Io(e){return(st.call(pr,"placeholder")?pr:e).placeholder}function Uo(){var e=pr.iteratee||Rl;return e=e===Rl?li:e,arguments.length?e(arguments[0],arguments[1]):e}function Fo(e,t){var n,r,i=e.__data__;return("string"==(r=typeof(n=t))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==n:null===n)?i["string"==typeof t?"string":"hash"]:i.map}function Bo(e){for(var t=il(e),n=t.length;n--;){var r=t[n],i=e[r];t[n]=[r,i,Xo(i)]}return t}function zo(e,t){var n=function(e,t){return null==e?o:e[t]}(e,t);return ui(n)?n:o}var Mo=Mn?function(e){return null==e?[]:(e=tt(e),Gt(Mn(e),function(t){return Dt.call(e,t)}))}:Wl,jo=Mn?function(e){for(var t=[];e;)en(t,Mo(e)),e=Rt(e);return t}:Wl,Wo=Xr;function Ho(e,t,n){for(var r=-1,i=(t=qi(t,e)).length,o=!1;++r<i;){var a=sa(t[r]);if(!(o=null!=e&&n(e,a)))break;e=e[a]}return o||++r!=i?o:!!(i=null==e?0:e.length)&&Su(i)&&qo(a,i)&&(gu(e)||mu(e))}function $o(e){return"function"!=typeof e.constructor||Zo(e)?{}:hr(Rt(e))}function Vo(e){return gu(e)||mu(e)||!!(Ft&&e&&e[Ft])}function qo(e,t){var n=typeof e;return!!(t=null==t?D:t)&&("number"==n||"symbol"!=n&&Ke.test(e))&&e>-1&&e%1==0&&e<t}function Qo(e,t,n){if(!Tu(n))return!1;var r=typeof t;return!!("number"==r?bu(n)&&qo(t,n.length):"string"==r&&t in n)&&pu(n[t],e)}function Ko(e,t){if(gu(e))return!1;var n=typeof e;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=e&&!Iu(e))||(Oe.test(e)||!Pe.test(e)||null!=t&&e in tt(t))}function Yo(e){var t=Do(e),n=pr[t];if("function"!=typeof n||!(t in gr.prototype))return!1;if(e===n)return!0;var r=Ao(n);return!!r&&e===r[0]}(Zn&&Wo(new Zn(new ArrayBuffer(1)))!=ce||Xn&&Wo(new Xn)!=G||Jn&&"[object Promise]"!=Wo(Jn.resolve())||er&&Wo(new er)!=ne||tr&&Wo(new tr)!=ae)&&(Wo=function(e){var t=Xr(e),n=t==J?e.constructor:o,r=n?fa(n):"";if(r)switch(r){case or:return ce;case ar:return G;case ur:return"[object Promise]";case lr:return ne;case cr:return ae}return t});var Go=lt?xu:Hl;function Zo(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||ut)}function Xo(e){return e==e&&!Tu(e)}function Jo(e,t){return function(n){return null!=n&&(n[e]===t&&(t!==o||e in tt(n)))}}function ea(e,t,n){return t=Vn(t===o?e.length-1:t,0),function(){for(var i=arguments,o=-1,a=Vn(i.length-t,0),u=r(a);++o<a;)u[o]=i[t+o];o=-1;for(var l=r(t+1);++o<t;)l[o]=i[o];return l[t]=n(u),Vt(e,this,l)}}function ta(e,t){return t.length<2?e:Gr(e,Oi(t,0,-1))}function na(e,t){if(("constructor"!==t||"function"!=typeof e[t])&&"__proto__"!=t)return e[t]}var ra=ua(Ti),ia=Fn||function(e,t){return At.setTimeout(e,t)},oa=ua(Ni);function aa(e,t,n){var r=t+"";return oa(e,function(e,t){var n=t.length;if(!n)return e;var r=n-1;return t[r]=(n>1?"& ":"")+t[r],t=t.join(n>2?", ":" "),e.replace(Fe,"{\n/* [wrapped with "+t+"] */\n")}(r,function(e,t){return Qt(M,function(n){var r="_."+n[0];t&n[1]&&!Zt(e,r)&&e.push(r)}),e.sort()}(function(e){var t=e.match(Be);return t?t[1].split(ze):[]}(r),n)))}function ua(e){var t=0,n=0;return function(){var r=Qn(),i=O-(r-n);if(n=r,i>0){if(++t>=P)return arguments[0]}else t=0;return e.apply(o,arguments)}}function la(e,t){var n=-1,r=e.length,i=r-1;for(t=t===o?r:t;++n<t;){var a=wi(n,i),u=e[a];e[a]=e[n],e[n]=u}return e.length=t,e}var ca=function(e){var t=uu(e,function(e){return n.size===s&&n.clear(),e}),n=t.cache;return t}(function(e){var t=[];return 46===e.charCodeAt(0)&&t.push(""),e.replace(Re,function(e,n,r,i){t.push(r?i.replace(je,"$1"):n||e)}),t});function sa(e){if("string"==typeof e||Iu(e))return e;var t=e+"";return"0"==t&&1/e==-A?"-0":t}function fa(e){if(null!=e){try{return ct.call(e)}catch(e){}try{return e+""}catch(e){}}return""}function da(e){if(e instanceof gr)return e.clone();var t=new mr(e.__wrapped__,e.__chain__);return t.__actions__=no(e.__actions__),t.__index__=e.__index__,t.__values__=e.__values__,t}var pa=Ci(function(e,t){return _u(e)?Br(e,$r(t,1,_u,!0)):[]}),ha=Ci(function(e,t){var n=Ca(t);return _u(n)&&(n=o),_u(e)?Br(e,$r(t,1,_u,!0),Uo(n,2)):[]}),va=Ci(function(e,t){var n=Ca(t);return _u(n)&&(n=o),_u(e)?Br(e,$r(t,1,_u,!0),o,n):[]});function ma(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var i=null==n?0:ju(n);return i<0&&(i=Vn(r+i,0)),un(e,Uo(t,3),i)}function ga(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var i=r-1;return n!==o&&(i=ju(n),i=n<0?Vn(r+i,0):qn(i,r-1)),un(e,Uo(t,3),i,!0)}function ya(e){return(null==e?0:e.length)?$r(e,1):[]}function ba(e){return e&&e.length?e[0]:o}var _a=Ci(function(e){var t=Jt(e,$i);return t.length&&t[0]===e[0]?ni(t):[]}),wa=Ci(function(e){var t=Ca(e),n=Jt(e,$i);return t===Ca(n)?t=o:n.pop(),n.length&&n[0]===e[0]?ni(n,Uo(t,2)):[]}),ka=Ci(function(e){var t=Ca(e),n=Jt(e,$i);return(t="function"==typeof t?t:o)&&n.pop(),n.length&&n[0]===e[0]?ni(n,o,t):[]});function Ca(e){var t=null==e?0:e.length;return t?e[t-1]:o}var xa=Ci(Ea);function Ea(e,t){return e&&e.length&&t&&t.length?bi(e,t):e}var Sa=Oo(function(e,t){var n=null==e?0:e.length,r=Ar(e,t);return _i(e,Jt(t,function(e){return qo(e,n)?+e:e}).sort(Ji)),r});function Ta(e){return null==e?e:Gn.call(e)}var Na=Ci(function(e){return Fi($r(e,1,_u,!0))}),Pa=Ci(function(e){var t=Ca(e);return _u(t)&&(t=o),Fi($r(e,1,_u,!0),Uo(t,2))}),Oa=Ci(function(e){var t=Ca(e);return t="function"==typeof t?t:o,Fi($r(e,1,_u,!0),o,t)});function Ra(e){if(!e||!e.length)return[];var t=0;return e=Gt(e,function(e){if(_u(e))return t=Vn(e.length,t),!0}),mn(t,function(t){return Jt(e,dn(t))})}function La(e,t){if(!e||!e.length)return[];var n=Ra(e);return null==t?n:Jt(n,function(e){return Vt(t,o,e)})}var Aa=Ci(function(e,t){return _u(e)?Br(e,t):[]}),Da=Ci(function(e){return Wi(Gt(e,_u))}),Ia=Ci(function(e){var t=Ca(e);return _u(t)&&(t=o),Wi(Gt(e,_u),Uo(t,2))}),Ua=Ci(function(e){var t=Ca(e);return t="function"==typeof t?t:o,Wi(Gt(e,_u),o,t)}),Fa=Ci(Ra);var Ba=Ci(function(e){var t=e.length,n=t>1?e[t-1]:o;return n="function"==typeof n?(e.pop(),n):o,La(e,n)});function za(e){var t=pr(e);return t.__chain__=!0,t}function Ma(e,t){return t(e)}var ja=Oo(function(e){var t=e.length,n=t?e[0]:0,r=this.__wrapped__,i=function(t){return Ar(t,e)};return!(t>1||this.__actions__.length)&&r instanceof gr&&qo(n)?((r=r.slice(n,+n+(t?1:0))).__actions__.push({func:Ma,args:[i],thisArg:o}),new mr(r,this.__chain__).thru(function(e){return t&&!e.length&&e.push(o),e})):this.thru(i)});var Wa=io(function(e,t,n){st.call(e,n)?++e[n]:Lr(e,n,1)});var Ha=fo(ma),$a=fo(ga);function Va(e,t){return(gu(e)?Qt:zr)(e,Uo(t,3))}function qa(e,t){return(gu(e)?Kt:Mr)(e,Uo(t,3))}var Qa=io(function(e,t,n){st.call(e,n)?e[n].push(t):Lr(e,n,[t])});var Ka=Ci(function(e,t,n){var i=-1,o="function"==typeof t,a=bu(e)?r(e.length):[];return zr(e,function(e){a[++i]=o?Vt(t,e,n):ri(e,t,n)}),a}),Ya=io(function(e,t,n){Lr(e,n,t)});function Ga(e,t){return(gu(e)?Jt:di)(e,Uo(t,3))}var Za=io(function(e,t,n){e[n?0:1].push(t)},function(){return[[],[]]});var Xa=Ci(function(e,t){if(null==e)return[];var n=t.length;return n>1&&Qo(e,t[0],t[1])?t=[]:n>2&&Qo(t[0],t[1],t[2])&&(t=[t[0]]),gi(e,$r(t,1),[])}),Ja=Un||function(){return At.Date.now()};function eu(e,t,n){return t=n?o:t,t=e&&null==t?e.length:t,Eo(e,x,o,o,o,o,t)}function tu(e,t){var n;if("function"!=typeof t)throw new it(l);return e=ju(e),function(){return--e>0&&(n=t.apply(this,arguments)),e<=1&&(t=o),n}}var nu=Ci(function(e,t,n){var r=g;if(n.length){var i=Nn(n,Io(nu));r|=k}return Eo(e,r,t,n,i)}),ru=Ci(function(e,t,n){var r=g|y;if(n.length){var i=Nn(n,Io(ru));r|=k}return Eo(t,r,e,n,i)});function iu(e,t,n){var r,i,a,u,c,s,f=0,d=!1,p=!1,h=!0;if("function"!=typeof e)throw new it(l);function v(t){var n=r,a=i;return r=i=o,f=t,u=e.apply(a,n)}function m(e){var n=e-s;return s===o||n>=t||n<0||p&&e-f>=a}function g(){var e=Ja();if(m(e))return y(e);c=ia(g,function(e){var n=t-(e-s);return p?qn(n,a-(e-f)):n}(e))}function y(e){return c=o,h&&r?v(e):(r=i=o,u)}function b(){var e=Ja(),n=m(e);if(r=arguments,i=this,s=e,n){if(c===o)return function(e){return f=e,c=ia(g,t),d?v(e):u}(s);if(p)return Yi(c),c=ia(g,t),v(s)}return c===o&&(c=ia(g,t)),u}return t=Hu(t)||0,Tu(n)&&(d=!!n.leading,a=(p="maxWait"in n)?Vn(Hu(n.maxWait)||0,t):a,h="trailing"in n?!!n.trailing:h),b.cancel=function(){c!==o&&Yi(c),f=0,r=s=i=c=o},b.flush=function(){return c===o?u:y(Ja())},b}var ou=Ci(function(e,t){return Fr(e,1,t)}),au=Ci(function(e,t,n){return Fr(e,Hu(t)||0,n)});function uu(e,t){if("function"!=typeof e||null!=t&&"function"!=typeof t)throw new it(l);var n=function(){var r=arguments,i=t?t.apply(this,r):r[0],o=n.cache;if(o.has(i))return o.get(i);var a=e.apply(this,r);return n.cache=o.set(i,a)||o,a};return n.cache=new(uu.Cache||_r),n}function lu(e){if("function"!=typeof e)throw new it(l);return function(){var t=arguments;switch(t.length){case 0:return!e.call(this);case 1:return!e.call(this,t[0]);case 2:return!e.call(this,t[0],t[1]);case 3:return!e.call(this,t[0],t[1],t[2])}return!e.apply(this,t)}}uu.Cache=_r;var cu=Qi(function(e,t){var n=(t=1==t.length&&gu(t[0])?Jt(t[0],gn(Uo())):Jt($r(t,1),gn(Uo()))).length;return Ci(function(r){for(var i=-1,o=qn(r.length,n);++i<o;)r[i]=t[i].call(this,r[i]);return Vt(e,this,r)})}),su=Ci(function(e,t){var n=Nn(t,Io(su));return Eo(e,k,o,t,n)}),fu=Ci(function(e,t){var n=Nn(t,Io(fu));return Eo(e,C,o,t,n)}),du=Oo(function(e,t){return Eo(e,E,o,o,o,t)});function pu(e,t){return e===t||e!=e&&t!=t}var hu=_o(Jr),vu=_o(function(e,t){return e>=t}),mu=ii(function(){return arguments}())?ii:function(e){return Nu(e)&&st.call(e,"callee")&&!Dt.call(e,"callee")},gu=r.isArray,yu=zt?gn(zt):function(e){return Nu(e)&&Xr(e)==le};function bu(e){return null!=e&&Su(e.length)&&!xu(e)}function _u(e){return Nu(e)&&bu(e)}var wu=jn||Hl,ku=Mt?gn(Mt):function(e){return Nu(e)&&Xr(e)==V};function Cu(e){if(!Nu(e))return!1;var t=Xr(e);return t==Q||t==q||"string"==typeof e.message&&"string"==typeof e.name&&!Ru(e)}function xu(e){if(!Tu(e))return!1;var t=Xr(e);return t==K||t==Y||t==H||t==ee}function Eu(e){return"number"==typeof e&&e==ju(e)}function Su(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=D}function Tu(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}function Nu(e){return null!=e&&"object"==typeof e}var Pu=jt?gn(jt):function(e){return Nu(e)&&Wo(e)==G};function Ou(e){return"number"==typeof e||Nu(e)&&Xr(e)==Z}function Ru(e){if(!Nu(e)||Xr(e)!=J)return!1;var t=Rt(e);if(null===t)return!0;var n=st.call(t,"constructor")&&t.constructor;return"function"==typeof n&&n instanceof n&&ct.call(n)==ht}var Lu=Wt?gn(Wt):function(e){return Nu(e)&&Xr(e)==te};var Au=Ht?gn(Ht):function(e){return Nu(e)&&Wo(e)==ne};function Du(e){return"string"==typeof e||!gu(e)&&Nu(e)&&Xr(e)==re}function Iu(e){return"symbol"==typeof e||Nu(e)&&Xr(e)==ie}var Uu=$t?gn($t):function(e){return Nu(e)&&Su(e.length)&&!!St[Xr(e)]};var Fu=_o(fi),Bu=_o(function(e,t){return e<=t});function zu(e){if(!e)return[];if(bu(e))return Du(e)?Ln(e):no(e);if(Bt&&e[Bt])return function(e){for(var t,n=[];!(t=e.next()).done;)n.push(t.value);return n}(e[Bt]());var t=Wo(e);return(t==G?Sn:t==ne?Pn:pl)(e)}function Mu(e){return e?(e=Hu(e))===A||e===-A?(e<0?-1:1)*I:e==e?e:0:0===e?e:0}function ju(e){var t=Mu(e),n=t%1;return t==t?n?t-n:t:0}function Wu(e){return e?Dr(ju(e),0,F):0}function Hu(e){if("number"==typeof e)return e;if(Iu(e))return U;if(Tu(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=Tu(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(De,"");var n=Ve.test(e);return n||Qe.test(e)?Ot(e.slice(2),n?2:8):$e.test(e)?U:+e}function $u(e){return ro(e,ol(e))}function Vu(e){return null==e?"":Ui(e)}var qu=oo(function(e,t){if(Zo(t)||bu(t))ro(t,il(t),e);else for(var n in t)st.call(t,n)&&Nr(e,n,t[n])}),Qu=oo(function(e,t){ro(t,ol(t),e)}),Ku=oo(function(e,t,n,r){ro(t,ol(t),e,r)}),Yu=oo(function(e,t,n,r){ro(t,il(t),e,r)}),Gu=Oo(Ar);var Zu=Ci(function(e,t){e=tt(e);var n=-1,r=t.length,i=r>2?t[2]:o;for(i&&Qo(t[0],t[1],i)&&(r=1);++n<r;)for(var a=t[n],u=ol(a),l=-1,c=u.length;++l<c;){var s=u[l],f=e[s];(f===o||pu(f,ut[s])&&!st.call(e,s))&&(e[s]=a[s])}return e}),Xu=Ci(function(e){return e.push(o,To),Vt(ul,o,e)});function Ju(e,t,n){var r=null==e?o:Gr(e,t);return r===o?n:r}function el(e,t){return null!=e&&Ho(e,t,ti)}var tl=vo(function(e,t,n){null!=t&&"function"!=typeof t.toString&&(t=pt.call(t)),e[t]=n},Tl(Ol)),nl=vo(function(e,t,n){null!=t&&"function"!=typeof t.toString&&(t=pt.call(t)),st.call(e,t)?e[t].push(n):e[t]=[n]},Uo),rl=Ci(ri);function il(e){return bu(e)?Cr(e):ci(e)}function ol(e){return bu(e)?Cr(e,!0):si(e)}var al=oo(function(e,t,n){vi(e,t,n)}),ul=oo(function(e,t,n,r){vi(e,t,n,r)}),ll=Oo(function(e,t){var n={};if(null==e)return n;var r=!1;t=Jt(t,function(t){return t=qi(t,e),r||(r=t.length>1),t}),ro(e,Lo(e),n),r&&(n=Ir(n,d|p|h,No));for(var i=t.length;i--;)Bi(n,t[i]);return n});var cl=Oo(function(e,t){return null==e?{}:function(e,t){return yi(e,t,function(t,n){return el(e,n)})}(e,t)});function sl(e,t){if(null==e)return{};var n=Jt(Lo(e),function(e){return[e]});return t=Uo(t),yi(e,n,function(e,n){return t(e,n[0])})}var fl=xo(il),dl=xo(ol);function pl(e){return null==e?[]:yn(e,il(e))}var hl=co(function(e,t,n){return t=t.toLowerCase(),e+(n?vl(t):t)});function vl(e){return Cl(Vu(e).toLowerCase())}function ml(e){return(e=Vu(e))&&e.replace(Ye,kn).replace(bt,"")}var gl=co(function(e,t,n){return e+(n?"-":"")+t.toLowerCase()}),yl=co(function(e,t,n){return e+(n?" ":"")+t.toLowerCase()}),bl=lo("toLowerCase");var _l=co(function(e,t,n){return e+(n?"_":"")+t.toLowerCase()});var wl=co(function(e,t,n){return e+(n?" ":"")+Cl(t)});var kl=co(function(e,t,n){return e+(n?" ":"")+t.toUpperCase()}),Cl=lo("toUpperCase");function xl(e,t,n){return e=Vu(e),(t=n?o:t)===o?function(e){return Ct.test(e)}(e)?function(e){return e.match(wt)||[]}(e):function(e){return e.match(Me)||[]}(e):e.match(t)||[]}var El=Ci(function(e,t){try{return Vt(e,o,t)}catch(e){return Cu(e)?e:new Xe(e)}}),Sl=Oo(function(e,t){return Qt(t,function(t){t=sa(t),Lr(e,t,nu(e[t],e))}),e});function Tl(e){return function(){return e}}var Nl=po(),Pl=po(!0);function Ol(e){return e}function Rl(e){return li("function"==typeof e?e:Ir(e,d))}var Ll=Ci(function(e,t){return function(n){return ri(n,e,t)}}),Al=Ci(function(e,t){return function(n){return ri(e,n,t)}});function Dl(e,t,n){var r=il(t),i=Yr(t,r);null!=n||Tu(t)&&(i.length||!r.length)||(n=t,t=e,e=this,i=Yr(t,il(t)));var o=!(Tu(n)&&"chain"in n&&!n.chain),a=xu(e);return Qt(i,function(n){var r=t[n];e[n]=r,a&&(e.prototype[n]=function(){var t=this.__chain__;if(o||t){var n=e(this.__wrapped__),i=n.__actions__=no(this.__actions__);return i.push({func:r,args:arguments,thisArg:e}),n.__chain__=t,n}return r.apply(e,en([this.value()],arguments))})}),e}function Il(){}var Ul=go(Jt),Fl=go(Yt),Bl=go(rn);function zl(e){return Ko(e)?dn(sa(e)):function(e){return function(t){return Gr(t,e)}}(e)}var Ml=bo(),jl=bo(!0);function Wl(){return[]}function Hl(){return!1}var $l=mo(function(e,t){return e+t},0),Vl=ko("ceil"),ql=mo(function(e,t){return e/t},1),Ql=ko("floor");var Kl,Yl=mo(function(e,t){return e*t},1),Gl=ko("round"),Zl=mo(function(e,t){return e-t},0);return pr.after=function(e,t){if("function"!=typeof t)throw new it(l);return e=ju(e),function(){if(--e<1)return t.apply(this,arguments)}},pr.ary=eu,pr.assign=qu,pr.assignIn=Qu,pr.assignInWith=Ku,pr.assignWith=Yu,pr.at=Gu,pr.before=tu,pr.bind=nu,pr.bindAll=Sl,pr.bindKey=ru,pr.castArray=function(){if(!arguments.length)return[];var e=arguments[0];return gu(e)?e:[e]},pr.chain=za,pr.chunk=function(e,t,n){t=(n?Qo(e,t,n):t===o)?1:Vn(ju(t),0);var i=null==e?0:e.length;if(!i||t<1)return[];for(var a=0,u=0,l=r(Bn(i/t));a<i;)l[u++]=Oi(e,a,a+=t);return l},pr.compact=function(e){for(var t=-1,n=null==e?0:e.length,r=0,i=[];++t<n;){var o=e[t];o&&(i[r++]=o)}return i},pr.concat=function(){var e=arguments.length;if(!e)return[];for(var t=r(e-1),n=arguments[0],i=e;i--;)t[i-1]=arguments[i];return en(gu(n)?no(n):[n],$r(t,1))},pr.cond=function(e){var t=null==e?0:e.length,n=Uo();return e=t?Jt(e,function(e){if("function"!=typeof e[1])throw new it(l);return[n(e[0]),e[1]]}):[],Ci(function(n){for(var r=-1;++r<t;){var i=e[r];if(Vt(i[0],this,n))return Vt(i[1],this,n)}})},pr.conforms=function(e){return function(e){var t=il(e);return function(n){return Ur(n,e,t)}}(Ir(e,d))},pr.constant=Tl,pr.countBy=Wa,pr.create=function(e,t){var n=hr(e);return null==t?n:Rr(n,t)},pr.curry=function e(t,n,r){var i=Eo(t,_,o,o,o,o,o,n=r?o:n);return i.placeholder=e.placeholder,i},pr.curryRight=function e(t,n,r){var i=Eo(t,w,o,o,o,o,o,n=r?o:n);return i.placeholder=e.placeholder,i},pr.debounce=iu,pr.defaults=Zu,pr.defaultsDeep=Xu,pr.defer=ou,pr.delay=au,pr.difference=pa,pr.differenceBy=ha,pr.differenceWith=va,pr.drop=function(e,t,n){var r=null==e?0:e.length;return r?Oi(e,(t=n||t===o?1:ju(t))<0?0:t,r):[]},pr.dropRight=function(e,t,n){var r=null==e?0:e.length;return r?Oi(e,0,(t=r-(t=n||t===o?1:ju(t)))<0?0:t):[]},pr.dropRightWhile=function(e,t){return e&&e.length?Mi(e,Uo(t,3),!0,!0):[]},pr.dropWhile=function(e,t){return e&&e.length?Mi(e,Uo(t,3),!0):[]},pr.fill=function(e,t,n,r){var i=null==e?0:e.length;return i?(n&&"number"!=typeof n&&Qo(e,t,n)&&(n=0,r=i),function(e,t,n,r){var i=e.length;for((n=ju(n))<0&&(n=-n>i?0:i+n),(r=r===o||r>i?i:ju(r))<0&&(r+=i),r=n>r?0:Wu(r);n<r;)e[n++]=t;return e}(e,t,n,r)):[]},pr.filter=function(e,t){return(gu(e)?Gt:Hr)(e,Uo(t,3))},pr.flatMap=function(e,t){return $r(Ga(e,t),1)},pr.flatMapDeep=function(e,t){return $r(Ga(e,t),A)},pr.flatMapDepth=function(e,t,n){return n=n===o?1:ju(n),$r(Ga(e,t),n)},pr.flatten=ya,pr.flattenDeep=function(e){return(null==e?0:e.length)?$r(e,A):[]},pr.flattenDepth=function(e,t){return(null==e?0:e.length)?$r(e,t=t===o?1:ju(t)):[]},pr.flip=function(e){return Eo(e,S)},pr.flow=Nl,pr.flowRight=Pl,pr.fromPairs=function(e){for(var t=-1,n=null==e?0:e.length,r={};++t<n;){var i=e[t];r[i[0]]=i[1]}return r},pr.functions=function(e){return null==e?[]:Yr(e,il(e))},pr.functionsIn=function(e){return null==e?[]:Yr(e,ol(e))},pr.groupBy=Qa,pr.initial=function(e){return(null==e?0:e.length)?Oi(e,0,-1):[]},pr.intersection=_a,pr.intersectionBy=wa,pr.intersectionWith=ka,pr.invert=tl,pr.invertBy=nl,pr.invokeMap=Ka,pr.iteratee=Rl,pr.keyBy=Ya,pr.keys=il,pr.keysIn=ol,pr.map=Ga,pr.mapKeys=function(e,t){var n={};return t=Uo(t,3),Qr(e,function(e,r,i){Lr(n,t(e,r,i),e)}),n},pr.mapValues=function(e,t){var n={};return t=Uo(t,3),Qr(e,function(e,r,i){Lr(n,r,t(e,r,i))}),n},pr.matches=function(e){return pi(Ir(e,d))},pr.matchesProperty=function(e,t){return hi(e,Ir(t,d))},pr.memoize=uu,pr.merge=al,pr.mergeWith=ul,pr.method=Ll,pr.methodOf=Al,pr.mixin=Dl,pr.negate=lu,pr.nthArg=function(e){return e=ju(e),Ci(function(t){return mi(t,e)})},pr.omit=ll,pr.omitBy=function(e,t){return sl(e,lu(Uo(t)))},pr.once=function(e){return tu(2,e)},pr.orderBy=function(e,t,n,r){return null==e?[]:(gu(t)||(t=null==t?[]:[t]),gu(n=r?o:n)||(n=null==n?[]:[n]),gi(e,t,n))},pr.over=Ul,pr.overArgs=cu,pr.overEvery=Fl,pr.overSome=Bl,pr.partial=su,pr.partialRight=fu,pr.partition=Za,pr.pick=cl,pr.pickBy=sl,pr.property=zl,pr.propertyOf=function(e){return function(t){return null==e?o:Gr(e,t)}},pr.pull=xa,pr.pullAll=Ea,pr.pullAllBy=function(e,t,n){return e&&e.length&&t&&t.length?bi(e,t,Uo(n,2)):e},pr.pullAllWith=function(e,t,n){return e&&e.length&&t&&t.length?bi(e,t,o,n):e},pr.pullAt=Sa,pr.range=Ml,pr.rangeRight=jl,pr.rearg=du,pr.reject=function(e,t){return(gu(e)?Gt:Hr)(e,lu(Uo(t,3)))},pr.remove=function(e,t){var n=[];if(!e||!e.length)return n;var r=-1,i=[],o=e.length;for(t=Uo(t,3);++r<o;){var a=e[r];t(a,r,e)&&(n.push(a),i.push(r))}return _i(e,i),n},pr.rest=function(e,t){if("function"!=typeof e)throw new it(l);return Ci(e,t=t===o?t:ju(t))},pr.reverse=Ta,pr.sampleSize=function(e,t,n){return t=(n?Qo(e,t,n):t===o)?1:ju(t),(gu(e)?Er:Ei)(e,t)},pr.set=function(e,t,n){return null==e?e:Si(e,t,n)},pr.setWith=function(e,t,n,r){return r="function"==typeof r?r:o,null==e?e:Si(e,t,n,r)},pr.shuffle=function(e){return(gu(e)?Sr:Pi)(e)},pr.slice=function(e,t,n){var r=null==e?0:e.length;return r?(n&&"number"!=typeof n&&Qo(e,t,n)?(t=0,n=r):(t=null==t?0:ju(t),n=n===o?r:ju(n)),Oi(e,t,n)):[]},pr.sortBy=Xa,pr.sortedUniq=function(e){return e&&e.length?Di(e):[]},pr.sortedUniqBy=function(e,t){return e&&e.length?Di(e,Uo(t,2)):[]},pr.split=function(e,t,n){return n&&"number"!=typeof n&&Qo(e,t,n)&&(t=n=o),(n=n===o?F:n>>>0)?(e=Vu(e))&&("string"==typeof t||null!=t&&!Lu(t))&&!(t=Ui(t))&&En(e)?Ki(Ln(e),0,n):e.split(t,n):[]},pr.spread=function(e,t){if("function"!=typeof e)throw new it(l);return t=null==t?0:Vn(ju(t),0),Ci(function(n){var r=n[t],i=Ki(n,0,t);return r&&en(i,r),Vt(e,this,i)})},pr.tail=function(e){var t=null==e?0:e.length;return t?Oi(e,1,t):[]},pr.take=function(e,t,n){return e&&e.length?Oi(e,0,(t=n||t===o?1:ju(t))<0?0:t):[]},pr.takeRight=function(e,t,n){var r=null==e?0:e.length;return r?Oi(e,(t=r-(t=n||t===o?1:ju(t)))<0?0:t,r):[]},pr.takeRightWhile=function(e,t){return e&&e.length?Mi(e,Uo(t,3),!1,!0):[]},pr.takeWhile=function(e,t){return e&&e.length?Mi(e,Uo(t,3)):[]},pr.tap=function(e,t){return t(e),e},pr.throttle=function(e,t,n){var r=!0,i=!0;if("function"!=typeof e)throw new it(l);return Tu(n)&&(r="leading"in n?!!n.leading:r,i="trailing"in n?!!n.trailing:i),iu(e,t,{leading:r,maxWait:t,trailing:i})},pr.thru=Ma,pr.toArray=zu,pr.toPairs=fl,pr.toPairsIn=dl,pr.toPath=function(e){return gu(e)?Jt(e,sa):Iu(e)?[e]:no(ca(Vu(e)))},pr.toPlainObject=$u,pr.transform=function(e,t,n){var r=gu(e),i=r||wu(e)||Uu(e);if(t=Uo(t,4),null==n){var o=e&&e.constructor;n=i?r?new o:[]:Tu(e)&&xu(o)?hr(Rt(e)):{}}return(i?Qt:Qr)(e,function(e,r,i){return t(n,e,r,i)}),n},pr.unary=function(e){return eu(e,1)},pr.union=Na,pr.unionBy=Pa,pr.unionWith=Oa,pr.uniq=function(e){return e&&e.length?Fi(e):[]},pr.uniqBy=function(e,t){return e&&e.length?Fi(e,Uo(t,2)):[]},pr.uniqWith=function(e,t){return t="function"==typeof t?t:o,e&&e.length?Fi(e,o,t):[]},pr.unset=function(e,t){return null==e||Bi(e,t)},pr.unzip=Ra,pr.unzipWith=La,pr.update=function(e,t,n){return null==e?e:zi(e,t,Vi(n))},pr.updateWith=function(e,t,n,r){return r="function"==typeof r?r:o,null==e?e:zi(e,t,Vi(n),r)},pr.values=pl,pr.valuesIn=function(e){return null==e?[]:yn(e,ol(e))},pr.without=Aa,pr.words=xl,pr.wrap=function(e,t){return su(Vi(t),e)},pr.xor=Da,pr.xorBy=Ia,pr.xorWith=Ua,pr.zip=Fa,pr.zipObject=function(e,t){return Hi(e||[],t||[],Nr)},pr.zipObjectDeep=function(e,t){return Hi(e||[],t||[],Si)},pr.zipWith=Ba,pr.entries=fl,pr.entriesIn=dl,pr.extend=Qu,pr.extendWith=Ku,Dl(pr,pr),pr.add=$l,pr.attempt=El,pr.camelCase=hl,pr.capitalize=vl,pr.ceil=Vl,pr.clamp=function(e,t,n){return n===o&&(n=t,t=o),n!==o&&(n=(n=Hu(n))==n?n:0),t!==o&&(t=(t=Hu(t))==t?t:0),Dr(Hu(e),t,n)},pr.clone=function(e){return Ir(e,h)},pr.cloneDeep=function(e){return Ir(e,d|h)},pr.cloneDeepWith=function(e,t){return Ir(e,d|h,t="function"==typeof t?t:o)},pr.cloneWith=function(e,t){return Ir(e,h,t="function"==typeof t?t:o)},pr.conformsTo=function(e,t){return null==t||Ur(e,t,il(t))},pr.deburr=ml,pr.defaultTo=function(e,t){return null==e||e!=e?t:e},pr.divide=ql,pr.endsWith=function(e,t,n){e=Vu(e),t=Ui(t);var r=e.length,i=n=n===o?r:Dr(ju(n),0,r);return(n-=t.length)>=0&&e.slice(n,i)==t},pr.eq=pu,pr.escape=function(e){return(e=Vu(e))&&Ee.test(e)?e.replace(Ce,Cn):e},pr.escapeRegExp=function(e){return(e=Vu(e))&&Ae.test(e)?e.replace(Le,"\\$&"):e},pr.every=function(e,t,n){var r=gu(e)?Yt:jr;return n&&Qo(e,t,n)&&(t=o),r(e,Uo(t,3))},pr.find=Ha,pr.findIndex=ma,pr.findKey=function(e,t){return an(e,Uo(t,3),Qr)},pr.findLast=$a,pr.findLastIndex=ga,pr.findLastKey=function(e,t){return an(e,Uo(t,3),Kr)},pr.floor=Ql,pr.forEach=Va,pr.forEachRight=qa,pr.forIn=function(e,t){return null==e?e:Vr(e,Uo(t,3),ol)},pr.forInRight=function(e,t){return null==e?e:qr(e,Uo(t,3),ol)},pr.forOwn=function(e,t){return e&&Qr(e,Uo(t,3))},pr.forOwnRight=function(e,t){return e&&Kr(e,Uo(t,3))},pr.get=Ju,pr.gt=hu,pr.gte=vu,pr.has=function(e,t){return null!=e&&Ho(e,t,ei)},pr.hasIn=el,pr.head=ba,pr.identity=Ol,pr.includes=function(e,t,n,r){e=bu(e)?e:pl(e),n=n&&!r?ju(n):0;var i=e.length;return n<0&&(n=Vn(i+n,0)),Du(e)?n<=i&&e.indexOf(t,n)>-1:!!i&&ln(e,t,n)>-1},pr.indexOf=function(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var i=null==n?0:ju(n);return i<0&&(i=Vn(r+i,0)),ln(e,t,i)},pr.inRange=function(e,t,n){return t=Mu(t),n===o?(n=t,t=0):n=Mu(n),function(e,t,n){return e>=qn(t,n)&&e<Vn(t,n)}(e=Hu(e),t,n)},pr.invoke=rl,pr.isArguments=mu,pr.isArray=gu,pr.isArrayBuffer=yu,pr.isArrayLike=bu,pr.isArrayLikeObject=_u,pr.isBoolean=function(e){return!0===e||!1===e||Nu(e)&&Xr(e)==$},pr.isBuffer=wu,pr.isDate=ku,pr.isElement=function(e){return Nu(e)&&1===e.nodeType&&!Ru(e)},pr.isEmpty=function(e){if(null==e)return!0;if(bu(e)&&(gu(e)||"string"==typeof e||"function"==typeof e.splice||wu(e)||Uu(e)||mu(e)))return!e.length;var t=Wo(e);if(t==G||t==ne)return!e.size;if(Zo(e))return!ci(e).length;for(var n in e)if(st.call(e,n))return!1;return!0},pr.isEqual=function(e,t){return oi(e,t)},pr.isEqualWith=function(e,t,n){var r=(n="function"==typeof n?n:o)?n(e,t):o;return r===o?oi(e,t,o,n):!!r},pr.isError=Cu,pr.isFinite=function(e){return"number"==typeof e&&Wn(e)},pr.isFunction=xu,pr.isInteger=Eu,pr.isLength=Su,pr.isMap=Pu,pr.isMatch=function(e,t){return e===t||ai(e,t,Bo(t))},pr.isMatchWith=function(e,t,n){return n="function"==typeof n?n:o,ai(e,t,Bo(t),n)},pr.isNaN=function(e){return Ou(e)&&e!=+e},pr.isNative=function(e){if(Go(e))throw new Xe(u);return ui(e)},pr.isNil=function(e){return null==e},pr.isNull=function(e){return null===e},pr.isNumber=Ou,pr.isObject=Tu,pr.isObjectLike=Nu,pr.isPlainObject=Ru,pr.isRegExp=Lu,pr.isSafeInteger=function(e){return Eu(e)&&e>=-D&&e<=D},pr.isSet=Au,pr.isString=Du,pr.isSymbol=Iu,pr.isTypedArray=Uu,pr.isUndefined=function(e){return e===o},pr.isWeakMap=function(e){return Nu(e)&&Wo(e)==ae},pr.isWeakSet=function(e){return Nu(e)&&Xr(e)==ue},pr.join=function(e,t){return null==e?"":Hn.call(e,t)},pr.kebabCase=gl,pr.last=Ca,pr.lastIndexOf=function(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var i=r;return n!==o&&(i=(i=ju(n))<0?Vn(r+i,0):qn(i,r-1)),t==t?function(e,t,n){for(var r=n+1;r--;)if(e[r]===t)return r;return r}(e,t,i):un(e,sn,i,!0)},pr.lowerCase=yl,pr.lowerFirst=bl,pr.lt=Fu,pr.lte=Bu,pr.max=function(e){return e&&e.length?Wr(e,Ol,Jr):o},pr.maxBy=function(e,t){return e&&e.length?Wr(e,Uo(t,2),Jr):o},pr.mean=function(e){return fn(e,Ol)},pr.meanBy=function(e,t){return fn(e,Uo(t,2))},pr.min=function(e){return e&&e.length?Wr(e,Ol,fi):o},pr.minBy=function(e,t){return e&&e.length?Wr(e,Uo(t,2),fi):o},pr.stubArray=Wl,pr.stubFalse=Hl,pr.stubObject=function(){return{}},pr.stubString=function(){return""},pr.stubTrue=function(){return!0},pr.multiply=Yl,pr.nth=function(e,t){return e&&e.length?mi(e,ju(t)):o},pr.noConflict=function(){return At._===this&&(At._=vt),this},pr.noop=Il,pr.now=Ja,pr.pad=function(e,t,n){e=Vu(e);var r=(t=ju(t))?Rn(e):0;if(!t||r>=t)return e;var i=(t-r)/2;return yo(zn(i),n)+e+yo(Bn(i),n)},pr.padEnd=function(e,t,n){e=Vu(e);var r=(t=ju(t))?Rn(e):0;return t&&r<t?e+yo(t-r,n):e},pr.padStart=function(e,t,n){e=Vu(e);var r=(t=ju(t))?Rn(e):0;return t&&r<t?yo(t-r,n)+e:e},pr.parseInt=function(e,t,n){return n||null==t?t=0:t&&(t=+t),Kn(Vu(e).replace(Ie,""),t||0)},pr.random=function(e,t,n){if(n&&"boolean"!=typeof n&&Qo(e,t,n)&&(t=n=o),n===o&&("boolean"==typeof t?(n=t,t=o):"boolean"==typeof e&&(n=e,e=o)),e===o&&t===o?(e=0,t=1):(e=Mu(e),t===o?(t=e,e=0):t=Mu(t)),e>t){var r=e;e=t,t=r}if(n||e%1||t%1){var i=Yn();return qn(e+i*(t-e+Pt("1e-"+((i+"").length-1))),t)}return wi(e,t)},pr.reduce=function(e,t,n){var r=gu(e)?tn:hn,i=arguments.length<3;return r(e,Uo(t,4),n,i,zr)},pr.reduceRight=function(e,t,n){var r=gu(e)?nn:hn,i=arguments.length<3;return r(e,Uo(t,4),n,i,Mr)},pr.repeat=function(e,t,n){return t=(n?Qo(e,t,n):t===o)?1:ju(t),ki(Vu(e),t)},pr.replace=function(){var e=arguments,t=Vu(e[0]);return e.length<3?t:t.replace(e[1],e[2])},pr.result=function(e,t,n){var r=-1,i=(t=qi(t,e)).length;for(i||(i=1,e=o);++r<i;){var a=null==e?o:e[sa(t[r])];a===o&&(r=i,a=n),e=xu(a)?a.call(e):a}return e},pr.round=Gl,pr.runInContext=e,pr.sample=function(e){return(gu(e)?xr:xi)(e)},pr.size=function(e){if(null==e)return 0;if(bu(e))return Du(e)?Rn(e):e.length;var t=Wo(e);return t==G||t==ne?e.size:ci(e).length},pr.snakeCase=_l,pr.some=function(e,t,n){var r=gu(e)?rn:Ri;return n&&Qo(e,t,n)&&(t=o),r(e,Uo(t,3))},pr.sortedIndex=function(e,t){return Li(e,t)},pr.sortedIndexBy=function(e,t,n){return Ai(e,t,Uo(n,2))},pr.sortedIndexOf=function(e,t){var n=null==e?0:e.length;if(n){var r=Li(e,t);if(r<n&&pu(e[r],t))return r}return-1},pr.sortedLastIndex=function(e,t){return Li(e,t,!0)},pr.sortedLastIndexBy=function(e,t,n){return Ai(e,t,Uo(n,2),!0)},pr.sortedLastIndexOf=function(e,t){if(null==e?0:e.length){var n=Li(e,t,!0)-1;if(pu(e[n],t))return n}return-1},pr.startCase=wl,pr.startsWith=function(e,t,n){return e=Vu(e),n=null==n?0:Dr(ju(n),0,e.length),t=Ui(t),e.slice(n,n+t.length)==t},pr.subtract=Zl,pr.sum=function(e){return e&&e.length?vn(e,Ol):0},pr.sumBy=function(e,t){return e&&e.length?vn(e,Uo(t,2)):0},pr.template=function(e,t,n){var r=pr.templateSettings;n&&Qo(e,t,n)&&(t=o),e=Vu(e),t=Ku({},t,r,So);var i,a,u=Ku({},t.imports,r.imports,So),l=il(u),c=yn(u,l),s=0,f=t.interpolate||Ge,d="__p += '",p=nt((t.escape||Ge).source+"|"+f.source+"|"+(f===Ne?We:Ge).source+"|"+(t.evaluate||Ge).source+"|$","g"),h="//# sourceURL="+(st.call(t,"sourceURL")?(t.sourceURL+"").replace(/[\r\n]/g," "):"lodash.templateSources["+ ++Et+"]")+"\n";e.replace(p,function(t,n,r,o,u,l){return r||(r=o),d+=e.slice(s,l).replace(Ze,xn),n&&(i=!0,d+="' +\n__e("+n+") +\n'"),u&&(a=!0,d+="';\n"+u+";\n__p += '"),r&&(d+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),s=l+t.length,t}),d+="';\n";var v=st.call(t,"variable")&&t.variable;v||(d="with (obj) {\n"+d+"\n}\n"),d=(a?d.replace(be,""):d).replace(_e,"$1").replace(we,"$1;"),d="function("+(v||"obj")+") {\n"+(v?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(i?", __e = _.escape":"")+(a?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+d+"return __p\n}";var m=El(function(){return Je(l,h+"return "+d).apply(o,c)});if(m.source=d,Cu(m))throw m;return m},pr.times=function(e,t){if((e=ju(e))<1||e>D)return[];var n=F,r=qn(e,F);t=Uo(t),e-=F;for(var i=mn(r,t);++n<e;)t(n);return i},pr.toFinite=Mu,pr.toInteger=ju,pr.toLength=Wu,pr.toLower=function(e){return Vu(e).toLowerCase()},pr.toNumber=Hu,pr.toSafeInteger=function(e){return e?Dr(ju(e),-D,D):0===e?e:0},pr.toString=Vu,pr.toUpper=function(e){return Vu(e).toUpperCase()},pr.trim=function(e,t,n){if((e=Vu(e))&&(n||t===o))return e.replace(De,"");if(!e||!(t=Ui(t)))return e;var r=Ln(e),i=Ln(t);return Ki(r,_n(r,i),wn(r,i)+1).join("")},pr.trimEnd=function(e,t,n){if((e=Vu(e))&&(n||t===o))return e.replace(Ue,"");if(!e||!(t=Ui(t)))return e;var r=Ln(e);return Ki(r,0,wn(r,Ln(t))+1).join("")},pr.trimStart=function(e,t,n){if((e=Vu(e))&&(n||t===o))return e.replace(Ie,"");if(!e||!(t=Ui(t)))return e;var r=Ln(e);return Ki(r,_n(r,Ln(t))).join("")},pr.truncate=function(e,t){var n=T,r=N;if(Tu(t)){var i="separator"in t?t.separator:i;n="length"in t?ju(t.length):n,r="omission"in t?Ui(t.omission):r}var a=(e=Vu(e)).length;if(En(e)){var u=Ln(e);a=u.length}if(n>=a)return e;var l=n-Rn(r);if(l<1)return r;var c=u?Ki(u,0,l).join(""):e.slice(0,l);if(i===o)return c+r;if(u&&(l+=c.length-l),Lu(i)){if(e.slice(l).search(i)){var s,f=c;for(i.global||(i=nt(i.source,Vu(He.exec(i))+"g")),i.lastIndex=0;s=i.exec(f);)var d=s.index;c=c.slice(0,d===o?l:d)}}else if(e.indexOf(Ui(i),l)!=l){var p=c.lastIndexOf(i);p>-1&&(c=c.slice(0,p))}return c+r},pr.unescape=function(e){return(e=Vu(e))&&xe.test(e)?e.replace(ke,An):e},pr.uniqueId=function(e){var t=++ft;return Vu(e)+t},pr.upperCase=kl,pr.upperFirst=Cl,pr.each=Va,pr.eachRight=qa,pr.first=ba,Dl(pr,(Kl={},Qr(pr,function(e,t){st.call(pr.prototype,t)||(Kl[t]=e)}),Kl),{chain:!1}),pr.VERSION="4.17.15",Qt(["bind","bindKey","curry","curryRight","partial","partialRight"],function(e){pr[e].placeholder=pr}),Qt(["drop","take"],function(e,t){gr.prototype[e]=function(n){n=n===o?1:Vn(ju(n),0);var r=this.__filtered__&&!t?new gr(this):this.clone();return r.__filtered__?r.__takeCount__=qn(n,r.__takeCount__):r.__views__.push({size:qn(n,F),type:e+(r.__dir__<0?"Right":"")}),r},gr.prototype[e+"Right"]=function(t){return this.reverse()[e](t).reverse()}}),Qt(["filter","map","takeWhile"],function(e,t){var n=t+1,r=n==R||3==n;gr.prototype[e]=function(e){var t=this.clone();return t.__iteratees__.push({iteratee:Uo(e,3),type:n}),t.__filtered__=t.__filtered__||r,t}}),Qt(["head","last"],function(e,t){var n="take"+(t?"Right":"");gr.prototype[e]=function(){return this[n](1).value()[0]}}),Qt(["initial","tail"],function(e,t){var n="drop"+(t?"":"Right");gr.prototype[e]=function(){return this.__filtered__?new gr(this):this[n](1)}}),gr.prototype.compact=function(){return this.filter(Ol)},gr.prototype.find=function(e){return this.filter(e).head()},gr.prototype.findLast=function(e){return this.reverse().find(e)},gr.prototype.invokeMap=Ci(function(e,t){return"function"==typeof e?new gr(this):this.map(function(n){return ri(n,e,t)})}),gr.prototype.reject=function(e){return this.filter(lu(Uo(e)))},gr.prototype.slice=function(e,t){e=ju(e);var n=this;return n.__filtered__&&(e>0||t<0)?new gr(n):(e<0?n=n.takeRight(-e):e&&(n=n.drop(e)),t!==o&&(n=(t=ju(t))<0?n.dropRight(-t):n.take(t-e)),n)},gr.prototype.takeRightWhile=function(e){return this.reverse().takeWhile(e).reverse()},gr.prototype.toArray=function(){return this.take(F)},Qr(gr.prototype,function(e,t){var n=/^(?:filter|find|map|reject)|While$/.test(t),r=/^(?:head|last)$/.test(t),i=pr[r?"take"+("last"==t?"Right":""):t],a=r||/^find/.test(t);i&&(pr.prototype[t]=function(){var t=this.__wrapped__,u=r?[1]:arguments,l=t instanceof gr,c=u[0],s=l||gu(t),f=function(e){var t=i.apply(pr,en([e],u));return r&&d?t[0]:t};s&&n&&"function"==typeof c&&1!=c.length&&(l=s=!1);var d=this.__chain__,p=!!this.__actions__.length,h=a&&!d,v=l&&!p;if(!a&&s){t=v?t:new gr(this);var m=e.apply(t,u);return m.__actions__.push({func:Ma,args:[f],thisArg:o}),new mr(m,d)}return h&&v?e.apply(this,u):(m=this.thru(f),h?r?m.value()[0]:m.value():m)})}),Qt(["pop","push","shift","sort","splice","unshift"],function(e){var t=ot[e],n=/^(?:push|sort|unshift)$/.test(e)?"tap":"thru",r=/^(?:pop|shift)$/.test(e);pr.prototype[e]=function(){var e=arguments;if(r&&!this.__chain__){var i=this.value();return t.apply(gu(i)?i:[],e)}return this[n](function(n){return t.apply(gu(n)?n:[],e)})}}),Qr(gr.prototype,function(e,t){var n=pr[t];if(n){var r=n.name+"";st.call(ir,r)||(ir[r]=[]),ir[r].push({name:t,func:n})}}),ir[ho(o,y).name]=[{name:"wrapper",func:o}],gr.prototype.clone=function(){var e=new gr(this.__wrapped__);return e.__actions__=no(this.__actions__),e.__dir__=this.__dir__,e.__filtered__=this.__filtered__,e.__iteratees__=no(this.__iteratees__),e.__takeCount__=this.__takeCount__,e.__views__=no(this.__views__),e},gr.prototype.reverse=function(){if(this.__filtered__){var e=new gr(this);e.__dir__=-1,e.__filtered__=!0}else(e=this.clone()).__dir__*=-1;return e},gr.prototype.value=function(){var e=this.__wrapped__.value(),t=this.__dir__,n=gu(e),r=t<0,i=n?e.length:0,o=function(e,t,n){var r=-1,i=n.length;for(;++r<i;){var o=n[r],a=o.size;switch(o.type){case"drop":e+=a;break;case"dropRight":t-=a;break;case"take":t=qn(t,e+a);break;case"takeRight":e=Vn(e,t-a)}}return{start:e,end:t}}(0,i,this.__views__),a=o.start,u=o.end,l=u-a,c=r?u:a-1,s=this.__iteratees__,f=s.length,d=0,p=qn(l,this.__takeCount__);if(!n||!r&&i==l&&p==l)return ji(e,this.__actions__);var h=[];e:for(;l--&&d<p;){for(var v=-1,m=e[c+=t];++v<f;){var g=s[v],y=g.iteratee,b=g.type,_=y(m);if(b==L)m=_;else if(!_){if(b==R)continue e;break e}}h[d++]=m}return h},pr.prototype.at=ja,pr.prototype.chain=function(){return za(this)},pr.prototype.commit=function(){return new mr(this.value(),this.__chain__)},pr.prototype.next=function(){this.__values__===o&&(this.__values__=zu(this.value()));var e=this.__index__>=this.__values__.length;return{done:e,value:e?o:this.__values__[this.__index__++]}},pr.prototype.plant=function(e){for(var t,n=this;n instanceof vr;){var r=da(n);r.__index__=0,r.__values__=o,t?i.__wrapped__=r:t=r;var i=r;n=n.__wrapped__}return i.__wrapped__=e,t},pr.prototype.reverse=function(){var e=this.__wrapped__;if(e instanceof gr){var t=e;return this.__actions__.length&&(t=new gr(this)),(t=t.reverse()).__actions__.push({func:Ma,args:[Ta],thisArg:o}),new mr(t,this.__chain__)}return this.thru(Ta)},pr.prototype.toJSON=pr.prototype.valueOf=pr.prototype.value=function(){return ji(this.__wrapped__,this.__actions__)},pr.prototype.first=pr.prototype.head,Bt&&(pr.prototype[Bt]=function(){return this}),pr}();At._=Dn,(i=function(){return Dn}.call(t,n,t,r))===o||(r.exports=i)}).call(this)}).call(this,n(21),n(24)(e))},416:function(e,t,n){e.exports=n(425)},417:function(e,t,n){var r=n(418);"string"==typeof r&&(r=[[e.i,r,""]]);var i={insert:"head",singleton:!1};n(11)(r,i);r.locals&&(e.exports=r.locals)},418:function(e,t,n){(e.exports=n(9)(!1)).push([e.i,".html-editor {\n  width: 100%;\n  height: 100%;\n  padding: 10px;\n}\n.html-editor iframe {\n  width: 95%;\n  height: 100%;\n  overflow: hidden;\n}\n@media (prefers-color-scheme: dark) {\n  .html-editor > iframe > html {\n    background-color: #000000;\n    color: #ffffff;\n  }\n}\n",""])},419:function(e,t,n){var r=n(420);"string"==typeof r&&(r=[[e.i,r,""]]);var i={insert:"head",singleton:!1};n(11)(r,i);r.locals&&(e.exports=r.locals)},420:function(e,t,n){(e.exports=n(9)(!1)).push([e.i,"html {\n  height: 100%;\n  width: 100%;\n}\nbody {\n  height: 100%;\n  width: 100%;\n  margin: 0;\n  overflow: hidden;\n  overflow-y: auto;\n}\n@media (prefers-color-scheme: dark) {\n  body {\n    background-color: #000000;\n    color: #ffffff;\n  }\n}\n#body {\n  height: 100%;\n  width: 100%;\n  overflow: hidden;\n}\n* {\n  outline: 0px solid transparent;\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n  -webkit-touch-callout: none;\n}\n",""])},425:function(e,t,n){"use strict";n.r(t);var r=n(1),i=n.n(r),o=n(84),a=n.n(o),u=n(36),l=(n(417),n(2)),c=n.n(l);function s(e){return(s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function f(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function d(e){return(d=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function p(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function h(e,t){return(h=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function v(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var m=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),n=function(e,t){return!t||"object"!==s(t)&&"function"!=typeof t?p(e):t}(this,d(t).call(this,e)),v(p(n),"lastCursorY",-1),n.state={content:e.content},n}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&h(e,t)}(t,i.a.Component),n=t,(r=[{key:"UNSAFE_componentWillReceiveProps",value:function(e){e.action&&this.handleAction(e.action),e.content&&this.setState({content:e.content})}},{key:"render",value:function(){return i.a.createElement(u.a,{content:this.state.content,placeholder:"Type your text here",onBound:this.handleBound.bind(this),onChange:this.handleContentChange.bind(this),onCursorChange:this.handleCursorChange.bind(this),onFocus:this.handleFocus.bind(this)})}},{key:"handleBound",value:function(e){this.setState({editor:e})}},{key:"handleContentChange",value:function(e){var t=this;this.newContent=e,this.onceReported?setTimeout(function(){t.newContent===e&&sendIos({content:e})},500):(this.onceReported=!0,sendIos({content:e})),this.sendCursor()}},{key:"handleCursorChange",value:function(){this.sendCursor()}},{key:"handleFocus",value:function(e){var t=this;setTimeout(function(){t.handleCursorChange()},100)}},{key:"sendCursor",value:function(){var e=document.getElementsByTagName("iframe")[0].contentDocument;if(e){var t=e.getSelection().getRangeAt(0).getClientRects();if(!_.isEmpty(t)){var n=t[0].top;this.lastCursorY!=n&&(sendIos({cursorY:n}),this.lastCursorY=n)}}}},{key:"handleAction",value:function(e){switch(e){case"bold":this.state.editor.toggleSelectionTag("b");break;case"italic":this.state.editor.toggleSelectionTag("i");break;case"list-ul":this.state.editor.makeUnorderedList();break;case"list-ol":this.state.editor.makeOrderedList();break;case"indent":this.state.editor.indent();break;case"outdent":this.state.editor.outdent();break;default:console.log("Unhandled action "+e)}}}])&&f(n.prototype,r),o&&f(n,o),t}();function g(e){return(g="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function y(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function b(e,t){return!t||"object"!==g(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function w(e){return(w=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function k(e,t){return(k=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}v(m,"propTypes",{content:c.a.string});var C=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),n=b(this,w(t).call(this,e)),window.setData=function(e){n.setState({data:e})},n.state={component:window.component,data:null},n}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&k(e,t)}(t,i.a.Component),n=t,(r=[{key:"render",value:function(){return"html-editor"===this.state.component?i.a.createElement(m,this.state.data):i.a.createElement("div",null,"Unknown component ",this.state.component)}}])&&y(n.prototype,r),o&&y(n,o),t}();n(419);window.toIosDataId=0,window.toIosData={},window.sendIos=function(e){var t=window.toIosDataId++;window.toIosData[t]=e,window.location="exomind://"+t},window.noop=i.a,window.getData=function(e){var t=window.toIosData[e];return delete window.toIosData[e],JSON.stringify(t)},window._startComponent=function(){try{a.a.render(i.a.createElement(C,null),document.getElementById("body"))}catch(e){throw alert(e),e}},Promise.all([new Promise(function(e){window.addEventListener?window.addEventListener("DOMContentLoaded",e):window.attachEvent("onload",e)})]).then(function(){window._startComponent(),sendIos("ready")})},49:function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,i=Object.prototype.hasOwnProperty,o=Object.prototype.propertyIsEnumerable;function a(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(e){r[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,u,l=a(e),c=1;c<arguments.length;c++){for(var s in n=Object(arguments[c]))i.call(n,s)&&(l[s]=n[s]);if(r){u=r(n);for(var f=0;f<u.length;f++)o.call(n,u[f])&&(l[u[f]]=n[u[f]])}}return l}},83:function(e,t,n){!function(t,n){"use strict";function r(e,t,n){this.root=this.currentNode=e,this.nodeType=t,this.filter=n||le}function i(e){return e.nodeType===I&&!!se[e.nodeName]}function o(e){switch(e.nodeType){case U:return de;case I:case B:if(ie&&ve.has(e))return ve.get(e);break;default:return fe}var t;return t=function(e,t){for(var n=e.length;n--;)if(!t(e[n]))return!1;return!0}(e.childNodes,a)?ce.test(e.nodeName)?de:pe:he,ie&&ve.set(e,t),t}function a(e){return o(e)===de}function u(e){return o(e)===pe}function l(e){return o(e)===he}function c(e,t){var n=new r(t,z,u);return n.currentNode=e,n}function s(e,t){return(e=c(e,t).previousNode())!==t?e:null}function f(e,t){return(e=c(e,t).nextNode())!==t?e:null}function d(e){return!e.textContent&&!e.querySelector("IMG")}function p(e,t){return!i(e)&&e.nodeType===t.nodeType&&e.nodeName===t.nodeName&&"A"!==e.nodeName&&e.className===t.className&&(!e.style&&!t.style||e.style.cssText===t.style.cssText)}function h(e,t,n){if(e.nodeName!==t)return!1;for(var r in n)if(e.getAttribute(r)!==n[r])return!1;return!0}function v(e,t,n,r){for(;e&&e!==t;){if(h(e,n,r))return e;e=e.parentNode}return null}function m(e,t){for(;t;){if(t===e)return!0;t=t.parentNode}return!1}function g(e){var t=e.nodeType;return t===I||t===B?e.childNodes.length:e.length||0}function y(e){var t=e.parentNode;return t&&t.removeChild(e),e}function b(e,t){var n=e.parentNode;n&&n.replaceChild(t,e)}function _(e){for(var t=e.ownerDocument.createDocumentFragment(),n=e.childNodes,r=n?n.length:0;r--;)t.appendChild(e.firstChild);return t}function w(e,t,r,i){var o,a,u,l=e.createElement(t);if(r instanceof Array&&(i=r,r=null),r)for(o in r)r[o]!==n&&l.setAttribute(o,r[o]);if(i)for(a=0,u=i.length;a<u;a+=1)l.appendChild(i[a]);return l}function k(e,t){var n,r,o=t.__squire__,u=e.ownerDocument,l=e;if(e===t&&((r=e.firstChild)&&"BR"!==r.nodeName||(n=o.createDefaultBlock(),r?e.replaceChild(n,r):e.appendChild(n),e=n,n=null)),e.nodeType===U)return l;if(a(e)){for(r=e.firstChild;te&&r&&r.nodeType===U&&!r.data;)e.removeChild(r),r=e.firstChild;r||(te?(n=u.createTextNode(M),o._didAddZWS()):n=u.createTextNode(""))}else if(ee){for(;e.nodeType!==U&&!i(e);){if(!(r=e.firstChild)){n=u.createTextNode("");break}e=r}e.nodeType===U?/^ +$/.test(e.data)&&(e.data=""):i(e)&&e.parentNode.insertBefore(u.createTextNode(""),e)}else if(!e.querySelector("BR"))for(n=w(u,"BR");(r=e.lastElementChild)&&!a(r);)e=r;if(n)try{e.appendChild(n)}catch(t){o.didError({name:"Squire: fixCursor – "+t,message:"Parent: "+e.nodeName+"/"+e.innerHTML+" appendChild: "+n.nodeName})}return l}function C(e,t){var n,r,i,o,u=e.childNodes,c=e.ownerDocument,s=null,f=t.__squire__._config;for(n=0,r=u.length;n<r;n+=1)!(o="BR"===(i=u[n]).nodeName)&&a(i)?(s||(s=w(c,f.blockTag,f.blockAttributes)),s.appendChild(i),n-=1,r-=1):(o||s)&&(s||(s=w(c,f.blockTag,f.blockAttributes)),k(s,t),o?e.replaceChild(s,i):(e.insertBefore(s,i),n+=1,r+=1),s=null),l(i)&&C(i,t);return s&&e.appendChild(k(s,t)),e}function x(e,t,n,r){var i,o,a,u=e.nodeType;if(u===U&&e!==n)return x(e.parentNode,e.splitText(t),n,r);if(u===I){if("number"==typeof t&&(t=t<e.childNodes.length?e.childNodes[t]:null),e===n)return t;for(i=e.parentNode,o=e.cloneNode(!1);t;)a=t.nextSibling,o.appendChild(t),t=a;return"OL"===e.nodeName&&v(e,r,"BLOCKQUOTE")&&(o.start=(+e.start||1)+e.childNodes.length-1),k(e,r),k(o,r),(a=e.nextSibling)?i.insertBefore(o,a):i.appendChild(o),x(i,o,n,r)}return t}function E(e,t){if(e.nodeType===U&&(e=e.parentNode),e.nodeType===I){var n={startContainer:t.startContainer,startOffset:t.startOffset,endContainer:t.endContainer,endOffset:t.endOffset};(function e(t,n){for(var r,i,o,u=t.childNodes,l=u.length,c=[];l--;)if(r=u[l],i=l&&u[l-1],l&&a(r)&&p(r,i)&&!se[r.nodeName])n.startContainer===r&&(n.startContainer=i,n.startOffset+=g(i)),n.endContainer===r&&(n.endContainer=i,n.endOffset+=g(i)),n.startContainer===t&&(n.startOffset>l?n.startOffset-=1:n.startOffset===l&&(n.startContainer=i,n.startOffset=g(i))),n.endContainer===t&&(n.endOffset>l?n.endOffset-=1:n.endOffset===l&&(n.endContainer=i,n.endOffset=g(i))),y(r),r.nodeType===U?i.appendData(r.data):c.push(_(r));else if(r.nodeType===I){for(o=c.length;o--;)r.appendChild(c.pop());e(r,n)}})(e,n),t.setStart(n.startContainer,n.startOffset),t.setEnd(n.endContainer,n.endOffset)}}function S(e,t,n,r){for(var i,o,a,u=t;(i=u.parentNode)&&i!==r&&i.nodeType===I&&1===i.childNodes.length;)u=i;y(u),a=e.childNodes.length,(o=e.lastChild)&&"BR"===o.nodeName&&(e.removeChild(o),a-=1),e.appendChild(_(t)),n.setStart(e,a),n.collapse(!0),E(e,n),Y&&(o=e.lastChild)&&"BR"===o.nodeName&&e.removeChild(o)}function T(e,t){var n,r,i=e.previousSibling,o=e.firstChild,a=e.ownerDocument,u="LI"===e.nodeName;if(!u||o&&/^[OU]L$/.test(o.nodeName))if(i&&p(i,e)){if(!l(i)){if(!u)return;(r=w(a,"DIV")).appendChild(_(i)),i.appendChild(r)}y(e),n=!l(e),i.appendChild(_(e)),n&&C(i,t),o&&T(o,t)}else u&&(i=w(a,"DIV"),e.insertBefore(i,o),k(i,t))}function N(e){this.isShiftDown=e.shiftKey}function P(e,t,n){var r,i;if(e||(e={}),t)for(r in t)!n&&r in e||(i=t[r],e[r]=i&&i.constructor===Object?P(e[r],i,n):i);return e}function O(e,t){e.nodeType===F&&(e=e.body);var n,r=e.ownerDocument,i=r.defaultView;this._win=i,this._doc=r,this._root=e,this._events={},this._isFocused=!1,this._lastSelection=null,ne&&this.addEventListener("beforedeactivate",this.getSelection),this._hasZWS=!1,this._lastAnchorNode=null,this._lastFocusNode=null,this._path="",this._willUpdatePath=!1,"onselectionchange"in r?this.addEventListener("selectionchange",this._updatePathOnEvent):(this.addEventListener("keyup",this._updatePathOnEvent),this.addEventListener("mouseup",this._updatePathOnEvent)),this._undoIndex=-1,this._undoStack=[],this._undoStackLength=0,this._isInUndoState=!1,this._ignoreChange=!1,this._ignoreAllChanges=!1,re?((n=new MutationObserver(this._docWasChanged.bind(this))).observe(e,{childList:!0,attributes:!0,characterData:!0,subtree:!0}),this._mutation=n):this.addEventListener("keyup",this._keyUpDetectChange),this._restoreSelection=!1,this.addEventListener("blur",R),this.addEventListener("mousedown",L),this.addEventListener("touchstart",L),this.addEventListener("focus",A),this._awaitingPaste=!1,this.addEventListener(K?"beforecut":"cut",Ze),this.addEventListener("copy",Xe),this.addEventListener("keydown",N),this.addEventListener("keyup",N),this.addEventListener(K?"beforepaste":"paste",Je),this.addEventListener("drop",et),this.addEventListener(Y?"keypress":"keydown",Le),this._keyHandlers=Object.create(Ue),this.setConfig(t),K&&(i.Text.prototype.splitText=function(e){var t=this.ownerDocument.createTextNode(this.data.slice(e)),n=this.nextSibling,r=this.parentNode,i=this.length-e;return n?r.insertBefore(t,n):r.appendChild(t),i&&this.deleteData(e,i),t}),e.setAttribute("contenteditable","true");try{r.execCommand("enableObjectResizing",!1,"false"),r.execCommand("enableInlineTableEditing",!1,"false")}catch(e){}e.__squire__=this,this.setHTML("")}function R(){this._restoreSelection=!0}function L(){this._restoreSelection=!1}function A(){this._restoreSelection&&this.setSelection(this._lastSelection)}function D(e,t,n){var r,i;for(r=t.firstChild;r;r=i){if(i=r.nextSibling,a(r)){if(r.nodeType===U||"BR"===r.nodeName||"IMG"===r.nodeName){n.appendChild(r);continue}}else if(u(r)){n.appendChild(e.createDefaultBlock([D(e,r,e._doc.createDocumentFragment())]));continue}D(e,r,n)}return n}var I=1,U=3,F=9,B=11,z=1,M="​",j=t.defaultView,W=navigator.userAgent,H=/Android/.test(W),$=/iP(?:ad|hone|od)/.test(W),V=/Mac OS X/.test(W),q=/Windows NT/.test(W),Q=/Gecko\//.test(W),K=/Trident\/[456]\./.test(W),Y=!!j.opera,G=/Edge\//.test(W),Z=!G&&/WebKit\//.test(W),X=/Trident\/[4567]\./.test(W),J=V?"meta-":"ctrl-",ee=K||Y,te=K||Z,ne=K,re="undefined"!=typeof MutationObserver,ie="undefined"!=typeof WeakMap,oe=/[^ \t\r\n]/,ae=Array.prototype.indexOf;Object.create||(Object.create=function(e){var t=function(){};return t.prototype=e,new t});var ue={1:1,2:2,3:4,8:128,9:256,11:1024},le=function(){return!0};r.prototype.nextNode=function(){for(var e,t=this.currentNode,n=this.root,r=this.nodeType,i=this.filter;;){for(e=t.firstChild;!e&&t&&t!==n;)(e=t.nextSibling)||(t=t.parentNode);if(!e)return null;if(ue[e.nodeType]&r&&i(e))return this.currentNode=e,e;t=e}},r.prototype.previousNode=function(){for(var e,t=this.currentNode,n=this.root,r=this.nodeType,i=this.filter;;){if(t===n)return null;if(e=t.previousSibling)for(;t=e.lastChild;)e=t;else e=t.parentNode;if(!e)return null;if(ue[e.nodeType]&r&&i(e))return this.currentNode=e,e;t=e}},r.prototype.previousPONode=function(){for(var e,t=this.currentNode,n=this.root,r=this.nodeType,i=this.filter;;){for(e=t.lastChild;!e&&t&&t!==n;)(e=t.previousSibling)||(t=t.parentNode);if(!e)return null;if(ue[e.nodeType]&r&&i(e))return this.currentNode=e,e;t=e}};var ce=/^(?:#text|A(?:BBR|CRONYM)?|B(?:R|D[IO])?|C(?:ITE|ODE)|D(?:ATA|EL|FN)|EM|FONT|HR|I(?:FRAME|MG|NPUT|NS)?|KBD|Q|R(?:P|T|UBY)|S(?:AMP|MALL|PAN|TR(?:IKE|ONG)|U[BP])?|TIME|U|VAR|WBR)$/,se={BR:1,HR:1,IFRAME:1,IMG:1,INPUT:1},fe=0,de=1,pe=2,he=3,ve=ie?new WeakMap:null,me=function(e,t){for(var n=e.childNodes;t&&e.nodeType===I;)t=(n=(e=n[t-1]).childNodes).length;return e},ge=function(e,t){if(e.nodeType===I){var n=e.childNodes;if(t<n.length)e=n[t];else{for(;e&&!e.nextSibling;)e=e.parentNode;e&&(e=e.nextSibling)}}return e},ye=function(e,t){var n,r,i,o,a=e.startContainer,u=e.startOffset,l=e.endContainer,c=e.endOffset;a.nodeType===U?(r=(n=a.parentNode).childNodes,u===a.length?(u=ae.call(r,a)+1,e.collapsed&&(l=n,c=u)):(u&&(o=a.splitText(u),l===a?(c-=u,l=o):l===n&&(c+=1),a=o),u=ae.call(r,a)),a=n):r=a.childNodes,u===(i=r.length)?a.appendChild(t):a.insertBefore(t,r[u]),a===l&&(c+=r.length-i),e.setStart(a,u),e.setEnd(l,c)},be=function(e,t,n){var r=e.startContainer,i=e.startOffset,o=e.endContainer,a=e.endOffset;t||(t=e.commonAncestorContainer),t.nodeType===U&&(t=t.parentNode);for(var u,l,c,s,f,d=x(o,a,t,n),p=x(r,i,t,n),h=t.ownerDocument.createDocumentFragment();p!==d;)u=p.nextSibling,h.appendChild(p),p=u;return r=t,i=d?ae.call(t.childNodes,d):t.childNodes.length,(l=(c=t.childNodes[i])&&c.previousSibling)&&l.nodeType===U&&c.nodeType===U&&(r=l,i=l.length,s=l.data,f=c.data," "===s.charAt(s.length-1)&&" "===f.charAt(0)&&(f=" "+f.slice(1)),l.appendData(f),y(c)),e.setStart(r,i),e.collapse(!0),k(t,n),h},_e=function(e,t){var n,r,i=Ee(e,t),o=Se(e,t),a=i!==o;return Ce(e),xe(e,i,o,t),n=be(e,null,t),Ce(e),a&&(o=Se(e,t),i&&o&&i!==o&&S(i,o,e,t)),i&&k(i,t),(r=t.firstChild)&&"BR"!==r.nodeName?e.collapse(!0):(k(t,t),e.selectNodeContents(t.firstChild)),n},we=function(e,t,n){var r,i,o,u,c,p,h,m,b,_,w;for(C(t,n),r=t;r=f(r,n);)k(r,n);if(e.collapsed||_e(e,n),Ce(e),e.collapse(!1),u=v(e.endContainer,n,"BLOCKQUOTE")||n,i=Ee(e,n),m=f(t,t),h=!!i&&d(i),i&&m&&!h&&!v(m,t,"PRE")&&!v(m,t,"TABLE")){if(xe(e,i,i,n),e.collapse(!0),c=e.endContainer,p=e.endOffset,Ye(i,n,!1),a(c)&&(c=(b=x(c,p,s(c,n),n)).parentNode,p=ae.call(c.childNodes,b)),p!==g(c))for(o=n.ownerDocument.createDocumentFragment();r=c.childNodes[p];)o.appendChild(r);S(c,m,e,n),p=ae.call(c.parentNode.childNodes,c)+1,c=c.parentNode,e.setEnd(c,p)}g(t)&&(h&&(e.setEndBefore(i),e.collapse(!1),y(i)),xe(e,u,u,n),_=(b=x(e.endContainer,e.endOffset,u,n))?b.previousSibling:u.lastChild,u.insertBefore(t,b),b?e.setEndBefore(b):e.setEnd(u,g(u)),i=Se(e,n),Ce(e),c=e.endContainer,p=e.endOffset,b&&l(b)&&T(b,n),(b=_&&_.nextSibling)&&l(b)&&T(b,n),e.setEnd(c,p)),o&&(S(i,o,w=e.cloneRange(),n),e.setEnd(w.endContainer,w.endOffset)),Ce(e)},ke=function(e,t,n){var r=t.ownerDocument.createRange();if(r.selectNode(t),n){var i=e.compareBoundaryPoints(3,r)>-1,o=e.compareBoundaryPoints(1,r)<1;return!i&&!o}var a=e.compareBoundaryPoints(0,r)<1,u=e.compareBoundaryPoints(2,r)>-1;return a&&u},Ce=function(e){for(var t,n=e.startContainer,r=e.startOffset,o=e.endContainer,a=e.endOffset,u=!0;n.nodeType!==U&&(t=n.childNodes[r])&&!i(t);)n=t,r=0;if(a)for(;o.nodeType!==U;){if(!(t=o.childNodes[a-1])||i(t)){if(u&&t&&"BR"===t.nodeName){a-=1,u=!1;continue}break}a=g(o=t)}else for(;o.nodeType!==U&&(t=o.firstChild)&&!i(t);)o=t;e.collapsed?(e.setStart(o,a),e.setEnd(n,r)):(e.setStart(n,r),e.setEnd(o,a))},xe=function(e,t,n,r){var i,o=e.startContainer,a=e.startOffset,u=e.endContainer,l=e.endOffset,c=!0;for(t||(t=e.commonAncestorContainer),n||(n=t);!a&&o!==t&&o!==r;)i=o.parentNode,a=ae.call(i.childNodes,o),o=i;for(;c&&u.nodeType!==U&&u.childNodes[l]&&"BR"===u.childNodes[l].nodeName&&(l+=1,c=!1),u!==n&&u!==r&&l===g(u);)i=u.parentNode,l=ae.call(i.childNodes,u)+1,u=i;e.setStart(o,a),e.setEnd(u,l)},Ee=function(e,t){var n,r=e.startContainer;return a(r)?n=s(r,t):r!==t&&u(r)?n=r:n=f(n=me(r,e.startOffset),t),n&&ke(e,n,!0)?n:null},Se=function(e,t){var n,r,i=e.endContainer;if(a(i))n=s(i,t);else if(i!==t&&u(i))n=i;else{if(!(n=ge(i,e.endOffset))||!m(t,n))for(n=t;r=n.lastChild;)n=r;n=s(n,t)}return n&&ke(e,n,!0)?n:null},Te=new r(null,4|z,function(e){return e.nodeType===U?oe.test(e.data):"IMG"===e.nodeName}),Ne=function(e,t){var n,r=e.startContainer,i=e.startOffset;if(Te.root=null,r.nodeType===U){if(i)return!1;n=r}else if((n=ge(r,i))&&!m(t,n)&&(n=null),!n&&((n=me(r,i)).nodeType===U&&n.length))return!1;return Te.currentNode=n,Te.root=Ee(e,t),!Te.previousNode()},Pe=function(e,t){var n,r=e.endContainer,i=e.endOffset;if(Te.root=null,r.nodeType===U){if((n=r.data.length)&&i<n)return!1;Te.currentNode=r}else Te.currentNode=me(r,i);return Te.root=Se(e,t),!Te.nextNode()},Oe=function(e,t){var n,r=Ee(e,t),i=Se(e,t);r&&i&&(n=r.parentNode,e.setStart(n,ae.call(n.childNodes,r)),n=i.parentNode,e.setEnd(n,ae.call(n.childNodes,i)+1))},Re={8:"backspace",9:"tab",13:"enter",32:"space",33:"pageup",34:"pagedown",37:"left",39:"right",46:"delete",219:"[",221:"]"},Le=function(e){var t=e.keyCode,n=Re[t],r="",i=this.getSelection();e.defaultPrevented||(n||(n=String.fromCharCode(t).toLowerCase(),/^[A-Za-z0-9]$/.test(n)||(n="")),Y&&46===e.which&&(n="."),111<t&&t<124&&(n="f"+(t-111)),"backspace"!==n&&"delete"!==n&&(e.altKey&&(r+="alt-"),e.ctrlKey&&(r+="ctrl-"),e.metaKey&&(r+="meta-")),e.shiftKey&&(r+="shift-"),n=r+n,this._keyHandlers[n]?this._keyHandlers[n](this,e,i):i.collapsed||e.isComposing||e.ctrlKey||e.metaKey||1!==(e.key||n).length||(this.saveUndoState(i),_e(i,this._root),this._ensureBottomLine(),this.setSelection(i),this._updatePath(i,!0)))},Ae=function(e){return function(t,n){n.preventDefault(),t[e]()}},De=function(e,t){return t=t||null,function(n,r){r.preventDefault();var i=n.getSelection();n.hasFormat(e,null,i)?n.changeFormat(null,{tag:e},i):n.changeFormat({tag:e},t,i)}},Ie=function(e,t){try{t||(t=e.getSelection());var n,r=t.startContainer;for(r.nodeType===U&&(r=r.parentNode),n=r;a(n)&&(!n.textContent||n.textContent===M);)n=(r=n).parentNode;r!==n&&(t.setStart(n,ae.call(n.childNodes,r)),t.collapse(!0),n.removeChild(r),u(n)||(n=s(n,e._root)),k(n,e._root),Ce(t)),r===e._root&&(r=r.firstChild)&&"BR"===r.nodeName&&y(r),e._ensureBottomLine(),e.setSelection(t),e._updatePath(t,!0)}catch(t){e.didError(t)}},Ue={enter:function(e,t,n){var r,i,o,a,u,l=e._root;if(t.preventDefault(),e._recordUndoState(n),pt(n.startContainer,l,e),e._removeZWS(),e._getRangeAndRemoveBookmark(n),n.collapsed||_e(n,l),(r=Ee(n,l))&&(i=v(r,l,"PRE")))return Ce(n),o=n.startContainer,a=n.startOffset,o.nodeType!==U&&(o=e._doc.createTextNode(""),i.insertBefore(o,i.firstChild)),t.shiftKey||"\n"!==o.data.charAt(a-1)&&!Ne(n,l)||"\n"!==o.data.charAt(a)&&!Pe(n,l)?(o.insertData(a,"\n"),k(i,l),o.length===a+1?n.setStartAfter(o):n.setStart(o,a+1)):(o.deleteData(a&&a-1,a?2:1),(o=(u=x(o,a&&a-1,l,l)).previousSibling).textContent||y(o),o=e.createDefaultBlock(),u.parentNode.insertBefore(o,u),u.textContent||y(u),n.setStart(o,0)),n.collapse(!0),e.setSelection(n),e._updatePath(n,!0),void e._docWasChanged();if(!r||t.shiftKey||/^T[HD]$/.test(r.nodeName))return(i=v(n.endContainer,l,"A"))&&(i=i.parentNode,xe(n,i,i,l),n.collapse(!1)),ye(n,e.createElement("BR")),n.collapse(!1),e.setSelection(n),void e._updatePath(n,!0);if((i=v(r,l,"LI"))&&(r=i),d(r)){if(v(r,l,"UL")||v(r,l,"OL"))return e.decreaseListLevel(n);if(v(r,l,"BLOCKQUOTE"))return e.modifyBlocks(st,n)}for(u=lt(e,r,n.startContainer,n.startOffset),ot(r),qe(r),k(r,l);u.nodeType===I;){var c,s=u.firstChild;if("A"===u.nodeName&&(!u.textContent||u.textContent===M)){b(u,s=e._doc.createTextNode("")),u=s;break}for(;s&&s.nodeType===U&&!s.data&&(c=s.nextSibling)&&"BR"!==c.nodeName;)y(s),s=c;if(!s||"BR"===s.nodeName||s.nodeType===U&&!Y)break;u=s}n=e.createRange(u,0),e.setSelection(n),e._updatePath(n,!0)},"shift-enter":function(e,t,n){return e._keyHandlers.enter(e,t,n)},backspace:function(e,t,n){var r=e._root;if(e._removeZWS(),e.saveUndoState(n),n.collapsed)if(Ne(n,r)){t.preventDefault();var i,o=Ee(n,r);if(!o)return;if(C(o.parentNode,r),i=s(o,r)){if(!i.isContentEditable)return void y(i);for(S(i,o,n,r),o=i.parentNode;o!==r&&!o.nextSibling;)o=o.parentNode;o!==r&&(o=o.nextSibling)&&T(o,r),e.setSelection(n)}else if(o){if(v(o,r,"UL")||v(o,r,"OL"))return e.decreaseListLevel(n);if(v(o,r,"BLOCKQUOTE"))return e.modifyBlocks(ct,n);e.setSelection(n),e._updatePath(n,!0)}}else e.setSelection(n),setTimeout(function(){Ie(e)},0);else t.preventDefault(),_e(n,r),Ie(e,n)},delete:function(e,t,n){var r,i,o,a,u,l,c=e._root;if(e._removeZWS(),e.saveUndoState(n),n.collapsed)if(Pe(n,c)){if(t.preventDefault(),!(r=Ee(n,c)))return;if(C(r.parentNode,c),i=f(r,c)){if(!i.isContentEditable)return void y(i);for(S(r,i,n,c),i=r.parentNode;i!==c&&!i.nextSibling;)i=i.parentNode;i!==c&&(i=i.nextSibling)&&T(i,c),e.setSelection(n),e._updatePath(n,!0)}}else{if(o=n.cloneRange(),xe(n,c,c,c),a=n.endContainer,u=n.endOffset,a.nodeType===I&&(l=a.childNodes[u])&&"IMG"===l.nodeName)return t.preventDefault(),y(l),Ce(n),void Ie(e,n);e.setSelection(o),setTimeout(function(){Ie(e)},0)}else t.preventDefault(),_e(n,c),Ie(e,n)},tab:function(e,t,n){var r,i,o=e._root;if(e._removeZWS(),n.collapsed&&Ne(n,o))for(r=Ee(n,o);i=r.parentNode;){if("UL"===i.nodeName||"OL"===i.nodeName){t.preventDefault(),e.increaseListLevel(n);break}r=i}},"shift-tab":function(e,t,n){var r,i=e._root;e._removeZWS(),n.collapsed&&Ne(n,i)&&((v(r=n.startContainer,i,"UL")||v(r,i,"OL"))&&(t.preventDefault(),e.decreaseListLevel(n)))},space:function(e,t,n){var r,i=e._root;if(e._recordUndoState(n),pt(n.startContainer,i,e),e._getRangeAndRemoveBookmark(n),r=n.endContainer,n.collapsed&&n.endOffset===g(r))do{if("A"===r.nodeName){n.setStartAfter(r);break}}while(!r.nextSibling&&(r=r.parentNode)&&r!==i);n.collapsed||(_e(n,i),e._ensureBottomLine(),e.setSelection(n),e._updatePath(n,!0)),e.setSelection(n)},left:function(e){e._removeZWS()},right:function(e){e._removeZWS()}};V&&Q&&(Ue["meta-left"]=function(e,t){t.preventDefault();var n=it(e);n&&n.modify&&n.modify("move","backward","lineboundary")},Ue["meta-right"]=function(e,t){t.preventDefault();var n=it(e);n&&n.modify&&n.modify("move","forward","lineboundary")}),V||(Ue.pageup=function(e){e.moveCursorToStart()},Ue.pagedown=function(e){e.moveCursorToEnd()}),Ue[J+"b"]=De("B"),Ue[J+"i"]=De("I"),Ue[J+"u"]=De("U"),Ue[J+"shift-7"]=De("S"),Ue[J+"shift-5"]=De("SUB",{tag:"SUP"}),Ue[J+"shift-6"]=De("SUP",{tag:"SUB"}),Ue[J+"shift-8"]=Ae("makeUnorderedList"),Ue[J+"shift-9"]=Ae("makeOrderedList"),Ue[J+"["]=Ae("decreaseQuoteLevel"),Ue[J+"]"]=Ae("increaseQuoteLevel"),Ue[J+"d"]=Ae("toggleCode"),Ue[J+"y"]=Ae("redo"),Ue[J+"z"]=Ae("undo"),Ue[J+"shift-z"]=Ae("redo");var Fe={1:10,2:13,3:16,4:18,5:24,6:32,7:48},Be={backgroundColor:{regexp:oe,replace:function(e,t,n){return w(e,"SPAN",{class:t.highlight,style:"background-color:"+n})}},color:{regexp:oe,replace:function(e,t,n){return w(e,"SPAN",{class:t.colour,style:"color:"+n})}},fontWeight:{regexp:/^bold|^700/i,replace:function(e){return w(e,"B")}},fontStyle:{regexp:/^italic/i,replace:function(e){return w(e,"I")}},fontFamily:{regexp:oe,replace:function(e,t,n){return w(e,"SPAN",{class:t.fontFamily,style:"font-family:"+n})}},fontSize:{regexp:oe,replace:function(e,t,n){return w(e,"SPAN",{class:t.fontSize,style:"font-size:"+n})}},textDecoration:{regexp:/^underline/i,replace:function(e){return w(e,"U")}}},ze=function(e){return function(t,n){var r=w(t.ownerDocument,e);return n.replaceChild(r,t),r.appendChild(_(t)),r}},Me=function(e,t,n){var r,i,o,a,u,l,c=e.style,s=e.ownerDocument;for(r in Be)i=Be[r],(o=c[r])&&i.regexp.test(o)&&(l=i.replace(s,n.classNames,o),u||(u=l),a&&a.appendChild(l),a=l,e.style[r]="");return u&&(a.appendChild(_(e)),"SPAN"===e.nodeName?t.replaceChild(u,e):e.appendChild(u)),a||e},je={P:Me,SPAN:Me,STRONG:ze("B"),EM:ze("I"),INS:ze("U"),STRIKE:ze("S"),FONT:function(e,t,n){var r,i,o,a,u,l=e.face,c=e.size,s=e.color,f=e.ownerDocument,d=n.classNames;return l&&(u=r=w(f,"SPAN",{class:d.fontFamily,style:"font-family:"+l}),a=r),c&&(i=w(f,"SPAN",{class:d.fontSize,style:"font-size:"+Fe[c]+"px"}),u||(u=i),a&&a.appendChild(i),a=i),s&&/^#?([\dA-F]{3}){1,2}$/i.test(s)&&("#"!==s.charAt(0)&&(s="#"+s),o=w(f,"SPAN",{class:d.colour,style:"color:"+s}),u||(u=o),a&&a.appendChild(o),a=o),u||(u=a=w(f,"SPAN")),t.replaceChild(u,e),a.appendChild(_(e)),a},TT:function(e,t,n){var r=w(e.ownerDocument,"SPAN",{class:n.classNames.fontFamily,style:'font-family:menlo,consolas,"courier new",monospace'});return t.replaceChild(r,e),r.appendChild(_(e)),r}},We=/^(?:A(?:DDRESS|RTICLE|SIDE|UDIO)|BLOCKQUOTE|CAPTION|D(?:[DLT]|IV)|F(?:IGURE|IGCAPTION|OOTER)|H[1-6]|HEADER|L(?:ABEL|EGEND|I)|O(?:L|UTPUT)|P(?:RE)?|SECTION|T(?:ABLE|BODY|D|FOOT|H|HEAD|R)|COL(?:GROUP)?|UL)$/,He=/^(?:HEAD|META|STYLE)/,$e=new r(null,4|z),Ve=function e(t,n,r){var i,o,u,l,c,s,f,d,p,h,v,m,g=t.childNodes;for(i=t;a(i);)i=i.parentNode;for($e.root=i,o=0,u=g.length;o<u;o+=1)if(c=(l=g[o]).nodeName,s=l.nodeType,f=je[c],s===I){if(d=l.childNodes.length,f)l=f(l,t,n);else{if(He.test(c)){t.removeChild(l),o-=1,u-=1;continue}if(!We.test(c)&&!a(l)){o-=1,u+=d-1,t.replaceChild(_(l),l);continue}}d&&e(l,n,r||"PRE"===c)}else{if(s===U){if(v=l.data,p=!oe.test(v.charAt(0)),h=!oe.test(v.charAt(v.length-1)),r||!p&&!h)continue;if(p){for($e.currentNode=l;(m=$e.previousPONode())&&!("IMG"===(c=m.nodeName)||"#text"===c&&oe.test(m.data));)if(!a(m)){m=null;break}v=v.replace(/^[ \t\r\n]+/g,m?" ":"")}if(h){for($e.currentNode=l;(m=$e.nextNode())&&!("IMG"===c||"#text"===c&&oe.test(m.data));)if(!a(m)){m=null;break}v=v.replace(/[ \t\r\n]+$/g,m?" ":"")}if(v){l.data=v;continue}}t.removeChild(l),o-=1,u-=1}return t},qe=function e(t){for(var n,r=t.childNodes,o=r.length;o--;)(n=r[o]).nodeType!==I||i(n)?n.nodeType!==U||n.data||t.removeChild(n):(e(n),a(n)&&!n.firstChild&&t.removeChild(n))},Qe=function(e){return e.nodeType===I?"BR"===e.nodeName:oe.test(e.data)},Ke=function(e,t){for(var n,i=e.parentNode;a(i);)i=i.parentNode;return(n=new r(i,4|z,Qe)).currentNode=e,!!n.nextNode()||t&&!n.previousNode()},Ye=function(e,t,n){var r,i,o,u=e.querySelectorAll("BR"),l=[],c=u.length;for(r=0;r<c;r+=1)l[r]=Ke(u[r],n);for(;c--;)(o=(i=u[c]).parentNode)&&(l[c]?a(o)||C(o,t):y(i))},Ge=function(e,t,n,r){var i,o,a=t.ownerDocument.body,u=r.willCutCopy;Ye(t,n,!0),t.setAttribute("style","position:fixed;overflow:hidden;bottom:100%;right:100%;"),a.appendChild(t),i=t.innerHTML,o=t.innerText||t.textContent,u&&(i=u(i)),q&&(o=o.replace(/\r?\n/g,"\r\n")),e.setData("text/html",i),e.setData("text/plain",o),a.removeChild(t)},Ze=function(e){var t,n,r,i,o,a,u=e.clipboardData,l=this.getSelection(),c=this._root,s=this;if(l.collapsed)e.preventDefault();else{if(this.saveUndoState(l),G||$||!u)setTimeout(function(){try{s._ensureBottomLine()}catch(e){s.didError(e)}},0);else{for(n=(t=Ee(l,c))===Se(l,c)&&t||c,r=_e(l,c),(i=l.commonAncestorContainer).nodeType===U&&(i=i.parentNode);i&&i!==n;)(o=i.cloneNode(!1)).appendChild(r),r=o,i=i.parentNode;(a=this.createElement("div")).appendChild(r),Ge(u,a,c,this._config),e.preventDefault()}this.setSelection(l)}},Xe=function(e){var t,n,r,i,o,a,u=e.clipboardData,l=this.getSelection(),c=this._root;if(!G&&!$&&u){for(n=(t=Ee(l,c))===Se(l,c)&&t||c,l=l.cloneRange(),Ce(l),xe(l,n,n,c),r=l.cloneContents(),(i=l.commonAncestorContainer).nodeType===U&&(i=i.parentNode);i&&i!==n;)(o=i.cloneNode(!1)).appendChild(r),r=o,i=i.parentNode;(a=this.createElement("div")).appendChild(r),Ge(u,a,c,this._config),e.preventDefault()}},Je=function(e){var t,n,r,i,o,a=e.clipboardData,u=a&&a.items,l=this.isShiftDown,c=!1,s=!1,f=null,d=this;if(G&&u){for(t=u.length;t--;)!l&&/^image\/.*/.test(u[t].type)&&(s=!0);s||(u=null)}if(u){for(e.preventDefault(),t=u.length;t--;){if(r=(n=u[t]).type,!l&&"text/html"===r)return void n.getAsString(function(e){d.insertHTML(e,!0)});"text/plain"===r&&(f=n),!l&&/^image\/.*/.test(r)&&(s=!0)}s?(this.fireEvent("dragover",{dataTransfer:a,preventDefault:function(){c=!0}}),c&&this.fireEvent("drop",{dataTransfer:a})):f&&f.getAsString(function(e){d.insertPlainText(e,!0)})}else{if(i=a&&a.types,!G&&i&&(ae.call(i,"text/html")>-1||!Q&&ae.call(i,"text/plain")>-1&&ae.call(i,"text/rtf")<0))return e.preventDefault(),void(!l&&(o=a.getData("text/html"))?this.insertHTML(o,!0):((o=a.getData("text/plain"))||(o=a.getData("text/uri-list")))&&this.insertPlainText(o,!0));this._awaitingPaste=!0;var p=this._doc.body,h=this.getSelection(),v=h.startContainer,m=h.startOffset,g=h.endContainer,b=h.endOffset,_=this.createElement("DIV",{contenteditable:"true",style:"position:fixed; overflow:hidden; top:0; right:100%; width:1px; height:1px;"});p.appendChild(_),h.selectNodeContents(_),this.setSelection(h),setTimeout(function(){try{d._awaitingPaste=!1;for(var e,t,n="",r=_;_=r;)r=_.nextSibling,y(_),(e=_.firstChild)&&e===_.lastChild&&"DIV"===e.nodeName&&(_=e),n+=_.innerHTML;t=d.createRange(v,m,g,b),d.setSelection(t),n&&d.insertHTML(n,!0)}catch(e){d.didError(e)}},0)}},et=function(e){for(var t=e.dataTransfer.types,n=t.length,r=!1,i=!1;n--;)switch(t[n]){case"text/plain":r=!0;break;case"text/html":i=!0;break;default:return}(i||r)&&this.saveUndoState()},tt=O.prototype,nt=function(e,t,n){var r=n._doc,i=e?DOMPurify.sanitize(e,{ALLOW_UNKNOWN_PROTOCOLS:!0,WHOLE_DOCUMENT:!1,RETURN_DOM:!0,RETURN_DOM_FRAGMENT:!0}):null;return i?r.importNode(i,!0):r.createDocumentFragment()};tt.setConfig=function(e){return(e=P({blockTag:"DIV",blockAttributes:null,tagAttributes:{blockquote:null,ul:null,ol:null,li:null,a:null},classNames:{colour:"colour",fontFamily:"font",fontSize:"size",highlight:"highlight"},leafNodeNames:se,undo:{documentSizeThreshold:-1,undoLimit:-1},isInsertedHTMLSanitized:!0,isSetHTMLSanitized:!0,sanitizeToDOMFragment:"undefined"!=typeof DOMPurify&&DOMPurify.isSupported?nt:null,willCutCopy:null},e,!0)).blockTag=e.blockTag.toUpperCase(),this._config=e,this},tt.createElement=function(e,t,n){return w(this._doc,e,t,n)},tt.createDefaultBlock=function(e){var t=this._config;return k(this.createElement(t.blockTag,t.blockAttributes,e),this._root)},tt.didError=function(e){console.log(e)},tt.getDocument=function(){return this._doc},tt.getRoot=function(){return this._root},tt.modifyDocument=function(e){var t=this._mutation;t&&(t.takeRecords().length&&this._docWasChanged(),t.disconnect()),this._ignoreAllChanges=!0,e(),this._ignoreAllChanges=!1,t&&(t.observe(this._root,{childList:!0,attributes:!0,characterData:!0,subtree:!0}),this._ignoreChange=!1)};var rt={pathChange:1,select:1,input:1,undoStateChange:1};tt.fireEvent=function(e,t){var n,r,i,o=this._events[e];if(/^(?:focus|blur)/.test(e))if(n=this._root===this._doc.activeElement,"focus"===e){if(!n||this._isFocused)return this;this._isFocused=!0}else{if(n||!this._isFocused)return this;this._isFocused=!1}if(o)for(t||(t={}),t.type!==e&&(t.type=e),r=(o=o.slice()).length;r--;){i=o[r];try{i.handleEvent?i.handleEvent(t):i.call(this,t)}catch(t){t.details="Squire: fireEvent error. Event type: "+e,this.didError(t)}}return this},tt.destroy=function(){var e,t=this._events;for(e in t)this.removeEventListener(e);this._mutation&&this._mutation.disconnect(),delete this._root.__squire__,this._undoIndex=-1,this._undoStack=[],this._undoStackLength=0},tt.handleEvent=function(e){this.fireEvent(e.type,e)},tt.addEventListener=function(e,t){var n=this._events[e],r=this._root;return t?(n||(n=this._events[e]=[],rt[e]||("selectionchange"===e&&(r=this._doc),r.addEventListener(e,this,!0))),n.push(t),this):(this.didError({name:"Squire: addEventListener with null or undefined fn",message:"Event type: "+e}),this)},tt.removeEventListener=function(e,t){var n,r=this._events[e],i=this._root;if(r){if(t)for(n=r.length;n--;)r[n]===t&&r.splice(n,1);else r.length=0;r.length||(delete this._events[e],rt[e]||("selectionchange"===e&&(i=this._doc),i.removeEventListener(e,this,!0)))}return this},tt.createRange=function(e,t,n,r){if(e instanceof this._win.Range)return e.cloneRange();var i=this._doc.createRange();return i.setStart(e,t),n?i.setEnd(n,r):i.setEnd(e,t),i},tt.getCursorPosition=function(e){if(!e&&!(e=this.getSelection())||!e.getBoundingClientRect)return null;var t,n,r=e.getBoundingClientRect();return r&&!r.top&&(this._ignoreChange=!0,(t=this._doc.createElement("SPAN")).textContent=M,ye(e,t),r=t.getBoundingClientRect(),(n=t.parentNode).removeChild(t),E(n,e)),r},tt._moveCursorTo=function(e){var t=this._root,n=this.createRange(t,e?0:t.childNodes.length);return Ce(n),this.setSelection(n),this},tt.moveCursorToStart=function(){return this._moveCursorTo(!0)},tt.moveCursorToEnd=function(){return this._moveCursorTo(!1)};var it=function(e){return e._win.getSelection()||null};tt.setSelection=function(e){if(e)if(this._lastSelection=e,this._isFocused)if(H&&!this._restoreSelection)R.call(this),this.blur(),this.focus();else{$&&this._win.focus();var t=it(this);t&&(t.removeAllRanges(),t.addRange(e))}else R.call(this);return this},tt.getSelection=function(){var e,t,n,r,o=it(this),a=this._root;return this._isFocused&&o&&o.rangeCount&&(t=(e=o.getRangeAt(0).cloneRange()).startContainer,n=e.endContainer,t&&i(t)&&e.setStartBefore(t),n&&i(n)&&e.setEndBefore(n)),e&&m(a,e.commonAncestorContainer)?this._lastSelection=e:m((r=(e=this._lastSelection).commonAncestorContainer).ownerDocument,r)||(e=null),e||(e=this.createRange(a.firstChild,0)),e},tt.getSelectedText=function(){var e=this.getSelection();if(!e||e.collapsed)return"";var t,n=new r(e.commonAncestorContainer,4|z,function(t){return ke(e,t,!0)}),i=e.startContainer,o=e.endContainer,u=n.currentNode=i,l="",c=!1;for(n.filter(u)||(u=n.nextNode());u;)u.nodeType===U?(t=u.data)&&/\S/.test(t)&&(u===o&&(t=t.slice(0,e.endOffset)),u===i&&(t=t.slice(e.startOffset)),l+=t,c=!0):("BR"===u.nodeName||c&&!a(u))&&(l+="\n",c=!1),u=n.nextNode();return l},tt.getPath=function(){return this._path};var ot=function(e,t){for(var n,i,o,u=new r(e,4);i=u.nextNode();)for(;(o=i.data.indexOf(M))>-1&&(!t||i.parentNode!==t);){if(1===i.length){do{(n=i.parentNode).removeChild(i),i=n,u.currentNode=n}while(a(i)&&!g(i));break}i.deleteData(o,1)}};tt._didAddZWS=function(){this._hasZWS=!0},tt._removeZWS=function(){this._hasZWS&&(ot(this._root),this._hasZWS=!1)},tt._updatePath=function(e,t){if(e){var n,r=e.startContainer,i=e.endContainer;(t||r!==this._lastAnchorNode||i!==this._lastFocusNode)&&(this._lastAnchorNode=r,this._lastFocusNode=i,n=r&&i?r===i?function e(t,n,r){var i,o,a,u,l,c="";return t&&t!==n&&(c=e(t.parentNode,n,r),t.nodeType===I&&(c+=(c?">":"")+t.nodeName,(i=t.id)&&(c+="#"+i),(o=t.className.trim())&&((a=o.split(/\s\s*/)).sort(),c+=".",c+=a.join(".")),(u=t.dir)&&(c+="[dir="+u+"]"),a&&(l=r.classNames,ae.call(a,l.highlight)>-1&&(c+="[backgroundColor="+t.style.backgroundColor.replace(/ /g,"")+"]"),ae.call(a,l.colour)>-1&&(c+="[color="+t.style.color.replace(/ /g,"")+"]"),ae.call(a,l.fontFamily)>-1&&(c+="[fontFamily="+t.style.fontFamily.replace(/ /g,"")+"]"),ae.call(a,l.fontSize)>-1&&(c+="[fontSize="+t.style.fontSize+"]")))),c}(i,this._root,this._config):"(selection)":"",this._path!==n&&(this._path=n,this.fireEvent("pathChange",{path:n}))),this.fireEvent(e.collapsed?"cursor":"select",{range:e})}},tt._updatePathOnEvent=function(e){var t=this;t._isFocused&&!t._willUpdatePath&&(t._willUpdatePath=!0,setTimeout(function(){t._willUpdatePath=!1,t._updatePath(t.getSelection())},0))},tt.focus=function(){return this._root.focus(),X&&this.fireEvent("focus"),this},tt.blur=function(){return this._root.blur(),X&&this.fireEvent("blur"),this};var at="squire-selection-end";tt._saveRangeToBookmark=function(e){var t,n=this.createElement("INPUT",{id:"squire-selection-start",type:"hidden"}),r=this.createElement("INPUT",{id:at,type:"hidden"});ye(e,n),e.collapse(!1),ye(e,r),2&n.compareDocumentPosition(r)&&(n.id=at,r.id="squire-selection-start",t=n,n=r,r=t),e.setStartAfter(n),e.setEndBefore(r)},tt._getRangeAndRemoveBookmark=function(e){var t=this._root,n=t.querySelector("#squire-selection-start"),r=t.querySelector("#"+at);if(n&&r){var i=n.parentNode,o=r.parentNode,a=ae.call(i.childNodes,n),u=ae.call(o.childNodes,r);i===o&&(u-=1),y(n),y(r),e||(e=this._doc.createRange()),e.setStart(i,a),e.setEnd(o,u),E(i,e),i!==o&&E(o,e),e.collapsed&&((i=e.startContainer).nodeType===U&&((o=i.childNodes[e.startOffset])&&o.nodeType===U||(o=i.childNodes[e.startOffset-1]),o&&o.nodeType===U&&(e.setStart(o,0),e.collapse(!0))))}return e||null},tt._keyUpDetectChange=function(e){var t=e.keyCode;e.ctrlKey||e.metaKey||e.altKey||!(t<16||t>20)||!(t<33||t>45)||this._docWasChanged()},tt._docWasChanged=function(){if(ie&&(ve=new WeakMap),!this._ignoreAllChanges){if(re&&this._ignoreChange)return void(this._ignoreChange=!1);this._isInUndoState&&(this._isInUndoState=!1,this.fireEvent("undoStateChange",{canUndo:!0,canRedo:!1})),this.fireEvent("input")}},tt._recordUndoState=function(e,t){if(!this._isInUndoState||t){var n,r=this._undoIndex,i=this._undoStack,o=this._config.undo,a=o.documentSizeThreshold,u=o.undoLimit;t||(r+=1),r<this._undoStackLength&&(i.length=this._undoStackLength=r),e&&this._saveRangeToBookmark(e),n=this._getHTML(),a>-1&&2*n.length>a&&u>-1&&r>u&&(i.splice(0,r-u),r=u,this._undoStackLength=u),i[r]=n,this._undoIndex=r,this._undoStackLength+=1,this._isInUndoState=!0}},tt.saveUndoState=function(e){return e===n&&(e=this.getSelection()),this._recordUndoState(e,this._isInUndoState),this._getRangeAndRemoveBookmark(e),this},tt.undo=function(){if(0!==this._undoIndex||!this._isInUndoState){this._recordUndoState(this.getSelection(),!1),this._undoIndex-=1,this._setHTML(this._undoStack[this._undoIndex]);var e=this._getRangeAndRemoveBookmark();e&&this.setSelection(e),this._isInUndoState=!0,this.fireEvent("undoStateChange",{canUndo:0!==this._undoIndex,canRedo:!0}),this.fireEvent("input")}return this},tt.redo=function(){var e=this._undoIndex,t=this._undoStackLength;if(e+1<t&&this._isInUndoState){this._undoIndex+=1,this._setHTML(this._undoStack[this._undoIndex]);var n=this._getRangeAndRemoveBookmark();n&&this.setSelection(n),this.fireEvent("undoStateChange",{canUndo:!0,canRedo:e+2<t}),this.fireEvent("input")}return this},tt.hasFormat=function(e,t,n){if(e=e.toUpperCase(),t||(t={}),!n&&!(n=this.getSelection()))return!1;!n.collapsed&&n.startContainer.nodeType===U&&n.startOffset===n.startContainer.length&&n.startContainer.nextSibling&&n.setStartBefore(n.startContainer.nextSibling),!n.collapsed&&n.endContainer.nodeType===U&&0===n.endOffset&&n.endContainer.previousSibling&&n.setEndAfter(n.endContainer.previousSibling);var i,o,a=this._root,u=n.commonAncestorContainer;if(v(u,a,e,t))return!0;if(u.nodeType===U)return!1;i=new r(u,4,function(e){return ke(n,e,!0)});for(var l=!1;o=i.nextNode();){if(!v(o,a,e,t))return!1;l=!0}return l},tt.getFontInfo=function(e){var t,r,i,o={color:n,backgroundColor:n,family:n,size:n},a=0;if(!e&&!(e=this.getSelection()))return o;if(t=e.commonAncestorContainer,e.collapsed||t.nodeType===U)for(t.nodeType===U&&(t=t.parentNode);a<4&&t;)(r=t.style)&&(!o.color&&(i=r.color)&&(o.color=i,a+=1),!o.backgroundColor&&(i=r.backgroundColor)&&(o.backgroundColor=i,a+=1),!o.family&&(i=r.fontFamily)&&(o.family=i,a+=1),!o.size&&(i=r.fontSize)&&(o.size=i,a+=1)),t=t.parentNode;return o},tt._addFormat=function(e,t,n){var i,o,u,l,c,s,f,d,p=this._root;if(n.collapsed){for(i=k(this.createElement(e,t),p),ye(n,i),n.setStart(i.firstChild,i.firstChild.length),n.collapse(!0),d=i;a(d);)d=d.parentNode;ot(d,i)}else{if(o=new r(n.commonAncestorContainer,4|z,function(e){return(e.nodeType===U||"BR"===e.nodeName||"IMG"===e.nodeName)&&ke(n,e,!0)}),u=n.startContainer,c=n.startOffset,l=n.endContainer,s=n.endOffset,o.currentNode=u,o.filter(u)||(u=o.nextNode(),c=0),!u)return n;do{!v(f=o.currentNode,p,e,t)&&(f===l&&f.length>s&&f.splitText(s),f===u&&c&&(f=f.splitText(c),l===u&&(l=f,s-=c),u=f,c=0),b(f,i=this.createElement(e,t)),i.appendChild(f))}while(o.nextNode());l.nodeType!==U&&(f.nodeType===U?(l=f,s=f.length):(l=f.parentNode,s=1)),n=this.createRange(u,c,l,s)}return n},tt._removeFormat=function(e,t,n,r){this._saveRangeToBookmark(n);var i,o=this._doc;n.collapsed&&(te?(i=o.createTextNode(M),this._didAddZWS()):i=o.createTextNode(""),ye(n,i));for(var u=n.commonAncestorContainer;a(u);)u=u.parentNode;var l=n.startContainer,c=n.startOffset,s=n.endContainer,f=n.endOffset,d=[],p=function(e,t){if(!ke(n,e,!1)){var r,i,o=e.nodeType===U;if(!ke(n,e,!0))return void("INPUT"===e.nodeName||o&&!e.data||d.push([t,e]));if(o)e===s&&f!==e.length&&d.push([t,e.splitText(f)]),e===l&&c&&(e.splitText(c),d.push([t,e]));else for(r=e.firstChild;r;r=i)i=r.nextSibling,p(r,t)}},v=Array.prototype.filter.call(u.getElementsByTagName(e),function(r){return ke(n,r,!0)&&h(r,e,t)});return r||v.forEach(function(e){p(e,e)}),d.forEach(function(e){var t=e[0].cloneNode(!1),n=e[1];b(n,t),t.appendChild(n)}),v.forEach(function(e){b(e,_(e))}),this._getRangeAndRemoveBookmark(n),i&&n.collapse(!1),E(u,n),n},tt.changeFormat=function(e,t,n,r){return n||(n=this.getSelection())?(this.saveUndoState(n),t&&(n=this._removeFormat(t.tag.toUpperCase(),t.attributes||{},n,r)),e&&(n=this._addFormat(e.tag.toUpperCase(),e.attributes||{},n)),this.setSelection(n),this._updatePath(n,!0),re||this._docWasChanged(),this):this};var ut={DT:"DD",DD:"DT",LI:"LI",PRE:"PRE"},lt=function(e,t,n,r){var i=ut[t.nodeName],o=null,a=x(n,r,t.parentNode,e._root),u=e._config;return i||(i=u.blockTag,o=u.blockAttributes),h(a,i,o)||(t=w(a.ownerDocument,i,o),a.dir&&(t.dir=a.dir),b(a,t),t.appendChild(_(a)),a=t),a};tt.forEachBlock=function(e,t,n){if(!n&&!(n=this.getSelection()))return this;t&&this.saveUndoState(n);var r=this._root,i=Ee(n,r),o=Se(n,r);if(i&&o)do{if(e(i)||i===o)break}while(i=f(i,r));return t&&(this.setSelection(n),this._updatePath(n,!0),re||this._docWasChanged()),this},tt.modifyBlocks=function(e,t){if(!t&&!(t=this.getSelection()))return this;this._recordUndoState(t,this._isInUndoState);var n,r=this._root;return Oe(t,r),xe(t,r,r,r),n=be(t,r,r),ye(t,e.call(this,n)),t.endOffset<t.endContainer.childNodes.length&&T(t.endContainer.childNodes[t.endOffset],r),T(t.startContainer.childNodes[t.startOffset],r),this._getRangeAndRemoveBookmark(t),this.setSelection(t),this._updatePath(t,!0),re||this._docWasChanged(),this};var ct=function(e){var t=this._root,n=e.querySelectorAll("blockquote");return Array.prototype.filter.call(n,function(e){return!v(e.parentNode,t,"BLOCKQUOTE")}).forEach(function(e){b(e,_(e))}),e},st=function(){return this.createDefaultBlock([this.createElement("INPUT",{id:"squire-selection-start",type:"hidden"}),this.createElement("INPUT",{id:at,type:"hidden"})])},ft=function(e,t,n){for(var r,i,o,a,u=c(t,e._root),l=e._config.tagAttributes,s=l[n.toLowerCase()],f=l.li;r=u.nextNode();)"LI"===r.parentNode.nodeName&&(r=r.parentNode,u.currentNode=r.lastChild),"LI"!==r.nodeName?(a=e.createElement("LI",f),r.dir&&(a.dir=r.dir),(o=r.previousSibling)&&o.nodeName===n?(o.appendChild(a),y(r)):b(r,e.createElement(n,s,[a])),a.appendChild(_(r)),u.currentNode=a):(i=(r=r.parentNode).nodeName)!==n&&/^[OU]L$/.test(i)&&b(r,e.createElement(n,s,[_(r)]))},dt=function(e,t){for(var n=e.commonAncestorContainer,r=e.startContainer,i=e.endContainer;n&&n!==t&&!/^[OU]L$/.test(n.nodeName);)n=n.parentNode;if(!n||n===t)return null;for(r===n&&(r=r.childNodes[e.startOffset]),i===n&&(i=i.childNodes[e.endOffset]);r&&r.parentNode!==n;)r=r.parentNode;for(;i&&i.parentNode!==n;)i=i.parentNode;return[n,r,i]};tt.increaseListLevel=function(e){if(!e&&!(e=this.getSelection()))return this.focus();var t=this._root,n=dt(e,t);if(!n)return this.focus();var r=n[0],i=n[1],o=n[2];if(!i||i===r.firstChild)return this.focus();this._recordUndoState(e,this._isInUndoState);var a,u,l=r.nodeName,c=i.previousSibling;c.nodeName!==l&&(a=this._config.tagAttributes[l.toLowerCase()],c=this.createElement(l,a),r.insertBefore(c,i));do{u=i===o?null:i.nextSibling,c.appendChild(i)}while(i=u);return(u=c.nextSibling)&&T(u,t),this._getRangeAndRemoveBookmark(e),this.setSelection(e),this._updatePath(e,!0),re||this._docWasChanged(),this.focus()},tt.decreaseListLevel=function(e){if(!e&&!(e=this.getSelection()))return this.focus();var t=this._root,n=dt(e,t);if(!n)return this.focus();var r=n[0],i=n[1],o=n[2];i||(i=r.firstChild),o||(o=r.lastChild),this._recordUndoState(e,this._isInUndoState);var a,u=r.parentNode,l=o.nextSibling?x(r,o.nextSibling,u,t):r.nextSibling;if(u!==t&&"LI"===u.nodeName){for(u=u.parentNode;l;)a=l.nextSibling,o.appendChild(l),l=a;l=r.parentNode.nextSibling}var c=!/^[OU]L$/.test(u.nodeName);do{a=i===o?null:i.nextSibling,r.removeChild(i),c&&"LI"===i.nodeName&&(i=this.createDefaultBlock([_(i)])),u.insertBefore(i,l)}while(i=a);return r.firstChild||y(r),l&&T(l,t),this._getRangeAndRemoveBookmark(e),this.setSelection(e),this._updatePath(e,!0),re||this._docWasChanged(),this.focus()},tt._ensureBottomLine=function(){var e=this._root,t=e.lastElementChild;t&&t.nodeName===this._config.blockTag&&u(t)||e.appendChild(this.createDefaultBlock())},tt.setKeyHandler=function(e,t){return this._keyHandlers[e]=t,this},tt._getHTML=function(){return this._root.innerHTML},tt._setHTML=function(e){var t=this._root,n=t;n.innerHTML=e;do{k(n,t)}while(n=f(n,t));this._ignoreChange=!0},tt.getHTML=function(e){var t,n,r,i,o,a,u=[];if(e&&(a=this.getSelection())&&this._saveRangeToBookmark(a),ee)for(n=t=this._root;n=f(n,t);)n.textContent||n.querySelector("BR")||(r=this.createElement("BR"),n.appendChild(r),u.push(r));if(i=this._getHTML().replace(/\u200B/g,""),ee)for(o=u.length;o--;)y(u[o]);return a&&this._getRangeAndRemoveBookmark(a),i},tt.setHTML=function(e){var t,n,r,i=this._config,o=i.isSetHTMLSanitized?i.sanitizeToDOMFragment:null,a=this._root;"function"==typeof o?n=o(e,!1,this):((t=this.createElement("DIV")).innerHTML=e,(n=this._doc.createDocumentFragment()).appendChild(_(t))),Ve(n,i),Ye(n,a,!1),C(n,a);for(var u=n;u=f(u,a);)k(u,a);for(this._ignoreChange=!0;r=a.lastChild;)a.removeChild(r);a.appendChild(n),k(a,a),this._undoIndex=-1,this._undoStack.length=0,this._undoStackLength=0,this._isInUndoState=!1;var l=this._getRangeAndRemoveBookmark()||this.createRange(a.firstChild,0);return this.saveUndoState(l),this._lastSelection=l,R.call(this),this._updatePath(l,!0),this},tt.insertElement=function(e,t){if(t||(t=this.getSelection()),t.collapse(!0),a(e))ye(t,e),t.setStartAfter(e);else{for(var n,r=this._root,i=Ee(t,r)||r;i!==r&&!i.nextSibling;)i=i.parentNode;i!==r&&(n=x(i.parentNode,i.nextSibling,r,r)),n?r.insertBefore(e,n):(r.appendChild(e),n=this.createDefaultBlock(),r.appendChild(n)),t.setStart(n,0),t.setEnd(n,0),Ce(t)}return this.focus(),this.setSelection(t),this._updatePath(t),re||this._docWasChanged(),this},tt.insertImage=function(e,t){var n=this.createElement("IMG",P({src:e},t,!0));return this.insertElement(n),n},tt.linkRegExp=/\b((?:(?:ht|f)tps?:\/\/|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,}\/)(?:[^\s()<>]+|\([^\s()<>]+\))+(?:\((?:[^\s()<>]+|(?:\([^\s()<>]+\)))*\)|[^\s`!()\[\]{};:'".,<>?«»“”‘’]))|([\w\-.%+]+@(?:[\w\-]+\.)+[A-Z]{2,}\b)(?:\?[^&?\s]+=[^&?\s]+(?:&[^&?\s]+=[^&?\s]+)*)?/i;var pt=function(e,t,n){var i,o,a,u,l,c,s,f=e.ownerDocument,d=new r(e,4,function(e){return!v(e,t,"A")}),p=n.linkRegExp,h=n._config.tagAttributes.a;if(p)for(;i=d.nextNode();)for(o=i.data,a=i.parentNode;u=p.exec(o);)c=(l=u.index)+u[0].length,l&&(s=f.createTextNode(o.slice(0,l)),a.insertBefore(s,i)),(s=n.createElement("A",P({href:u[1]?/^(?:ht|f)tps?:/i.test(u[1])?u[1]:"http://"+u[1]:"mailto:"+u[0]},h,!1))).textContent=o.slice(l,c),a.insertBefore(s,i),i.data=o=o.slice(c)};tt.insertHTML=function(e,t){var n,r,i,o,a,u,l,c=this._config,s=c.isInsertedHTMLSanitized?c.sanitizeToDOMFragment:null,d=this.getSelection(),p=this._doc;"function"==typeof s?o=s(e,t,this):(t&&(n=e.indexOf("\x3c!--StartFragment--\x3e"),r=e.lastIndexOf("\x3c!--EndFragment--\x3e"),n>-1&&r>-1&&(e=e.slice(n+20,r))),/<\/td>((?!<\/tr>)[\s\S])*$/i.test(e)&&(e="<TR>"+e+"</TR>"),/<\/tr>((?!<\/table>)[\s\S])*$/i.test(e)&&(e="<TABLE>"+e+"</TABLE>"),(i=this.createElement("DIV")).innerHTML=e,(o=p.createDocumentFragment()).appendChild(_(i))),this.saveUndoState(d);try{for(a=this._root,u=o,l={fragment:o,preventDefault:function(){this.defaultPrevented=!0},defaultPrevented:!1},pt(o,o,this),Ve(o,c),Ye(o,a,!1),qe(o),o.normalize();u=f(u,o);)k(u,a);t&&this.fireEvent("willPaste",l),l.defaultPrevented||(we(d,l.fragment,a),re||this._docWasChanged(),d.collapse(!1),this._ensureBottomLine()),this.setSelection(d),this._updatePath(d,!0),t&&this.focus()}catch(e){this.didError(e)}return this};var ht=function(e){return e.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;").split('"').join("&quot;")};tt.insertPlainText=function(e,t){var n=this.getSelection();if(n.collapsed&&v(n.startContainer,this._root,"PRE")){var r,i,o=n.startContainer,a=n.startOffset;return o&&o.nodeType===U||(r=this._doc.createTextNode(""),o.insertBefore(r,o.childNodes[a]),o=r,a=0),i={text:e,preventDefault:function(){this.defaultPrevented=!0},defaultPrevented:!1},t&&this.fireEvent("willPaste",i),i.defaultPrevented||(e=i.text,o.insertData(a,e),n.setStart(o,a+e.length),n.collapse(!0)),this.setSelection(n),this}var u,l,c,s,f=e.split("\n"),d=this._config,p=d.blockTag,h=d.blockAttributes,m="</"+p+">",g="<"+p;for(u in h)g+=" "+u+'="'+ht(h[u])+'"';for(g+=">",l=0,c=f.length;l<c;l+=1)s=f[l],s=ht(s).replace(/ (?= )/g,"&nbsp;"),f[l]=g+(s||"<BR>")+m;return this.insertHTML(f.join(""),t)};var vt=function(e,t,n){return function(){return this[e](t,n),this.focus()}};tt.addStyles=function(e){if(e){var t=this._doc.documentElement.firstChild,n=this.createElement("STYLE",{type:"text/css"});n.appendChild(this._doc.createTextNode(e)),t.appendChild(n)}return this},tt.bold=vt("changeFormat",{tag:"B"}),tt.italic=vt("changeFormat",{tag:"I"}),tt.underline=vt("changeFormat",{tag:"U"}),tt.strikethrough=vt("changeFormat",{tag:"S"}),tt.subscript=vt("changeFormat",{tag:"SUB"},{tag:"SUP"}),tt.superscript=vt("changeFormat",{tag:"SUP"},{tag:"SUB"}),tt.removeBold=vt("changeFormat",null,{tag:"B"}),tt.removeItalic=vt("changeFormat",null,{tag:"I"}),tt.removeUnderline=vt("changeFormat",null,{tag:"U"}),tt.removeStrikethrough=vt("changeFormat",null,{tag:"S"}),tt.removeSubscript=vt("changeFormat",null,{tag:"SUB"}),tt.removeSuperscript=vt("changeFormat",null,{tag:"SUP"}),tt.makeLink=function(e,t){var n=this.getSelection();if(n.collapsed){var r=e.indexOf(":")+1;if(r)for(;"/"===e[r];)r+=1;ye(n,this._doc.createTextNode(e.slice(r)))}return t=P(P({href:e},t,!0),this._config.tagAttributes.a,!1),this.changeFormat({tag:"A",attributes:t},{tag:"A"},n),this.focus()},tt.removeLink=function(){return this.changeFormat(null,{tag:"A"},this.getSelection(),!0),this.focus()},tt.setFontFace=function(e){var t=this._config.classNames.fontFamily;return this.changeFormat(e?{tag:"SPAN",attributes:{class:t,style:"font-family: "+e+", sans-serif;"}}:null,{tag:"SPAN",attributes:{class:t}}),this.focus()},tt.setFontSize=function(e){var t=this._config.classNames.fontSize;return this.changeFormat(e?{tag:"SPAN",attributes:{class:t,style:"font-size: "+("number"==typeof e?e+"px":e)}}:null,{tag:"SPAN",attributes:{class:t}}),this.focus()},tt.setTextColour=function(e){var t=this._config.classNames.colour;return this.changeFormat(e?{tag:"SPAN",attributes:{class:t,style:"color:"+e}}:null,{tag:"SPAN",attributes:{class:t}}),this.focus()},tt.setHighlightColour=function(e){var t=this._config.classNames.highlight;return this.changeFormat(e?{tag:"SPAN",attributes:{class:t,style:"background-color:"+e}}:e,{tag:"SPAN",attributes:{class:t}}),this.focus()},tt.setTextAlignment=function(e){return this.forEachBlock(function(t){var n=t.className.split(/\s+/).filter(function(e){return!!e&&!/^align/.test(e)}).join(" ");e?(t.className=n+" align-"+e,t.style.textAlign=e):(t.className=n,t.style.textAlign="")},!0),this.focus()},tt.setTextDirection=function(e){return this.forEachBlock(function(t){e?t.dir=e:t.removeAttribute("dir")},!0),this.focus()};var mt=function(e){for(var t,n=this._root,i=this._doc,o=i.createDocumentFragment(),a=c(e,n);t=a.nextNode();){var u,l,s=t.querySelectorAll("BR"),f=[],d=s.length;for(u=0;u<d;u+=1)f[u]=Ke(s[u],!1);for(;d--;)l=s[d],f[d]?b(l,i.createTextNode("\n")):y(l);for(d=(s=t.querySelectorAll("CODE")).length;d--;)y(s[d]);o.childNodes.length&&o.appendChild(i.createTextNode("\n")),o.appendChild(_(t))}for(a=new r(o,4);t=a.nextNode();)t.data=t.data.replace(/ /g," ");return o.normalize(),k(this.createElement("PRE",this._config.tagAttributes.pre,[o]),n)},gt=function(e){for(var t,n,i,o,a,u,l=this._doc,c=this._root,s=e.querySelectorAll("PRE"),f=s.length;f--;){for(n=new r(t=s[f],4);i=n.nextNode();){for(o=(o=i.data).replace(/ (?= )/g," "),a=l.createDocumentFragment();(u=o.indexOf("\n"))>-1;)a.appendChild(l.createTextNode(o.slice(0,u))),a.appendChild(l.createElement("BR")),o=o.slice(u+1);i.parentNode.insertBefore(a,i),i.data=o}C(t,c),b(t,_(t))}return e};tt.code=function(){var e=this.getSelection();return e.collapsed||l(e.commonAncestorContainer)?this.modifyBlocks(mt,e):this.changeFormat({tag:"CODE",attributes:this._config.tagAttributes.code},null,e),this.focus()},tt.removeCode=function(){var e=this.getSelection();return v(e.commonAncestorContainer,this._root,"PRE")?this.modifyBlocks(gt,e):this.changeFormat(null,{tag:"CODE"},e),this.focus()},tt.toggleCode=function(){return this.hasFormat("PRE")||this.hasFormat("CODE")?this.removeCode():this.code(),this},tt.removeAllFormatting=function(e){if(!e&&!(e=this.getSelection())||e.collapsed)return this;for(var t=this._root,n=e.commonAncestorContainer;n&&!u(n);)n=n.parentNode;if(n||(Oe(e,t),n=t),n.nodeType===U)return this;this.saveUndoState(e),xe(e,n,n,t);for(var r,i,o=n.ownerDocument,a=e.startContainer,l=e.startOffset,c=e.endContainer,s=e.endOffset,f=o.createDocumentFragment(),d=o.createDocumentFragment(),p=x(c,s,n,t),h=x(a,l,n,t);h!==p;)r=h.nextSibling,f.appendChild(h),h=r;return D(this,f,d),d.normalize(),h=d.firstChild,r=d.lastChild,i=n.childNodes,h?(n.insertBefore(d,p),l=ae.call(i,h),s=ae.call(i,r)+1):s=l=ae.call(i,p),e.setStart(n,l),e.setEnd(n,s),E(n,e),Ce(e),this.setSelection(e),this._updatePath(e,!0),this.focus()},tt.increaseQuoteLevel=vt("modifyBlocks",function(e){return this.createElement("BLOCKQUOTE",this._config.tagAttributes.blockquote,[e])}),tt.decreaseQuoteLevel=vt("modifyBlocks",ct),tt.makeUnorderedList=vt("modifyBlocks",function(e){return ft(this,e,"UL"),e}),tt.makeOrderedList=vt("modifyBlocks",function(e){return ft(this,e,"OL"),e}),tt.removeList=vt("modifyBlocks",function(e){var t,n,r,i,o,a=e.querySelectorAll("UL, OL"),l=e.querySelectorAll("LI"),c=this._root;for(t=0,n=a.length;t<n;t+=1)C(i=_(r=a[t]),c),b(r,i);for(t=0,n=l.length;t<n;t+=1)u(o=l[t])?b(o,this.createDefaultBlock([_(o)])):(C(o,c),b(o,_(o)));return e}),O.isInline=a,O.isBlock=u,O.isContainer=l,O.getBlockWalker=c,O.getPreviousBlock=s,O.getNextBlock=f,O.areAlike=p,O.hasTagAttributes=h,O.getNearest=v,O.isOrContains=m,O.detach=y,O.replaceWith=b,O.empty=_,O.getNodeBefore=me,O.getNodeAfter=ge,O.insertNodeInRange=ye,O.extractContentsOfRange=be,O.deleteContentsOfRange=_e,O.insertTreeFragmentIntoRange=we,O.isNodeContainedInRange=ke,O.moveRangeBoundariesDownTree=Ce,O.moveRangeBoundariesUpTree=xe,O.getStartBlockOfRange=Ee,O.getEndBlockOfRange=Se,O.contentWalker=Te,O.rangeDoesStartAtBlockBoundary=Ne,O.rangeDoesEndAtBlockBoundary=Pe,O.expandRangeToBlockBoundaries=Oe,O.onPaste=Je,O.addLinks=pt,O.splitBlock=lt,O.startSelectionId="squire-selection-start",O.endSelectionId=at,e.exports=O}(document)},84:function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(169)},85:function(e,t,n){"use strict";
/** @license React v16.9.0
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(49),i="function"==typeof Symbol&&Symbol.for,o=i?Symbol.for("react.element"):60103,a=i?Symbol.for("react.portal"):60106,u=i?Symbol.for("react.fragment"):60107,l=i?Symbol.for("react.strict_mode"):60108,c=i?Symbol.for("react.profiler"):60114,s=i?Symbol.for("react.provider"):60109,f=i?Symbol.for("react.context"):60110,d=i?Symbol.for("react.forward_ref"):60112,p=i?Symbol.for("react.suspense"):60113,h=i?Symbol.for("react.suspense_list"):60120,v=i?Symbol.for("react.memo"):60115,m=i?Symbol.for("react.lazy"):60116;i&&Symbol.for("react.fundamental"),i&&Symbol.for("react.responder");var g="function"==typeof Symbol&&Symbol.iterator;function y(e){for(var t=e.message,n="https://reactjs.org/docs/error-decoder.html?invariant="+t,r=1;r<arguments.length;r++)n+="&args[]="+encodeURIComponent(arguments[r]);return e.message="Minified React error #"+t+"; visit "+n+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",e}var b={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},_={};function w(e,t,n){this.props=e,this.context=t,this.refs=_,this.updater=n||b}function k(){}function C(e,t,n){this.props=e,this.context=t,this.refs=_,this.updater=n||b}w.prototype.isReactComponent={},w.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw y(Error(85));this.updater.enqueueSetState(this,e,t,"setState")},w.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},k.prototype=w.prototype;var x=C.prototype=new k;x.constructor=C,r(x,w.prototype),x.isPureReactComponent=!0;var E={current:null},S={suspense:null},T={current:null},N=Object.prototype.hasOwnProperty,P={key:!0,ref:!0,__self:!0,__source:!0};function O(e,t,n){var r=void 0,i={},a=null,u=null;if(null!=t)for(r in void 0!==t.ref&&(u=t.ref),void 0!==t.key&&(a=""+t.key),t)N.call(t,r)&&!P.hasOwnProperty(r)&&(i[r]=t[r]);var l=arguments.length-2;if(1===l)i.children=n;else if(1<l){for(var c=Array(l),s=0;s<l;s++)c[s]=arguments[s+2];i.children=c}if(e&&e.defaultProps)for(r in l=e.defaultProps)void 0===i[r]&&(i[r]=l[r]);return{$$typeof:o,type:e,key:a,ref:u,props:i,_owner:T.current}}function R(e){return"object"==typeof e&&null!==e&&e.$$typeof===o}var L=/\/+/g,A=[];function D(e,t,n,r){if(A.length){var i=A.pop();return i.result=e,i.keyPrefix=t,i.func=n,i.context=r,i.count=0,i}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function I(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>A.length&&A.push(e)}function U(e,t,n){return null==e?0:function e(t,n,r,i){var u=typeof t;"undefined"!==u&&"boolean"!==u||(t=null);var l=!1;if(null===t)l=!0;else switch(u){case"string":case"number":l=!0;break;case"object":switch(t.$$typeof){case o:case a:l=!0}}if(l)return r(i,t,""===n?"."+F(t,0):n),1;if(l=0,n=""===n?".":n+":",Array.isArray(t))for(var c=0;c<t.length;c++){var s=n+F(u=t[c],c);l+=e(u,s,r,i)}else if(s=null===t||"object"!=typeof t?null:"function"==typeof(s=g&&t[g]||t["@@iterator"])?s:null,"function"==typeof s)for(t=s.call(t),c=0;!(u=t.next()).done;)l+=e(u=u.value,s=n+F(u,c++),r,i);else if("object"===u)throw r=""+t,y(Error(31),"[object Object]"===r?"object with keys {"+Object.keys(t).join(", ")+"}":r,"");return l}(e,"",t,n)}function F(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,function(e){return t[e]})}(e.key):t.toString(36)}function B(e,t){e.func.call(e.context,t,e.count++)}function z(e,t,n){var r=e.result,i=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?M(e,r,n,function(e){return e}):null!=e&&(R(e)&&(e=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,i+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(L,"$&/")+"/")+n)),r.push(e))}function M(e,t,n,r,i){var o="";null!=n&&(o=(""+n).replace(L,"$&/")+"/"),U(e,z,t=D(t,o,r,i)),I(t)}function j(){var e=E.current;if(null===e)throw y(Error(321));return e}var W={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return M(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;U(e,B,t=D(null,null,t,n)),I(t)},count:function(e){return U(e,function(){return null},null)},toArray:function(e){var t=[];return M(e,t,null,function(e){return e}),t},only:function(e){if(!R(e))throw y(Error(143));return e}},createRef:function(){return{current:null}},Component:w,PureComponent:C,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:f,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:s,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:d,render:e}},lazy:function(e){return{$$typeof:m,_ctor:e,_status:-1,_result:null}},memo:function(e,t){return{$$typeof:v,type:e,compare:void 0===t?null:t}},useCallback:function(e,t){return j().useCallback(e,t)},useContext:function(e,t){return j().useContext(e,t)},useEffect:function(e,t){return j().useEffect(e,t)},useImperativeHandle:function(e,t,n){return j().useImperativeHandle(e,t,n)},useDebugValue:function(){},useLayoutEffect:function(e,t){return j().useLayoutEffect(e,t)},useMemo:function(e,t){return j().useMemo(e,t)},useReducer:function(e,t,n){return j().useReducer(e,t,n)},useRef:function(e){return j().useRef(e)},useState:function(e){return j().useState(e)},Fragment:u,Profiler:c,StrictMode:l,Suspense:p,unstable_SuspenseList:h,createElement:O,cloneElement:function(e,t,n){if(null==e)throw y(Error(267),e);var i=void 0,a=r({},e.props),u=e.key,l=e.ref,c=e._owner;if(null!=t){void 0!==t.ref&&(l=t.ref,c=T.current),void 0!==t.key&&(u=""+t.key);var s=void 0;for(i in e.type&&e.type.defaultProps&&(s=e.type.defaultProps),t)N.call(t,i)&&!P.hasOwnProperty(i)&&(a[i]=void 0===t[i]&&void 0!==s?s[i]:t[i])}if(1===(i=arguments.length-2))a.children=n;else if(1<i){s=Array(i);for(var f=0;f<i;f++)s[f]=arguments[f+2];a.children=s}return{$$typeof:o,type:e.type,key:u,ref:l,props:a,_owner:c}},createFactory:function(e){var t=O.bind(null,e);return t.type=e,t},isValidElement:R,version:"16.9.0",unstable_withSuspenseConfig:function(e,t){var n=S.suspense;S.suspense=void 0===t?null:t;try{e()}finally{S.suspense=n}},__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentDispatcher:E,ReactCurrentBatchConfig:S,ReactCurrentOwner:T,IsSomeRendererActing:{current:!1},assign:r}},H={default:W},$=H&&W||H;e.exports=$.default||$},86:function(e,t,n){"use strict";var r=n(87);function i(){}function o(){}o.resetWarningCache=i,e.exports=function(){function e(e,t,n,i,o,a){if(a!==r){var u=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw u.name="Invariant Violation",u}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:o,resetWarningCache:i};return n.PropTypes=n,n}},87:function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},9:function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var i=(a=r,u=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(u),"/*# ".concat(l," */")),o=r.sources.map(function(e){return"/*# sourceURL=".concat(r.sourceRoot).concat(e," */")});return[n].concat(o).concat([i]).join("\n")}var a,u,l;return[n].join("\n")}(t,e);return t[2]?"@media ".concat(t[2],"{").concat(n,"}"):n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},i=0;i<this.length;i++){var o=this[i][0];null!=o&&(r[o]=!0)}for(var a=0;a<e.length;a++){var u=e[a];null!=u[0]&&r[u[0]]||(n&&!u[2]?u[2]=n:n&&(u[2]="(".concat(u[2],") and (").concat(n,")")),t.push(u))}},t}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9pbnRlcmFjdGlvbi9odG1sLWVkaXRvci9odG1sLWVkaXRvci5sZXNzP2Y2YTgiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvaW50ZXJhY3Rpb24vaHRtbC1lZGl0b3IvaHRtbC1lZGl0b3IubGVzcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2ludGVyYWN0aW9uL2h0bWwtZWRpdG9yL2h0bWwtZWRpdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvbG9kYXNoLmpzIiwid2VicGFjazovLy8uL3NyYy9pb3MvaW9zLWh0bWwtZWRpdG9yL2lvcy1odG1sLWVkaXRvci5sZXNzPzM5OGUiLCJ3ZWJwYWNrOi8vLy4vc3JjL2lvcy9pb3MtaHRtbC1lZGl0b3IvaW9zLWh0bWwtZWRpdG9yLmxlc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2lvcy9oeWJyaWQubGVzcz85ZThjIiwid2VicGFjazovLy8uL3NyYy9pb3MvaHlicmlkLmxlc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2lvcy9pb3MtaHRtbC1lZGl0b3IvaW9zLWh0bWwtZWRpdG9yLmpzIiwid2VicGFjazovLy8uL3NyYy9pb3MvcmVhY3QtYnJpZGdlLmpzIiwid2VicGFjazovLy8uL3NyYy9pb3MvaHlicmlkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmplY3QtYXNzaWduL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zcXVpcmUtcnRlL2J1aWxkL3NxdWlyZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwibWVtbyIsInN0eWxlc0luRG9tIiwiaXNPbGRJRSIsIkJvb2xlYW4iLCJ3aW5kb3ciLCJkb2N1bWVudCIsImFsbCIsImF0b2IiLCJnZXRUYXJnZXQiLCJ0YXJnZXQiLCJzdHlsZVRhcmdldCIsInF1ZXJ5U2VsZWN0b3IiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwibGlzdFRvU3R5bGVzIiwibGlzdCIsIm9wdGlvbnMiLCJzdHlsZXMiLCJuZXdTdHlsZXMiLCJsZW5ndGgiLCJpdGVtIiwiaWQiLCJiYXNlIiwicGFydCIsImNzcyIsIm1lZGlhIiwic291cmNlTWFwIiwicGFydHMiLCJwdXNoIiwiYWRkU3R5bGVzVG9Eb20iLCJkb21TdHlsZSIsImoiLCJyZWZzIiwiYWRkU3R5bGUiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZSIsImNyZWF0ZUVsZW1lbnQiLCJhdHRyaWJ1dGVzIiwibm9uY2UiLCJrZXlzIiwiZm9yRWFjaCIsInNldEF0dHJpYnV0ZSIsImluc2VydCIsIkVycm9yIiwiYXBwZW5kQ2hpbGQiLCJ0ZXh0U3RvcmUiLCJyZXBsYWNlVGV4dCIsImluZGV4IiwicmVwbGFjZW1lbnQiLCJmaWx0ZXIiLCJqb2luIiwiYXBwbHlUb1NpbmdsZXRvblRhZyIsInJlbW92ZSIsIm9iaiIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiY3NzTm9kZSIsImNyZWF0ZVRleHROb2RlIiwiY2hpbGROb2RlcyIsInJlbW92ZUNoaWxkIiwiaW5zZXJ0QmVmb3JlIiwic2luZ2xldG9uIiwic2luZ2xldG9uQ291bnRlciIsInVwZGF0ZSIsInN0eWxlSW5kZXgiLCJidG9hIiwiY29uY2F0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZmlyc3RDaGlsZCIsInBhcmVudE5vZGUiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJuZXdPYmoiLCJuZXdMaXN0IiwibWF5UmVtb3ZlIiwiX2kiLCJfZG9tU3R5bGUiLCJjb250ZW50IiwibG9jYWxzIiwiYWEiLCJxIiwiYSIsImIiLCJtZXNzYWdlIiwiYXJndW1lbnRzIiwiYmEiLCJjYSIsImRhIiwiaW5kZXhPZiIsImVhIiwiZXh0cmFjdEV2ZW50cyIsImV2ZW50VHlwZXMiLCJmIiwiaCIsImciLCJmYSIsImsiLCJwaGFzZWRSZWdpc3RyYXRpb25OYW1lcyIsImhhIiwicmVnaXN0cmF0aW9uTmFtZSIsImlhIiwiamEiLCJkZXBlbmRlbmNpZXMiLCJsYSIsIm1hIiwibmEiLCJvYSIsInBhIiwib25FcnJvciIsInFhIiwiQXJyYXkiLCJzbGljZSIsImFwcGx5IiwidGhpcyIsInNhIiwidGEiLCJ2YSIsIndhIiwidHlwZSIsImN1cnJlbnRUYXJnZXQiLCJyYSIsInhhIiwiaXNBcnJheSIsInlhIiwiemEiLCJBYSIsIl9kaXNwYXRjaExpc3RlbmVycyIsIl9kaXNwYXRjaEluc3RhbmNlcyIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwiaXNQZXJzaXN0ZW50IiwiY29uc3RydWN0b3IiLCJyZWxlYXNlIiwiQmEiLCJDYSIsImluamVjdEV2ZW50UGx1Z2luT3JkZXIiLCJpbmplY3RFdmVudFBsdWdpbnNCeU5hbWUiLCJEYSIsInN0YXRlTm9kZSIsImRpc2FibGVkIiwiRWEiLCJNYXRoIiwicmFuZG9tIiwidG9TdHJpbmciLCJGYSIsIkdhIiwiSGEiLCJ0YWciLCJJYSIsIkphIiwiS2EiLCJMYSIsInJldHVybiIsIk1hIiwiZGlzcGF0Y2hDb25maWciLCJOYSIsIl90YXJnZXRJbnN0IiwiT2EiLCJQYSIsIlFhIiwiUmEiLCJTYSIsInRvTG93ZXJDYXNlIiwiVGEiLCJhbmltYXRpb25lbmQiLCJhbmltYXRpb25pdGVyYXRpb24iLCJhbmltYXRpb25zdGFydCIsInRyYW5zaXRpb25lbmQiLCJVYSIsIlZhIiwiV2EiLCJhbmltYXRpb24iLCJ0cmFuc2l0aW9uIiwiWGEiLCJZYSIsIlphIiwiYWIiLCJiYiIsInNwbGl0IiwiY2IiLCJkYiIsImViIiwiZmIiLCJ0ZXh0Q29udGVudCIsImdiIiwiaGIiLCJ5IiwibmF0aXZlRXZlbnQiLCJJbnRlcmZhY2UiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwicmV0dXJuVmFsdWUiLCJqYiIsImV2ZW50UG9vbCIsInBvcCIsImtiIiwiZGVzdHJ1Y3RvciIsImliIiwiZ2V0UG9vbGVkIiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJjYW5jZWxCdWJibGUiLCJwZXJzaXN0IiwiZXZlbnRQaGFzZSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwidGltZVN0YW1wIiwiRGF0ZSIsIm5vdyIsImlzVHJ1c3RlZCIsImV4dGVuZCIsImxiIiwiZGF0YSIsIm1iIiwibmIiLCJvYiIsInBiIiwiZG9jdW1lbnRNb2RlIiwicWIiLCJzYiIsInRiIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwidWIiLCJiZWZvcmVJbnB1dCIsImJ1YmJsZWQiLCJjYXB0dXJlZCIsImNvbXBvc2l0aW9uRW5kIiwiY29tcG9zaXRpb25TdGFydCIsImNvbXBvc2l0aW9uVXBkYXRlIiwidmIiLCJ3YiIsImtleUNvZGUiLCJ4YiIsImRldGFpbCIsInliIiwiQ2IiLCJsb2NhbGUiLCJ3aGljaCIsIkFiIiwiY3RybEtleSIsImFsdEtleSIsIm1ldGFLZXkiLCJjaGFyIiwiQmIiLCJEYiIsIkViIiwiRmIiLCJHYiIsIkhiIiwiSWIiLCJKYiIsIktiIiwiTGIiLCJNYiIsIk5iIiwiT2IiLCJQYiIsImNvbG9yIiwiZGF0ZSIsImRhdGV0aW1lIiwiZW1haWwiLCJtb250aCIsIm51bWJlciIsInBhc3N3b3JkIiwicmFuZ2UiLCJzZWFyY2giLCJ0ZWwiLCJ0ZXh0IiwidGltZSIsInVybCIsIndlZWsiLCJRYiIsIm5vZGVOYW1lIiwiUmIiLCJzcmNFbGVtZW50IiwiY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQiLCJub2RlVHlwZSIsIlNiIiwiVGIiLCJWYiIsIl92YWx1ZVRyYWNrZXIiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJzZXQiLCJjb25maWd1cmFibGUiLCJnZXRWYWx1ZSIsInNldFZhbHVlIiwic3RvcFRyYWNraW5nIiwiVWIiLCJXYiIsImNoZWNrZWQiLCJYYiIsIl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEIiwiUmVhY3RDdXJyZW50RGlzcGF0Y2hlciIsImN1cnJlbnQiLCJSZWFjdEN1cnJlbnRCYXRjaENvbmZpZyIsInN1c3BlbnNlIiwiWWIiLCJCIiwiZm9yIiwiWmIiLCIkYiIsImFjIiwiYmMiLCJjYyIsImRjIiwiZWMiLCJmYyIsImdjIiwiaGMiLCJpYyIsImpjIiwia2MiLCJsYyIsIml0ZXJhdG9yIiwibWMiLCJvYyIsImRpc3BsYXlOYW1lIiwiJCR0eXBlb2YiLCJyZW5kZXIiLCJfc3RhdHVzIiwiX3Jlc3VsdCIsInBjIiwiX2RlYnVnT3duZXIiLCJfZGVidWdTb3VyY2UiLCJmaWxlTmFtZSIsInJlcGxhY2UiLCJsaW5lTnVtYmVyIiwicWMiLCJyYyIsInNjIiwidGMiLCJEIiwiYWNjZXB0c0Jvb2xlYW5zIiwiYXR0cmlidXRlTmFtZSIsImF0dHJpYnV0ZU5hbWVzcGFjZSIsIm11c3RVc2VQcm9wZXJ0eSIsInByb3BlcnR5TmFtZSIsInNhbml0aXplVVJMIiwiRiIsInhjIiwieWMiLCJ0b1VwcGVyQ2FzZSIsInpjIiwidmMiLCJpc05hTiIsIndjIiwidGVzdCIsInVjIiwicmVtb3ZlQXR0cmlidXRlIiwic2V0QXR0cmlidXRlTlMiLCJBYyIsIkJjIiwiZGVmYXVsdENoZWNrZWQiLCJkZWZhdWx0VmFsdWUiLCJfd3JhcHBlclN0YXRlIiwiaW5pdGlhbENoZWNrZWQiLCJDYyIsImluaXRpYWxWYWx1ZSIsImNvbnRyb2xsZWQiLCJEYyIsIkVjIiwiRmMiLCJHYyIsIm93bmVyRG9jdW1lbnQiLCJhY3RpdmVFbGVtZW50IiwieGxpbmtIcmVmIiwiSGMiLCJjaGFuZ2UiLCJJYyIsIkpjIiwiS2MiLCJMYyIsIk1jIiwiTmMiLCJPYyIsIlBjIiwiZGV0YWNoRXZlbnQiLCJRYyIsIlJjIiwiYXR0YWNoRXZlbnQiLCJTYyIsIlRjIiwiVWMiLCJWYyIsIl9pc0lucHV0RXZlbnRTdXBwb3J0ZWQiLCJXYyIsInZpZXciLCJYYyIsIkFsdCIsIkNvbnRyb2wiLCJNZXRhIiwiU2hpZnQiLCJZYyIsImdldE1vZGlmaWVyU3RhdGUiLCJaYyIsIiRjIiwiYWQiLCJiZCIsImNkIiwiZGQiLCJzY3JlZW5YIiwic2NyZWVuWSIsImNsaWVudFgiLCJjbGllbnRZIiwicGFnZVgiLCJwYWdlWSIsInNoaWZ0S2V5IiwiYnV0dG9uIiwiYnV0dG9ucyIsInJlbGF0ZWRUYXJnZXQiLCJmcm9tRWxlbWVudCIsInRvRWxlbWVudCIsIm1vdmVtZW50WCIsIm1vdmVtZW50WSIsImVkIiwicG9pbnRlcklkIiwid2lkdGgiLCJoZWlnaHQiLCJwcmVzc3VyZSIsInRhbmdlbnRpYWxQcmVzc3VyZSIsInRpbHRYIiwidGlsdFkiLCJ0d2lzdCIsInBvaW50ZXJUeXBlIiwiaXNQcmltYXJ5IiwiZmQiLCJtb3VzZUVudGVyIiwibW91c2VMZWF2ZSIsInBvaW50ZXJFbnRlciIsInBvaW50ZXJMZWF2ZSIsImdkIiwiZGVmYXVsdFZpZXciLCJwYXJlbnRXaW5kb3ciLCJhbHRlcm5hdGUiLCJoZCIsImpkIiwia2QiLCJyZXNwb25kZXIiLCJwcm9wcyIsImxkIiwiZWZmZWN0VGFnIiwib2QiLCJxZCIsImNoaWxkIiwic2libGluZyIsInBkIiwiTWFwIiwiU2V0IiwicmQiLCJhbmltYXRpb25OYW1lIiwiZWxhcHNlZFRpbWUiLCJwc2V1ZG9FbGVtZW50Iiwic2QiLCJjbGlwYm9hcmREYXRhIiwidGQiLCJ1ZCIsImNoYXJDb2RlIiwidmQiLCJFc2MiLCJTcGFjZWJhciIsIkxlZnQiLCJVcCIsIlJpZ2h0IiwiRG93biIsIkRlbCIsIldpbiIsIk1lbnUiLCJBcHBzIiwiU2Nyb2xsIiwiTW96UHJpbnRhYmxlS2V5Iiwid2QiLCI4IiwiOSIsIjEyIiwiMTMiLCIxNiIsIjE3IiwiMTgiLCIxOSIsIjIwIiwiMjciLCIzMiIsIjMzIiwiMzQiLCIzNSIsIjM2IiwiMzciLCIzOCIsIjM5IiwiNDAiLCI0NSIsIjQ2IiwiMTEyIiwiMTEzIiwiMTE0IiwiMTE1IiwiMTE2IiwiMTE3IiwiMTE4IiwiMTE5IiwiMTIwIiwiMTIxIiwiMTIyIiwiMTIzIiwiMTQ0IiwiMTQ1IiwiMjI0IiwieGQiLCJsb2NhdGlvbiIsInJlcGVhdCIsInlkIiwiZGF0YVRyYW5zZmVyIiwiemQiLCJ0b3VjaGVzIiwidGFyZ2V0VG91Y2hlcyIsImNoYW5nZWRUb3VjaGVzIiwiQWQiLCJCZCIsImRlbHRhWCIsIndoZWVsRGVsdGFYIiwiZGVsdGFZIiwid2hlZWxEZWx0YVkiLCJ3aGVlbERlbHRhIiwiZGVsdGFaIiwiZGVsdGFNb2RlIiwiQ2QiLCJEZCIsIkVkIiwiRmQiLCJHZCIsIkhkIiwiSWQiLCJKZCIsIktkIiwiTGQiLCJldmVudFByaW9yaXR5IiwiTWQiLCJnZXRFdmVudFByaW9yaXR5IiwiTmQiLCJPZCIsIlBkIiwidGFyZ2V0SW5zdCIsImFuY2VzdG9ycyIsImNvbnRhaW5lckluZm8iLCJ0b3BMZXZlbFR5cGUiLCJRZCIsIkciLCJSZCIsIlVkIiwiYWRkRXZlbnRMaXN0ZW5lciIsIlZkIiwiV2Vha01hcCIsIldkIiwiWGQiLCJib2R5IiwiWWQiLCJaZCIsIm5vZGUiLCJvZmZzZXQiLCJuZXh0U2libGluZyIsImFlIiwiY29udGVudFdpbmRvdyIsImhyZWYiLCJiZSIsImNvbnRlbnRFZGl0YWJsZSIsImNlIiwiZGUiLCJzZWxlY3QiLCJlZSIsImZlIiwiZ2UiLCJoZSIsImllIiwic3RhcnQiLCJzZWxlY3Rpb25TdGFydCIsImVuZCIsInNlbGVjdGlvbkVuZCIsImFuY2hvck5vZGUiLCJnZXRTZWxlY3Rpb24iLCJhbmNob3JPZmZzZXQiLCJmb2N1c05vZGUiLCJmb2N1c09mZnNldCIsImplIiwib25TZWxlY3QiLCJoYXMiLCJsZSIsImNoaWxkcmVuIiwiQ2hpbGRyZW4iLCJrZSIsIm1lIiwic2VsZWN0ZWQiLCJkZWZhdWx0U2VsZWN0ZWQiLCJuZSIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwib2UiLCJwZSIsInFlIiwiU2ltcGxlRXZlbnRQbHVnaW4iLCJFbnRlckxlYXZlRXZlbnRQbHVnaW4iLCJDaGFuZ2VFdmVudFBsdWdpbiIsIlNlbGVjdEV2ZW50UGx1Z2luIiwiQmVmb3JlSW5wdXRFdmVudFBsdWdpbiIsInJlIiwiaHRtbCIsIm1hdGhtbCIsInN2ZyIsInNlIiwidGUiLCJ1ZSIsInZlIiwiTVNBcHAiLCJleGVjVW5zYWZlTG9jYWxGdW5jdGlvbiIsIm5hbWVzcGFjZVVSSSIsImlubmVySFRNTCIsIndlIiwibGFzdENoaWxkIiwibm9kZVZhbHVlIiwieGUiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImJvcmRlckltYWdlT3V0c2V0IiwiYm9yZGVySW1hZ2VTbGljZSIsImJvcmRlckltYWdlV2lkdGgiLCJib3hGbGV4IiwiYm94RmxleEdyb3VwIiwiYm94T3JkaW5hbEdyb3VwIiwiY29sdW1uQ291bnQiLCJjb2x1bW5zIiwiZmxleCIsImZsZXhHcm93IiwiZmxleFBvc2l0aXZlIiwiZmxleFNocmluayIsImZsZXhOZWdhdGl2ZSIsImZsZXhPcmRlciIsImdyaWRBcmVhIiwiZ3JpZFJvdyIsImdyaWRSb3dFbmQiLCJncmlkUm93U3BhbiIsImdyaWRSb3dTdGFydCIsImdyaWRDb2x1bW4iLCJncmlkQ29sdW1uRW5kIiwiZ3JpZENvbHVtblNwYW4iLCJncmlkQ29sdW1uU3RhcnQiLCJmb250V2VpZ2h0IiwibGluZUNsYW1wIiwibGluZUhlaWdodCIsIm9wYWNpdHkiLCJvcmRlciIsIm9ycGhhbnMiLCJ0YWJTaXplIiwid2lkb3dzIiwiekluZGV4Iiwiem9vbSIsImZpbGxPcGFjaXR5IiwiZmxvb2RPcGFjaXR5Iiwic3RvcE9wYWNpdHkiLCJzdHJva2VEYXNoYXJyYXkiLCJzdHJva2VEYXNob2Zmc2V0Iiwic3Ryb2tlTWl0ZXJsaW1pdCIsInN0cm9rZU9wYWNpdHkiLCJzdHJva2VXaWR0aCIsInllIiwiemUiLCJ0cmltIiwiQWUiLCJzZXRQcm9wZXJ0eSIsImNoYXJBdCIsInN1YnN0cmluZyIsIkNlIiwibWVudWl0ZW0iLCJhcmVhIiwiYnIiLCJjb2wiLCJlbWJlZCIsImhyIiwiaW1nIiwiaW5wdXQiLCJrZXlnZW4iLCJsaW5rIiwibWV0YSIsInBhcmFtIiwic291cmNlIiwidHJhY2siLCJ3YnIiLCJEZSIsIkVlIiwiaXMiLCJGZSIsImFkZCIsIkdlIiwiSGUiLCJJZSIsIkplIiwiYXV0b0ZvY3VzIiwiS2UiLCJfX2h0bWwiLCJMZSIsInNldFRpbWVvdXQiLCJNZSIsImNsZWFyVGltZW91dCIsIk5lIiwiT2UiLCJQZSIsIkgiLCJKIiwiUWUiLCJMIiwiTSIsIlJlIiwiU2UiLCJjb250ZXh0VHlwZXMiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0IiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQiLCJOIiwiY2hpbGRDb250ZXh0VHlwZXMiLCJUZSIsIlVlIiwiVmUiLCJXZSIsImdldENoaWxkQ29udGV4dCIsIlhlIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQiLCJZZSIsIlplIiwidW5zdGFibGVfcnVuV2l0aFByaW9yaXR5IiwiJGUiLCJ1bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrIiwiYWYiLCJ1bnN0YWJsZV9jYW5jZWxDYWxsYmFjayIsImJmIiwidW5zdGFibGVfc2hvdWxkWWllbGQiLCJjZiIsInVuc3RhYmxlX3JlcXVlc3RQYWludCIsImRmIiwidW5zdGFibGVfbm93IiwiZWYiLCJ1bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCIsImZmIiwidW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHkiLCJoZiIsInVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5IiwiamYiLCJ1bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSIsImtmIiwidW5zdGFibGVfTG93UHJpb3JpdHkiLCJsZiIsInVuc3RhYmxlX0lkbGVQcmlvcml0eSIsIm1mIiwibmYiLCJvZiIsInBmIiwicWYiLCJyZiIsInNmIiwidGYiLCJ1ZiIsInZmIiwid2YiLCJ4ZiIsInlmIiwiTyIsInpmIiwiQWYiLCJkZWZhdWx0UHJvcHMiLCJDZiIsIkRmIiwiRWYiLCJGZiIsIkdmIiwiSGYiLCJfY29udGV4dCIsIl9jdXJyZW50VmFsdWUiLCJJZiIsIkpmIiwiY2hpbGRFeHBpcmF0aW9uVGltZSIsIktmIiwiZmlyc3RDb250ZXh0IiwiZXhwaXJhdGlvblRpbWUiLCJMZiIsIk1mIiwiY29udGV4dCIsIm9ic2VydmVkQml0cyIsIm5leHQiLCJyZXNwb25kZXJzIiwiTmYiLCJPZiIsImJhc2VTdGF0ZSIsImZpcnN0VXBkYXRlIiwibGFzdFVwZGF0ZSIsImZpcnN0Q2FwdHVyZWRVcGRhdGUiLCJsYXN0Q2FwdHVyZWRVcGRhdGUiLCJmaXJzdEVmZmVjdCIsImxhc3RFZmZlY3QiLCJmaXJzdENhcHR1cmVkRWZmZWN0IiwibGFzdENhcHR1cmVkRWZmZWN0IiwiUGYiLCJRZiIsInN1c3BlbnNlQ29uZmlnIiwicGF5bG9hZCIsImNhbGxiYWNrIiwibmV4dEVmZmVjdCIsIlJmIiwiU2YiLCJ1cGRhdGVRdWV1ZSIsIm1lbW9pemVkU3RhdGUiLCJUZiIsIlVmIiwiVmYiLCJXZiIsIlhmIiwieiIsIllmIiwiWmYiLCIkZiIsImFnIiwiQ29tcG9uZW50IiwiYmciLCJmZyIsImlzTW91bnRlZCIsIl9yZWFjdEludGVybmFsRmliZXIiLCJlbnF1ZXVlU2V0U3RhdGUiLCJjZyIsImRnIiwiZWciLCJlbnF1ZXVlUmVwbGFjZVN0YXRlIiwiZW5xdWV1ZUZvcmNlVXBkYXRlIiwiZ2ciLCJzaG91bGRDb21wb25lbnRVcGRhdGUiLCJpc1B1cmVSZWFjdENvbXBvbmVudCIsImhnIiwiY29udGV4dFR5cGUiLCJzdGF0ZSIsInVwZGF0ZXIiLCJpZyIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsImpnIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwiZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUiLCJVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50RGlkTW91bnQiLCJrZyIsImxnIiwicmVmIiwiX293bmVyIiwiX3N0cmluZ1JlZiIsIm1nIiwibmciLCJvZyIsInBnIiwiZWxlbWVudFR5cGUiLCJxZyIsImltcGxlbWVudGF0aW9uIiwicmciLCJzZyIsIngiLCJ2IiwicmIiLCJ1IiwidyIsIkMiLCJkZWxldGUiLCJCZSIsImRvbmUiLCJ0ZyIsInVnIiwidmciLCJ3ZyIsInhnIiwieWciLCJ6ZyIsIkFnIiwiZG9jdW1lbnRFbGVtZW50IiwidGFnTmFtZSIsIkJnIiwiQ2ciLCJEZyIsIkVnIiwiRmciLCJHZyIsIlAiLCJIZyIsIm1lbW9pemVkUHJvcHMiLCJyZXZlYWxPcmRlciIsIklnIiwiSmciLCJLZyIsIkxnIiwiTWciLCJOZyIsIk9nIiwiUGciLCJRZyIsIlJnIiwiU2ciLCJRIiwiVGciLCJVZyIsIlIiLCJWZyIsIldnIiwiWGciLCJZZyIsIlpnIiwiJGciLCJhaCIsImJoIiwiY2giLCJkaCIsImVoIiwiZmgiLCJoaCIsImloIiwiamgiLCJxdWV1ZSIsImJhc2VVcGRhdGUiLCJraCIsImxoIiwibWgiLCJsYXN0UmVuZGVyZWRSZWR1Y2VyIiwiZGlzcGF0Y2giLCJhY3Rpb24iLCJsYXN0IiwibGFzdFJlbmRlcmVkU3RhdGUiLCJlYWdlclJlZHVjZXIiLCJlYWdlclN0YXRlIiwibmgiLCJkZXN0cm95IiwiZGVwcyIsIm9oIiwicGgiLCJxaCIsInJoIiwic2giLCJyZWFkQ29udGV4dCIsInVzZUNhbGxiYWNrIiwidXNlQ29udGV4dCIsInVzZUVmZmVjdCIsInVzZUltcGVyYXRpdmVIYW5kbGUiLCJ1c2VMYXlvdXRFZmZlY3QiLCJ1c2VNZW1vIiwidXNlUmVkdWNlciIsInVzZVJlZiIsInVzZVN0YXRlIiwidXNlRGVidWdWYWx1ZSIsInVzZVJlc3BvbmRlciIsInRoIiwidWgiLCJ2aCIsIndoIiwieGgiLCJ5aCIsInBlbmRpbmdQcm9wcyIsInpoIiwiQWgiLCJCaCIsIkNoIiwiRGgiLCJSZWFjdEN1cnJlbnRPd25lciIsIlMiLCJFaCIsIkZoIiwiR2giLCJIaCIsImNvbXBhcmUiLCJJaCIsIkpoIiwiS2giLCJMaCIsIlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudERpZFVwZGF0ZSIsIk1oIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yIiwiTmgiLCJwZW5kaW5nQ29udGV4dCIsIk9oIiwiUGgiLCJmYWxsYmFjayIsInVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrIiwiUWgiLCJpc0JhY2t3YXJkcyIsInJlbmRlcmluZyIsInRhaWwiLCJ0YWlsRXhwaXJhdGlvbiIsInRhaWxNb2RlIiwiUmgiLCJTaCIsIlRoIiwiVWgiLCJWaCIsIldoIiwiJGgiLCJhaSIsImJpIiwic3RhY2siLCJpbnN0YW5jZSIsIm9uQ2xpY2siLCJvbmNsaWNrIiwiY2kiLCJXZWFrU2V0IiwiZGkiLCJjb25zb2xlIiwiZXJyb3IiLCJnaSIsImZpIiwiaGkiLCJpaSIsImppIiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJlaSIsImtpIiwibGkiLCJtaSIsIm5pIiwiX3JlYWN0Um9vdENvbnRhaW5lciIsIm9pIiwid2FzTXVsdGlwbGUiLCJtdWx0aXBsZSIsInBpIiwiZGlzcGxheSIsInFpIiwiWWkiLCJaaSIsInRoZW4iLCJzaSIsInRpIiwiZWxlbWVudCIsInVpIiwidmkiLCJ3aSIsImNvbXBvbmVudERpZENhdGNoIiwieGkiLCJjb21wb25lbnRTdGFjayIsInlpIiwiY2VpbCIsInppIiwiQWkiLCJUIiwiQmkiLCJDaSIsIkRpIiwiRWkiLCJGaSIsIkdpIiwiSGkiLCJJaSIsIlUiLCJKaSIsIlYiLCJXIiwiWCIsIktpIiwiTGkiLCJNaSIsIk5pIiwiT2kiLCJZIiwiUGkiLCJRaSIsIlJpIiwiU2kiLCJUaSIsIlVpIiwiVmkiLCJXaSIsInRpbWVvdXRNcyIsIlhpIiwicGluZ1RpbWUiLCJaIiwiZmlyc3RQZW5kaW5nVGltZSIsImxhc3RQZW5kaW5nVGltZSIsImNhbGxiYWNrRXhwaXJhdGlvblRpbWUiLCJjYWxsYmFja05vZGUiLCIkaSIsInRpbWVvdXQiLCJhaiIsImJqIiwiY2oiLCJlaiIsImZqIiwiZ2oiLCJoaiIsImZpbmlzaGVkV29yayIsImZpbmlzaGVkRXhwaXJhdGlvblRpbWUiLCJ0aW1lb3V0SGFuZGxlIiwiaWoiLCJqaiIsInBpbmdDYWNoZSIsImtqIiwibGoiLCJmaXJzdEJhdGNoIiwiX2RlZmVyIiwiX2V4cGlyYXRpb25UaW1lIiwiX29uQ29tcGxldGUiLCJkaiIsImJ1c3lNaW5EdXJhdGlvbk1zIiwiYnVzeURlbGF5TXMiLCJtaiIsInNpemUiLCJjcmVhdGVFbGVtZW50TlMiLCJyYW5nZUNvdW50IiwiemIiLCJmb2N1c2VkRWxlbSIsInNlbGVjdGlvblJhbmdlIiwiSSIsIkUiLCJ1YSIsImdoIiwib2oiLCJfX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIkEiLCJLIiwiJGQiLCJjb250YWlucyIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwibWluIiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwic2V0RW5kIiwibGVmdCIsInNjcm9sbExlZnQiLCJ0b3AiLCJzY3JvbGxUb3AiLCJmb2N1cyIsIiRhIiwibmMiLCJtZCIsIkZqIiwiWGgiLCJZaCIsIkdqIiwibmQiLCJaaCIsImdmIiwicGoiLCJyaiIsImhpZGRlbiIsIl9jdG9yIiwiZGVmYXVsdCIsIkJmIiwic2oiLCJoeWRyYXRlIiwiX2NhbGN1bGF0ZUNoYW5nZWRCaXRzIiwidW5zdGFibGVfb2JzZXJ2ZWRCaXRzIiwidWoiLCJpc1JlYWN0Q29tcG9uZW50IiwicGVuZGluZ0NoaWxkcmVuIiwidmoiLCJ3aiIsInhqIiwieWoiLCJ6aiIsIkJqIiwiX3Jvb3QiLCJfY2FsbGJhY2tzIiwiX25leHQiLCJfaGFzQ2hpbGRyZW4iLCJfZGlkQ29tcGxldGUiLCJfY2hpbGRyZW4iLCJDaiIsIl9kaWRDb21taXQiLCJfb25Db21taXQiLCJEaiIsIl9pbnRlcm5hbFJvb3QiLCJFaiIsIkhqIiwiSmoiLCJoYXNBdHRyaWJ1dGUiLCJJaiIsIktqIiwiQWoiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9ybSIsImNvbW1pdCIsInVubW91bnQiLCJjcmVhdGVCYXRjaCIsIk5qIiwiY3JlYXRlUG9ydGFsIiwiZmluZERPTU5vZGUiLCJ1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lciIsInVubW91bnRDb21wb25lbnRBdE5vZGUiLCJ1bnN0YWJsZV9jcmVhdGVQb3J0YWwiLCJ1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyIsInVuc3RhYmxlX2ludGVyYWN0aXZlVXBkYXRlcyIsInVuc3RhYmxlX2Rpc2NyZXRlVXBkYXRlcyIsInVuc3RhYmxlX2ZsdXNoRGlzY3JldGVVcGRhdGVzIiwiZmx1c2hTeW5jIiwidW5zdGFibGVfY3JlYXRlUm9vdCIsInVuc3RhYmxlX2NyZWF0ZVN5bmNSb290IiwidW5zdGFibGVfZmx1c2hDb250cm9sbGVkIiwiRXZlbnRzIiwiZmluZEZpYmVyQnlIb3N0SW5zdGFuY2UiLCJidW5kbGVUeXBlIiwidmVyc2lvbiIsInJlbmRlcmVyUGFja2FnZU5hbWUiLCJfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJpc0Rpc2FibGVkIiwic3VwcG9ydHNGaWJlciIsImluamVjdCIsIm9uQ29tbWl0RmliZXJSb290Iiwib25Db21taXRGaWJlclVubW91bnQiLCJ0aiIsIm92ZXJyaWRlSG9va1N0YXRlIiwib3ZlcnJpZGVQcm9wcyIsInNldFN1c3BlbnNlSGFuZGxlciIsInNjaGVkdWxlVXBkYXRlIiwiY3VycmVudERpc3BhdGNoZXJSZWYiLCJmaW5kSG9zdEluc3RhbmNlQnlGaWJlciIsImZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaCIsInNjaGVkdWxlUmVmcmVzaCIsInNjaGVkdWxlUm9vdCIsInNldFJlZnJlc2hIYW5kbGVyIiwiZ2V0Q3VycmVudEZpYmVyIiwiT2oiLCJQaiIsInVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlIiwiTWVzc2FnZUNoYW5uZWwiLCJwZXJmb3JtYW5jZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwiZmxvb3IiLCJwb3N0TWVzc2FnZSIsInBvcnQyIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJwcmV2aW91cyIsInByaW9yaXR5TGV2ZWwiLCJzdGFydFRpbWUiLCJ1bnN0YWJsZV9uZXh0IiwiZGVsYXkiLCJ1bnN0YWJsZV93cmFwQ2FsbGJhY2siLCJ1bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbiIsInVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uIiwidW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGUiLCJGdW5jdGlvbiIsIndlYnBhY2tQb2x5ZmlsbCIsImRlcHJlY2F0ZSIsInBhdGhzIiwiSHRtbEVkaXRvciIsImlzRm9jdXMiLCJpbml0aWFsRm9jdXMiLCJSZWFjdCIsImxvYWRFZGl0b3IiLCJvbkJvdW5kIiwiZWRpdG9yIiwibmV3UHJvcHMiLCJzZXRTdGF0ZSIsInNldEhUTUwiLCJwbGFjZWhvbGRlciIsIl8iLCJjbGFzc05hbWUiLCJoYW5kbGVQbGFjZWhvbGRlckNsaWNrIiwiZG9jIiwiaWZyYW1lIiwib3BlbiIsIndyaXRlIiwiY2xvc2UiLCJTcXVpcmUiLCJoYW5kbGVDb250ZW50Q2hhbmdlIiwiaGFuZGxlQmx1ciIsImhhbmRsZUZvY3VzIiwiaGFuZGxlQ3Vyc29yQ2hhbmdlIiwic2V0S2V5SGFuZGxlciIsIm91dGRlbnQiLCJpbmRlbnQiLCJtYWtlT3JkZXJlZExpc3QiLCJtYWtlVW5vcmRlcmVkTGlzdCIsImdldENvbnRlbnQiLCJvbkNoYW5nZSIsIm9uQmx1ciIsIm9uRm9jdXMiLCJvbkN1cnNvckNoYW5nZSIsImdldEhUTUwiLCJoYXNGb3JtYXQiLCJjaGFuZ2VGb3JtYXQiLCJtYXliZVByZXZlbnREZWZhdWx0IiwiaW5jcmVhc2VRdW90ZUxldmVsIiwiZGVjcmVhc2VRdW90ZUxldmVsIiwicmVtb3ZlTGlzdCIsImluY3JlYXNlTGlzdExldmVsIiwiZGVjcmVhc2VMaXN0TGV2ZWwiLCJyb290IiwiY29tbW9uQW5jZXN0b3JDb250YWluZXIiLCJpbkxpc3QiLCJwcmVkaWNhdGUiLCJmaW5kUGFyZW50IiwiUHJvcFR5cGVzIiwiZnVuYyIsInN0cmluZyIsImJvb2wiLCJ1bmRlZmluZWQiLCJMQVJHRV9BUlJBWV9TSVpFIiwiQ09SRV9FUlJPUl9URVhUIiwiRlVOQ19FUlJPUl9URVhUIiwiSEFTSF9VTkRFRklORUQiLCJNQVhfTUVNT0laRV9TSVpFIiwiUExBQ0VIT0xERVIiLCJDTE9ORV9ERUVQX0ZMQUciLCJDTE9ORV9GTEFUX0ZMQUciLCJDTE9ORV9TWU1CT0xTX0ZMQUciLCJDT01QQVJFX1BBUlRJQUxfRkxBRyIsIkNPTVBBUkVfVU5PUkRFUkVEX0ZMQUciLCJXUkFQX0JJTkRfRkxBRyIsIldSQVBfQklORF9LRVlfRkxBRyIsIldSQVBfQ1VSUllfQk9VTkRfRkxBRyIsIldSQVBfQ1VSUllfRkxBRyIsIldSQVBfQ1VSUllfUklHSFRfRkxBRyIsIldSQVBfUEFSVElBTF9GTEFHIiwiV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUciLCJXUkFQX0FSWV9GTEFHIiwiV1JBUF9SRUFSR19GTEFHIiwiV1JBUF9GTElQX0ZMQUciLCJERUZBVUxUX1RSVU5DX0xFTkdUSCIsIkRFRkFVTFRfVFJVTkNfT01JU1NJT04iLCJIT1RfQ09VTlQiLCJIT1RfU1BBTiIsIkxBWllfRklMVEVSX0ZMQUciLCJMQVpZX01BUF9GTEFHIiwiSU5GSU5JVFkiLCJNQVhfU0FGRV9JTlRFR0VSIiwiTUFYX0lOVEVHRVIiLCJOQU4iLCJNQVhfQVJSQVlfTEVOR1RIIiwiTUFYX0FSUkFZX0lOREVYIiwiSEFMRl9NQVhfQVJSQVlfTEVOR1RIIiwid3JhcEZsYWdzIiwiYXJnc1RhZyIsImFycmF5VGFnIiwiYXN5bmNUYWciLCJib29sVGFnIiwiZGF0ZVRhZyIsImRvbUV4Y1RhZyIsImVycm9yVGFnIiwiZnVuY1RhZyIsImdlblRhZyIsIm1hcFRhZyIsIm51bWJlclRhZyIsIm51bGxUYWciLCJvYmplY3RUYWciLCJwcm94eVRhZyIsInJlZ2V4cFRhZyIsInNldFRhZyIsInN0cmluZ1RhZyIsInN5bWJvbFRhZyIsInVuZGVmaW5lZFRhZyIsIndlYWtNYXBUYWciLCJ3ZWFrU2V0VGFnIiwiYXJyYXlCdWZmZXJUYWciLCJkYXRhVmlld1RhZyIsImZsb2F0MzJUYWciLCJmbG9hdDY0VGFnIiwiaW50OFRhZyIsImludDE2VGFnIiwiaW50MzJUYWciLCJ1aW50OFRhZyIsInVpbnQ4Q2xhbXBlZFRhZyIsInVpbnQxNlRhZyIsInVpbnQzMlRhZyIsInJlRW1wdHlTdHJpbmdMZWFkaW5nIiwicmVFbXB0eVN0cmluZ01pZGRsZSIsInJlRW1wdHlTdHJpbmdUcmFpbGluZyIsInJlRXNjYXBlZEh0bWwiLCJyZVVuZXNjYXBlZEh0bWwiLCJyZUhhc0VzY2FwZWRIdG1sIiwiUmVnRXhwIiwicmVIYXNVbmVzY2FwZWRIdG1sIiwicmVFc2NhcGUiLCJyZUV2YWx1YXRlIiwicmVJbnRlcnBvbGF0ZSIsInJlSXNEZWVwUHJvcCIsInJlSXNQbGFpblByb3AiLCJyZVByb3BOYW1lIiwicmVSZWdFeHBDaGFyIiwicmVIYXNSZWdFeHBDaGFyIiwicmVUcmltIiwicmVUcmltU3RhcnQiLCJyZVRyaW1FbmQiLCJyZVdyYXBDb21tZW50IiwicmVXcmFwRGV0YWlscyIsInJlU3BsaXREZXRhaWxzIiwicmVBc2NpaVdvcmQiLCJyZUVzY2FwZUNoYXIiLCJyZUVzVGVtcGxhdGUiLCJyZUZsYWdzIiwicmVJc0JhZEhleCIsInJlSXNCaW5hcnkiLCJyZUlzSG9zdEN0b3IiLCJyZUlzT2N0YWwiLCJyZUlzVWludCIsInJlTGF0aW4iLCJyZU5vTWF0Y2giLCJyZVVuZXNjYXBlZFN0cmluZyIsInJzQ29tYm9SYW5nZSIsInJzQ29tYm9NYXJrc1JhbmdlIiwicnNCcmVha1JhbmdlIiwicnNNYXRoT3BSYW5nZSIsInJzQXN0cmFsIiwicnNCcmVhayIsInJzQ29tYm8iLCJyc0RpZ2l0cyIsInJzRGluZ2JhdCIsInJzTG93ZXIiLCJyc01pc2MiLCJyc0ZpdHoiLCJyc05vbkFzdHJhbCIsInJzUmVnaW9uYWwiLCJyc1N1cnJQYWlyIiwicnNVcHBlciIsInJzTWlzY0xvd2VyIiwicnNNaXNjVXBwZXIiLCJyZU9wdE1vZCIsInJzU2VxIiwicnNFbW9qaSIsInJzU3ltYm9sIiwicmVBcG9zIiwicmVDb21ib01hcmsiLCJyZVVuaWNvZGUiLCJyZVVuaWNvZGVXb3JkIiwicmVIYXNVbmljb2RlIiwicmVIYXNVbmljb2RlV29yZCIsImNvbnRleHRQcm9wcyIsInRlbXBsYXRlQ291bnRlciIsInR5cGVkQXJyYXlUYWdzIiwiY2xvbmVhYmxlVGFncyIsInN0cmluZ0VzY2FwZXMiLCJmcmVlUGFyc2VGbG9hdCIsInBhcnNlRmxvYXQiLCJmcmVlUGFyc2VJbnQiLCJwYXJzZUludCIsImZyZWVHbG9iYWwiLCJnbG9iYWwiLCJmcmVlU2VsZiIsInNlbGYiLCJmcmVlRXhwb3J0cyIsImZyZWVNb2R1bGUiLCJtb2R1bGVFeHBvcnRzIiwiZnJlZVByb2Nlc3MiLCJwcm9jZXNzIiwibm9kZVV0aWwiLCJ0eXBlcyIsInJlcXVpcmUiLCJiaW5kaW5nIiwibm9kZUlzQXJyYXlCdWZmZXIiLCJpc0FycmF5QnVmZmVyIiwibm9kZUlzRGF0ZSIsImlzRGF0ZSIsIm5vZGVJc01hcCIsImlzTWFwIiwibm9kZUlzUmVnRXhwIiwiaXNSZWdFeHAiLCJub2RlSXNTZXQiLCJpc1NldCIsIm5vZGVJc1R5cGVkQXJyYXkiLCJpc1R5cGVkQXJyYXkiLCJ0aGlzQXJnIiwiYXJncyIsImFycmF5QWdncmVnYXRvciIsImFycmF5Iiwic2V0dGVyIiwiaXRlcmF0ZWUiLCJhY2N1bXVsYXRvciIsImFycmF5RWFjaCIsImFycmF5RWFjaFJpZ2h0IiwiYXJyYXlFdmVyeSIsImFycmF5RmlsdGVyIiwicmVzSW5kZXgiLCJyZXN1bHQiLCJhcnJheUluY2x1ZGVzIiwiYmFzZUluZGV4T2YiLCJhcnJheUluY2x1ZGVzV2l0aCIsImNvbXBhcmF0b3IiLCJhcnJheU1hcCIsImFycmF5UHVzaCIsInZhbHVlcyIsImFycmF5UmVkdWNlIiwiaW5pdEFjY3VtIiwiYXJyYXlSZWR1Y2VSaWdodCIsImFycmF5U29tZSIsImFzY2lpU2l6ZSIsImJhc2VQcm9wZXJ0eSIsImJhc2VGaW5kS2V5IiwiY29sbGVjdGlvbiIsImVhY2hGdW5jIiwiYmFzZUZpbmRJbmRleCIsImZyb21JbmRleCIsImZyb21SaWdodCIsInN0cmljdEluZGV4T2YiLCJiYXNlSXNOYU4iLCJiYXNlSW5kZXhPZldpdGgiLCJiYXNlTWVhbiIsImJhc2VTdW0iLCJiYXNlUHJvcGVydHlPZiIsImJhc2VSZWR1Y2UiLCJiYXNlVGltZXMiLCJiYXNlVW5hcnkiLCJiYXNlVmFsdWVzIiwiY2FjaGVIYXMiLCJjYWNoZSIsImNoYXJzU3RhcnRJbmRleCIsInN0clN5bWJvbHMiLCJjaHJTeW1ib2xzIiwiY2hhcnNFbmRJbmRleCIsImRlYnVyckxldHRlciIsImVzY2FwZUh0bWxDaGFyIiwiZXNjYXBlU3RyaW5nQ2hhciIsImNociIsImhhc1VuaWNvZGUiLCJtYXBUb0FycmF5IiwibWFwIiwib3ZlckFyZyIsInRyYW5zZm9ybSIsImFyZyIsInJlcGxhY2VIb2xkZXJzIiwic2V0VG9BcnJheSIsInNldFRvUGFpcnMiLCJzdHJpbmdTaXplIiwibGFzdEluZGV4IiwidW5pY29kZVNpemUiLCJzdHJpbmdUb0FycmF5IiwibWF0Y2giLCJ1bmljb2RlVG9BcnJheSIsImFzY2lpVG9BcnJheSIsInVuZXNjYXBlSHRtbENoYXIiLCJydW5JbkNvbnRleHQiLCJ1aWQiLCJkZWZhdWx0cyIsInBpY2siLCJUeXBlRXJyb3IiLCJhcnJheVByb3RvIiwiZnVuY1Byb3RvIiwib2JqZWN0UHJvdG8iLCJjb3JlSnNEYXRhIiwiZnVuY1RvU3RyaW5nIiwiaWRDb3VudGVyIiwibWFza1NyY0tleSIsImV4ZWMiLCJJRV9QUk9UTyIsIm5hdGl2ZU9iamVjdFRvU3RyaW5nIiwib2JqZWN0Q3RvclN0cmluZyIsIm9sZERhc2giLCJyZUlzTmF0aXZlIiwiQnVmZmVyIiwiVWludDhBcnJheSIsImFsbG9jVW5zYWZlIiwiZ2V0UHJvdG90eXBlIiwiZ2V0UHJvdG90eXBlT2YiLCJvYmplY3RDcmVhdGUiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsInNwbGljZSIsInNwcmVhZGFibGVTeW1ib2wiLCJpc0NvbmNhdFNwcmVhZGFibGUiLCJzeW1JdGVyYXRvciIsInN5bVRvU3RyaW5nVGFnIiwiZ2V0TmF0aXZlIiwiY3R4Q2xlYXJUaW1lb3V0IiwiY3R4Tm93IiwiY3R4U2V0VGltZW91dCIsIm5hdGl2ZUNlaWwiLCJuYXRpdmVGbG9vciIsIm5hdGl2ZUdldFN5bWJvbHMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJuYXRpdmVJc0J1ZmZlciIsImlzQnVmZmVyIiwibmF0aXZlSXNGaW5pdGUiLCJpc0Zpbml0ZSIsIm5hdGl2ZUpvaW4iLCJuYXRpdmVLZXlzIiwibmF0aXZlTWF4IiwibWF4IiwibmF0aXZlTWluIiwibmF0aXZlTm93IiwibmF0aXZlUGFyc2VJbnQiLCJuYXRpdmVSYW5kb20iLCJuYXRpdmVSZXZlcnNlIiwicmV2ZXJzZSIsIkRhdGFWaWV3IiwiUHJvbWlzZSIsIm5hdGl2ZUNyZWF0ZSIsIm1ldGFNYXAiLCJyZWFsTmFtZXMiLCJkYXRhVmlld0N0b3JTdHJpbmciLCJ0b1NvdXJjZSIsIm1hcEN0b3JTdHJpbmciLCJwcm9taXNlQ3RvclN0cmluZyIsInNldEN0b3JTdHJpbmciLCJ3ZWFrTWFwQ3RvclN0cmluZyIsInN5bWJvbFByb3RvIiwic3ltYm9sVmFsdWVPZiIsInZhbHVlT2YiLCJzeW1ib2xUb1N0cmluZyIsImxvZGFzaCIsImlzT2JqZWN0TGlrZSIsIkxhenlXcmFwcGVyIiwiTG9kYXNoV3JhcHBlciIsIndyYXBwZXJDbG9uZSIsImJhc2VDcmVhdGUiLCJwcm90byIsImlzT2JqZWN0IiwiYmFzZUxvZGFzaCIsImNoYWluQWxsIiwiX193cmFwcGVkX18iLCJfX2FjdGlvbnNfXyIsIl9fY2hhaW5fXyIsIl9faW5kZXhfXyIsIl9fdmFsdWVzX18iLCJfX2Rpcl9fIiwiX19maWx0ZXJlZF9fIiwiX19pdGVyYXRlZXNfXyIsIl9fdGFrZUNvdW50X18iLCJfX3ZpZXdzX18iLCJIYXNoIiwiZW50cmllcyIsImNsZWFyIiwiZW50cnkiLCJMaXN0Q2FjaGUiLCJNYXBDYWNoZSIsIlNldENhY2hlIiwiX19kYXRhX18iLCJTdGFjayIsImFycmF5TGlrZUtleXMiLCJpbmhlcml0ZWQiLCJpc0FyciIsImlzQXJnIiwiaXNBcmd1bWVudHMiLCJpc0J1ZmYiLCJpc1R5cGUiLCJza2lwSW5kZXhlcyIsImlzSW5kZXgiLCJhcnJheVNhbXBsZSIsImJhc2VSYW5kb20iLCJhcnJheVNhbXBsZVNpemUiLCJzaHVmZmxlU2VsZiIsImNvcHlBcnJheSIsImJhc2VDbGFtcCIsImFycmF5U2h1ZmZsZSIsImFzc2lnbk1lcmdlVmFsdWUiLCJlcSIsImJhc2VBc3NpZ25WYWx1ZSIsImFzc2lnblZhbHVlIiwib2JqVmFsdWUiLCJhc3NvY0luZGV4T2YiLCJiYXNlQWdncmVnYXRvciIsImJhc2VFYWNoIiwiYmFzZUFzc2lnbiIsImNvcHlPYmplY3QiLCJiYXNlQXQiLCJza2lwIiwibG93ZXIiLCJ1cHBlciIsImJhc2VDbG9uZSIsImJpdG1hc2siLCJjdXN0b21pemVyIiwiaXNEZWVwIiwiaXNGbGF0IiwiaXNGdWxsIiwiaW5pdENsb25lQXJyYXkiLCJnZXRUYWciLCJpc0Z1bmMiLCJjbG9uZUJ1ZmZlciIsImluaXRDbG9uZU9iamVjdCIsImdldFN5bWJvbHNJbiIsImNvcHlTeW1ib2xzSW4iLCJrZXlzSW4iLCJiYXNlQXNzaWduSW4iLCJnZXRTeW1ib2xzIiwiY29weVN5bWJvbHMiLCJDdG9yIiwiY2xvbmVBcnJheUJ1ZmZlciIsImRhdGFWaWV3IiwiYnVmZmVyIiwiYnl0ZU9mZnNldCIsImJ5dGVMZW5ndGgiLCJjbG9uZURhdGFWaWV3IiwiY2xvbmVUeXBlZEFycmF5IiwicmVnZXhwIiwiY2xvbmVSZWdFeHAiLCJzeW1ib2wiLCJpbml0Q2xvbmVCeVRhZyIsInN0YWNrZWQiLCJzdWJWYWx1ZSIsImdldEFsbEtleXNJbiIsImdldEFsbEtleXMiLCJiYXNlQ29uZm9ybXNUbyIsImJhc2VEZWxheSIsIndhaXQiLCJiYXNlRGlmZmVyZW5jZSIsImluY2x1ZGVzIiwiaXNDb21tb24iLCJ2YWx1ZXNMZW5ndGgiLCJvdXRlciIsImNvbXB1dGVkIiwidmFsdWVzSW5kZXgiLCJ0ZW1wbGF0ZVNldHRpbmdzIiwiZ2V0TWFwRGF0YSIsInBhaXJzIiwiY3JlYXRlQmFzZUVhY2giLCJiYXNlRm9yT3duIiwiYmFzZUVhY2hSaWdodCIsImJhc2VGb3JPd25SaWdodCIsImJhc2VFdmVyeSIsImJhc2VFeHRyZW11bSIsImlzU3ltYm9sIiwiYmFzZUZpbHRlciIsImJhc2VGbGF0dGVuIiwiZGVwdGgiLCJpc1N0cmljdCIsImlzRmxhdHRlbmFibGUiLCJiYXNlRm9yIiwiY3JlYXRlQmFzZUZvciIsImJhc2VGb3JSaWdodCIsImJhc2VGdW5jdGlvbnMiLCJpc0Z1bmN0aW9uIiwiYmFzZUdldCIsInBhdGgiLCJjYXN0UGF0aCIsInRvS2V5IiwiYmFzZUdldEFsbEtleXMiLCJrZXlzRnVuYyIsInN5bWJvbHNGdW5jIiwiYmFzZUdldFRhZyIsImlzT3duIiwidW5tYXNrZWQiLCJnZXRSYXdUYWciLCJvYmplY3RUb1N0cmluZyIsImJhc2VHdCIsIm90aGVyIiwiYmFzZUhhcyIsImJhc2VIYXNJbiIsImJhc2VJbnRlcnNlY3Rpb24iLCJhcnJheXMiLCJvdGhMZW5ndGgiLCJvdGhJbmRleCIsImNhY2hlcyIsIm1heExlbmd0aCIsIkluZmluaXR5Iiwic2VlbiIsImJhc2VJbnZva2UiLCJwYXJlbnQiLCJiYXNlSXNBcmd1bWVudHMiLCJiYXNlSXNFcXVhbCIsImVxdWFsRnVuYyIsIm9iaklzQXJyIiwib3RoSXNBcnIiLCJvYmpUYWciLCJvdGhUYWciLCJvYmpJc09iaiIsIm90aElzT2JqIiwiaXNTYW1lVGFnIiwiZXF1YWxBcnJheXMiLCJjb252ZXJ0IiwiaXNQYXJ0aWFsIiwiZXF1YWxCeVRhZyIsIm9iaklzV3JhcHBlZCIsIm90aElzV3JhcHBlZCIsIm9ialVud3JhcHBlZCIsIm90aFVud3JhcHBlZCIsIm9ialByb3BzIiwib2JqTGVuZ3RoIiwic2tpcEN0b3IiLCJvdGhWYWx1ZSIsImNvbXBhcmVkIiwib2JqQ3RvciIsIm90aEN0b3IiLCJlcXVhbE9iamVjdHMiLCJiYXNlSXNFcXVhbERlZXAiLCJiYXNlSXNNYXRjaCIsIm1hdGNoRGF0YSIsIm5vQ3VzdG9taXplciIsInNyY1ZhbHVlIiwiYmFzZUlzTmF0aXZlIiwiYmFzZUl0ZXJhdGVlIiwiaWRlbnRpdHkiLCJiYXNlTWF0Y2hlc1Byb3BlcnR5IiwiYmFzZU1hdGNoZXMiLCJiYXNlS2V5cyIsImlzUHJvdG90eXBlIiwiYmFzZUtleXNJbiIsIm5hdGl2ZUtleXNJbiIsImlzUHJvdG8iLCJiYXNlTHQiLCJiYXNlTWFwIiwiaXNBcnJheUxpa2UiLCJnZXRNYXRjaERhdGEiLCJtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZSIsImlzS2V5IiwiaXNTdHJpY3RDb21wYXJhYmxlIiwiaGFzSW4iLCJiYXNlTWVyZ2UiLCJzcmNJbmRleCIsIm1lcmdlRnVuYyIsInNhZmVHZXQiLCJuZXdWYWx1ZSIsImlzVHlwZWQiLCJpc0FycmF5TGlrZU9iamVjdCIsImlzUGxhaW5PYmplY3QiLCJ0b1BsYWluT2JqZWN0IiwiYmFzZU1lcmdlRGVlcCIsImJhc2VOdGgiLCJiYXNlT3JkZXJCeSIsIml0ZXJhdGVlcyIsIm9yZGVycyIsImdldEl0ZXJhdGVlIiwiY29tcGFyZXIiLCJzb3J0IiwiYmFzZVNvcnRCeSIsIm9iakNyaXRlcmlhIiwiY3JpdGVyaWEiLCJvdGhDcml0ZXJpYSIsIm9yZGVyc0xlbmd0aCIsImNvbXBhcmVBc2NlbmRpbmciLCJjb21wYXJlTXVsdGlwbGUiLCJiYXNlUGlja0J5IiwiYmFzZVNldCIsImJhc2VQdWxsQWxsIiwiYmFzZVB1bGxBdCIsImluZGV4ZXMiLCJiYXNlVW5zZXQiLCJiYXNlUmVwZWF0IiwiYmFzZVJlc3QiLCJzZXRUb1N0cmluZyIsIm92ZXJSZXN0IiwiYmFzZVNhbXBsZSIsImJhc2VTYW1wbGVTaXplIiwibmVzdGVkIiwiYmFzZVNldERhdGEiLCJiYXNlU2V0VG9TdHJpbmciLCJjb25zdGFudCIsImJhc2VTaHVmZmxlIiwiYmFzZVNsaWNlIiwiYmFzZVNvbWUiLCJiYXNlU29ydGVkSW5kZXgiLCJyZXRIaWdoZXN0IiwibG93IiwiaGlnaCIsIm1pZCIsImJhc2VTb3J0ZWRJbmRleEJ5IiwidmFsSXNOYU4iLCJ2YWxJc051bGwiLCJ2YWxJc1N5bWJvbCIsInZhbElzVW5kZWZpbmVkIiwib3RoSXNEZWZpbmVkIiwib3RoSXNOdWxsIiwib3RoSXNSZWZsZXhpdmUiLCJvdGhJc1N5bWJvbCIsInNldExvdyIsImJhc2VTb3J0ZWRVbmlxIiwiYmFzZVRvTnVtYmVyIiwiYmFzZVRvU3RyaW5nIiwiYmFzZVVuaXEiLCJjcmVhdGVTZXQiLCJzZWVuSW5kZXgiLCJiYXNlV2hpbGUiLCJpc0Ryb3AiLCJiYXNlV3JhcHBlclZhbHVlIiwiYWN0aW9ucyIsImJhc2VYb3IiLCJiYXNlWmlwT2JqZWN0IiwiYXNzaWduRnVuYyIsInZhbHNMZW5ndGgiLCJjYXN0QXJyYXlMaWtlT2JqZWN0IiwiY2FzdEZ1bmN0aW9uIiwic3RyaW5nVG9QYXRoIiwiY2FzdFJlc3QiLCJjYXN0U2xpY2UiLCJjb3B5IiwiYXJyYXlCdWZmZXIiLCJ0eXBlZEFycmF5IiwidmFsSXNEZWZpbmVkIiwidmFsSXNSZWZsZXhpdmUiLCJjb21wb3NlQXJncyIsInBhcnRpYWxzIiwiaG9sZGVycyIsImlzQ3VycmllZCIsImFyZ3NJbmRleCIsImFyZ3NMZW5ndGgiLCJob2xkZXJzTGVuZ3RoIiwibGVmdEluZGV4IiwibGVmdExlbmd0aCIsInJhbmdlTGVuZ3RoIiwiaXNVbmN1cnJpZWQiLCJjb21wb3NlQXJnc1JpZ2h0IiwiaG9sZGVyc0luZGV4IiwicmlnaHRJbmRleCIsInJpZ2h0TGVuZ3RoIiwiaXNOZXciLCJjcmVhdGVBZ2dyZWdhdG9yIiwiaW5pdGlhbGl6ZXIiLCJjcmVhdGVBc3NpZ25lciIsImFzc2lnbmVyIiwic291cmNlcyIsImd1YXJkIiwiaXNJdGVyYXRlZUNhbGwiLCJpdGVyYWJsZSIsImNyZWF0ZUNhc2VGaXJzdCIsIm1ldGhvZE5hbWUiLCJ0cmFpbGluZyIsImNyZWF0ZUNvbXBvdW5kZXIiLCJ3b3JkcyIsImRlYnVyciIsImNyZWF0ZUN0b3IiLCJ0aGlzQmluZGluZyIsImNyZWF0ZUZpbmQiLCJmaW5kSW5kZXhGdW5jIiwiY3JlYXRlRmxvdyIsImZsYXRSZXN0IiwiZnVuY3MiLCJwcmVyZXEiLCJ0aHJ1Iiwid3JhcHBlciIsImdldEZ1bmNOYW1lIiwiZnVuY05hbWUiLCJnZXREYXRhIiwiaXNMYXppYWJsZSIsInBsYW50IiwiY3JlYXRlSHlicmlkIiwicGFydGlhbHNSaWdodCIsImhvbGRlcnNSaWdodCIsImFyZ1BvcyIsImFyeSIsImFyaXR5IiwiaXNBcnkiLCJpc0JpbmQiLCJpc0JpbmRLZXkiLCJpc0ZsaXAiLCJnZXRIb2xkZXIiLCJob2xkZXJzQ291bnQiLCJjb3VudEhvbGRlcnMiLCJuZXdIb2xkZXJzIiwiY3JlYXRlUmVjdXJyeSIsImZuIiwiYXJyTGVuZ3RoIiwib2xkQXJyYXkiLCJyZW9yZGVyIiwiY3JlYXRlSW52ZXJ0ZXIiLCJ0b0l0ZXJhdGVlIiwiYmFzZUludmVydGVyIiwiY3JlYXRlTWF0aE9wZXJhdGlvbiIsIm9wZXJhdG9yIiwiY3JlYXRlT3ZlciIsImFycmF5RnVuYyIsImNyZWF0ZVBhZGRpbmciLCJjaGFycyIsImNoYXJzTGVuZ3RoIiwic3RlcCIsInRvRmluaXRlIiwiYmFzZVJhbmdlIiwiY3JlYXRlUmVsYXRpb25hbE9wZXJhdGlvbiIsInRvTnVtYmVyIiwid3JhcEZ1bmMiLCJpc0N1cnJ5IiwibmV3RGF0YSIsInNldERhdGEiLCJzZXRXcmFwVG9TdHJpbmciLCJjcmVhdGVSb3VuZCIsInByZWNpc2lvbiIsInRvSW50ZWdlciIsInBhaXIiLCJub29wIiwiY3JlYXRlVG9QYWlycyIsImJhc2VUb1BhaXJzIiwiY3JlYXRlV3JhcCIsInNyY0JpdG1hc2siLCJuZXdCaXRtYXNrIiwiaXNDb21ibyIsIm1lcmdlRGF0YSIsImNyZWF0ZUN1cnJ5IiwiY3JlYXRlUGFydGlhbCIsImNyZWF0ZUJpbmQiLCJjdXN0b21EZWZhdWx0c0Fzc2lnbkluIiwiY3VzdG9tRGVmYXVsdHNNZXJnZSIsImN1c3RvbU9taXRDbG9uZSIsImFyclZhbHVlIiwiZmxhdHRlbiIsIm90aGVyRnVuYyIsInN0dWJBcnJheSIsImhhc1BhdGgiLCJoYXNGdW5jIiwiaXNMZW5ndGgiLCJBcnJheUJ1ZmZlciIsInJlc29sdmUiLCJjdG9yU3RyaW5nIiwiaXNNYXNrYWJsZSIsInN0dWJGYWxzZSIsIm90aGVyQXJncyIsInNob3J0T3V0IiwicmVmZXJlbmNlIiwiZGV0YWlscyIsImluc2VydFdyYXBEZXRhaWxzIiwidXBkYXRlV3JhcERldGFpbHMiLCJnZXRXcmFwRGV0YWlscyIsImNvdW50IiwibGFzdENhbGxlZCIsInN0YW1wIiwicmVtYWluaW5nIiwicmFuZCIsIm1lbW9pemUiLCJtZW1vaXplQ2FwcGVkIiwiY2hhckNvZGVBdCIsInF1b3RlIiwic3ViU3RyaW5nIiwiY2xvbmUiLCJkaWZmZXJlbmNlIiwiZGlmZmVyZW5jZUJ5IiwiZGlmZmVyZW5jZVdpdGgiLCJmaW5kSW5kZXgiLCJmaW5kTGFzdEluZGV4IiwiaW50ZXJzZWN0aW9uIiwibWFwcGVkIiwiaW50ZXJzZWN0aW9uQnkiLCJpbnRlcnNlY3Rpb25XaXRoIiwicHVsbCIsInB1bGxBbGwiLCJwdWxsQXQiLCJ1bmlvbiIsInVuaW9uQnkiLCJ1bmlvbldpdGgiLCJ1bnppcCIsImdyb3VwIiwidW56aXBXaXRoIiwid2l0aG91dCIsInhvciIsInhvckJ5IiwieG9yV2l0aCIsInppcCIsInppcFdpdGgiLCJjaGFpbiIsImludGVyY2VwdG9yIiwid3JhcHBlckF0IiwiY291bnRCeSIsImZpbmQiLCJmaW5kTGFzdCIsImZvckVhY2hSaWdodCIsImdyb3VwQnkiLCJpbnZva2VNYXAiLCJrZXlCeSIsInBhcnRpdGlvbiIsInNvcnRCeSIsImJlZm9yZSIsImJpbmRLZXkiLCJkZWJvdW5jZSIsImxhc3RBcmdzIiwibGFzdFRoaXMiLCJtYXhXYWl0IiwidGltZXJJZCIsImxhc3RDYWxsVGltZSIsImxhc3RJbnZva2VUaW1lIiwibGVhZGluZyIsIm1heGluZyIsImludm9rZUZ1bmMiLCJzaG91bGRJbnZva2UiLCJ0aW1lU2luY2VMYXN0Q2FsbCIsInRpbWVyRXhwaXJlZCIsInRyYWlsaW5nRWRnZSIsInRpbWVXYWl0aW5nIiwicmVtYWluaW5nV2FpdCIsImRlYm91bmNlZCIsImlzSW52b2tpbmciLCJsZWFkaW5nRWRnZSIsImNhbmNlbCIsImZsdXNoIiwiZGVmZXIiLCJyZXNvbHZlciIsIm1lbW9pemVkIiwiQ2FjaGUiLCJuZWdhdGUiLCJvdmVyQXJncyIsInRyYW5zZm9ybXMiLCJmdW5jc0xlbmd0aCIsInBhcnRpYWwiLCJwYXJ0aWFsUmlnaHQiLCJyZWFyZyIsImd0IiwiZ3RlIiwiaXNFcnJvciIsImlzSW50ZWdlciIsImlzTnVtYmVyIiwiaXNTdHJpbmciLCJsdCIsImx0ZSIsInRvQXJyYXkiLCJpdGVyYXRvclRvQXJyYXkiLCJyZW1haW5kZXIiLCJ0b0xlbmd0aCIsImlzQmluYXJ5IiwiYXNzaWduIiwiYXNzaWduSW4iLCJhc3NpZ25JbldpdGgiLCJhc3NpZ25XaXRoIiwiYXQiLCJwcm9wc0luZGV4IiwicHJvcHNMZW5ndGgiLCJkZWZhdWx0c0RlZXAiLCJtZXJnZVdpdGgiLCJpbnZlcnQiLCJpbnZlcnRCeSIsImludm9rZSIsIm1lcmdlIiwib21pdCIsImJhc2VQaWNrIiwicGlja0J5IiwicHJvcCIsInRvUGFpcnMiLCJ0b1BhaXJzSW4iLCJjYW1lbENhc2UiLCJ3b3JkIiwiY2FwaXRhbGl6ZSIsInVwcGVyRmlyc3QiLCJrZWJhYkNhc2UiLCJsb3dlckNhc2UiLCJsb3dlckZpcnN0Iiwic25ha2VDYXNlIiwic3RhcnRDYXNlIiwidXBwZXJDYXNlIiwicGF0dGVybiIsImhhc1VuaWNvZGVXb3JkIiwidW5pY29kZVdvcmRzIiwiYXNjaWlXb3JkcyIsImF0dGVtcHQiLCJiaW5kQWxsIiwibWV0aG9kTmFtZXMiLCJmbG93IiwiZmxvd1JpZ2h0IiwibWV0aG9kIiwibWV0aG9kT2YiLCJtaXhpbiIsIm92ZXIiLCJvdmVyRXZlcnkiLCJvdmVyU29tZSIsImJhc2VQcm9wZXJ0eURlZXAiLCJyYW5nZVJpZ2h0IiwiYXVnZW5kIiwiYWRkZW5kIiwiZGl2aWRlIiwiZGl2aWRlbmQiLCJkaXZpc29yIiwibXVsdGlwbHkiLCJtdWx0aXBsaWVyIiwibXVsdGlwbGljYW5kIiwicm91bmQiLCJzdWJ0cmFjdCIsIm1pbnVlbmQiLCJzdWJ0cmFoZW5kIiwiYWZ0ZXIiLCJjYXN0QXJyYXkiLCJjaHVuayIsImNvbXBhY3QiLCJjb25kIiwiY29uZm9ybXMiLCJiYXNlQ29uZm9ybXMiLCJwcm9wZXJ0aWVzIiwiY3VycnkiLCJjdXJyeVJpZ2h0IiwiZHJvcCIsImRyb3BSaWdodCIsImRyb3BSaWdodFdoaWxlIiwiZHJvcFdoaWxlIiwiZmlsbCIsImJhc2VGaWxsIiwiZmxhdE1hcCIsImZsYXRNYXBEZWVwIiwiZmxhdE1hcERlcHRoIiwiZmxhdHRlbkRlZXAiLCJmbGF0dGVuRGVwdGgiLCJmbGlwIiwiZnJvbVBhaXJzIiwiZnVuY3Rpb25zIiwiZnVuY3Rpb25zSW4iLCJpbml0aWFsIiwibWFwS2V5cyIsIm1hcFZhbHVlcyIsIm1hdGNoZXMiLCJtYXRjaGVzUHJvcGVydHkiLCJudGhBcmciLCJvbWl0QnkiLCJvbmNlIiwib3JkZXJCeSIsInByb3BlcnR5T2YiLCJwdWxsQWxsQnkiLCJwdWxsQWxsV2l0aCIsInJlamVjdCIsInJlc3QiLCJzYW1wbGVTaXplIiwic2V0V2l0aCIsInNodWZmbGUiLCJzb3J0ZWRVbmlxIiwic29ydGVkVW5pcUJ5Iiwic2VwYXJhdG9yIiwibGltaXQiLCJzcHJlYWQiLCJ0YWtlIiwidGFrZVJpZ2h0IiwidGFrZVJpZ2h0V2hpbGUiLCJ0YWtlV2hpbGUiLCJ0YXAiLCJ0aHJvdHRsZSIsInRvUGF0aCIsImlzQXJyTGlrZSIsInVuYXJ5IiwidW5pcSIsInVuaXFCeSIsInVuaXFXaXRoIiwidW5zZXQiLCJ1cGRhdGVXaXRoIiwidmFsdWVzSW4iLCJ3cmFwIiwiemlwT2JqZWN0IiwiemlwT2JqZWN0RGVlcCIsImVudHJpZXNJbiIsImV4dGVuZFdpdGgiLCJjbGFtcCIsImNsb25lRGVlcCIsImNsb25lRGVlcFdpdGgiLCJjbG9uZVdpdGgiLCJjb25mb3Jtc1RvIiwiZGVmYXVsdFRvIiwiZW5kc1dpdGgiLCJwb3NpdGlvbiIsImVzY2FwZSIsImVzY2FwZVJlZ0V4cCIsImV2ZXJ5IiwiZmluZEtleSIsImZpbmRMYXN0S2V5IiwiZm9ySW4iLCJmb3JJblJpZ2h0IiwiZm9yT3duIiwiZm9yT3duUmlnaHQiLCJpblJhbmdlIiwiYmFzZUluUmFuZ2UiLCJpc0Jvb2xlYW4iLCJpc0VsZW1lbnQiLCJpc0VtcHR5IiwiaXNFcXVhbCIsImlzRXF1YWxXaXRoIiwiaXNNYXRjaCIsImlzTWF0Y2hXaXRoIiwiaXNOYXRpdmUiLCJpc05pbCIsImlzTnVsbCIsImlzU2FmZUludGVnZXIiLCJpc1VuZGVmaW5lZCIsImlzV2Vha01hcCIsImlzV2Vha1NldCIsImxhc3RJbmRleE9mIiwic3RyaWN0TGFzdEluZGV4T2YiLCJtYXhCeSIsIm1lYW4iLCJtZWFuQnkiLCJtaW5CeSIsInN0dWJPYmplY3QiLCJzdHViU3RyaW5nIiwic3R1YlRydWUiLCJudGgiLCJub0NvbmZsaWN0IiwicGFkIiwic3RyTGVuZ3RoIiwicGFkRW5kIiwicGFkU3RhcnQiLCJyYWRpeCIsImZsb2F0aW5nIiwidGVtcCIsInJlZHVjZSIsInJlZHVjZVJpZ2h0Iiwic2FtcGxlIiwic29tZSIsInNvcnRlZEluZGV4Iiwic29ydGVkSW5kZXhCeSIsInNvcnRlZEluZGV4T2YiLCJzb3J0ZWRMYXN0SW5kZXgiLCJzb3J0ZWRMYXN0SW5kZXhCeSIsInNvcnRlZExhc3RJbmRleE9mIiwic3RhcnRzV2l0aCIsInN1bSIsInN1bUJ5IiwidGVtcGxhdGUiLCJzZXR0aW5ncyIsImlzRXNjYXBpbmciLCJpc0V2YWx1YXRpbmciLCJpbXBvcnRzIiwiaW1wb3J0c0tleXMiLCJpbXBvcnRzVmFsdWVzIiwiaW50ZXJwb2xhdGUiLCJyZURlbGltaXRlcnMiLCJldmFsdWF0ZSIsInNvdXJjZVVSTCIsImVzY2FwZVZhbHVlIiwiaW50ZXJwb2xhdGVWYWx1ZSIsImVzVGVtcGxhdGVWYWx1ZSIsImV2YWx1YXRlVmFsdWUiLCJ2YXJpYWJsZSIsInRpbWVzIiwidG9Mb3dlciIsInRvU2FmZUludGVnZXIiLCJ0b1VwcGVyIiwidHJpbUVuZCIsInRyaW1TdGFydCIsInRydW5jYXRlIiwib21pc3Npb24iLCJuZXdFbmQiLCJ1bmlxdWVJZCIsInByZWZpeCIsImVhY2giLCJlYWNoUmlnaHQiLCJmaXJzdCIsIlZFUlNJT04iLCJpc0ZpbHRlciIsInRha2VOYW1lIiwiZHJvcE5hbWUiLCJjaGVja0l0ZXJhdGVlIiwiaXNUYWtlciIsImxvZGFzaEZ1bmMiLCJyZXRVbndyYXBwZWQiLCJpc0xhenkiLCJ1c2VMYXp5IiwiaXNIeWJyaWQiLCJpc1Vud3JhcHBlZCIsIm9ubHlMYXp5IiwiY2hhaW5OYW1lIiwiZGlyIiwiaXNSaWdodCIsImdldFZpZXciLCJpdGVyTGVuZ3RoIiwidGFrZUNvdW50IiwiaXRlckluZGV4Iiwid3JhcHBlZCIsInRvSlNPTiIsIklvc0h0bWxFZGl0b3IiLCJoYW5kbGVBY3Rpb24iLCJoYW5kbGVCb3VuZCIsIm5ld0NvbnRlbnQiLCJvbmNlUmVwb3J0ZWQiLCJzZW5kSW9zIiwic2VuZEN1cnNvciIsImNvbnRlbnREb2MiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInJlY3RzIiwiZ2V0UmFuZ2VBdCIsImdldENsaWVudFJlY3RzIiwiY3Vyc29yWSIsImxhc3RDdXJzb3JZIiwidG9nZ2xlU2VsZWN0aW9uVGFnIiwibG9nIiwiUmVhY3RCcmlkZ2UiLCJjb21wb25lbnQiLCJ0b0lvc0RhdGFJZCIsInRvSW9zRGF0YSIsImRhdGFJZCIsIl9zdGFydENvbXBvbmVudCIsIlJlYWN0RE9NIiwiZ2V0RWxlbWVudEJ5SWQiLCJhbGVydCIsInByb3BJc0VudW1lcmFibGUiLCJ0b09iamVjdCIsInZhbCIsInRlc3QxIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsInRlc3QyIiwidGVzdDMiLCJsZXR0ZXIiLCJlcnIiLCJzaG91bGRVc2VOYXRpdmUiLCJmcm9tIiwic3ltYm9scyIsInRvIiwiY3VycmVudE5vZGUiLCJwcmV2aW91c05vZGUiLCJuZXh0Tm9kZSIsImdldEF0dHJpYnV0ZSIsInJlcGxhY2VDaGlsZCIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJfX3NxdWlyZV9fIiwiY3JlYXRlRGVmYXVsdEJsb2NrIiwiX2RpZEFkZFpXUyIsImxhc3RFbGVtZW50Q2hpbGQiLCJkaWRFcnJvciIsIl9jb25maWciLCJibG9ja1RhZyIsImJsb2NrQXR0cmlidXRlcyIsInNwbGl0VGV4dCIsImNsb25lTm9kZSIsInN0YXJ0Q29udGFpbmVyIiwic3RhcnRPZmZzZXQiLCJlbmRDb250YWluZXIiLCJlbmRPZmZzZXQiLCJhcHBlbmREYXRhIiwiY29sbGFwc2UiLCJwcmV2aW91c1NpYmxpbmciLCJpc1NoaWZ0RG93biIsIl93aW4iLCJfZG9jIiwiX2V2ZW50cyIsIl9pc0ZvY3VzZWQiLCJfbGFzdFNlbGVjdGlvbiIsIl9oYXNaV1MiLCJfbGFzdEFuY2hvck5vZGUiLCJfbGFzdEZvY3VzTm9kZSIsIl9wYXRoIiwiX3dpbGxVcGRhdGVQYXRoIiwiX3VwZGF0ZVBhdGhPbkV2ZW50IiwiX3VuZG9JbmRleCIsIl91bmRvU3RhY2siLCJfdW5kb1N0YWNrTGVuZ3RoIiwiX2lzSW5VbmRvU3RhdGUiLCJfaWdub3JlQ2hhbmdlIiwiX2lnbm9yZUFsbENoYW5nZXMiLCJNdXRhdGlvbk9ic2VydmVyIiwiX2RvY1dhc0NoYW5nZWQiLCJvYnNlcnZlIiwiY2hpbGRMaXN0IiwiY2hhcmFjdGVyRGF0YSIsInN1YnRyZWUiLCJfbXV0YXRpb24iLCJfa2V5VXBEZXRlY3RDaGFuZ2UiLCJfcmVzdG9yZVNlbGVjdGlvbiIsIl9hd2FpdGluZ1Bhc3RlIiwiZXQiLCJ0dCIsIm50IiwiX2tleUhhbmRsZXJzIiwic2V0Q29uZmlnIiwiVGV4dCIsImRlbGV0ZURhdGEiLCJleGVjQ29tbWFuZCIsInNldFNlbGVjdGlvbiIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsIiQiLCJvcGVyYSIsIjEiLCIyIiwiMyIsIjExIiwicHJldmlvdXNQT05vZGUiLCJCUiIsIkhSIiwiSUZSQU1FIiwiSU1HIiwiSU5QVVQiLCJfZSIsImNvbGxhcHNlZCIsInNlbGVjdE5vZGVDb250ZW50cyIsInNldEVuZEJlZm9yZSIsImNsb25lUmFuZ2UiLCJzZWxlY3ROb2RlIiwiY29tcGFyZUJvdW5kYXJ5UG9pbnRzIiwiMjE5IiwiMjIxIiwiaXNDb21wb3NpbmciLCJzYXZlVW5kb1N0YXRlIiwiX2Vuc3VyZUJvdHRvbUxpbmUiLCJfdXBkYXRlUGF0aCIsImVudGVyIiwiX3JlY29yZFVuZG9TdGF0ZSIsIl90IiwiX3JlbW92ZVpXUyIsIl9nZXRSYW5nZUFuZFJlbW92ZUJvb2ttYXJrIiwiaW5zZXJ0RGF0YSIsInNldFN0YXJ0QWZ0ZXIiLCJtb2RpZnlCbG9ja3MiLCJmdCIsImN0Iiwic3QiLCJiYWNrc3BhY2UiLCJpc0NvbnRlbnRFZGl0YWJsZSIsInV0IiwidGFiIiwic3BhY2UiLCJyaWdodCIsIm1vZGlmeSIsInBhZ2V1cCIsIm1vdmVDdXJzb3JUb1N0YXJ0IiwicGFnZWRvd24iLCJtb3ZlQ3Vyc29yVG9FbmQiLCI0IiwiNSIsIjYiLCI3IiwiYmFja2dyb3VuZENvbG9yIiwiY2xhc3MiLCJoaWdobGlnaHQiLCJjb2xvdXIiLCJmb250U3R5bGUiLCJmb250RmFtaWx5IiwiZm9udFNpemUiLCJ0ZXh0RGVjb3JhdGlvbiIsImNsYXNzTmFtZXMiLCJTUEFOIiwiU1RST05HIiwiRU0iLCJJTlMiLCJTVFJJS0UiLCJGT05UIiwiZmFjZSIsIlRUIiwid2lsbEN1dENvcHkiLCJpbm5lclRleHQiLCJjbG9uZUNvbnRlbnRzIiwiaXRlbXMiLCJnZXRBc1N0cmluZyIsImluc2VydEhUTUwiLCJmaXJlRXZlbnQiLCJpbnNlcnRQbGFpblRleHQiLCJjb250ZW50ZWRpdGFibGUiLCJvdCIsIml0IiwiRE9NUHVyaWZ5Iiwic2FuaXRpemUiLCJBTExPV19VTktOT1dOX1BST1RPQ09MUyIsIldIT0xFX0RPQ1VNRU5UIiwiUkVUVVJOX0RPTSIsIlJFVFVSTl9ET01fRlJBR01FTlQiLCJpbXBvcnROb2RlIiwidGFnQXR0cmlidXRlcyIsImJsb2NrcXVvdGUiLCJ1bCIsIm9sIiwibGVhZk5vZGVOYW1lcyIsInVuZG8iLCJkb2N1bWVudFNpemVUaHJlc2hvbGQiLCJ1bmRvTGltaXQiLCJpc0luc2VydGVkSFRNTFNhbml0aXplZCIsImlzU2V0SFRNTFNhbml0aXplZCIsInNhbml0aXplVG9ET01GcmFnbWVudCIsImlzU3VwcG9ydGVkIiwiZ2V0RG9jdW1lbnQiLCJnZXRSb290IiwibW9kaWZ5RG9jdW1lbnQiLCJ0YWtlUmVjb3JkcyIsImRpc2Nvbm5lY3QiLCJydCIsInBhdGhDaGFuZ2UiLCJ1bmRvU3RhdGVDaGFuZ2UiLCJoYW5kbGVFdmVudCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJSYW5nZSIsImdldEN1cnNvclBvc2l0aW9uIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiX21vdmVDdXJzb3JUbyIsImJsdXIiLCJzZXRTdGFydEJlZm9yZSIsImdldFNlbGVjdGVkVGV4dCIsImdldFBhdGgiLCJkdCIsIl9zYXZlUmFuZ2VUb0Jvb2ttYXJrIiwiY2FuVW5kbyIsImNhblJlZG8iLCJfZ2V0SFRNTCIsIl9zZXRIVE1MIiwicmVkbyIsInNldEVuZEFmdGVyIiwiZ2V0Rm9udEluZm8iLCJmYW1pbHkiLCJfYWRkRm9ybWF0IiwiX3JlbW92ZUZvcm1hdCIsIkRUIiwiREQiLCJMSSIsIlBSRSIsImZvckVhY2hCbG9jayIsInB0IiwiQ3QiLCJpbnNlcnRFbGVtZW50IiwiaW5zZXJ0SW1hZ2UiLCJzcmMiLCJsaW5rUmVnRXhwIiwiZnJhZ21lbnQiLCJub3JtYWxpemUiLCJOdCIsIlN0IiwiYWRkU3R5bGVzIiwiYm9sZCIsIml0YWxpYyIsInVuZGVybGluZSIsInN0cmlrZXRocm91Z2giLCJzdWJzY3JpcHQiLCJzdXBlcnNjcmlwdCIsInJlbW92ZUJvbGQiLCJyZW1vdmVJdGFsaWMiLCJyZW1vdmVVbmRlcmxpbmUiLCJyZW1vdmVTdHJpa2V0aHJvdWdoIiwicmVtb3ZlU3Vic2NyaXB0IiwicmVtb3ZlU3VwZXJzY3JpcHQiLCJtYWtlTGluayIsInJlbW92ZUxpbmsiLCJzZXRGb250RmFjZSIsInNldEZvbnRTaXplIiwic2V0VGV4dENvbG91ciIsInNldEhpZ2hsaWdodENvbG91ciIsInNldFRleHRBbGlnbm1lbnQiLCJ0ZXh0QWxpZ24iLCJzZXRUZXh0RGlyZWN0aW9uIiwieXQiLCJwcmUiLCJUdCIsImNvZGUiLCJyZW1vdmVDb2RlIiwidG9nZ2xlQ29kZSIsInJlbW92ZUFsbEZvcm1hdHRpbmciLCJpc0lubGluZSIsImlzQmxvY2siLCJpc0NvbnRhaW5lciIsImdldEJsb2NrV2Fsa2VyIiwiZ2V0UHJldmlvdXNCbG9jayIsImdldE5leHRCbG9jayIsImFyZUFsaWtlIiwiaGFzVGFnQXR0cmlidXRlcyIsImdldE5lYXJlc3QiLCJpc09yQ29udGFpbnMiLCJkZXRhY2giLCJyZXBsYWNlV2l0aCIsImVtcHR5IiwiZ2V0Tm9kZUJlZm9yZSIsImdldE5vZGVBZnRlciIsImluc2VydE5vZGVJblJhbmdlIiwiZXh0cmFjdENvbnRlbnRzT2ZSYW5nZSIsImRlbGV0ZUNvbnRlbnRzT2ZSYW5nZSIsImluc2VydFRyZWVGcmFnbWVudEludG9SYW5nZSIsImlzTm9kZUNvbnRhaW5lZEluUmFuZ2UiLCJtb3ZlUmFuZ2VCb3VuZGFyaWVzRG93blRyZWUiLCJtb3ZlUmFuZ2VCb3VuZGFyaWVzVXBUcmVlIiwiZ2V0U3RhcnRCbG9ja09mUmFuZ2UiLCJnZXRFbmRCbG9ja09mUmFuZ2UiLCJjb250ZW50V2Fsa2VyIiwicmFuZ2VEb2VzU3RhcnRBdEJsb2NrQm91bmRhcnkiLCJyYW5nZURvZXNFbmRBdEJsb2NrQm91bmRhcnkiLCJleHBhbmRSYW5nZVRvQmxvY2tCb3VuZGFyaWVzIiwib25QYXN0ZSIsImFkZExpbmtzIiwic3BsaXRCbG9jayIsInN0YXJ0U2VsZWN0aW9uSWQiLCJlbmRTZWxlY3Rpb25JZCIsImNoZWNrRENFIiwiZm9yY2VVcGRhdGUiLCJfX3NlbGYiLCJfX3NvdXJjZSIsImtleVByZWZpeCIsIm9ubHkiLCJjcmVhdGVSZWYiLCJQdXJlQ29tcG9uZW50IiwiY3JlYXRlQ29udGV4dCIsIl9jdXJyZW50VmFsdWUyIiwiX3RocmVhZENvdW50IiwiUHJvdmlkZXIiLCJDb25zdW1lciIsImZvcndhcmRSZWYiLCJsYXp5IiwiRnJhZ21lbnQiLCJQcm9maWxlciIsIlN0cmljdE1vZGUiLCJTdXNwZW5zZSIsInVuc3RhYmxlX1N1c3BlbnNlTGlzdCIsImNsb25lRWxlbWVudCIsImNyZWF0ZUZhY3RvcnkiLCJpc1ZhbGlkRWxlbWVudCIsInVuc3RhYmxlX3dpdGhTdXNwZW5zZUNvbmZpZyIsIklzU29tZVJlbmRlcmVyQWN0aW5nIiwiUmVhY3RQcm9wVHlwZXNTZWNyZXQiLCJlbXB0eUZ1bmN0aW9uIiwiZW1wdHlGdW5jdGlvbldpdGhSZXNldCIsInJlc2V0V2FybmluZ0NhY2hlIiwic2hpbSIsInByb3BOYW1lIiwiY29tcG9uZW50TmFtZSIsInByb3BGdWxsTmFtZSIsInNlY3JldCIsImdldFNoaW0iLCJpc1JlcXVpcmVkIiwiUmVhY3RQcm9wVHlwZXMiLCJhbnkiLCJhcnJheU9mIiwiaW5zdGFuY2VPZiIsIm9iamVjdE9mIiwib25lT2YiLCJvbmVPZlR5cGUiLCJzaGFwZSIsImV4YWN0IiwiY2hlY2tQcm9wVHlwZXMiLCJ1c2VTb3VyY2VNYXAiLCJjc3NNYXBwaW5nIiwic291cmNlTWFwcGluZyIsImJhc2U2NCIsInNvdXJjZVVSTHMiLCJzb3VyY2VSb290IiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsIm1lZGlhUXVlcnkiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIl0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2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SyxJQUFRLElBQ2hELElBQVEsSUFBTSxJQUFRLElBQUssSUFBUSxJQUNuQyxJQUFRLEtBQU0sSUFBUSxLQUN0QixJQUFRLEtBQU0sSUFBUSxLQUN0QixJQUFRLEtBRVIsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQ3pDLElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUN6QyxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3hELElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDeEQsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN4RCxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN2RSxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN2RSxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3hELElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDeEQsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN4RCxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN2RSxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN2RSxJQUFVLElBQU0sSUFBVSxJQUMxQixJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFDekMsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDdkUsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDdkUsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN4RCxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3hELElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUN6QyxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUs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S0FBTUEsRUFBUyxNQUs3QixJQUZBLElBQUlpcUYsRUFBeUIsR0FFcEJucUYsRUFBSSxFQUFHQSxFQUFJcUosS0FBS2hHLE9BQVFyRCxJQUFLLENBRXBDLElBQUl1RCxFQUFLOEYsS0FBS3JKLEdBQUcsR0FFUCxNQUFOdUQsSUFDRjRtRixFQUF1QjVtRixJQUFNLEdBSWpDLElBQUssSUFBSXdELEVBQUssRUFBR0EsRUFBSzdHLEVBQVFtRCxPQUFRMEQsSUFBTSxDQUMxQyxJQUFJekQsRUFBT3BELEVBQVE2RyxHQUtKLE1BQVh6RCxFQUFLLElBQWU2bUYsRUFBdUI3bUYsRUFBSyxNQUM5QzRtRixJQUFlNW1GLEVBQUssR0FDdEJBLEVBQUssR0FBSzRtRixFQUNEQSxJQUNUNW1GLEVBQUssR0FBSyxJQUFJOEMsT0FBTzlDLEVBQUssR0FBSSxXQUFXOEMsT0FBTzhqRixFQUFZLE1BRzlEam5GLEVBQUthLEtBQUtSLE1BS1RMIiwiZmlsZSI6Imh5YnJpZC5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSA0MTYpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRG9tID0ge307XG5cbnZhciBpc09sZElFID0gZnVuY3Rpb24gaXNPbGRJRSgpIHtcbiAgdmFyIG1lbW87XG4gIHJldHVybiBmdW5jdGlvbiBtZW1vcml6ZSgpIHtcbiAgICBpZiAodHlwZW9mIG1lbW8gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBUZXN0IGZvciBJRSA8PSA5IGFzIHByb3Bvc2VkIGJ5IEJyb3dzZXJoYWNrc1xuICAgICAgLy8gQHNlZSBodHRwOi8vYnJvd3NlcmhhY2tzLmNvbS8jaGFjay1lNzFkODY5MmY2NTMzNDE3M2ZlZTcxNWMyMjJjYjgwNVxuICAgICAgLy8gVGVzdHMgZm9yIGV4aXN0ZW5jZSBvZiBzdGFuZGFyZCBnbG9iYWxzIGlzIHRvIGFsbG93IHN0eWxlLWxvYWRlclxuICAgICAgLy8gdG8gb3BlcmF0ZSBjb3JyZWN0bHkgaW50byBub24tc3RhbmRhcmQgZW52aXJvbm1lbnRzXG4gICAgICAvLyBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyL2lzc3Vlcy8xNzdcbiAgICAgIG1lbW8gPSBCb29sZWFuKHdpbmRvdyAmJiBkb2N1bWVudCAmJiBkb2N1bWVudC5hbGwgJiYgIXdpbmRvdy5hdG9iKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVtbztcbiAgfTtcbn0oKTtcblxudmFyIGdldFRhcmdldCA9IGZ1bmN0aW9uIGdldFRhcmdldCgpIHtcbiAgdmFyIG1lbW8gPSB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uIG1lbW9yaXplKHRhcmdldCkge1xuICAgIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpOyAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXG4gICAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVtb1t0YXJnZXRdO1xuICB9O1xufSgpO1xuXG5mdW5jdGlvbiBsaXN0VG9TdHlsZXMobGlzdCwgb3B0aW9ucykge1xuICB2YXIgc3R5bGVzID0gW107XG4gIHZhciBuZXdTdHlsZXMgPSB7fTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNzcyA9IGl0ZW1bMV07XG4gICAgdmFyIG1lZGlhID0gaXRlbVsyXTtcbiAgICB2YXIgc291cmNlTWFwID0gaXRlbVszXTtcbiAgICB2YXIgcGFydCA9IHtcbiAgICAgIGNzczogY3NzLFxuICAgICAgbWVkaWE6IG1lZGlhLFxuICAgICAgc291cmNlTWFwOiBzb3VyY2VNYXBcbiAgICB9O1xuXG4gICAgaWYgKCFuZXdTdHlsZXNbaWRdKSB7XG4gICAgICBzdHlsZXMucHVzaChuZXdTdHlsZXNbaWRdID0ge1xuICAgICAgICBpZDogaWQsXG4gICAgICAgIHBhcnRzOiBbcGFydF1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBuZXdTdHlsZXNbaWRdLnBhcnRzLnB1c2gocGFydCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHN0eWxlcztcbn1cblxuZnVuY3Rpb24gYWRkU3R5bGVzVG9Eb20oc3R5bGVzLCBvcHRpb25zKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBzdHlsZXNbaV07XG4gICAgdmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF07XG4gICAgdmFyIGogPSAwO1xuXG4gICAgaWYgKGRvbVN0eWxlKSB7XG4gICAgICBkb21TdHlsZS5yZWZzKys7XG5cbiAgICAgIGZvciAoOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgZG9tU3R5bGUucGFydHNbal0oaXRlbS5wYXJ0c1tqXSk7XG4gICAgICB9XG5cbiAgICAgIGZvciAoOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xuICAgICAgICBkb21TdHlsZS5wYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0sIG9wdGlvbnMpKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHBhcnRzID0gW107XG5cbiAgICAgIGZvciAoOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xuICAgICAgICBwYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0sIG9wdGlvbnMpKTtcbiAgICAgIH1cblxuICAgICAgc3R5bGVzSW5Eb21baXRlbS5pZF0gPSB7XG4gICAgICAgIGlkOiBpdGVtLmlkLFxuICAgICAgICByZWZzOiAxLFxuICAgICAgICBwYXJ0czogcGFydHNcbiAgICAgIH07XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zLmF0dHJpYnV0ZXMubm9uY2UgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSAndW5kZWZpbmVkJyA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICAgIGlmIChub25jZSkge1xuICAgICAgb3B0aW9ucy5hdHRyaWJ1dGVzLm5vbmNlID0gbm9uY2U7XG4gICAgfVxuICB9XG5cbiAgT2JqZWN0LmtleXMob3B0aW9ucy5hdHRyaWJ1dGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoa2V5LCBvcHRpb25zLmF0dHJpYnV0ZXNba2V5XSk7XG4gIH0pO1xuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucy5pbnNlcnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBvcHRpb25zLmluc2VydChzdHlsZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHRhcmdldCA9IGdldFRhcmdldChvcHRpb25zLmluc2VydCB8fCAnaGVhZCcpO1xuXG4gICAgaWYgKCF0YXJnZXQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gICAgfVxuXG4gICAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbiAgfVxuXG4gIHJldHVybiBzdHlsZTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGUucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0eWxlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGUpO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxudmFyIHJlcGxhY2VUZXh0ID0gZnVuY3Rpb24gcmVwbGFjZVRleHQoKSB7XG4gIHZhciB0ZXh0U3RvcmUgPSBbXTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHJlcGxhY2UoaW5kZXgsIHJlcGxhY2VtZW50KSB7XG4gICAgdGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50O1xuICAgIHJldHVybiB0ZXh0U3RvcmUuZmlsdGVyKEJvb2xlYW4pLmpvaW4oJ1xcbicpO1xuICB9O1xufSgpO1xuXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnKHN0eWxlLCBpbmRleCwgcmVtb3ZlLCBvYmopIHtcbiAgdmFyIGNzcyA9IHJlbW92ZSA/ICcnIDogb2JqLmNzczsgLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJlcGxhY2VUZXh0KGluZGV4LCBjc3MpO1xuICB9IGVsc2Uge1xuICAgIHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKTtcbiAgICB2YXIgY2hpbGROb2RlcyA9IHN0eWxlLmNoaWxkTm9kZXM7XG5cbiAgICBpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHtcbiAgICAgIHN0eWxlLnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKTtcbiAgICB9XG5cbiAgICBpZiAoY2hpbGROb2Rlcy5sZW5ndGgpIHtcbiAgICAgIHN0eWxlLmluc2VydEJlZm9yZShjc3NOb2RlLCBjaGlsZE5vZGVzW2luZGV4XSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlLmFwcGVuZENoaWxkKGNzc05vZGUpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhcHBseVRvVGFnKHN0eWxlLCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IG9iai5jc3M7XG4gIHZhciBtZWRpYSA9IG9iai5tZWRpYTtcbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cbiAgaWYgKG1lZGlhKSB7XG4gICAgc3R5bGUuc2V0QXR0cmlidXRlKCdtZWRpYScsIG1lZGlhKTtcbiAgfVxuXG4gIGlmIChzb3VyY2VNYXAgJiYgYnRvYSkge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cblxuICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGUuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoc3R5bGUuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgc3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxudmFyIHNpbmdsZXRvbiA9IG51bGw7XG52YXIgc2luZ2xldG9uQ291bnRlciA9IDA7XG5cbmZ1bmN0aW9uIGFkZFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgc3R5bGU7XG4gIHZhciB1cGRhdGU7XG4gIHZhciByZW1vdmU7XG5cbiAgaWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XG4gICAgdmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XG4gICAgc3R5bGUgPSBzaW5nbGV0b24gfHwgKHNpbmdsZXRvbiA9IGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSk7XG4gICAgdXBkYXRlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCBmYWxzZSk7XG4gICAgcmVtb3ZlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICBzdHlsZSA9IGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgICB1cGRhdGUgPSBhcHBseVRvVGFnLmJpbmQobnVsbCwgc3R5bGUsIG9wdGlvbnMpO1xuXG4gICAgcmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcbiAgICB9O1xuICB9XG5cbiAgdXBkYXRlKG9iaik7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGVTdHlsZShuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbW92ZSgpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgb3B0aW9ucy5hdHRyaWJ1dGVzID0gdHlwZW9mIG9wdGlvbnMuYXR0cmlidXRlcyA9PT0gJ29iamVjdCcgPyBvcHRpb25zLmF0dHJpYnV0ZXMgOiB7fTsgLy8gRm9yY2Ugc2luZ2xlLXRhZyBzb2x1dGlvbiBvbiBJRTYtOSwgd2hpY2ggaGFzIGEgaGFyZCBsaW1pdCBvbiB0aGUgIyBvZiA8c3R5bGU+XG4gIC8vIHRhZ3MgaXQgd2lsbCBhbGxvdyBvbiBhIHBhZ2VcblxuICBpZiAoIW9wdGlvbnMuc2luZ2xldG9uICYmIHR5cGVvZiBvcHRpb25zLnNpbmdsZXRvbiAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgb3B0aW9ucy5zaW5nbGV0b24gPSBpc09sZElFKCk7XG4gIH1cblxuICB2YXIgc3R5bGVzID0gbGlzdFRvU3R5bGVzKGxpc3QsIG9wdGlvbnMpO1xuICBhZGRTdHlsZXNUb0RvbShzdHlsZXMsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICB2YXIgbWF5UmVtb3ZlID0gW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGl0ZW0gPSBzdHlsZXNbaV07XG4gICAgICB2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXTtcblxuICAgICAgaWYgKGRvbVN0eWxlKSB7XG4gICAgICAgIGRvbVN0eWxlLnJlZnMtLTtcbiAgICAgICAgbWF5UmVtb3ZlLnB1c2goZG9tU3R5bGUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChuZXdMaXN0KSB7XG4gICAgICB2YXIgbmV3U3R5bGVzID0gbGlzdFRvU3R5bGVzKG5ld0xpc3QsIG9wdGlvbnMpO1xuICAgICAgYWRkU3R5bGVzVG9Eb20obmV3U3R5bGVzLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbWF5UmVtb3ZlLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9kb21TdHlsZSA9IG1heVJlbW92ZVtfaV07XG5cbiAgICAgIGlmIChfZG9tU3R5bGUucmVmcyA9PT0gMCkge1xuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IF9kb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykge1xuICAgICAgICAgIF9kb21TdHlsZS5wYXJ0c1tqXSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgZGVsZXRlIHN0eWxlc0luRG9tW19kb21TdHlsZS5pZF07XG4gICAgICB9XG4gICAgfVxuICB9O1xufTsiLCJ2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9sZXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2h0bWwtZWRpdG9yLmxlc3NcIik7XG5cbmlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xufVxuXG52YXIgb3B0aW9ucyA9IHt9XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmIChjb250ZW50LmxvY2Fscykge1xuICBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xufVxuIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIikoZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIuaHRtbC1lZGl0b3Ige1xcbiAgd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxufVxcbi5odG1sLWVkaXRvciBpZnJhbWUge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICBib3JkZXI6IG5vbmU7XFxufVxcbi5odG1sLWVkaXRvciBpZnJhbWUgaHRtbCB7XFxuICBmb250OiAxMnB4LzIwcHggXFxcIkhlbHZldGljYSBuZXVlXFxcIiwgSGVsdmV0aWNhLCBBcmlhbCwgc2Fucy1zZXJpZjtcXG59XFxuLmh0bWwtZWRpdG9yIC5wbGFjZWhvbGRlciB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDVweDtcXG4gIGxlZnQ6IDVweDtcXG4gIGZvbnQtc3R5bGU6IGl0YWxpYztcXG59XFxuXCIsIFwiXCJdKTtcbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuOS4wXG4gKiByZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4vKlxuIE1vZGVybml6ciAzLjAuMHByZSAoQ3VzdG9tIEJ1aWxkKSB8IE1JVFxuKi9cbid1c2Ugc3RyaWN0Jzt2YXIgYWE9cmVxdWlyZShcInJlYWN0XCIpLG09cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIikscT1yZXF1aXJlKFwic2NoZWR1bGVyXCIpO2Z1bmN0aW9uIHQoYSl7Zm9yKHZhciBiPWEubWVzc2FnZSxjPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYixkPTE7ZDxhcmd1bWVudHMubGVuZ3RoO2QrKyljKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tkXSk7YS5tZXNzYWdlPVwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2IrXCI7IHZpc2l0IFwiK2MrXCIgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLiBcIjtyZXR1cm4gYX1pZighYWEpdGhyb3cgdChFcnJvcigyMjcpKTt2YXIgYmE9bnVsbCxjYT17fTtcbmZ1bmN0aW9uIGRhKCl7aWYoYmEpZm9yKHZhciBhIGluIGNhKXt2YXIgYj1jYVthXSxjPWJhLmluZGV4T2YoYSk7aWYoISgtMTxjKSl0aHJvdyB0KEVycm9yKDk2KSxhKTtpZighZWFbY10pe2lmKCFiLmV4dHJhY3RFdmVudHMpdGhyb3cgdChFcnJvcig5NyksYSk7ZWFbY109YjtjPWIuZXZlbnRUeXBlcztmb3IodmFyIGQgaW4gYyl7dmFyIGU9dm9pZCAwO3ZhciBmPWNbZF0saD1iLGc9ZDtpZihmYS5oYXNPd25Qcm9wZXJ0eShnKSl0aHJvdyB0KEVycm9yKDk5KSxnKTtmYVtnXT1mO3ZhciBrPWYucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM7aWYoayl7Zm9yKGUgaW4gaylrLmhhc093blByb3BlcnR5KGUpJiZoYShrW2VdLGgsZyk7ZT0hMH1lbHNlIGYucmVnaXN0cmF0aW9uTmFtZT8oaGEoZi5yZWdpc3RyYXRpb25OYW1lLGgsZyksZT0hMCk6ZT0hMTtpZighZSl0aHJvdyB0KEVycm9yKDk4KSxkLGEpO319fX1cbmZ1bmN0aW9uIGhhKGEsYixjKXtpZihpYVthXSl0aHJvdyB0KEVycm9yKDEwMCksYSk7aWFbYV09YjtqYVthXT1iLmV2ZW50VHlwZXNbY10uZGVwZW5kZW5jaWVzfXZhciBlYT1bXSxmYT17fSxpYT17fSxqYT17fTtmdW5jdGlvbiBrYShhLGIsYyxkLGUsZixoLGcsayl7dmFyIGw9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDMpO3RyeXtiLmFwcGx5KGMsbCl9Y2F0Y2gobil7dGhpcy5vbkVycm9yKG4pfX12YXIgbGE9ITEsbWE9bnVsbCxuYT0hMSxvYT1udWxsLHBhPXtvbkVycm9yOmZ1bmN0aW9uKGEpe2xhPSEwO21hPWF9fTtmdW5jdGlvbiBxYShhLGIsYyxkLGUsZixoLGcsayl7bGE9ITE7bWE9bnVsbDtrYS5hcHBseShwYSxhcmd1bWVudHMpfVxuZnVuY3Rpb24gcmEoYSxiLGMsZCxlLGYsaCxnLGspe3FhLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtpZihsYSl7aWYobGEpe3ZhciBsPW1hO2xhPSExO21hPW51bGx9ZWxzZSB0aHJvdyB0KEVycm9yKDE5OCkpO25hfHwobmE9ITAsb2E9bCl9fXZhciBzYT1udWxsLHRhPW51bGwsdmE9bnVsbDtmdW5jdGlvbiB3YShhLGIsYyl7dmFyIGQ9YS50eXBlfHxcInVua25vd24tZXZlbnRcIjthLmN1cnJlbnRUYXJnZXQ9dmEoYyk7cmEoZCxiLHZvaWQgMCxhKTthLmN1cnJlbnRUYXJnZXQ9bnVsbH1mdW5jdGlvbiB4YShhLGIpe2lmKG51bGw9PWIpdGhyb3cgdChFcnJvcigzMCkpO2lmKG51bGw9PWEpcmV0dXJuIGI7aWYoQXJyYXkuaXNBcnJheShhKSl7aWYoQXJyYXkuaXNBcnJheShiKSlyZXR1cm4gYS5wdXNoLmFwcGx5KGEsYiksYTthLnB1c2goYik7cmV0dXJuIGF9cmV0dXJuIEFycmF5LmlzQXJyYXkoYik/W2FdLmNvbmNhdChiKTpbYSxiXX1cbmZ1bmN0aW9uIHlhKGEsYixjKXtBcnJheS5pc0FycmF5KGEpP2EuZm9yRWFjaChiLGMpOmEmJmIuY2FsbChjLGEpfXZhciB6YT1udWxsO2Z1bmN0aW9uIEFhKGEpe2lmKGEpe3ZhciBiPWEuX2Rpc3BhdGNoTGlzdGVuZXJzLGM9YS5fZGlzcGF0Y2hJbnN0YW5jZXM7aWYoQXJyYXkuaXNBcnJheShiKSlmb3IodmFyIGQ9MDtkPGIubGVuZ3RoJiYhYS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpO2QrKyl3YShhLGJbZF0sY1tkXSk7ZWxzZSBiJiZ3YShhLGIsYyk7YS5fZGlzcGF0Y2hMaXN0ZW5lcnM9bnVsbDthLl9kaXNwYXRjaEluc3RhbmNlcz1udWxsO2EuaXNQZXJzaXN0ZW50KCl8fGEuY29uc3RydWN0b3IucmVsZWFzZShhKX19ZnVuY3Rpb24gQmEoYSl7bnVsbCE9PWEmJih6YT14YSh6YSxhKSk7YT16YTt6YT1udWxsO2lmKGEpe3lhKGEsQWEpO2lmKHphKXRocm93IHQoRXJyb3IoOTUpKTtpZihuYSl0aHJvdyBhPW9hLG5hPSExLG9hPW51bGwsYTt9fVxudmFyIENhPXtpbmplY3RFdmVudFBsdWdpbk9yZGVyOmZ1bmN0aW9uKGEpe2lmKGJhKXRocm93IHQoRXJyb3IoMTAxKSk7YmE9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYSk7ZGEoKX0saW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lOmZ1bmN0aW9uKGEpe3ZhciBiPSExLGM7Zm9yKGMgaW4gYSlpZihhLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD1hW2NdO2lmKCFjYS5oYXNPd25Qcm9wZXJ0eShjKXx8Y2FbY10hPT1kKXtpZihjYVtjXSl0aHJvdyB0KEVycm9yKDEwMiksYyk7Y2FbY109ZDtiPSEwfX1iJiZkYSgpfX07XG5mdW5jdGlvbiBEYShhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO2lmKCFjKXJldHVybiBudWxsO3ZhciBkPXNhKGMpO2lmKCFkKXJldHVybiBudWxsO2M9ZFtiXTthOnN3aXRjaChiKXtjYXNlIFwib25DbGlja1wiOmNhc2UgXCJvbkNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbkRvdWJsZUNsaWNrXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VEb3duXCI6Y2FzZSBcIm9uTW91c2VEb3duQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlTW92ZVwiOmNhc2UgXCJvbk1vdXNlTW92ZUNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZVVwXCI6Y2FzZSBcIm9uTW91c2VVcENhcHR1cmVcIjooZD0hZC5kaXNhYmxlZCl8fChhPWEudHlwZSxkPSEoXCJidXR0b25cIj09PWF8fFwiaW5wdXRcIj09PWF8fFwic2VsZWN0XCI9PT1hfHxcInRleHRhcmVhXCI9PT1hKSk7YT0hZDticmVhayBhO2RlZmF1bHQ6YT0hMX1pZihhKXJldHVybiBudWxsO2lmKGMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjKXRocm93IHQoRXJyb3IoMjMxKSxiLHR5cGVvZiBjKTtcbnJldHVybiBjfXZhciBFYT1NYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKSxGYT1cIl9fcmVhY3RJbnRlcm5hbEluc3RhbmNlJFwiK0VhLEdhPVwiX19yZWFjdEV2ZW50SGFuZGxlcnMkXCIrRWE7ZnVuY3Rpb24gSGEoYSl7aWYoYVtGYV0pcmV0dXJuIGFbRmFdO2Zvcig7IWFbRmFdOylpZihhLnBhcmVudE5vZGUpYT1hLnBhcmVudE5vZGU7ZWxzZSByZXR1cm4gbnVsbDthPWFbRmFdO3JldHVybiA1PT09YS50YWd8fDY9PT1hLnRhZz9hOm51bGx9ZnVuY3Rpb24gSWEoYSl7YT1hW0ZhXTtyZXR1cm4hYXx8NSE9PWEudGFnJiY2IT09YS50YWc/bnVsbDphfWZ1bmN0aW9uIEphKGEpe2lmKDU9PT1hLnRhZ3x8Nj09PWEudGFnKXJldHVybiBhLnN0YXRlTm9kZTt0aHJvdyB0KEVycm9yKDMzKSk7fWZ1bmN0aW9uIEthKGEpe3JldHVybiBhW0dhXXx8bnVsbH1mdW5jdGlvbiBMYShhKXtkbyBhPWEucmV0dXJuO3doaWxlKGEmJjUhPT1hLnRhZyk7cmV0dXJuIGE/YTpudWxsfVxuZnVuY3Rpb24gTWEoYSxiLGMpe2lmKGI9RGEoYSxjLmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzW2JdKSljLl9kaXNwYXRjaExpc3RlbmVycz14YShjLl9kaXNwYXRjaExpc3RlbmVycyxiKSxjLl9kaXNwYXRjaEluc3RhbmNlcz14YShjLl9kaXNwYXRjaEluc3RhbmNlcyxhKX1mdW5jdGlvbiBOYShhKXtpZihhJiZhLmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzKXtmb3IodmFyIGI9YS5fdGFyZ2V0SW5zdCxjPVtdO2I7KWMucHVzaChiKSxiPUxhKGIpO2ZvcihiPWMubGVuZ3RoOzA8Yi0tOylNYShjW2JdLFwiY2FwdHVyZWRcIixhKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKU1hKGNbYl0sXCJidWJibGVkXCIsYSl9fVxuZnVuY3Rpb24gT2EoYSxiLGMpe2EmJmMmJmMuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSYmKGI9RGEoYSxjLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUpKSYmKGMuX2Rpc3BhdGNoTGlzdGVuZXJzPXhhKGMuX2Rpc3BhdGNoTGlzdGVuZXJzLGIpLGMuX2Rpc3BhdGNoSW5zdGFuY2VzPXhhKGMuX2Rpc3BhdGNoSW5zdGFuY2VzLGEpKX1mdW5jdGlvbiBQYShhKXthJiZhLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUmJk9hKGEuX3RhcmdldEluc3QsbnVsbCxhKX1mdW5jdGlvbiBRYShhKXt5YShhLE5hKX12YXIgUmE9IShcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnR8fFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuZnVuY3Rpb24gU2EoYSxiKXt2YXIgYz17fTtjW2EudG9Mb3dlckNhc2UoKV09Yi50b0xvd2VyQ2FzZSgpO2NbXCJXZWJraXRcIithXT1cIndlYmtpdFwiK2I7Y1tcIk1velwiK2FdPVwibW96XCIrYjtyZXR1cm4gY312YXIgVGE9e2FuaW1hdGlvbmVuZDpTYShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uRW5kXCIpLGFuaW1hdGlvbml0ZXJhdGlvbjpTYShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uSXRlcmF0aW9uXCIpLGFuaW1hdGlvbnN0YXJ0OlNhKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25TdGFydFwiKSx0cmFuc2l0aW9uZW5kOlNhKFwiVHJhbnNpdGlvblwiLFwiVHJhbnNpdGlvbkVuZFwiKX0sVWE9e30sVmE9e307XG5SYSYmKFZhPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGUsXCJBbmltYXRpb25FdmVudFwiaW4gd2luZG93fHwoZGVsZXRlIFRhLmFuaW1hdGlvbmVuZC5hbmltYXRpb24sZGVsZXRlIFRhLmFuaW1hdGlvbml0ZXJhdGlvbi5hbmltYXRpb24sZGVsZXRlIFRhLmFuaW1hdGlvbnN0YXJ0LmFuaW1hdGlvbiksXCJUcmFuc2l0aW9uRXZlbnRcImluIHdpbmRvd3x8ZGVsZXRlIFRhLnRyYW5zaXRpb25lbmQudHJhbnNpdGlvbik7ZnVuY3Rpb24gV2EoYSl7aWYoVWFbYV0pcmV0dXJuIFVhW2FdO2lmKCFUYVthXSlyZXR1cm4gYTt2YXIgYj1UYVthXSxjO2ZvcihjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSYmYyBpbiBWYSlyZXR1cm4gVWFbYV09YltjXTtyZXR1cm4gYX1cbnZhciBYYT1XYShcImFuaW1hdGlvbmVuZFwiKSxZYT1XYShcImFuaW1hdGlvbml0ZXJhdGlvblwiKSxaYT1XYShcImFuaW1hdGlvbnN0YXJ0XCIpLGFiPVdhKFwidHJhbnNpdGlvbmVuZFwiKSxiYj1cImFib3J0IGNhbnBsYXkgY2FucGxheXRocm91Z2ggZHVyYXRpb25jaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgbG9hZGVkZGF0YSBsb2FkZWRtZXRhZGF0YSBsb2Fkc3RhcnQgcGF1c2UgcGxheSBwbGF5aW5nIHByb2dyZXNzIHJhdGVjaGFuZ2Ugc2Vla2VkIHNlZWtpbmcgc3RhbGxlZCBzdXNwZW5kIHRpbWV1cGRhdGUgdm9sdW1lY2hhbmdlIHdhaXRpbmdcIi5zcGxpdChcIiBcIiksY2I9bnVsbCxkYj1udWxsLGViPW51bGw7XG5mdW5jdGlvbiBmYigpe2lmKGViKXJldHVybiBlYjt2YXIgYSxiPWRiLGM9Yi5sZW5ndGgsZCxlPVwidmFsdWVcImluIGNiP2NiLnZhbHVlOmNiLnRleHRDb250ZW50LGY9ZS5sZW5ndGg7Zm9yKGE9MDthPGMmJmJbYV09PT1lW2FdO2ErKyk7dmFyIGg9Yy1hO2ZvcihkPTE7ZDw9aCYmYltjLWRdPT09ZVtmLWRdO2QrKyk7cmV0dXJuIGViPWUuc2xpY2UoYSwxPGQ/MS1kOnZvaWQgMCl9ZnVuY3Rpb24gZ2IoKXtyZXR1cm4hMH1mdW5jdGlvbiBoYigpe3JldHVybiExfVxuZnVuY3Rpb24geShhLGIsYyxkKXt0aGlzLmRpc3BhdGNoQ29uZmlnPWE7dGhpcy5fdGFyZ2V0SW5zdD1iO3RoaXMubmF0aXZlRXZlbnQ9YzthPXRoaXMuY29uc3RydWN0b3IuSW50ZXJmYWNlO2Zvcih2YXIgZSBpbiBhKWEuaGFzT3duUHJvcGVydHkoZSkmJigoYj1hW2VdKT90aGlzW2VdPWIoYyk6XCJ0YXJnZXRcIj09PWU/dGhpcy50YXJnZXQ9ZDp0aGlzW2VdPWNbZV0pO3RoaXMuaXNEZWZhdWx0UHJldmVudGVkPShudWxsIT1jLmRlZmF1bHRQcmV2ZW50ZWQ/Yy5kZWZhdWx0UHJldmVudGVkOiExPT09Yy5yZXR1cm5WYWx1ZSk/Z2I6aGI7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1oYjtyZXR1cm4gdGhpc31cbm0oeS5wcm90b3R5cGUse3ByZXZlbnREZWZhdWx0OmZ1bmN0aW9uKCl7dGhpcy5kZWZhdWx0UHJldmVudGVkPSEwO3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEucHJldmVudERlZmF1bHQ/YS5wcmV2ZW50RGVmYXVsdCgpOlwidW5rbm93blwiIT09dHlwZW9mIGEucmV0dXJuVmFsdWUmJihhLnJldHVyblZhbHVlPSExKSx0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1nYil9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEuc3RvcFByb3BhZ2F0aW9uP2Euc3RvcFByb3BhZ2F0aW9uKCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5jYW5jZWxCdWJibGUmJihhLmNhbmNlbEJ1YmJsZT0hMCksdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1nYil9LHBlcnNpc3Q6ZnVuY3Rpb24oKXt0aGlzLmlzUGVyc2lzdGVudD1nYn0saXNQZXJzaXN0ZW50OmhiLGRlc3RydWN0b3I6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZSxcbmI7Zm9yKGIgaW4gYSl0aGlzW2JdPW51bGw7dGhpcy5uYXRpdmVFdmVudD10aGlzLl90YXJnZXRJbnN0PXRoaXMuZGlzcGF0Y2hDb25maWc9bnVsbDt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPXRoaXMuaXNEZWZhdWx0UHJldmVudGVkPWhiO3RoaXMuX2Rpc3BhdGNoSW5zdGFuY2VzPXRoaXMuX2Rpc3BhdGNoTGlzdGVuZXJzPW51bGx9fSk7eS5JbnRlcmZhY2U9e3R5cGU6bnVsbCx0YXJnZXQ6bnVsbCxjdXJyZW50VGFyZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG51bGx9LGV2ZW50UGhhc2U6bnVsbCxidWJibGVzOm51bGwsY2FuY2VsYWJsZTpudWxsLHRpbWVTdGFtcDpmdW5jdGlvbihhKXtyZXR1cm4gYS50aW1lU3RhbXB8fERhdGUubm93KCl9LGRlZmF1bHRQcmV2ZW50ZWQ6bnVsbCxpc1RydXN0ZWQ6bnVsbH07XG55LmV4dGVuZD1mdW5jdGlvbihhKXtmdW5jdGlvbiBiKCl7fWZ1bmN0aW9uIGMoKXtyZXR1cm4gZC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9dmFyIGQ9dGhpcztiLnByb3RvdHlwZT1kLnByb3RvdHlwZTt2YXIgZT1uZXcgYjttKGUsYy5wcm90b3R5cGUpO2MucHJvdG90eXBlPWU7Yy5wcm90b3R5cGUuY29uc3RydWN0b3I9YztjLkludGVyZmFjZT1tKHt9LGQuSW50ZXJmYWNlLGEpO2MuZXh0ZW5kPWQuZXh0ZW5kO2liKGMpO3JldHVybiBjfTtpYih5KTtmdW5jdGlvbiBqYihhLGIsYyxkKXtpZih0aGlzLmV2ZW50UG9vbC5sZW5ndGgpe3ZhciBlPXRoaXMuZXZlbnRQb29sLnBvcCgpO3RoaXMuY2FsbChlLGEsYixjLGQpO3JldHVybiBlfXJldHVybiBuZXcgdGhpcyhhLGIsYyxkKX1cbmZ1bmN0aW9uIGtiKGEpe2lmKCEoYSBpbnN0YW5jZW9mIHRoaXMpKXRocm93IHQoRXJyb3IoMjc5KSk7YS5kZXN0cnVjdG9yKCk7MTA+dGhpcy5ldmVudFBvb2wubGVuZ3RoJiZ0aGlzLmV2ZW50UG9vbC5wdXNoKGEpfWZ1bmN0aW9uIGliKGEpe2EuZXZlbnRQb29sPVtdO2EuZ2V0UG9vbGVkPWpiO2EucmVsZWFzZT1rYn12YXIgbGI9eS5leHRlbmQoe2RhdGE6bnVsbH0pLG1iPXkuZXh0ZW5kKHtkYXRhOm51bGx9KSxuYj1bOSwxMywyNywzMl0sb2I9UmEmJlwiQ29tcG9zaXRpb25FdmVudFwiaW4gd2luZG93LHBiPW51bGw7UmEmJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmKHBiPWRvY3VtZW50LmRvY3VtZW50TW9kZSk7XG52YXIgcWI9UmEmJlwiVGV4dEV2ZW50XCJpbiB3aW5kb3cmJiFwYixzYj1SYSYmKCFvYnx8cGImJjg8cGImJjExPj1wYiksdGI9U3RyaW5nLmZyb21DaGFyQ29kZSgzMiksdWI9e2JlZm9yZUlucHV0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQmVmb3JlSW5wdXRcIixjYXB0dXJlZDpcIm9uQmVmb3JlSW5wdXRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpbXCJjb21wb3NpdGlvbmVuZFwiLFwia2V5cHJlc3NcIixcInRleHRJbnB1dFwiLFwicGFzdGVcIl19LGNvbXBvc2l0aW9uRW5kOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25FbmRcIixjYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25FbmRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29tcG9zaXRpb25lbmQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIil9LGNvbXBvc2l0aW9uU3RhcnQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvblN0YXJ0XCIsXG5jYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25TdGFydENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb21wb3NpdGlvbnN0YXJ0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpfSxjb21wb3NpdGlvblVwZGF0ZTp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uVXBkYXRlXCIsY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uVXBkYXRlQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbXBvc2l0aW9udXBkYXRlIGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpfX0sdmI9ITE7XG5mdW5jdGlvbiB3YihhLGIpe3N3aXRjaChhKXtjYXNlIFwia2V5dXBcIjpyZXR1cm4tMSE9PW5iLmluZGV4T2YoYi5rZXlDb2RlKTtjYXNlIFwia2V5ZG93blwiOnJldHVybiAyMjkhPT1iLmtleUNvZGU7Y2FzZSBcImtleXByZXNzXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJibHVyXCI6cmV0dXJuITA7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24geGIoYSl7YT1hLmRldGFpbDtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJlwiZGF0YVwiaW4gYT9hLmRhdGE6bnVsbH12YXIgeWI9ITE7ZnVuY3Rpb24gQWIoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIHhiKGIpO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDMyIT09Yi53aGljaClyZXR1cm4gbnVsbDt2Yj0hMDtyZXR1cm4gdGI7Y2FzZSBcInRleHRJbnB1dFwiOnJldHVybiBhPWIuZGF0YSxhPT09dGImJnZiP251bGw6YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbmZ1bmN0aW9uIEJiKGEsYil7aWYoeWIpcmV0dXJuXCJjb21wb3NpdGlvbmVuZFwiPT09YXx8IW9iJiZ3YihhLGIpPyhhPWZiKCksZWI9ZGI9Y2I9bnVsbCx5Yj0hMSxhKTpudWxsO3N3aXRjaChhKXtjYXNlIFwicGFzdGVcIjpyZXR1cm4gbnVsbDtjYXNlIFwia2V5cHJlc3NcIjppZighKGIuY3RybEtleXx8Yi5hbHRLZXl8fGIubWV0YUtleSl8fGIuY3RybEtleSYmYi5hbHRLZXkpe2lmKGIuY2hhciYmMTxiLmNoYXIubGVuZ3RoKXJldHVybiBiLmNoYXI7aWYoYi53aGljaClyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShiLndoaWNoKX1yZXR1cm4gbnVsbDtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gc2ImJlwia29cIiE9PWIubG9jYWxlP251bGw6Yi5kYXRhO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxudmFyIENiPXtldmVudFR5cGVzOnViLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9dm9pZCAwO3ZhciBmPXZvaWQgMDtpZihvYiliOntzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uc3RhcnRcIjplPXViLmNvbXBvc2l0aW9uU3RhcnQ7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjplPXViLmNvbXBvc2l0aW9uRW5kO2JyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9udXBkYXRlXCI6ZT11Yi5jb21wb3NpdGlvblVwZGF0ZTticmVhayBifWU9dm9pZCAwfWVsc2UgeWI/d2IoYSxjKSYmKGU9dWIuY29tcG9zaXRpb25FbmQpOlwia2V5ZG93blwiPT09YSYmMjI5PT09Yy5rZXlDb2RlJiYoZT11Yi5jb21wb3NpdGlvblN0YXJ0KTtlPyhzYiYmXCJrb1wiIT09Yy5sb2NhbGUmJih5Ynx8ZSE9PXViLmNvbXBvc2l0aW9uU3RhcnQ/ZT09PXViLmNvbXBvc2l0aW9uRW5kJiZ5YiYmKGY9ZmIoKSk6KGNiPWQsZGI9XCJ2YWx1ZVwiaW4gY2I/Y2IudmFsdWU6Y2IudGV4dENvbnRlbnQseWI9XG4hMCkpLGU9bGIuZ2V0UG9vbGVkKGUsYixjLGQpLGY/ZS5kYXRhPWY6KGY9eGIoYyksbnVsbCE9PWYmJihlLmRhdGE9ZikpLFFhKGUpLGY9ZSk6Zj1udWxsOyhhPXFiP0FiKGEsYyk6QmIoYSxjKSk/KGI9bWIuZ2V0UG9vbGVkKHViLmJlZm9yZUlucHV0LGIsYyxkKSxiLmRhdGE9YSxRYShiKSk6Yj1udWxsO3JldHVybiBudWxsPT09Zj9iOm51bGw9PT1iP2Y6W2YsYl19fSxEYj1udWxsLEViPW51bGwsRmI9bnVsbDtmdW5jdGlvbiBHYihhKXtpZihhPXRhKGEpKXtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgRGIpdGhyb3cgdChFcnJvcigyODApKTt2YXIgYj1zYShhLnN0YXRlTm9kZSk7RGIoYS5zdGF0ZU5vZGUsYS50eXBlLGIpfX1mdW5jdGlvbiBIYihhKXtFYj9GYj9GYi5wdXNoKGEpOkZiPVthXTpFYj1hfWZ1bmN0aW9uIEliKCl7aWYoRWIpe3ZhciBhPUViLGI9RmI7RmI9RWI9bnVsbDtHYihhKTtpZihiKWZvcihhPTA7YTxiLmxlbmd0aDthKyspR2IoYlthXSl9fVxuZnVuY3Rpb24gSmIoYSxiKXtyZXR1cm4gYShiKX1mdW5jdGlvbiBLYihhLGIsYyxkKXtyZXR1cm4gYShiLGMsZCl9ZnVuY3Rpb24gTGIoKXt9dmFyIE1iPUpiLE5iPSExO2Z1bmN0aW9uIE9iKCl7aWYobnVsbCE9PUVifHxudWxsIT09RmIpTGIoKSxJYigpfXZhciBQYj17Y29sb3I6ITAsZGF0ZTohMCxkYXRldGltZTohMCxcImRhdGV0aW1lLWxvY2FsXCI6ITAsZW1haWw6ITAsbW9udGg6ITAsbnVtYmVyOiEwLHBhc3N3b3JkOiEwLHJhbmdlOiEwLHNlYXJjaDohMCx0ZWw6ITAsdGV4dDohMCx0aW1lOiEwLHVybDohMCx3ZWVrOiEwfTtmdW5jdGlvbiBRYihhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09Yj8hIVBiW2EudHlwZV06XCJ0ZXh0YXJlYVwiPT09Yj8hMDohMX1cbmZ1bmN0aW9uIFJiKGEpe2E9YS50YXJnZXR8fGEuc3JjRWxlbWVudHx8d2luZG93O2EuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQmJihhPWEuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQpO3JldHVybiAzPT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YX1mdW5jdGlvbiBTYihhKXtpZighUmEpcmV0dXJuITE7YT1cIm9uXCIrYTt2YXIgYj1hIGluIGRvY3VtZW50O2J8fChiPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYi5zZXRBdHRyaWJ1dGUoYSxcInJldHVybjtcIiksYj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgYlthXSk7cmV0dXJuIGJ9ZnVuY3Rpb24gVGIoYSl7dmFyIGI9YS50eXBlO3JldHVybihhPWEubm9kZU5hbWUpJiZcImlucHV0XCI9PT1hLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1ifHxcInJhZGlvXCI9PT1iKX1cbmZ1bmN0aW9uIFViKGEpe3ZhciBiPVRiKGEpP1wiY2hlY2tlZFwiOlwidmFsdWVcIixjPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsYiksZD1cIlwiK2FbYl07aWYoIWEuaGFzT3duUHJvcGVydHkoYikmJlwidW5kZWZpbmVkXCIhPT10eXBlb2YgYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZ2V0JiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5zZXQpe3ZhciBlPWMuZ2V0LGY9Yy5zZXQ7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBlLmNhbGwodGhpcyl9LHNldDpmdW5jdGlvbihhKXtkPVwiXCIrYTtmLmNhbGwodGhpcyxhKX19KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtlbnVtZXJhYmxlOmMuZW51bWVyYWJsZX0pO3JldHVybntnZXRWYWx1ZTpmdW5jdGlvbigpe3JldHVybiBkfSxzZXRWYWx1ZTpmdW5jdGlvbihhKXtkPVwiXCIrYX0sc3RvcFRyYWNraW5nOmZ1bmN0aW9uKCl7YS5fdmFsdWVUcmFja2VyPVxubnVsbDtkZWxldGUgYVtiXX19fX1mdW5jdGlvbiBWYihhKXthLl92YWx1ZVRyYWNrZXJ8fChhLl92YWx1ZVRyYWNrZXI9VWIoYSkpfWZ1bmN0aW9uIFdiKGEpe2lmKCFhKXJldHVybiExO3ZhciBiPWEuX3ZhbHVlVHJhY2tlcjtpZighYilyZXR1cm4hMDt2YXIgYz1iLmdldFZhbHVlKCk7dmFyIGQ9XCJcIjthJiYoZD1UYihhKT9hLmNoZWNrZWQ/XCJ0cnVlXCI6XCJmYWxzZVwiOmEudmFsdWUpO2E9ZDtyZXR1cm4gYSE9PWM/KGIuc2V0VmFsdWUoYSksITApOiExfXZhciBYYj1hYS5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDtYYi5oYXNPd25Qcm9wZXJ0eShcIlJlYWN0Q3VycmVudERpc3BhdGNoZXJcIil8fChYYi5SZWFjdEN1cnJlbnREaXNwYXRjaGVyPXtjdXJyZW50Om51bGx9KTtYYi5oYXNPd25Qcm9wZXJ0eShcIlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnXCIpfHwoWGIuUmVhY3RDdXJyZW50QmF0Y2hDb25maWc9e3N1c3BlbnNlOm51bGx9KTtcbnZhciBZYj0vXiguKilbXFxcXFxcL10vLEI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixaYj1CP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLCRiPUI/U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKTo2MDEwNixhYz1CP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxiYz1CP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCxjYz1CP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKTo2MDExNCxkYz1CP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxlYz1CP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLGZjPUI/U3ltYm9sLmZvcihcInJlYWN0LmNvbmN1cnJlbnRfbW9kZVwiKTo2MDExMSxnYz1CP1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMixoYz1CP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxpYz1CP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpOlxuNjAxMjAsamM9Qj9TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKTo2MDExNSxrYz1CP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2O0ImJlN5bWJvbC5mb3IoXCJyZWFjdC5mdW5kYW1lbnRhbFwiKTtCJiZTeW1ib2wuZm9yKFwicmVhY3QucmVzcG9uZGVyXCIpO3ZhciBsYz1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gbWMoYSl7aWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPWxjJiZhW2xjXXx8YVtcIkBAaXRlcmF0b3JcIl07cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YTpudWxsfVxuZnVuY3Rpb24gb2MoYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gYS5kaXNwbGF5TmFtZXx8YS5uYW1lfHxudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlyZXR1cm4gYTtzd2l0Y2goYSl7Y2FzZSBhYzpyZXR1cm5cIkZyYWdtZW50XCI7Y2FzZSAkYjpyZXR1cm5cIlBvcnRhbFwiO2Nhc2UgY2M6cmV0dXJuXCJQcm9maWxlclwiO2Nhc2UgYmM6cmV0dXJuXCJTdHJpY3RNb2RlXCI7Y2FzZSBoYzpyZXR1cm5cIlN1c3BlbnNlXCI7Y2FzZSBpYzpyZXR1cm5cIlN1c3BlbnNlTGlzdFwifWlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBlYzpyZXR1cm5cIkNvbnRleHQuQ29uc3VtZXJcIjtjYXNlIGRjOnJldHVyblwiQ29udGV4dC5Qcm92aWRlclwiO2Nhc2UgZ2M6dmFyIGI9YS5yZW5kZXI7Yj1iLmRpc3BsYXlOYW1lfHxiLm5hbWV8fFwiXCI7cmV0dXJuIGEuZGlzcGxheU5hbWV8fChcIlwiIT09Yj9cIkZvcndhcmRSZWYoXCIrYitcIilcIjpcblwiRm9yd2FyZFJlZlwiKTtjYXNlIGpjOnJldHVybiBvYyhhLnR5cGUpO2Nhc2Uga2M6aWYoYT0xPT09YS5fc3RhdHVzP2EuX3Jlc3VsdDpudWxsKXJldHVybiBvYyhhKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBwYyhhKXt2YXIgYj1cIlwiO2Rve2E6c3dpdGNoKGEudGFnKXtjYXNlIDM6Y2FzZSA0OmNhc2UgNjpjYXNlIDc6Y2FzZSAxMDpjYXNlIDk6dmFyIGM9XCJcIjticmVhayBhO2RlZmF1bHQ6dmFyIGQ9YS5fZGVidWdPd25lcixlPWEuX2RlYnVnU291cmNlLGY9b2MoYS50eXBlKTtjPW51bGw7ZCYmKGM9b2MoZC50eXBlKSk7ZD1mO2Y9XCJcIjtlP2Y9XCIgKGF0IFwiK2UuZmlsZU5hbWUucmVwbGFjZShZYixcIlwiKStcIjpcIitlLmxpbmVOdW1iZXIrXCIpXCI6YyYmKGY9XCIgKGNyZWF0ZWQgYnkgXCIrYytcIilcIik7Yz1cIlxcbiAgICBpbiBcIisoZHx8XCJVbmtub3duXCIpK2Z9Yis9YzthPWEucmV0dXJufXdoaWxlKGEpO3JldHVybiBifVxudmFyIHFjPS9eWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXVs6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRFxcLS4wLTlcXHUwMEI3XFx1MDMwMC1cXHUwMzZGXFx1MjAzRi1cXHUyMDQwXSokLyxyYz1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LHNjPXt9LHRjPXt9O1xuZnVuY3Rpb24gdWMoYSl7aWYocmMuY2FsbCh0YyxhKSlyZXR1cm4hMDtpZihyYy5jYWxsKHNjLGEpKXJldHVybiExO2lmKHFjLnRlc3QoYSkpcmV0dXJuIHRjW2FdPSEwO3NjW2FdPSEwO3JldHVybiExfWZ1bmN0aW9uIHZjKGEsYixjLGQpe2lmKG51bGwhPT1jJiYwPT09Yy50eXBlKXJldHVybiExO3N3aXRjaCh0eXBlb2YgYil7Y2FzZSBcImZ1bmN0aW9uXCI6Y2FzZSBcInN5bWJvbFwiOnJldHVybiEwO2Nhc2UgXCJib29sZWFuXCI6aWYoZClyZXR1cm4hMTtpZihudWxsIT09YylyZXR1cm4hYy5hY2NlcHRzQm9vbGVhbnM7YT1hLnRvTG93ZXJDYXNlKCkuc2xpY2UoMCw1KTtyZXR1cm5cImRhdGEtXCIhPT1hJiZcImFyaWEtXCIhPT1hO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gd2MoYSxiLGMsZCl7aWYobnVsbD09PWJ8fFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYnx8dmMoYSxiLGMsZCkpcmV0dXJuITA7aWYoZClyZXR1cm4hMTtpZihudWxsIT09Yylzd2l0Y2goYy50eXBlKXtjYXNlIDM6cmV0dXJuIWI7Y2FzZSA0OnJldHVybiExPT09YjtjYXNlIDU6cmV0dXJuIGlzTmFOKGIpO2Nhc2UgNjpyZXR1cm4gaXNOYU4oYil8fDE+Yn1yZXR1cm4hMX1mdW5jdGlvbiBEKGEsYixjLGQsZSxmKXt0aGlzLmFjY2VwdHNCb29sZWFucz0yPT09Ynx8Mz09PWJ8fDQ9PT1iO3RoaXMuYXR0cmlidXRlTmFtZT1kO3RoaXMuYXR0cmlidXRlTmFtZXNwYWNlPWU7dGhpcy5tdXN0VXNlUHJvcGVydHk9Yzt0aGlzLnByb3BlcnR5TmFtZT1hO3RoaXMudHlwZT1iO3RoaXMuc2FuaXRpemVVUkw9Zn12YXIgRj17fTtcblwiY2hpbGRyZW4gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgZGVmYXVsdFZhbHVlIGRlZmF1bHRDaGVja2VkIGlubmVySFRNTCBzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmcgc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nIHN0eWxlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7RlthXT1uZXcgRChhLDAsITEsYSxudWxsLCExKX0pO1tbXCJhY2NlcHRDaGFyc2V0XCIsXCJhY2NlcHQtY2hhcnNldFwiXSxbXCJjbGFzc05hbWVcIixcImNsYXNzXCJdLFtcImh0bWxGb3JcIixcImZvclwiXSxbXCJodHRwRXF1aXZcIixcImh0dHAtZXF1aXZcIl1dLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YVswXTtGW2JdPW5ldyBEKGIsMSwhMSxhWzFdLG51bGwsITEpfSk7W1wiY29udGVudEVkaXRhYmxlXCIsXCJkcmFnZ2FibGVcIixcInNwZWxsQ2hlY2tcIixcInZhbHVlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RlthXT1uZXcgRChhLDIsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEpfSk7XG5bXCJhdXRvUmV2ZXJzZVwiLFwiZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZFwiLFwiZm9jdXNhYmxlXCIsXCJwcmVzZXJ2ZUFscGhhXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RlthXT1uZXcgRChhLDIsITEsYSxudWxsLCExKX0pO1wiYWxsb3dGdWxsU2NyZWVuIGFzeW5jIGF1dG9Gb2N1cyBhdXRvUGxheSBjb250cm9scyBkZWZhdWx0IGRlZmVyIGRpc2FibGVkIGRpc2FibGVQaWN0dXJlSW5QaWN0dXJlIGZvcm1Ob1ZhbGlkYXRlIGhpZGRlbiBsb29wIG5vTW9kdWxlIG5vVmFsaWRhdGUgb3BlbiBwbGF5c0lubGluZSByZWFkT25seSByZXF1aXJlZCByZXZlcnNlZCBzY29wZWQgc2VhbWxlc3MgaXRlbVNjb3BlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7RlthXT1uZXcgRChhLDMsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEpfSk7XG5bXCJjaGVja2VkXCIsXCJtdWx0aXBsZVwiLFwibXV0ZWRcIixcInNlbGVjdGVkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RlthXT1uZXcgRChhLDMsITAsYSxudWxsLCExKX0pO1tcImNhcHR1cmVcIixcImRvd25sb2FkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RlthXT1uZXcgRChhLDQsITEsYSxudWxsLCExKX0pO1tcImNvbHNcIixcInJvd3NcIixcInNpemVcIixcInNwYW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtGW2FdPW5ldyBEKGEsNiwhMSxhLG51bGwsITEpfSk7W1wicm93U3BhblwiLFwic3RhcnRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtGW2FdPW5ldyBEKGEsNSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSl9KTt2YXIgeGM9L1tcXC06XShbYS16XSkvZztmdW5jdGlvbiB5YyhhKXtyZXR1cm4gYVsxXS50b1VwcGVyQ2FzZSgpfVxuXCJhY2NlbnQtaGVpZ2h0IGFsaWdubWVudC1iYXNlbGluZSBhcmFiaWMtZm9ybSBiYXNlbGluZS1zaGlmdCBjYXAtaGVpZ2h0IGNsaXAtcGF0aCBjbGlwLXJ1bGUgY29sb3ItaW50ZXJwb2xhdGlvbiBjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMgY29sb3ItcHJvZmlsZSBjb2xvci1yZW5kZXJpbmcgZG9taW5hbnQtYmFzZWxpbmUgZW5hYmxlLWJhY2tncm91bmQgZmlsbC1vcGFjaXR5IGZpbGwtcnVsZSBmbG9vZC1jb2xvciBmbG9vZC1vcGFjaXR5IGZvbnQtZmFtaWx5IGZvbnQtc2l6ZSBmb250LXNpemUtYWRqdXN0IGZvbnQtc3RyZXRjaCBmb250LXN0eWxlIGZvbnQtdmFyaWFudCBmb250LXdlaWdodCBnbHlwaC1uYW1lIGdseXBoLW9yaWVudGF0aW9uLWhvcml6b250YWwgZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwgaG9yaXotYWR2LXggaG9yaXotb3JpZ2luLXggaW1hZ2UtcmVuZGVyaW5nIGxldHRlci1zcGFjaW5nIGxpZ2h0aW5nLWNvbG9yIG1hcmtlci1lbmQgbWFya2VyLW1pZCBtYXJrZXItc3RhcnQgb3ZlcmxpbmUtcG9zaXRpb24gb3ZlcmxpbmUtdGhpY2tuZXNzIHBhaW50LW9yZGVyIHBhbm9zZS0xIHBvaW50ZXItZXZlbnRzIHJlbmRlcmluZy1pbnRlbnQgc2hhcGUtcmVuZGVyaW5nIHN0b3AtY29sb3Igc3RvcC1vcGFjaXR5IHN0cmlrZXRocm91Z2gtcG9zaXRpb24gc3RyaWtldGhyb3VnaC10aGlja25lc3Mgc3Ryb2tlLWRhc2hhcnJheSBzdHJva2UtZGFzaG9mZnNldCBzdHJva2UtbGluZWNhcCBzdHJva2UtbGluZWpvaW4gc3Ryb2tlLW1pdGVybGltaXQgc3Ryb2tlLW9wYWNpdHkgc3Ryb2tlLXdpZHRoIHRleHQtYW5jaG9yIHRleHQtZGVjb3JhdGlvbiB0ZXh0LXJlbmRlcmluZyB1bmRlcmxpbmUtcG9zaXRpb24gdW5kZXJsaW5lLXRoaWNrbmVzcyB1bmljb2RlLWJpZGkgdW5pY29kZS1yYW5nZSB1bml0cy1wZXItZW0gdi1hbHBoYWJldGljIHYtaGFuZ2luZyB2LWlkZW9ncmFwaGljIHYtbWF0aGVtYXRpY2FsIHZlY3Rvci1lZmZlY3QgdmVydC1hZHYteSB2ZXJ0LW9yaWdpbi14IHZlcnQtb3JpZ2luLXkgd29yZC1zcGFjaW5nIHdyaXRpbmctbW9kZSB4bWxuczp4bGluayB4LWhlaWdodFwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZSh4YyxcbnljKTtGW2JdPW5ldyBEKGIsMSwhMSxhLG51bGwsITEpfSk7XCJ4bGluazphY3R1YXRlIHhsaW5rOmFyY3JvbGUgeGxpbms6cm9sZSB4bGluazpzaG93IHhsaW5rOnRpdGxlIHhsaW5rOnR5cGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UoeGMseWMpO0ZbYl09bmV3IEQoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITEpfSk7W1wieG1sOmJhc2VcIixcInhtbDpsYW5nXCIsXCJ4bWw6c3BhY2VcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UoeGMseWMpO0ZbYl09bmV3IEQoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIiwhMSl9KTtbXCJ0YWJJbmRleFwiLFwiY3Jvc3NPcmlnaW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtGW2FdPW5ldyBEKGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSl9KTtcbkYueGxpbmtIcmVmPW5ldyBEKFwieGxpbmtIcmVmXCIsMSwhMSxcInhsaW5rOmhyZWZcIixcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiwhMCk7W1wic3JjXCIsXCJocmVmXCIsXCJhY3Rpb25cIixcImZvcm1BY3Rpb25cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtGW2FdPW5ldyBEKGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMCl9KTtcbmZ1bmN0aW9uIHpjKGEsYixjLGQpe3ZhciBlPUYuaGFzT3duUHJvcGVydHkoYik/RltiXTpudWxsO3ZhciBmPW51bGwhPT1lPzA9PT1lLnR5cGU6ZD8hMTohKDI8Yi5sZW5ndGgpfHxcIm9cIiE9PWJbMF0mJlwiT1wiIT09YlswXXx8XCJuXCIhPT1iWzFdJiZcIk5cIiE9PWJbMV0/ITE6ITA7Znx8KHdjKGIsYyxlLGQpJiYoYz1udWxsKSxkfHxudWxsPT09ZT91YyhiKSYmKG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOmEuc2V0QXR0cmlidXRlKGIsXCJcIitjKSk6ZS5tdXN0VXNlUHJvcGVydHk/YVtlLnByb3BlcnR5TmFtZV09bnVsbD09PWM/Mz09PWUudHlwZT8hMTpcIlwiOmM6KGI9ZS5hdHRyaWJ1dGVOYW1lLGQ9ZS5hdHRyaWJ1dGVOYW1lc3BhY2UsbnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6KGU9ZS50eXBlLGM9Mz09PWV8fDQ9PT1lJiYhMD09PWM/XCJcIjpcIlwiK2MsZD9hLnNldEF0dHJpYnV0ZU5TKGQsYixjKTphLnNldEF0dHJpYnV0ZShiLGMpKSkpfVxuZnVuY3Rpb24gQWMoYSl7c3dpdGNoKHR5cGVvZiBhKXtjYXNlIFwiYm9vbGVhblwiOmNhc2UgXCJudW1iZXJcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJ1bmRlZmluZWRcIjpyZXR1cm4gYTtkZWZhdWx0OnJldHVyblwiXCJ9fWZ1bmN0aW9uIEJjKGEsYil7dmFyIGM9Yi5jaGVja2VkO3JldHVybiBtKHt9LGIse2RlZmF1bHRDaGVja2VkOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLHZhbHVlOnZvaWQgMCxjaGVja2VkOm51bGwhPWM/YzphLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWR9KX1cbmZ1bmN0aW9uIENjKGEsYil7dmFyIGM9bnVsbD09Yi5kZWZhdWx0VmFsdWU/XCJcIjpiLmRlZmF1bHRWYWx1ZSxkPW51bGwhPWIuY2hlY2tlZD9iLmNoZWNrZWQ6Yi5kZWZhdWx0Q2hlY2tlZDtjPUFjKG51bGwhPWIudmFsdWU/Yi52YWx1ZTpjKTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxDaGVja2VkOmQsaW5pdGlhbFZhbHVlOmMsY29udHJvbGxlZDpcImNoZWNrYm94XCI9PT1iLnR5cGV8fFwicmFkaW9cIj09PWIudHlwZT9udWxsIT1iLmNoZWNrZWQ6bnVsbCE9Yi52YWx1ZX19ZnVuY3Rpb24gRGMoYSxiKXtiPWIuY2hlY2tlZDtudWxsIT1iJiZ6YyhhLFwiY2hlY2tlZFwiLGIsITEpfVxuZnVuY3Rpb24gRWMoYSxiKXtEYyhhLGIpO3ZhciBjPUFjKGIudmFsdWUpLGQ9Yi50eXBlO2lmKG51bGwhPWMpaWYoXCJudW1iZXJcIj09PWQpe2lmKDA9PT1jJiZcIlwiPT09YS52YWx1ZXx8YS52YWx1ZSE9YylhLnZhbHVlPVwiXCIrY31lbHNlIGEudmFsdWUhPT1cIlwiK2MmJihhLnZhbHVlPVwiXCIrYyk7ZWxzZSBpZihcInN1Ym1pdFwiPT09ZHx8XCJyZXNldFwiPT09ZCl7YS5yZW1vdmVBdHRyaWJ1dGUoXCJ2YWx1ZVwiKTtyZXR1cm59Yi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpP0ZjKGEsYi50eXBlLGMpOmIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikmJkZjKGEsYi50eXBlLEFjKGIuZGVmYXVsdFZhbHVlKSk7bnVsbD09Yi5jaGVja2VkJiZudWxsIT1iLmRlZmF1bHRDaGVja2VkJiYoYS5kZWZhdWx0Q2hlY2tlZD0hIWIuZGVmYXVsdENoZWNrZWQpfVxuZnVuY3Rpb24gR2MoYSxiLGMpe2lmKGIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKXx8Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSl7dmFyIGQ9Yi50eXBlO2lmKCEoXCJzdWJtaXRcIiE9PWQmJlwicmVzZXRcIiE9PWR8fHZvaWQgMCE9PWIudmFsdWUmJm51bGwhPT1iLnZhbHVlKSlyZXR1cm47Yj1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU7Y3x8Yj09PWEudmFsdWV8fChhLnZhbHVlPWIpO2EuZGVmYXVsdFZhbHVlPWJ9Yz1hLm5hbWU7XCJcIiE9PWMmJihhLm5hbWU9XCJcIik7YS5kZWZhdWx0Q2hlY2tlZD0hYS5kZWZhdWx0Q2hlY2tlZDthLmRlZmF1bHRDaGVja2VkPSEhYS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkO1wiXCIhPT1jJiYoYS5uYW1lPWMpfVxuZnVuY3Rpb24gRmMoYSxiLGMpe2lmKFwibnVtYmVyXCIhPT1ifHxhLm93bmVyRG9jdW1lbnQuYWN0aXZlRWxlbWVudCE9PWEpbnVsbD09Yz9hLmRlZmF1bHRWYWx1ZT1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU6YS5kZWZhdWx0VmFsdWUhPT1cIlwiK2MmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2MpfXZhciBIYz17Y2hhbmdlOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ2hhbmdlXCIsY2FwdHVyZWQ6XCJvbkNoYW5nZUNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjaGFuZ2UgY2xpY2sgZm9jdXMgaW5wdXQga2V5ZG93biBrZXl1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIil9fTtmdW5jdGlvbiBJYyhhLGIsYyl7YT15LmdldFBvb2xlZChIYy5jaGFuZ2UsYSxiLGMpO2EudHlwZT1cImNoYW5nZVwiO0hiKGMpO1FhKGEpO3JldHVybiBhfXZhciBKYz1udWxsLEtjPW51bGw7ZnVuY3Rpb24gTGMoYSl7QmEoYSl9XG5mdW5jdGlvbiBNYyhhKXt2YXIgYj1KYShhKTtpZihXYihiKSlyZXR1cm4gYX1mdW5jdGlvbiBOYyhhLGIpe2lmKFwiY2hhbmdlXCI9PT1hKXJldHVybiBifXZhciBPYz0hMTtSYSYmKE9jPVNiKFwiaW5wdXRcIikmJighZG9jdW1lbnQuZG9jdW1lbnRNb2RlfHw5PGRvY3VtZW50LmRvY3VtZW50TW9kZSkpO2Z1bmN0aW9uIFBjKCl7SmMmJihKYy5kZXRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixRYyksS2M9SmM9bnVsbCl9ZnVuY3Rpb24gUWMoYSl7aWYoXCJ2YWx1ZVwiPT09YS5wcm9wZXJ0eU5hbWUmJk1jKEtjKSlpZihhPUljKEtjLGEsUmIoYSkpLE5iKUJhKGEpO2Vsc2V7TmI9ITA7dHJ5e0piKExjLGEpfWZpbmFsbHl7TmI9ITEsT2IoKX19fWZ1bmN0aW9uIFJjKGEsYixjKXtcImZvY3VzXCI9PT1hPyhQYygpLEpjPWIsS2M9YyxKYy5hdHRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixRYykpOlwiYmx1clwiPT09YSYmUGMoKX1cbmZ1bmN0aW9uIFNjKGEpe2lmKFwic2VsZWN0aW9uY2hhbmdlXCI9PT1hfHxcImtleXVwXCI9PT1hfHxcImtleWRvd25cIj09PWEpcmV0dXJuIE1jKEtjKX1mdW5jdGlvbiBUYyhhLGIpe2lmKFwiY2xpY2tcIj09PWEpcmV0dXJuIE1jKGIpfWZ1bmN0aW9uIFVjKGEsYil7aWYoXCJpbnB1dFwiPT09YXx8XCJjaGFuZ2VcIj09PWEpcmV0dXJuIE1jKGIpfVxudmFyIFZjPXtldmVudFR5cGVzOkhjLF9pc0lucHV0RXZlbnRTdXBwb3J0ZWQ6T2MsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1iP0phKGIpOndpbmRvdyxmPXZvaWQgMCxoPXZvaWQgMCxnPWUubm9kZU5hbWUmJmUubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcInNlbGVjdFwiPT09Z3x8XCJpbnB1dFwiPT09ZyYmXCJmaWxlXCI9PT1lLnR5cGU/Zj1OYzpRYihlKT9PYz9mPVVjOihmPVNjLGg9UmMpOihnPWUubm9kZU5hbWUpJiZcImlucHV0XCI9PT1nLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1lLnR5cGV8fFwicmFkaW9cIj09PWUudHlwZSkmJihmPVRjKTtpZihmJiYoZj1mKGEsYikpKXJldHVybiBJYyhmLGMsZCk7aCYmaChhLGUsYik7XCJibHVyXCI9PT1hJiYoYT1lLl93cmFwcGVyU3RhdGUpJiZhLmNvbnRyb2xsZWQmJlwibnVtYmVyXCI9PT1lLnR5cGUmJkZjKGUsXCJudW1iZXJcIixlLnZhbHVlKX19LFdjPXkuZXh0ZW5kKHt2aWV3Om51bGwsZGV0YWlsOm51bGx9KSxYYz17QWx0OlwiYWx0S2V5XCIsXG5Db250cm9sOlwiY3RybEtleVwiLE1ldGE6XCJtZXRhS2V5XCIsU2hpZnQ6XCJzaGlmdEtleVwifTtmdW5jdGlvbiBZYyhhKXt2YXIgYj10aGlzLm5hdGl2ZUV2ZW50O3JldHVybiBiLmdldE1vZGlmaWVyU3RhdGU/Yi5nZXRNb2RpZmllclN0YXRlKGEpOihhPVhjW2FdKT8hIWJbYV06ITF9ZnVuY3Rpb24gWmMoKXtyZXR1cm4gWWN9XG52YXIgJGM9MCxhZD0wLGJkPSExLGNkPSExLGRkPVdjLmV4dGVuZCh7c2NyZWVuWDpudWxsLHNjcmVlblk6bnVsbCxjbGllbnRYOm51bGwsY2xpZW50WTpudWxsLHBhZ2VYOm51bGwscGFnZVk6bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpaYyxidXR0b246bnVsbCxidXR0b25zOm51bGwscmVsYXRlZFRhcmdldDpmdW5jdGlvbihhKXtyZXR1cm4gYS5yZWxhdGVkVGFyZ2V0fHwoYS5mcm9tRWxlbWVudD09PWEuc3JjRWxlbWVudD9hLnRvRWxlbWVudDphLmZyb21FbGVtZW50KX0sbW92ZW1lbnRYOmZ1bmN0aW9uKGEpe2lmKFwibW92ZW1lbnRYXCJpbiBhKXJldHVybiBhLm1vdmVtZW50WDt2YXIgYj0kYzskYz1hLnNjcmVlblg7cmV0dXJuIGJkP1wibW91c2Vtb3ZlXCI9PT1hLnR5cGU/YS5zY3JlZW5YLWI6MDooYmQ9ITAsMCl9LG1vdmVtZW50WTpmdW5jdGlvbihhKXtpZihcIm1vdmVtZW50WVwiaW4gYSlyZXR1cm4gYS5tb3ZlbWVudFk7XG52YXIgYj1hZDthZD1hLnNjcmVlblk7cmV0dXJuIGNkP1wibW91c2Vtb3ZlXCI9PT1hLnR5cGU/YS5zY3JlZW5ZLWI6MDooY2Q9ITAsMCl9fSksZWQ9ZGQuZXh0ZW5kKHtwb2ludGVySWQ6bnVsbCx3aWR0aDpudWxsLGhlaWdodDpudWxsLHByZXNzdXJlOm51bGwsdGFuZ2VudGlhbFByZXNzdXJlOm51bGwsdGlsdFg6bnVsbCx0aWx0WTpudWxsLHR3aXN0Om51bGwscG9pbnRlclR5cGU6bnVsbCxpc1ByaW1hcnk6bnVsbH0pLGZkPXttb3VzZUVudGVyOntyZWdpc3RyYXRpb25OYW1lOlwib25Nb3VzZUVudGVyXCIsZGVwZW5kZW5jaWVzOltcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl19LG1vdXNlTGVhdmU6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvbk1vdXNlTGVhdmVcIixkZXBlbmRlbmNpZXM6W1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXX0scG9pbnRlckVudGVyOntyZWdpc3RyYXRpb25OYW1lOlwib25Qb2ludGVyRW50ZXJcIixkZXBlbmRlbmNpZXM6W1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl19LHBvaW50ZXJMZWF2ZTp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uUG9pbnRlckxlYXZlXCIsXG5kZXBlbmRlbmNpZXM6W1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl19fSxnZD17ZXZlbnRUeXBlczpmZCxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPVwibW91c2VvdmVyXCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hLGY9XCJtb3VzZW91dFwiPT09YXx8XCJwb2ludGVyb3V0XCI9PT1hO2lmKGUmJihjLnJlbGF0ZWRUYXJnZXR8fGMuZnJvbUVsZW1lbnQpfHwhZiYmIWUpcmV0dXJuIG51bGw7ZT1kLndpbmRvdz09PWQ/ZDooZT1kLm93bmVyRG9jdW1lbnQpP2UuZGVmYXVsdFZpZXd8fGUucGFyZW50V2luZG93OndpbmRvdztmPyhmPWIsYj0oYj1jLnJlbGF0ZWRUYXJnZXR8fGMudG9FbGVtZW50KT9IYShiKTpudWxsKTpmPW51bGw7aWYoZj09PWIpcmV0dXJuIG51bGw7dmFyIGg9dm9pZCAwLGc9dm9pZCAwLGs9dm9pZCAwLGw9dm9pZCAwO2lmKFwibW91c2VvdXRcIj09PWF8fFwibW91c2VvdmVyXCI9PT1hKWg9ZGQsZz1mZC5tb3VzZUxlYXZlLGs9ZmQubW91c2VFbnRlcixsPVwibW91c2VcIjtcbmVsc2UgaWYoXCJwb2ludGVyb3V0XCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hKWg9ZWQsZz1mZC5wb2ludGVyTGVhdmUsaz1mZC5wb2ludGVyRW50ZXIsbD1cInBvaW50ZXJcIjt2YXIgbj1udWxsPT1mP2U6SmEoZik7ZT1udWxsPT1iP2U6SmEoYik7YT1oLmdldFBvb2xlZChnLGYsYyxkKTthLnR5cGU9bCtcImxlYXZlXCI7YS50YXJnZXQ9bjthLnJlbGF0ZWRUYXJnZXQ9ZTtjPWguZ2V0UG9vbGVkKGssYixjLGQpO2MudHlwZT1sK1wiZW50ZXJcIjtjLnRhcmdldD1lO2MucmVsYXRlZFRhcmdldD1uO2Q9YjtpZihmJiZkKWE6e2I9ZjtlPWQ7bD0wO2ZvcihoPWI7aDtoPUxhKGgpKWwrKztoPTA7Zm9yKGs9ZTtrO2s9TGEoaykpaCsrO2Zvcig7MDxsLWg7KWI9TGEoYiksbC0tO2Zvcig7MDxoLWw7KWU9TGEoZSksaC0tO2Zvcig7bC0tOyl7aWYoYj09PWV8fGI9PT1lLmFsdGVybmF0ZSlicmVhayBhO2I9TGEoYik7ZT1MYShlKX1iPW51bGx9ZWxzZSBiPW51bGw7ZT1iO2ZvcihiPVtdO2YmJmYhPT1lOyl7bD1cbmYuYWx0ZXJuYXRlO2lmKG51bGwhPT1sJiZsPT09ZSlicmVhaztiLnB1c2goZik7Zj1MYShmKX1mb3IoZj1bXTtkJiZkIT09ZTspe2w9ZC5hbHRlcm5hdGU7aWYobnVsbCE9PWwmJmw9PT1lKWJyZWFrO2YucHVzaChkKTtkPUxhKGQpfWZvcihkPTA7ZDxiLmxlbmd0aDtkKyspT2EoYltkXSxcImJ1YmJsZWRcIixhKTtmb3IoZD1mLmxlbmd0aDswPGQtLTspT2EoZltkXSxcImNhcHR1cmVkXCIsYyk7cmV0dXJuW2EsY119fTtmdW5jdGlvbiBoZChhLGIpe3JldHVybiBhPT09YiYmKDAhPT1hfHwxL2E9PT0xL2IpfHxhIT09YSYmYiE9PWJ9dmFyIGlkPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5mdW5jdGlvbiBqZChhLGIpe2lmKGhkKGEsYikpcmV0dXJuITA7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhfHxudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBifHxudWxsPT09YilyZXR1cm4hMTt2YXIgYz1PYmplY3Qua2V5cyhhKSxkPU9iamVjdC5rZXlzKGIpO2lmKGMubGVuZ3RoIT09ZC5sZW5ndGgpcmV0dXJuITE7Zm9yKGQ9MDtkPGMubGVuZ3RoO2QrKylpZighaWQuY2FsbChiLGNbZF0pfHwhaGQoYVtjW2RdXSxiW2NbZF1dKSlyZXR1cm4hMTtyZXR1cm4hMH1mdW5jdGlvbiBrZChhLGIpe3JldHVybntyZXNwb25kZXI6YSxwcm9wczpifX1uZXcgTWFwO25ldyBNYXA7bmV3IFNldDtuZXcgTWFwO1xuZnVuY3Rpb24gbGQoYSl7dmFyIGI9YTtpZihhLmFsdGVybmF0ZSlmb3IoO2IucmV0dXJuOyliPWIucmV0dXJuO2Vsc2V7aWYoMCE9PShiLmVmZmVjdFRhZyYyKSlyZXR1cm4gMTtmb3IoO2IucmV0dXJuOylpZihiPWIucmV0dXJuLDAhPT0oYi5lZmZlY3RUYWcmMikpcmV0dXJuIDF9cmV0dXJuIDM9PT1iLnRhZz8yOjN9ZnVuY3Rpb24gb2QoYSl7aWYoMiE9PWxkKGEpKXRocm93IHQoRXJyb3IoMTg4KSk7fVxuZnVuY3Rpb24gcGQoYSl7dmFyIGI9YS5hbHRlcm5hdGU7aWYoIWIpe2I9bGQoYSk7aWYoMz09PWIpdGhyb3cgdChFcnJvcigxODgpKTtyZXR1cm4gMT09PWI/bnVsbDphfWZvcih2YXIgYz1hLGQ9Yjs7KXt2YXIgZT1jLnJldHVybjtpZihudWxsPT09ZSlicmVhazt2YXIgZj1lLmFsdGVybmF0ZTtpZihudWxsPT09Zil7ZD1lLnJldHVybjtpZihudWxsIT09ZCl7Yz1kO2NvbnRpbnVlfWJyZWFrfWlmKGUuY2hpbGQ9PT1mLmNoaWxkKXtmb3IoZj1lLmNoaWxkO2Y7KXtpZihmPT09YylyZXR1cm4gb2QoZSksYTtpZihmPT09ZClyZXR1cm4gb2QoZSksYjtmPWYuc2libGluZ310aHJvdyB0KEVycm9yKDE4OCkpO31pZihjLnJldHVybiE9PWQucmV0dXJuKWM9ZSxkPWY7ZWxzZXtmb3IodmFyIGg9ITEsZz1lLmNoaWxkO2c7KXtpZihnPT09Yyl7aD0hMDtjPWU7ZD1mO2JyZWFrfWlmKGc9PT1kKXtoPSEwO2Q9ZTtjPWY7YnJlYWt9Zz1nLnNpYmxpbmd9aWYoIWgpe2ZvcihnPWYuY2hpbGQ7Zzspe2lmKGc9PT1cbmMpe2g9ITA7Yz1mO2Q9ZTticmVha31pZihnPT09ZCl7aD0hMDtkPWY7Yz1lO2JyZWFrfWc9Zy5zaWJsaW5nfWlmKCFoKXRocm93IHQoRXJyb3IoMTg5KSk7fX1pZihjLmFsdGVybmF0ZSE9PWQpdGhyb3cgdChFcnJvcigxOTApKTt9aWYoMyE9PWMudGFnKXRocm93IHQoRXJyb3IoMTg4KSk7cmV0dXJuIGMuc3RhdGVOb2RlLmN1cnJlbnQ9PT1jP2E6Yn1mdW5jdGlvbiBxZChhKXthPXBkKGEpO2lmKCFhKXJldHVybiBudWxsO2Zvcih2YXIgYj1hOzspe2lmKDU9PT1iLnRhZ3x8Nj09PWIudGFnKXJldHVybiBiO2lmKGIuY2hpbGQpYi5jaGlsZC5yZXR1cm49YixiPWIuY2hpbGQ7ZWxzZXtpZihiPT09YSlicmVhaztmb3IoOyFiLnNpYmxpbmc7KXtpZighYi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9fXJldHVybiBudWxsfVxudmFyIHJkPXkuZXh0ZW5kKHthbmltYXRpb25OYW1lOm51bGwsZWxhcHNlZFRpbWU6bnVsbCxwc2V1ZG9FbGVtZW50Om51bGx9KSxzZD15LmV4dGVuZCh7Y2xpcGJvYXJkRGF0YTpmdW5jdGlvbihhKXtyZXR1cm5cImNsaXBib2FyZERhdGFcImluIGE/YS5jbGlwYm9hcmREYXRhOndpbmRvdy5jbGlwYm9hcmREYXRhfX0pLHRkPVdjLmV4dGVuZCh7cmVsYXRlZFRhcmdldDpudWxsfSk7ZnVuY3Rpb24gdWQoYSl7dmFyIGI9YS5rZXlDb2RlO1wiY2hhckNvZGVcImluIGE/KGE9YS5jaGFyQ29kZSwwPT09YSYmMTM9PT1iJiYoYT0xMykpOmE9YjsxMD09PWEmJihhPTEzKTtyZXR1cm4gMzI8PWF8fDEzPT09YT9hOjB9XG52YXIgdmQ9e0VzYzpcIkVzY2FwZVwiLFNwYWNlYmFyOlwiIFwiLExlZnQ6XCJBcnJvd0xlZnRcIixVcDpcIkFycm93VXBcIixSaWdodDpcIkFycm93UmlnaHRcIixEb3duOlwiQXJyb3dEb3duXCIsRGVsOlwiRGVsZXRlXCIsV2luOlwiT1NcIixNZW51OlwiQ29udGV4dE1lbnVcIixBcHBzOlwiQ29udGV4dE1lbnVcIixTY3JvbGw6XCJTY3JvbGxMb2NrXCIsTW96UHJpbnRhYmxlS2V5OlwiVW5pZGVudGlmaWVkXCJ9LHdkPXs4OlwiQmFja3NwYWNlXCIsOTpcIlRhYlwiLDEyOlwiQ2xlYXJcIiwxMzpcIkVudGVyXCIsMTY6XCJTaGlmdFwiLDE3OlwiQ29udHJvbFwiLDE4OlwiQWx0XCIsMTk6XCJQYXVzZVwiLDIwOlwiQ2Fwc0xvY2tcIiwyNzpcIkVzY2FwZVwiLDMyOlwiIFwiLDMzOlwiUGFnZVVwXCIsMzQ6XCJQYWdlRG93blwiLDM1OlwiRW5kXCIsMzY6XCJIb21lXCIsMzc6XCJBcnJvd0xlZnRcIiwzODpcIkFycm93VXBcIiwzOTpcIkFycm93UmlnaHRcIiw0MDpcIkFycm93RG93blwiLDQ1OlwiSW5zZXJ0XCIsNDY6XCJEZWxldGVcIiwxMTI6XCJGMVwiLDExMzpcIkYyXCIsMTE0OlwiRjNcIiwxMTU6XCJGNFwiLFxuMTE2OlwiRjVcIiwxMTc6XCJGNlwiLDExODpcIkY3XCIsMTE5OlwiRjhcIiwxMjA6XCJGOVwiLDEyMTpcIkYxMFwiLDEyMjpcIkYxMVwiLDEyMzpcIkYxMlwiLDE0NDpcIk51bUxvY2tcIiwxNDU6XCJTY3JvbGxMb2NrXCIsMjI0OlwiTWV0YVwifSx4ZD1XYy5leHRlbmQoe2tleTpmdW5jdGlvbihhKXtpZihhLmtleSl7dmFyIGI9dmRbYS5rZXldfHxhLmtleTtpZihcIlVuaWRlbnRpZmllZFwiIT09YilyZXR1cm4gYn1yZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/KGE9dWQoYSksMTM9PT1hP1wiRW50ZXJcIjpTdHJpbmcuZnJvbUNoYXJDb2RlKGEpKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP3dkW2Eua2V5Q29kZV18fFwiVW5pZGVudGlmaWVkXCI6XCJcIn0sbG9jYXRpb246bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwscmVwZWF0Om51bGwsbG9jYWxlOm51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpaYyxjaGFyQ29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1cbmEudHlwZT91ZChhKTowfSxrZXlDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9LHdoaWNoOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT91ZChhKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfX0pLHlkPWRkLmV4dGVuZCh7ZGF0YVRyYW5zZmVyOm51bGx9KSx6ZD1XYy5leHRlbmQoe3RvdWNoZXM6bnVsbCx0YXJnZXRUb3VjaGVzOm51bGwsY2hhbmdlZFRvdWNoZXM6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpaY30pLEFkPXkuZXh0ZW5kKHtwcm9wZXJ0eU5hbWU6bnVsbCxlbGFwc2VkVGltZTpudWxsLHBzZXVkb0VsZW1lbnQ6bnVsbH0pLEJkPWRkLmV4dGVuZCh7ZGVsdGFYOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFYXCJpbiBhP2EuZGVsdGFYOlwid2hlZWxEZWx0YVhcImluXG5hPy1hLndoZWVsRGVsdGFYOjB9LGRlbHRhWTpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWVwiaW4gYT9hLmRlbHRhWTpcIndoZWVsRGVsdGFZXCJpbiBhPy1hLndoZWVsRGVsdGFZOlwid2hlZWxEZWx0YVwiaW4gYT8tYS53aGVlbERlbHRhOjB9LGRlbHRhWjpudWxsLGRlbHRhTW9kZTpudWxsfSksQ2Q9W1tcImJsdXJcIixcImJsdXJcIiwwXSxbXCJjYW5jZWxcIixcImNhbmNlbFwiLDBdLFtcImNsaWNrXCIsXCJjbGlja1wiLDBdLFtcImNsb3NlXCIsXCJjbG9zZVwiLDBdLFtcImNvbnRleHRtZW51XCIsXCJjb250ZXh0TWVudVwiLDBdLFtcImNvcHlcIixcImNvcHlcIiwwXSxbXCJjdXRcIixcImN1dFwiLDBdLFtcImF1eGNsaWNrXCIsXCJhdXhDbGlja1wiLDBdLFtcImRibGNsaWNrXCIsXCJkb3VibGVDbGlja1wiLDBdLFtcImRyYWdlbmRcIixcImRyYWdFbmRcIiwwXSxbXCJkcmFnc3RhcnRcIixcImRyYWdTdGFydFwiLDBdLFtcImRyb3BcIixcImRyb3BcIiwwXSxbXCJmb2N1c1wiLFwiZm9jdXNcIiwwXSxbXCJpbnB1dFwiLFwiaW5wdXRcIiwwXSxbXCJpbnZhbGlkXCIsXCJpbnZhbGlkXCIsMF0sXG5bXCJrZXlkb3duXCIsXCJrZXlEb3duXCIsMF0sW1wia2V5cHJlc3NcIixcImtleVByZXNzXCIsMF0sW1wia2V5dXBcIixcImtleVVwXCIsMF0sW1wibW91c2Vkb3duXCIsXCJtb3VzZURvd25cIiwwXSxbXCJtb3VzZXVwXCIsXCJtb3VzZVVwXCIsMF0sW1wicGFzdGVcIixcInBhc3RlXCIsMF0sW1wicGF1c2VcIixcInBhdXNlXCIsMF0sW1wicGxheVwiLFwicGxheVwiLDBdLFtcInBvaW50ZXJjYW5jZWxcIixcInBvaW50ZXJDYW5jZWxcIiwwXSxbXCJwb2ludGVyZG93blwiLFwicG9pbnRlckRvd25cIiwwXSxbXCJwb2ludGVydXBcIixcInBvaW50ZXJVcFwiLDBdLFtcInJhdGVjaGFuZ2VcIixcInJhdGVDaGFuZ2VcIiwwXSxbXCJyZXNldFwiLFwicmVzZXRcIiwwXSxbXCJzZWVrZWRcIixcInNlZWtlZFwiLDBdLFtcInN1Ym1pdFwiLFwic3VibWl0XCIsMF0sW1widG91Y2hjYW5jZWxcIixcInRvdWNoQ2FuY2VsXCIsMF0sW1widG91Y2hlbmRcIixcInRvdWNoRW5kXCIsMF0sW1widG91Y2hzdGFydFwiLFwidG91Y2hTdGFydFwiLDBdLFtcInZvbHVtZWNoYW5nZVwiLFwidm9sdW1lQ2hhbmdlXCIsMF0sW1wiZHJhZ1wiLFwiZHJhZ1wiLFxuMV0sW1wiZHJhZ2VudGVyXCIsXCJkcmFnRW50ZXJcIiwxXSxbXCJkcmFnZXhpdFwiLFwiZHJhZ0V4aXRcIiwxXSxbXCJkcmFnbGVhdmVcIixcImRyYWdMZWF2ZVwiLDFdLFtcImRyYWdvdmVyXCIsXCJkcmFnT3ZlclwiLDFdLFtcIm1vdXNlbW92ZVwiLFwibW91c2VNb3ZlXCIsMV0sW1wibW91c2VvdXRcIixcIm1vdXNlT3V0XCIsMV0sW1wibW91c2VvdmVyXCIsXCJtb3VzZU92ZXJcIiwxXSxbXCJwb2ludGVybW92ZVwiLFwicG9pbnRlck1vdmVcIiwxXSxbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyT3V0XCIsMV0sW1wicG9pbnRlcm92ZXJcIixcInBvaW50ZXJPdmVyXCIsMV0sW1wic2Nyb2xsXCIsXCJzY3JvbGxcIiwxXSxbXCJ0b2dnbGVcIixcInRvZ2dsZVwiLDFdLFtcInRvdWNobW92ZVwiLFwidG91Y2hNb3ZlXCIsMV0sW1wid2hlZWxcIixcIndoZWVsXCIsMV0sW1wiYWJvcnRcIixcImFib3J0XCIsMl0sW1hhLFwiYW5pbWF0aW9uRW5kXCIsMl0sW1lhLFwiYW5pbWF0aW9uSXRlcmF0aW9uXCIsMl0sW1phLFwiYW5pbWF0aW9uU3RhcnRcIiwyXSxbXCJjYW5wbGF5XCIsXCJjYW5QbGF5XCIsMl0sW1wiY2FucGxheXRocm91Z2hcIixcblwiY2FuUGxheVRocm91Z2hcIiwyXSxbXCJkdXJhdGlvbmNoYW5nZVwiLFwiZHVyYXRpb25DaGFuZ2VcIiwyXSxbXCJlbXB0aWVkXCIsXCJlbXB0aWVkXCIsMl0sW1wiZW5jcnlwdGVkXCIsXCJlbmNyeXB0ZWRcIiwyXSxbXCJlbmRlZFwiLFwiZW5kZWRcIiwyXSxbXCJlcnJvclwiLFwiZXJyb3JcIiwyXSxbXCJnb3Rwb2ludGVyY2FwdHVyZVwiLFwiZ290UG9pbnRlckNhcHR1cmVcIiwyXSxbXCJsb2FkXCIsXCJsb2FkXCIsMl0sW1wibG9hZGVkZGF0YVwiLFwibG9hZGVkRGF0YVwiLDJdLFtcImxvYWRlZG1ldGFkYXRhXCIsXCJsb2FkZWRNZXRhZGF0YVwiLDJdLFtcImxvYWRzdGFydFwiLFwibG9hZFN0YXJ0XCIsMl0sW1wibG9zdHBvaW50ZXJjYXB0dXJlXCIsXCJsb3N0UG9pbnRlckNhcHR1cmVcIiwyXSxbXCJwbGF5aW5nXCIsXCJwbGF5aW5nXCIsMl0sW1wicHJvZ3Jlc3NcIixcInByb2dyZXNzXCIsMl0sW1wic2Vla2luZ1wiLFwic2Vla2luZ1wiLDJdLFtcInN0YWxsZWRcIixcInN0YWxsZWRcIiwyXSxbXCJzdXNwZW5kXCIsXCJzdXNwZW5kXCIsMl0sW1widGltZXVwZGF0ZVwiLFwidGltZVVwZGF0ZVwiLFxuMl0sW2FiLFwidHJhbnNpdGlvbkVuZFwiLDJdLFtcIndhaXRpbmdcIixcIndhaXRpbmdcIiwyXV0sRGQ9e30sRWQ9e30sRmQ9MDtmb3IoO0ZkPENkLmxlbmd0aDtGZCsrKXt2YXIgR2Q9Q2RbRmRdLEhkPUdkWzBdLElkPUdkWzFdLEpkPUdkWzJdLEtkPVwib25cIisoSWRbMF0udG9VcHBlckNhc2UoKStJZC5zbGljZSgxKSksTGQ9e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOktkLGNhcHR1cmVkOktkK1wiQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6W0hkXSxldmVudFByaW9yaXR5OkpkfTtEZFtJZF09TGQ7RWRbSGRdPUxkfVxudmFyIE1kPXtldmVudFR5cGVzOkRkLGdldEV2ZW50UHJpb3JpdHk6ZnVuY3Rpb24oYSl7YT1FZFthXTtyZXR1cm4gdm9pZCAwIT09YT9hLmV2ZW50UHJpb3JpdHk6Mn0sZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1FZFthXTtpZighZSlyZXR1cm4gbnVsbDtzd2l0Y2goYSl7Y2FzZSBcImtleXByZXNzXCI6aWYoMD09PXVkKGMpKXJldHVybiBudWxsO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6YT14ZDticmVhaztjYXNlIFwiYmx1clwiOmNhc2UgXCJmb2N1c1wiOmE9dGQ7YnJlYWs7Y2FzZSBcImNsaWNrXCI6aWYoMj09PWMuYnV0dG9uKXJldHVybiBudWxsO2Nhc2UgXCJhdXhjbGlja1wiOmNhc2UgXCJkYmxjbGlja1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwibW91c2Vtb3ZlXCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwibW91c2VvdXRcIjpjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcImNvbnRleHRtZW51XCI6YT1kZDticmVhaztjYXNlIFwiZHJhZ1wiOmNhc2UgXCJkcmFnZW5kXCI6Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnZXhpdFwiOmNhc2UgXCJkcmFnbGVhdmVcIjpjYXNlIFwiZHJhZ292ZXJcIjpjYXNlIFwiZHJhZ3N0YXJ0XCI6Y2FzZSBcImRyb3BcIjphPVxueWQ7YnJlYWs7Y2FzZSBcInRvdWNoY2FuY2VsXCI6Y2FzZSBcInRvdWNoZW5kXCI6Y2FzZSBcInRvdWNobW92ZVwiOmNhc2UgXCJ0b3VjaHN0YXJ0XCI6YT16ZDticmVhaztjYXNlIFhhOmNhc2UgWWE6Y2FzZSBaYTphPXJkO2JyZWFrO2Nhc2UgYWI6YT1BZDticmVhaztjYXNlIFwic2Nyb2xsXCI6YT1XYzticmVhaztjYXNlIFwid2hlZWxcIjphPUJkO2JyZWFrO2Nhc2UgXCJjb3B5XCI6Y2FzZSBcImN1dFwiOmNhc2UgXCJwYXN0ZVwiOmE9c2Q7YnJlYWs7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJwb2ludGVyY2FuY2VsXCI6Y2FzZSBcInBvaW50ZXJkb3duXCI6Y2FzZSBcInBvaW50ZXJtb3ZlXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwicG9pbnRlcnVwXCI6YT1lZDticmVhaztkZWZhdWx0OmE9eX1iPWEuZ2V0UG9vbGVkKGUsYixjLGQpO1FhKGIpO3JldHVybiBifX0sTmQ9TWQuZ2V0RXZlbnRQcmlvcml0eSxPZD1bXTtcbmZ1bmN0aW9uIFBkKGEpe3ZhciBiPWEudGFyZ2V0SW5zdCxjPWI7ZG97aWYoIWMpe2EuYW5jZXN0b3JzLnB1c2goYyk7YnJlYWt9dmFyIGQ7Zm9yKGQ9YztkLnJldHVybjspZD1kLnJldHVybjtkPTMhPT1kLnRhZz9udWxsOmQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87aWYoIWQpYnJlYWs7YS5hbmNlc3RvcnMucHVzaChjKTtjPUhhKGQpfXdoaWxlKGMpO2ZvcihjPTA7YzxhLmFuY2VzdG9ycy5sZW5ndGg7YysrKXtiPWEuYW5jZXN0b3JzW2NdO3ZhciBlPVJiKGEubmF0aXZlRXZlbnQpO2Q9YS50b3BMZXZlbFR5cGU7Zm9yKHZhciBmPWEubmF0aXZlRXZlbnQsaD1udWxsLGc9MDtnPGVhLmxlbmd0aDtnKyspe3ZhciBrPWVhW2ddO2smJihrPWsuZXh0cmFjdEV2ZW50cyhkLGIsZixlKSkmJihoPXhhKGgsaykpfUJhKGgpfX12YXIgUWQ9ITA7ZnVuY3Rpb24gRyhhLGIpe1JkKGIsYSwhMSl9XG5mdW5jdGlvbiBSZChhLGIsYyl7c3dpdGNoKE5kKGIpKXtjYXNlIDA6dmFyIGQ9U2QuYmluZChudWxsLGIsMSk7YnJlYWs7Y2FzZSAxOmQ9VGQuYmluZChudWxsLGIsMSk7YnJlYWs7ZGVmYXVsdDpkPVVkLmJpbmQobnVsbCxiLDEpfWM/YS5hZGRFdmVudExpc3RlbmVyKGIsZCwhMCk6YS5hZGRFdmVudExpc3RlbmVyKGIsZCwhMSl9ZnVuY3Rpb24gU2QoYSxiLGMpe05ifHxMYigpO3ZhciBkPVVkLGU9TmI7TmI9ITA7dHJ5e0tiKGQsYSxiLGMpfWZpbmFsbHl7KE5iPWUpfHxPYigpfX1mdW5jdGlvbiBUZChhLGIsYyl7VWQoYSxiLGMpfVxuZnVuY3Rpb24gVWQoYSxiLGMpe2lmKFFkKXtiPVJiKGMpO2I9SGEoYik7bnVsbD09PWJ8fFwibnVtYmVyXCIhPT10eXBlb2YgYi50YWd8fDI9PT1sZChiKXx8KGI9bnVsbCk7aWYoT2QubGVuZ3RoKXt2YXIgZD1PZC5wb3AoKTtkLnRvcExldmVsVHlwZT1hO2QubmF0aXZlRXZlbnQ9YztkLnRhcmdldEluc3Q9YjthPWR9ZWxzZSBhPXt0b3BMZXZlbFR5cGU6YSxuYXRpdmVFdmVudDpjLHRhcmdldEluc3Q6YixhbmNlc3RvcnM6W119O3RyeXtpZihjPWEsTmIpUGQoYyx2b2lkIDApO2Vsc2V7TmI9ITA7dHJ5e01iKFBkLGMsdm9pZCAwKX1maW5hbGx5e05iPSExLE9iKCl9fX1maW5hbGx5e2EudG9wTGV2ZWxUeXBlPW51bGwsYS5uYXRpdmVFdmVudD1udWxsLGEudGFyZ2V0SW5zdD1udWxsLGEuYW5jZXN0b3JzLmxlbmd0aD0wLDEwPk9kLmxlbmd0aCYmT2QucHVzaChhKX19fXZhciBWZD1uZXcgKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrTWFwP1dlYWtNYXA6TWFwKTtcbmZ1bmN0aW9uIFdkKGEpe3ZhciBiPVZkLmdldChhKTt2b2lkIDA9PT1iJiYoYj1uZXcgU2V0LFZkLnNldChhLGIpKTtyZXR1cm4gYn1mdW5jdGlvbiBYZChhKXthPWF8fChcInVuZGVmaW5lZFwiIT09dHlwZW9mIGRvY3VtZW50P2RvY3VtZW50OnZvaWQgMCk7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhKXJldHVybiBudWxsO3RyeXtyZXR1cm4gYS5hY3RpdmVFbGVtZW50fHxhLmJvZHl9Y2F0Y2goYil7cmV0dXJuIGEuYm9keX19ZnVuY3Rpb24gWWQoYSl7Zm9yKDthJiZhLmZpcnN0Q2hpbGQ7KWE9YS5maXJzdENoaWxkO3JldHVybiBhfVxuZnVuY3Rpb24gWmQoYSxiKXt2YXIgYz1ZZChhKTthPTA7Zm9yKHZhciBkO2M7KXtpZigzPT09Yy5ub2RlVHlwZSl7ZD1hK2MudGV4dENvbnRlbnQubGVuZ3RoO2lmKGE8PWImJmQ+PWIpcmV0dXJue25vZGU6YyxvZmZzZXQ6Yi1hfTthPWR9YTp7Zm9yKDtjOyl7aWYoYy5uZXh0U2libGluZyl7Yz1jLm5leHRTaWJsaW5nO2JyZWFrIGF9Yz1jLnBhcmVudE5vZGV9Yz12b2lkIDB9Yz1ZZChjKX19ZnVuY3Rpb24gJGQoYSxiKXtyZXR1cm4gYSYmYj9hPT09Yj8hMDphJiYzPT09YS5ub2RlVHlwZT8hMTpiJiYzPT09Yi5ub2RlVHlwZT8kZChhLGIucGFyZW50Tm9kZSk6XCJjb250YWluc1wiaW4gYT9hLmNvbnRhaW5zKGIpOmEuY29tcGFyZURvY3VtZW50UG9zaXRpb24/ISEoYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihiKSYxNik6ITE6ITF9XG5mdW5jdGlvbiBhZSgpe2Zvcih2YXIgYT13aW5kb3csYj1YZCgpO2IgaW5zdGFuY2VvZiBhLkhUTUxJRnJhbWVFbGVtZW50Oyl7dHJ5e3ZhciBjPVwic3RyaW5nXCI9PT10eXBlb2YgYi5jb250ZW50V2luZG93LmxvY2F0aW9uLmhyZWZ9Y2F0Y2goZCl7Yz0hMX1pZihjKWE9Yi5jb250ZW50V2luZG93O2Vsc2UgYnJlYWs7Yj1YZChhLmRvY3VtZW50KX1yZXR1cm4gYn1mdW5jdGlvbiBiZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuIGImJihcImlucHV0XCI9PT1iJiYoXCJ0ZXh0XCI9PT1hLnR5cGV8fFwic2VhcmNoXCI9PT1hLnR5cGV8fFwidGVsXCI9PT1hLnR5cGV8fFwidXJsXCI9PT1hLnR5cGV8fFwicGFzc3dvcmRcIj09PWEudHlwZSl8fFwidGV4dGFyZWFcIj09PWJ8fFwidHJ1ZVwiPT09YS5jb250ZW50RWRpdGFibGUpfVxudmFyIGNlPVJhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJjExPj1kb2N1bWVudC5kb2N1bWVudE1vZGUsZGU9e3NlbGVjdDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvblNlbGVjdFwiLGNhcHR1cmVkOlwib25TZWxlY3RDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29udGV4dG1lbnUgZHJhZ2VuZCBmb2N1cyBrZXlkb3duIGtleXVwIG1vdXNlZG93biBtb3VzZXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKX19LGVlPW51bGwsZmU9bnVsbCxnZT1udWxsLGhlPSExO1xuZnVuY3Rpb24gaWUoYSxiKXt2YXIgYz1iLndpbmRvdz09PWI/Yi5kb2N1bWVudDo5PT09Yi5ub2RlVHlwZT9iOmIub3duZXJEb2N1bWVudDtpZihoZXx8bnVsbD09ZWV8fGVlIT09WGQoYykpcmV0dXJuIG51bGw7Yz1lZTtcInNlbGVjdGlvblN0YXJ0XCJpbiBjJiZiZShjKT9jPXtzdGFydDpjLnNlbGVjdGlvblN0YXJ0LGVuZDpjLnNlbGVjdGlvbkVuZH06KGM9KGMub3duZXJEb2N1bWVudCYmYy5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3fHx3aW5kb3cpLmdldFNlbGVjdGlvbigpLGM9e2FuY2hvck5vZGU6Yy5hbmNob3JOb2RlLGFuY2hvck9mZnNldDpjLmFuY2hvck9mZnNldCxmb2N1c05vZGU6Yy5mb2N1c05vZGUsZm9jdXNPZmZzZXQ6Yy5mb2N1c09mZnNldH0pO3JldHVybiBnZSYmamQoZ2UsYyk/bnVsbDooZ2U9YyxhPXkuZ2V0UG9vbGVkKGRlLnNlbGVjdCxmZSxhLGIpLGEudHlwZT1cInNlbGVjdFwiLGEudGFyZ2V0PWVlLFFhKGEpLGEpfVxudmFyIGplPXtldmVudFR5cGVzOmRlLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9ZC53aW5kb3c9PT1kP2QuZG9jdW1lbnQ6OT09PWQubm9kZVR5cGU/ZDpkLm93bmVyRG9jdW1lbnQsZjtpZighKGY9IWUpKXthOntlPVdkKGUpO2Y9amEub25TZWxlY3Q7Zm9yKHZhciBoPTA7aDxmLmxlbmd0aDtoKyspaWYoIWUuaGFzKGZbaF0pKXtlPSExO2JyZWFrIGF9ZT0hMH1mPSFlfWlmKGYpcmV0dXJuIG51bGw7ZT1iP0phKGIpOndpbmRvdztzd2l0Y2goYSl7Y2FzZSBcImZvY3VzXCI6aWYoUWIoZSl8fFwidHJ1ZVwiPT09ZS5jb250ZW50RWRpdGFibGUpZWU9ZSxmZT1iLGdlPW51bGw7YnJlYWs7Y2FzZSBcImJsdXJcIjpnZT1mZT1lZT1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZWRvd25cIjpoZT0hMDticmVhaztjYXNlIFwiY29udGV4dG1lbnVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJkcmFnZW5kXCI6cmV0dXJuIGhlPSExLGllKGMsZCk7Y2FzZSBcInNlbGVjdGlvbmNoYW5nZVwiOmlmKGNlKWJyZWFrO1xuY2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjpyZXR1cm4gaWUoYyxkKX1yZXR1cm4gbnVsbH19O0NhLmluamVjdEV2ZW50UGx1Z2luT3JkZXIoXCJSZXNwb25kZXJFdmVudFBsdWdpbiBTaW1wbGVFdmVudFBsdWdpbiBFbnRlckxlYXZlRXZlbnRQbHVnaW4gQ2hhbmdlRXZlbnRQbHVnaW4gU2VsZWN0RXZlbnRQbHVnaW4gQmVmb3JlSW5wdXRFdmVudFBsdWdpblwiLnNwbGl0KFwiIFwiKSk7c2E9S2E7dGE9SWE7dmE9SmE7Q2EuaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lKHtTaW1wbGVFdmVudFBsdWdpbjpNZCxFbnRlckxlYXZlRXZlbnRQbHVnaW46Z2QsQ2hhbmdlRXZlbnRQbHVnaW46VmMsU2VsZWN0RXZlbnRQbHVnaW46amUsQmVmb3JlSW5wdXRFdmVudFBsdWdpbjpDYn0pO2Z1bmN0aW9uIGtlKGEpe3ZhciBiPVwiXCI7YWEuQ2hpbGRyZW4uZm9yRWFjaChhLGZ1bmN0aW9uKGEpe251bGwhPWEmJihiKz1hKX0pO3JldHVybiBifVxuZnVuY3Rpb24gbGUoYSxiKXthPW0oe2NoaWxkcmVuOnZvaWQgMH0sYik7aWYoYj1rZShiLmNoaWxkcmVuKSlhLmNoaWxkcmVuPWI7cmV0dXJuIGF9ZnVuY3Rpb24gbWUoYSxiLGMsZCl7YT1hLm9wdGlvbnM7aWYoYil7Yj17fTtmb3IodmFyIGU9MDtlPGMubGVuZ3RoO2UrKyliW1wiJFwiK2NbZV1dPSEwO2ZvcihjPTA7YzxhLmxlbmd0aDtjKyspZT1iLmhhc093blByb3BlcnR5KFwiJFwiK2FbY10udmFsdWUpLGFbY10uc2VsZWN0ZWQhPT1lJiYoYVtjXS5zZWxlY3RlZD1lKSxlJiZkJiYoYVtjXS5kZWZhdWx0U2VsZWN0ZWQ9ITApfWVsc2V7Yz1cIlwiK0FjKGMpO2I9bnVsbDtmb3IoZT0wO2U8YS5sZW5ndGg7ZSsrKXtpZihhW2VdLnZhbHVlPT09Yyl7YVtlXS5zZWxlY3RlZD0hMDtkJiYoYVtlXS5kZWZhdWx0U2VsZWN0ZWQ9ITApO3JldHVybn1udWxsIT09Ynx8YVtlXS5kaXNhYmxlZHx8KGI9YVtlXSl9bnVsbCE9PWImJihiLnNlbGVjdGVkPSEwKX19XG5mdW5jdGlvbiBuZShhLGIpe2lmKG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpdGhyb3cgdChFcnJvcig5MSkpO3JldHVybiBtKHt9LGIse3ZhbHVlOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLGNoaWxkcmVuOlwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZX0pfWZ1bmN0aW9uIG9lKGEsYil7dmFyIGM9Yi52YWx1ZTtpZihudWxsPT1jKXtjPWIuZGVmYXVsdFZhbHVlO2I9Yi5jaGlsZHJlbjtpZihudWxsIT1iKXtpZihudWxsIT1jKXRocm93IHQoRXJyb3IoOTIpKTtpZihBcnJheS5pc0FycmF5KGIpKXtpZighKDE+PWIubGVuZ3RoKSl0aHJvdyB0KEVycm9yKDkzKSk7Yj1iWzBdfWM9Yn1udWxsPT1jJiYoYz1cIlwiKX1hLl93cmFwcGVyU3RhdGU9e2luaXRpYWxWYWx1ZTpBYyhjKX19XG5mdW5jdGlvbiBwZShhLGIpe3ZhciBjPUFjKGIudmFsdWUpLGQ9QWMoYi5kZWZhdWx0VmFsdWUpO251bGwhPWMmJihjPVwiXCIrYyxjIT09YS52YWx1ZSYmKGEudmFsdWU9YyksbnVsbD09Yi5kZWZhdWx0VmFsdWUmJmEuZGVmYXVsdFZhbHVlIT09YyYmKGEuZGVmYXVsdFZhbHVlPWMpKTtudWxsIT1kJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitkKX1mdW5jdGlvbiBxZShhKXt2YXIgYj1hLnRleHRDb250ZW50O2I9PT1hLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlJiYoYS52YWx1ZT1iKX12YXIgcmU9e2h0bWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIsbWF0aG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiLHN2ZzpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJ9O1xuZnVuY3Rpb24gc2UoYSl7c3dpdGNoKGEpe2Nhc2UgXCJzdmdcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI7Y2FzZSBcIm1hdGhcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIjtkZWZhdWx0OnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwifX1mdW5jdGlvbiB0ZShhLGIpe3JldHVybiBudWxsPT1hfHxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWE/c2UoYik6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPT09YSYmXCJmb3JlaWduT2JqZWN0XCI9PT1iP1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiOmF9XG52YXIgdWU9dm9pZCAwLHZlPWZ1bmN0aW9uKGEpe3JldHVyblwidW5kZWZpbmVkXCIhPT10eXBlb2YgTVNBcHAmJk1TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uP2Z1bmN0aW9uKGIsYyxkLGUpe01TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uKGZ1bmN0aW9uKCl7cmV0dXJuIGEoYixjLGQsZSl9KX06YX0oZnVuY3Rpb24oYSxiKXtpZihhLm5hbWVzcGFjZVVSSSE9PXJlLnN2Z3x8XCJpbm5lckhUTUxcImluIGEpYS5pbm5lckhUTUw9YjtlbHNle3VlPXVlfHxkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO3VlLmlubmVySFRNTD1cIjxzdmc+XCIrYitcIjwvc3ZnPlwiO2ZvcihiPXVlLmZpcnN0Q2hpbGQ7YS5maXJzdENoaWxkOylhLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCk7Zm9yKDtiLmZpcnN0Q2hpbGQ7KWEuYXBwZW5kQ2hpbGQoYi5maXJzdENoaWxkKX19KTtcbmZ1bmN0aW9uIHdlKGEsYil7aWYoYil7dmFyIGM9YS5maXJzdENoaWxkO2lmKGMmJmM9PT1hLmxhc3RDaGlsZCYmMz09PWMubm9kZVR5cGUpe2Mubm9kZVZhbHVlPWI7cmV0dXJufX1hLnRleHRDb250ZW50PWJ9XG52YXIgeGU9e2FuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiEwLGJvcmRlckltYWdlT3V0c2V0OiEwLGJvcmRlckltYWdlU2xpY2U6ITAsYm9yZGVySW1hZ2VXaWR0aDohMCxib3hGbGV4OiEwLGJveEZsZXhHcm91cDohMCxib3hPcmRpbmFsR3JvdXA6ITAsY29sdW1uQ291bnQ6ITAsY29sdW1uczohMCxmbGV4OiEwLGZsZXhHcm93OiEwLGZsZXhQb3NpdGl2ZTohMCxmbGV4U2hyaW5rOiEwLGZsZXhOZWdhdGl2ZTohMCxmbGV4T3JkZXI6ITAsZ3JpZEFyZWE6ITAsZ3JpZFJvdzohMCxncmlkUm93RW5kOiEwLGdyaWRSb3dTcGFuOiEwLGdyaWRSb3dTdGFydDohMCxncmlkQ29sdW1uOiEwLGdyaWRDb2x1bW5FbmQ6ITAsZ3JpZENvbHVtblNwYW46ITAsZ3JpZENvbHVtblN0YXJ0OiEwLGZvbnRXZWlnaHQ6ITAsbGluZUNsYW1wOiEwLGxpbmVIZWlnaHQ6ITAsb3BhY2l0eTohMCxvcmRlcjohMCxvcnBoYW5zOiEwLHRhYlNpemU6ITAsd2lkb3dzOiEwLHpJbmRleDohMCx6b29tOiEwLGZpbGxPcGFjaXR5OiEwLFxuZmxvb2RPcGFjaXR5OiEwLHN0b3BPcGFjaXR5OiEwLHN0cm9rZURhc2hhcnJheTohMCxzdHJva2VEYXNob2Zmc2V0OiEwLHN0cm9rZU1pdGVybGltaXQ6ITAsc3Ryb2tlT3BhY2l0eTohMCxzdHJva2VXaWR0aDohMH0seWU9W1wiV2Via2l0XCIsXCJtc1wiLFwiTW96XCIsXCJPXCJdO09iamVjdC5rZXlzKHhlKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3llLmZvckVhY2goZnVuY3Rpb24oYil7Yj1iK2EuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrYS5zdWJzdHJpbmcoMSk7eGVbYl09eGVbYV19KX0pO2Z1bmN0aW9uIHplKGEsYixjKXtyZXR1cm4gbnVsbD09Ynx8XCJib29sZWFuXCI9PT10eXBlb2YgYnx8XCJcIj09PWI/XCJcIjpjfHxcIm51bWJlclwiIT09dHlwZW9mIGJ8fDA9PT1ifHx4ZS5oYXNPd25Qcm9wZXJ0eShhKSYmeGVbYV0/KFwiXCIrYikudHJpbSgpOmIrXCJweFwifVxuZnVuY3Rpb24gQWUoYSxiKXthPWEuc3R5bGU7Zm9yKHZhciBjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9MD09PWMuaW5kZXhPZihcIi0tXCIpLGU9emUoYyxiW2NdLGQpO1wiZmxvYXRcIj09PWMmJihjPVwiY3NzRmxvYXRcIik7ZD9hLnNldFByb3BlcnR5KGMsZSk6YVtjXT1lfX12YXIgQ2U9bSh7bWVudWl0ZW06ITB9LHthcmVhOiEwLGJhc2U6ITAsYnI6ITAsY29sOiEwLGVtYmVkOiEwLGhyOiEwLGltZzohMCxpbnB1dDohMCxrZXlnZW46ITAsbGluazohMCxtZXRhOiEwLHBhcmFtOiEwLHNvdXJjZTohMCx0cmFjazohMCx3YnI6ITB9KTtcbmZ1bmN0aW9uIERlKGEsYil7aWYoYil7aWYoQ2VbYV0mJihudWxsIT1iLmNoaWxkcmVufHxudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKSl0aHJvdyB0KEVycm9yKDEzNyksYSxcIlwiKTtpZihudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKXtpZihudWxsIT1iLmNoaWxkcmVuKXRocm93IHQoRXJyb3IoNjApKTtpZighKFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmXCJfX2h0bWxcImluIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKXRocm93IHQoRXJyb3IoNjEpKTt9aWYobnVsbCE9Yi5zdHlsZSYmXCJvYmplY3RcIiE9PXR5cGVvZiBiLnN0eWxlKXRocm93IHQoRXJyb3IoNjIpLFwiXCIpO319XG5mdW5jdGlvbiBFZShhLGIpe2lmKC0xPT09YS5pbmRleE9mKFwiLVwiKSlyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGIuaXM7c3dpdGNoKGEpe2Nhc2UgXCJhbm5vdGF0aW9uLXhtbFwiOmNhc2UgXCJjb2xvci1wcm9maWxlXCI6Y2FzZSBcImZvbnQtZmFjZVwiOmNhc2UgXCJmb250LWZhY2Utc3JjXCI6Y2FzZSBcImZvbnQtZmFjZS11cmlcIjpjYXNlIFwiZm9udC1mYWNlLWZvcm1hdFwiOmNhc2UgXCJmb250LWZhY2UtbmFtZVwiOmNhc2UgXCJtaXNzaW5nLWdseXBoXCI6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMH19XG5mdW5jdGlvbiBGZShhLGIpe2E9OT09PWEubm9kZVR5cGV8fDExPT09YS5ub2RlVHlwZT9hOmEub3duZXJEb2N1bWVudDt2YXIgYz1XZChhKTtiPWphW2JdO2Zvcih2YXIgZD0wO2Q8Yi5sZW5ndGg7ZCsrKXt2YXIgZT1iW2RdO2lmKCFjLmhhcyhlKSl7c3dpdGNoKGUpe2Nhc2UgXCJzY3JvbGxcIjpSZChhLFwic2Nyb2xsXCIsITApO2JyZWFrO2Nhc2UgXCJmb2N1c1wiOmNhc2UgXCJibHVyXCI6UmQoYSxcImZvY3VzXCIsITApO1JkKGEsXCJibHVyXCIsITApO2MuYWRkKFwiYmx1clwiKTtjLmFkZChcImZvY3VzXCIpO2JyZWFrO2Nhc2UgXCJjYW5jZWxcIjpjYXNlIFwiY2xvc2VcIjpTYihlKSYmUmQoYSxlLCEwKTticmVhaztjYXNlIFwiaW52YWxpZFwiOmNhc2UgXCJzdWJtaXRcIjpjYXNlIFwicmVzZXRcIjpicmVhaztkZWZhdWx0Oi0xPT09YmIuaW5kZXhPZihlKSYmRyhlLGEpfWMuYWRkKGUpfX19ZnVuY3Rpb24gR2UoKXt9dmFyIEhlPW51bGwsSWU9bnVsbDtcbmZ1bmN0aW9uIEplKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJidXR0b25cIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInRleHRhcmVhXCI6cmV0dXJuISFiLmF1dG9Gb2N1c31yZXR1cm4hMX1mdW5jdGlvbiBLZShhLGIpe3JldHVyblwidGV4dGFyZWFcIj09PWF8fFwib3B0aW9uXCI9PT1hfHxcIm5vc2NyaXB0XCI9PT1hfHxcInN0cmluZ1wiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwibnVtYmVyXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT09Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTC5fX2h0bWx9dmFyIExlPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBzZXRUaW1lb3V0P3NldFRpbWVvdXQ6dm9pZCAwLE1lPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBjbGVhclRpbWVvdXQ/Y2xlYXJUaW1lb3V0OnZvaWQgMDtcbmZ1bmN0aW9uIE5lKGEpe2Zvcig7bnVsbCE9YTthPWEubmV4dFNpYmxpbmcpe3ZhciBiPWEubm9kZVR5cGU7aWYoMT09PWJ8fDM9PT1iKWJyZWFrfXJldHVybiBhfW5ldyBTZXQ7dmFyIE9lPVtdLFBlPS0xO2Z1bmN0aW9uIEgoYSl7MD5QZXx8KGEuY3VycmVudD1PZVtQZV0sT2VbUGVdPW51bGwsUGUtLSl9ZnVuY3Rpb24gSihhLGIpe1BlKys7T2VbUGVdPWEuY3VycmVudDthLmN1cnJlbnQ9Yn12YXIgUWU9e30sTD17Y3VycmVudDpRZX0sTT17Y3VycmVudDohMX0sUmU9UWU7XG5mdW5jdGlvbiBTZShhLGIpe3ZhciBjPWEudHlwZS5jb250ZXh0VHlwZXM7aWYoIWMpcmV0dXJuIFFlO3ZhciBkPWEuc3RhdGVOb2RlO2lmKGQmJmQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD09PWIpcmV0dXJuIGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ7dmFyIGU9e30sZjtmb3IoZiBpbiBjKWVbZl09YltmXTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9YixhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWUpO3JldHVybiBlfWZ1bmN0aW9uIE4oYSl7YT1hLmNoaWxkQ29udGV4dFR5cGVzO3JldHVybiBudWxsIT09YSYmdm9pZCAwIT09YX1mdW5jdGlvbiBUZShhKXtIKE0sYSk7SChMLGEpfWZ1bmN0aW9uIFVlKGEpe0goTSxhKTtIKEwsYSl9XG5mdW5jdGlvbiBWZShhLGIsYyl7aWYoTC5jdXJyZW50IT09UWUpdGhyb3cgdChFcnJvcigxNjgpKTtKKEwsYixhKTtKKE0sYyxhKX1mdW5jdGlvbiBXZShhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7YT1iLmNoaWxkQ29udGV4dFR5cGVzO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkLmdldENoaWxkQ29udGV4dClyZXR1cm4gYztkPWQuZ2V0Q2hpbGRDb250ZXh0KCk7Zm9yKHZhciBlIGluIGQpaWYoIShlIGluIGEpKXRocm93IHQoRXJyb3IoMTA4KSxvYyhiKXx8XCJVbmtub3duXCIsZSk7cmV0dXJuIG0oe30sYyxkKX1mdW5jdGlvbiBYZShhKXt2YXIgYj1hLnN0YXRlTm9kZTtiPWImJmIuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHR8fFFlO1JlPUwuY3VycmVudDtKKEwsYixhKTtKKE0sTS5jdXJyZW50LGEpO3JldHVybiEwfVxuZnVuY3Rpb24gWWUoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2lmKCFkKXRocm93IHQoRXJyb3IoMTY5KSk7Yz8oYj1XZShhLGIsUmUpLGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ9YixIKE0sYSksSChMLGEpLEooTCxiLGEpKTpIKE0sYSk7SihNLGMsYSl9XG52YXIgWmU9cS51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHksJGU9cS51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrLGFmPXEudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2ssYmY9cS51bnN0YWJsZV9zaG91bGRZaWVsZCxjZj1xLnVuc3RhYmxlX3JlcXVlc3RQYWludCxkZj1xLnVuc3RhYmxlX25vdyxlZj1xLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsLGZmPXEudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHksaGY9cS51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSxqZj1xLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LGtmPXEudW5zdGFibGVfTG93UHJpb3JpdHksbGY9cS51bnN0YWJsZV9JZGxlUHJpb3JpdHksbWY9e30sbmY9dm9pZCAwIT09Y2Y/Y2Y6ZnVuY3Rpb24oKXt9LG9mPW51bGwscGY9bnVsbCxxZj0hMSxyZj1kZigpLHNmPTFFND5yZj9kZjpmdW5jdGlvbigpe3JldHVybiBkZigpLXJmfTtcbmZ1bmN0aW9uIHRmKCl7c3dpdGNoKGVmKCkpe2Nhc2UgZmY6cmV0dXJuIDk5O2Nhc2UgaGY6cmV0dXJuIDk4O2Nhc2UgamY6cmV0dXJuIDk3O2Nhc2Uga2Y6cmV0dXJuIDk2O2Nhc2UgbGY6cmV0dXJuIDk1O2RlZmF1bHQ6dGhyb3cgdChFcnJvcigzMzIpKTt9fWZ1bmN0aW9uIHVmKGEpe3N3aXRjaChhKXtjYXNlIDk5OnJldHVybiBmZjtjYXNlIDk4OnJldHVybiBoZjtjYXNlIDk3OnJldHVybiBqZjtjYXNlIDk2OnJldHVybiBrZjtjYXNlIDk1OnJldHVybiBsZjtkZWZhdWx0OnRocm93IHQoRXJyb3IoMzMyKSk7fX1mdW5jdGlvbiB2ZihhLGIpe2E9dWYoYSk7cmV0dXJuIFplKGEsYil9ZnVuY3Rpb24gd2YoYSxiLGMpe2E9dWYoYSk7cmV0dXJuICRlKGEsYixjKX1mdW5jdGlvbiB4ZihhKXtudWxsPT09b2Y/KG9mPVthXSxwZj0kZShmZix5ZikpOm9mLnB1c2goYSk7cmV0dXJuIG1mfWZ1bmN0aW9uIE8oKXtudWxsIT09cGYmJmFmKHBmKTt5ZigpfVxuZnVuY3Rpb24geWYoKXtpZighcWYmJm51bGwhPT1vZil7cWY9ITA7dmFyIGE9MDt0cnl7dmFyIGI9b2Y7dmYoOTksZnVuY3Rpb24oKXtmb3IoO2E8Yi5sZW5ndGg7YSsrKXt2YXIgYz1iW2FdO2RvIGM9YyghMCk7d2hpbGUobnVsbCE9PWMpfX0pO29mPW51bGx9Y2F0Y2goYyl7dGhyb3cgbnVsbCE9PW9mJiYob2Y9b2Yuc2xpY2UoYSsxKSksJGUoZmYsTyksYzt9ZmluYWxseXtxZj0hMX19fWZ1bmN0aW9uIHpmKGEsYil7aWYoMTA3Mzc0MTgyMz09PWIpcmV0dXJuIDk5O2lmKDE9PT1iKXJldHVybiA5NTthPTEwKigxMDczNzQxODIxLWIpLTEwKigxMDczNzQxODIxLWEpO3JldHVybiAwPj1hPzk5OjI1MD49YT85ODo1MjUwPj1hPzk3Ojk1fWZ1bmN0aW9uIEFmKGEsYil7aWYoYSYmYS5kZWZhdWx0UHJvcHMpe2I9bSh7fSxiKTthPWEuZGVmYXVsdFByb3BzO2Zvcih2YXIgYyBpbiBhKXZvaWQgMD09PWJbY10mJihiW2NdPWFbY10pfXJldHVybiBifVxuZnVuY3Rpb24gQmYoYSl7dmFyIGI9YS5fcmVzdWx0O3N3aXRjaChhLl9zdGF0dXMpe2Nhc2UgMTpyZXR1cm4gYjtjYXNlIDI6dGhyb3cgYjtjYXNlIDA6dGhyb3cgYjtkZWZhdWx0OmEuX3N0YXR1cz0wO2I9YS5fY3RvcjtiPWIoKTtiLnRoZW4oZnVuY3Rpb24oYil7MD09PWEuX3N0YXR1cyYmKGI9Yi5kZWZhdWx0LGEuX3N0YXR1cz0xLGEuX3Jlc3VsdD1iKX0sZnVuY3Rpb24oYil7MD09PWEuX3N0YXR1cyYmKGEuX3N0YXR1cz0yLGEuX3Jlc3VsdD1iKX0pO3N3aXRjaChhLl9zdGF0dXMpe2Nhc2UgMTpyZXR1cm4gYS5fcmVzdWx0O2Nhc2UgMjp0aHJvdyBhLl9yZXN1bHQ7fWEuX3Jlc3VsdD1iO3Rocm93IGI7fX12YXIgQ2Y9e2N1cnJlbnQ6bnVsbH0sRGY9bnVsbCxFZj1udWxsLEZmPW51bGw7ZnVuY3Rpb24gR2YoKXtGZj1FZj1EZj1udWxsfVxuZnVuY3Rpb24gSGYoYSxiKXt2YXIgYz1hLnR5cGUuX2NvbnRleHQ7SihDZixjLl9jdXJyZW50VmFsdWUsYSk7Yy5fY3VycmVudFZhbHVlPWJ9ZnVuY3Rpb24gSWYoYSl7dmFyIGI9Q2YuY3VycmVudDtIKENmLGEpO2EudHlwZS5fY29udGV4dC5fY3VycmVudFZhbHVlPWJ9ZnVuY3Rpb24gSmYoYSxiKXtmb3IoO251bGwhPT1hOyl7dmFyIGM9YS5hbHRlcm5hdGU7aWYoYS5jaGlsZEV4cGlyYXRpb25UaW1lPGIpYS5jaGlsZEV4cGlyYXRpb25UaW1lPWIsbnVsbCE9PWMmJmMuY2hpbGRFeHBpcmF0aW9uVGltZTxiJiYoYy5jaGlsZEV4cGlyYXRpb25UaW1lPWIpO2Vsc2UgaWYobnVsbCE9PWMmJmMuY2hpbGRFeHBpcmF0aW9uVGltZTxiKWMuY2hpbGRFeHBpcmF0aW9uVGltZT1iO2Vsc2UgYnJlYWs7YT1hLnJldHVybn19XG5mdW5jdGlvbiBLZihhLGIpe0RmPWE7RmY9RWY9bnVsbDthPWEuZGVwZW5kZW5jaWVzO251bGwhPT1hJiZudWxsIT09YS5maXJzdENvbnRleHQmJihhLmV4cGlyYXRpb25UaW1lPj1iJiYoTGY9ITApLGEuZmlyc3RDb250ZXh0PW51bGwpfWZ1bmN0aW9uIE1mKGEsYil7aWYoRmYhPT1hJiYhMSE9PWImJjAhPT1iKXtpZihcIm51bWJlclwiIT09dHlwZW9mIGJ8fDEwNzM3NDE4MjM9PT1iKUZmPWEsYj0xMDczNzQxODIzO2I9e2NvbnRleHQ6YSxvYnNlcnZlZEJpdHM6YixuZXh0Om51bGx9O2lmKG51bGw9PT1FZil7aWYobnVsbD09PURmKXRocm93IHQoRXJyb3IoMzA4KSk7RWY9YjtEZi5kZXBlbmRlbmNpZXM9e2V4cGlyYXRpb25UaW1lOjAsZmlyc3RDb250ZXh0OmIscmVzcG9uZGVyczpudWxsfX1lbHNlIEVmPUVmLm5leHQ9Yn1yZXR1cm4gYS5fY3VycmVudFZhbHVlfXZhciBOZj0hMTtcbmZ1bmN0aW9uIE9mKGEpe3JldHVybntiYXNlU3RhdGU6YSxmaXJzdFVwZGF0ZTpudWxsLGxhc3RVcGRhdGU6bnVsbCxmaXJzdENhcHR1cmVkVXBkYXRlOm51bGwsbGFzdENhcHR1cmVkVXBkYXRlOm51bGwsZmlyc3RFZmZlY3Q6bnVsbCxsYXN0RWZmZWN0Om51bGwsZmlyc3RDYXB0dXJlZEVmZmVjdDpudWxsLGxhc3RDYXB0dXJlZEVmZmVjdDpudWxsfX1mdW5jdGlvbiBQZihhKXtyZXR1cm57YmFzZVN0YXRlOmEuYmFzZVN0YXRlLGZpcnN0VXBkYXRlOmEuZmlyc3RVcGRhdGUsbGFzdFVwZGF0ZTphLmxhc3RVcGRhdGUsZmlyc3RDYXB0dXJlZFVwZGF0ZTpudWxsLGxhc3RDYXB0dXJlZFVwZGF0ZTpudWxsLGZpcnN0RWZmZWN0Om51bGwsbGFzdEVmZmVjdDpudWxsLGZpcnN0Q2FwdHVyZWRFZmZlY3Q6bnVsbCxsYXN0Q2FwdHVyZWRFZmZlY3Q6bnVsbH19XG5mdW5jdGlvbiBRZihhLGIpe3JldHVybntleHBpcmF0aW9uVGltZTphLHN1c3BlbnNlQ29uZmlnOmIsdGFnOjAscGF5bG9hZDpudWxsLGNhbGxiYWNrOm51bGwsbmV4dDpudWxsLG5leHRFZmZlY3Q6bnVsbH19ZnVuY3Rpb24gUmYoYSxiKXtudWxsPT09YS5sYXN0VXBkYXRlP2EuZmlyc3RVcGRhdGU9YS5sYXN0VXBkYXRlPWI6KGEubGFzdFVwZGF0ZS5uZXh0PWIsYS5sYXN0VXBkYXRlPWIpfVxuZnVuY3Rpb24gU2YoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtpZihudWxsPT09Yyl7dmFyIGQ9YS51cGRhdGVRdWV1ZTt2YXIgZT1udWxsO251bGw9PT1kJiYoZD1hLnVwZGF0ZVF1ZXVlPU9mKGEubWVtb2l6ZWRTdGF0ZSkpfWVsc2UgZD1hLnVwZGF0ZVF1ZXVlLGU9Yy51cGRhdGVRdWV1ZSxudWxsPT09ZD9udWxsPT09ZT8oZD1hLnVwZGF0ZVF1ZXVlPU9mKGEubWVtb2l6ZWRTdGF0ZSksZT1jLnVwZGF0ZVF1ZXVlPU9mKGMubWVtb2l6ZWRTdGF0ZSkpOmQ9YS51cGRhdGVRdWV1ZT1QZihlKTpudWxsPT09ZSYmKGU9Yy51cGRhdGVRdWV1ZT1QZihkKSk7bnVsbD09PWV8fGQ9PT1lP1JmKGQsYik6bnVsbD09PWQubGFzdFVwZGF0ZXx8bnVsbD09PWUubGFzdFVwZGF0ZT8oUmYoZCxiKSxSZihlLGIpKTooUmYoZCxiKSxlLmxhc3RVcGRhdGU9Yil9XG5mdW5jdGlvbiBUZihhLGIpe3ZhciBjPWEudXBkYXRlUXVldWU7Yz1udWxsPT09Yz9hLnVwZGF0ZVF1ZXVlPU9mKGEubWVtb2l6ZWRTdGF0ZSk6VWYoYSxjKTtudWxsPT09Yy5sYXN0Q2FwdHVyZWRVcGRhdGU/Yy5maXJzdENhcHR1cmVkVXBkYXRlPWMubGFzdENhcHR1cmVkVXBkYXRlPWI6KGMubGFzdENhcHR1cmVkVXBkYXRlLm5leHQ9YixjLmxhc3RDYXB0dXJlZFVwZGF0ZT1iKX1mdW5jdGlvbiBVZihhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiZiPT09Yy51cGRhdGVRdWV1ZSYmKGI9YS51cGRhdGVRdWV1ZT1QZihiKSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiBWZihhLGIsYyxkLGUsZil7c3dpdGNoKGMudGFnKXtjYXNlIDE6cmV0dXJuIGE9Yy5wYXlsb2FkLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2EuY2FsbChmLGQsZSk6YTtjYXNlIDM6YS5lZmZlY3RUYWc9YS5lZmZlY3RUYWcmLTIwNDl8NjQ7Y2FzZSAwOmE9Yy5wYXlsb2FkO2U9XCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YS5jYWxsKGYsZCxlKTphO2lmKG51bGw9PT1lfHx2b2lkIDA9PT1lKWJyZWFrO3JldHVybiBtKHt9LGQsZSk7Y2FzZSAyOk5mPSEwfXJldHVybiBkfVxuZnVuY3Rpb24gV2YoYSxiLGMsZCxlKXtOZj0hMTtiPVVmKGEsYik7Zm9yKHZhciBmPWIuYmFzZVN0YXRlLGg9bnVsbCxnPTAsaz1iLmZpcnN0VXBkYXRlLGw9ZjtudWxsIT09azspe3ZhciBuPWsuZXhwaXJhdGlvblRpbWU7bjxlPyhudWxsPT09aCYmKGg9ayxmPWwpLGc8biYmKGc9bikpOihYZihuLGsuc3VzcGVuc2VDb25maWcpLGw9VmYoYSxiLGssbCxjLGQpLG51bGwhPT1rLmNhbGxiYWNrJiYoYS5lZmZlY3RUYWd8PTMyLGsubmV4dEVmZmVjdD1udWxsLG51bGw9PT1iLmxhc3RFZmZlY3Q/Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9azooYi5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9ayxiLmxhc3RFZmZlY3Q9aykpKTtrPWsubmV4dH1uPW51bGw7Zm9yKGs9Yi5maXJzdENhcHR1cmVkVXBkYXRlO251bGwhPT1rOyl7dmFyIHo9ay5leHBpcmF0aW9uVGltZTt6PGU/KG51bGw9PT1uJiYobj1rLG51bGw9PT1oJiYoZj1sKSksZzx6JiYoZz16KSk6KGw9VmYoYSxiLGssbCxjLGQpLG51bGwhPT1cbmsuY2FsbGJhY2smJihhLmVmZmVjdFRhZ3w9MzIsay5uZXh0RWZmZWN0PW51bGwsbnVsbD09PWIubGFzdENhcHR1cmVkRWZmZWN0P2IuZmlyc3RDYXB0dXJlZEVmZmVjdD1iLmxhc3RDYXB0dXJlZEVmZmVjdD1rOihiLmxhc3RDYXB0dXJlZEVmZmVjdC5uZXh0RWZmZWN0PWssYi5sYXN0Q2FwdHVyZWRFZmZlY3Q9aykpKTtrPWsubmV4dH1udWxsPT09aCYmKGIubGFzdFVwZGF0ZT1udWxsKTtudWxsPT09bj9iLmxhc3RDYXB0dXJlZFVwZGF0ZT1udWxsOmEuZWZmZWN0VGFnfD0zMjtudWxsPT09aCYmbnVsbD09PW4mJihmPWwpO2IuYmFzZVN0YXRlPWY7Yi5maXJzdFVwZGF0ZT1oO2IuZmlyc3RDYXB0dXJlZFVwZGF0ZT1uO2EuZXhwaXJhdGlvblRpbWU9ZzthLm1lbW9pemVkU3RhdGU9bH1cbmZ1bmN0aW9uIFlmKGEsYixjKXtudWxsIT09Yi5maXJzdENhcHR1cmVkVXBkYXRlJiYobnVsbCE9PWIubGFzdFVwZGF0ZSYmKGIubGFzdFVwZGF0ZS5uZXh0PWIuZmlyc3RDYXB0dXJlZFVwZGF0ZSxiLmxhc3RVcGRhdGU9Yi5sYXN0Q2FwdHVyZWRVcGRhdGUpLGIuZmlyc3RDYXB0dXJlZFVwZGF0ZT1iLmxhc3RDYXB0dXJlZFVwZGF0ZT1udWxsKTtaZihiLmZpcnN0RWZmZWN0LGMpO2IuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PW51bGw7WmYoYi5maXJzdENhcHR1cmVkRWZmZWN0LGMpO2IuZmlyc3RDYXB0dXJlZEVmZmVjdD1iLmxhc3RDYXB0dXJlZEVmZmVjdD1udWxsfWZ1bmN0aW9uIFpmKGEsYil7Zm9yKDtudWxsIT09YTspe3ZhciBjPWEuY2FsbGJhY2s7aWYobnVsbCE9PWMpe2EuY2FsbGJhY2s9bnVsbDt2YXIgZD1iO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjKXRocm93IHQoRXJyb3IoMTkxKSxjKTtjLmNhbGwoZCl9YT1hLm5leHRFZmZlY3R9fVxudmFyICRmPVhiLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLGFnPShuZXcgYWEuQ29tcG9uZW50KS5yZWZzO2Z1bmN0aW9uIGJnKGEsYixjLGQpe2I9YS5tZW1vaXplZFN0YXRlO2M9YyhkLGIpO2M9bnVsbD09PWN8fHZvaWQgMD09PWM/YjptKHt9LGIsYyk7YS5tZW1vaXplZFN0YXRlPWM7ZD1hLnVwZGF0ZVF1ZXVlO251bGwhPT1kJiYwPT09YS5leHBpcmF0aW9uVGltZSYmKGQuYmFzZVN0YXRlPWMpfVxudmFyIGZnPXtpc01vdW50ZWQ6ZnVuY3Rpb24oYSl7cmV0dXJuKGE9YS5fcmVhY3RJbnRlcm5hbEZpYmVyKT8yPT09bGQoYSk6ITF9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGQ9Y2coKSxlPSRmLnN1c3BlbnNlO2Q9ZGcoZCxhLGUpO2U9UWYoZCxlKTtlLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGUuY2FsbGJhY2s9Yyk7U2YoYSxlKTtlZyhhLGQpfSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgZD1jZygpLGU9JGYuc3VzcGVuc2U7ZD1kZyhkLGEsZSk7ZT1RZihkLGUpO2UudGFnPTE7ZS5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihlLmNhbGxiYWNrPWMpO1NmKGEsZSk7ZWcoYSxkKX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKGEsYil7YT1hLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGM9Y2coKSxkPSRmLnN1c3BlbnNlO1xuYz1kZyhjLGEsZCk7ZD1RZihjLGQpO2QudGFnPTI7dm9pZCAwIT09YiYmbnVsbCE9PWImJihkLmNhbGxiYWNrPWIpO1NmKGEsZCk7ZWcoYSxjKX19O2Z1bmN0aW9uIGdnKGEsYixjLGQsZSxmLGgpe2E9YS5zdGF0ZU5vZGU7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGEuc2hvdWxkQ29tcG9uZW50VXBkYXRlP2Euc2hvdWxkQ29tcG9uZW50VXBkYXRlKGQsZixoKTpiLnByb3RvdHlwZSYmYi5wcm90b3R5cGUuaXNQdXJlUmVhY3RDb21wb25lbnQ/IWpkKGMsZCl8fCFqZChlLGYpOiEwfVxuZnVuY3Rpb24gaGcoYSxiLGMpe3ZhciBkPSExLGU9UWU7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2Y9TWYoZik6KGU9TihiKT9SZTpMLmN1cnJlbnQsZD1iLmNvbnRleHRUeXBlcyxmPShkPW51bGwhPT1kJiZ2b2lkIDAhPT1kKT9TZShhLGUpOlFlKTtiPW5ldyBiKGMsZik7YS5tZW1vaXplZFN0YXRlPW51bGwhPT1iLnN0YXRlJiZ2b2lkIDAhPT1iLnN0YXRlP2Iuc3RhdGU6bnVsbDtiLnVwZGF0ZXI9Zmc7YS5zdGF0ZU5vZGU9YjtiLl9yZWFjdEludGVybmFsRmliZXI9YTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9ZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWYpO3JldHVybiBifVxuZnVuY3Rpb24gaWcoYSxiLGMsZCl7YT1iLnN0YXRlO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7Yi5zdGF0ZSE9PWEmJmZnLmVucXVldWVSZXBsYWNlU3RhdGUoYixiLnN0YXRlLG51bGwpfVxuZnVuY3Rpb24gamcoYSxiLGMsZCl7dmFyIGU9YS5zdGF0ZU5vZGU7ZS5wcm9wcz1jO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2UucmVmcz1hZzt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/ZS5jb250ZXh0PU1mKGYpOihmPU4oYik/UmU6TC5jdXJyZW50LGUuY29udGV4dD1TZShhLGYpKTtmPWEudXBkYXRlUXVldWU7bnVsbCE9PWYmJihXZihhLGYsYyxlLGQpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtmPWIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBmJiYoYmcoYSxiLGYsYyksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc3x8XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PVxudHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50fHwoYj1lLnN0YXRlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudCYmZS5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSxiIT09ZS5zdGF0ZSYmZmcuZW5xdWV1ZVJlcGxhY2VTdGF0ZShlLGUuc3RhdGUsbnVsbCksZj1hLnVwZGF0ZVF1ZXVlLG51bGwhPT1mJiYoV2YoYSxmLGMsZSxkKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSkpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudERpZE1vdW50JiYoYS5lZmZlY3RUYWd8PTQpfXZhciBrZz1BcnJheS5pc0FycmF5O1xuZnVuY3Rpb24gbGcoYSxiLGMpe2E9Yy5yZWY7aWYobnVsbCE9PWEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZcIm9iamVjdFwiIT09dHlwZW9mIGEpe2lmKGMuX293bmVyKXtjPWMuX293bmVyO3ZhciBkPXZvaWQgMDtpZihjKXtpZigxIT09Yy50YWcpdGhyb3cgdChFcnJvcigzMDkpKTtkPWMuc3RhdGVOb2RlfWlmKCFkKXRocm93IHQoRXJyb3IoMTQ3KSxhKTt2YXIgZT1cIlwiK2E7aWYobnVsbCE9PWImJm51bGwhPT1iLnJlZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGIucmVmJiZiLnJlZi5fc3RyaW5nUmVmPT09ZSlyZXR1cm4gYi5yZWY7Yj1mdW5jdGlvbihhKXt2YXIgYj1kLnJlZnM7Yj09PWFnJiYoYj1kLnJlZnM9e30pO251bGw9PT1hP2RlbGV0ZSBiW2VdOmJbZV09YX07Yi5fc3RyaW5nUmVmPWU7cmV0dXJuIGJ9aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBhKXRocm93IHQoRXJyb3IoMjg0KSk7aWYoIWMuX293bmVyKXRocm93IHQoRXJyb3IoMjkwKSxhKTt9cmV0dXJuIGF9XG5mdW5jdGlvbiBtZyhhLGIpe2lmKFwidGV4dGFyZWFcIiE9PWEudHlwZSl0aHJvdyB0KEVycm9yKDMxKSxcIltvYmplY3QgT2JqZWN0XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGIpP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYikuam9pbihcIiwgXCIpK1wifVwiOmIsXCJcIik7fVxuZnVuY3Rpb24gbmcoYSl7ZnVuY3Rpb24gYihiLGMpe2lmKGEpe3ZhciBkPWIubGFzdEVmZmVjdDtudWxsIT09ZD8oZC5uZXh0RWZmZWN0PWMsYi5sYXN0RWZmZWN0PWMpOmIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PWM7Yy5uZXh0RWZmZWN0PW51bGw7Yy5lZmZlY3RUYWc9OH19ZnVuY3Rpb24gYyhjLGQpe2lmKCFhKXJldHVybiBudWxsO2Zvcig7bnVsbCE9PWQ7KWIoYyxkKSxkPWQuc2libGluZztyZXR1cm4gbnVsbH1mdW5jdGlvbiBkKGEsYil7Zm9yKGE9bmV3IE1hcDtudWxsIT09YjspbnVsbCE9PWIua2V5P2Euc2V0KGIua2V5LGIpOmEuc2V0KGIuaW5kZXgsYiksYj1iLnNpYmxpbmc7cmV0dXJuIGF9ZnVuY3Rpb24gZShhLGIsYyl7YT1vZyhhLGIsYyk7YS5pbmRleD0wO2Euc2libGluZz1udWxsO3JldHVybiBhfWZ1bmN0aW9uIGYoYixjLGQpe2IuaW5kZXg9ZDtpZighYSlyZXR1cm4gYztkPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1kKXJldHVybiBkPWQuaW5kZXgsZDxjPyhiLmVmZmVjdFRhZz1cbjIsYyk6ZDtiLmVmZmVjdFRhZz0yO3JldHVybiBjfWZ1bmN0aW9uIGgoYil7YSYmbnVsbD09PWIuYWx0ZXJuYXRlJiYoYi5lZmZlY3RUYWc9Mik7cmV0dXJuIGJ9ZnVuY3Rpb24gZyhhLGIsYyxkKXtpZihudWxsPT09Ynx8NiE9PWIudGFnKXJldHVybiBiPXBnKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjLGQpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gayhhLGIsYyxkKXtpZihudWxsIT09YiYmYi5lbGVtZW50VHlwZT09PWMudHlwZSlyZXR1cm4gZD1lKGIsYy5wcm9wcyxkKSxkLnJlZj1sZyhhLGIsYyksZC5yZXR1cm49YSxkO2Q9cWcoYy50eXBlLGMua2V5LGMucHJvcHMsbnVsbCxhLm1vZGUsZCk7ZC5yZWY9bGcoYSxiLGMpO2QucmV0dXJuPWE7cmV0dXJuIGR9ZnVuY3Rpb24gbChhLGIsYyxkKXtpZihudWxsPT09Ynx8NCE9PWIudGFnfHxiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvIT09Yy5jb250YWluZXJJbmZvfHxiLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbiE9PVxuYy5pbXBsZW1lbnRhdGlvbilyZXR1cm4gYj1yZyhjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYy5jaGlsZHJlbnx8W10sZCk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBuKGEsYixjLGQsZil7aWYobnVsbD09PWJ8fDchPT1iLnRhZylyZXR1cm4gYj1zZyhjLGEubW9kZSxkLGYpLGIucmV0dXJuPWEsYjtiPWUoYixjLGQpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24geihhLGIsYyl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBifHxcIm51bWJlclwiPT09dHlwZW9mIGIpcmV0dXJuIGI9cGcoXCJcIitiLGEubW9kZSxjKSxiLnJldHVybj1hLGI7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBiJiZudWxsIT09Yil7c3dpdGNoKGIuJCR0eXBlb2Ype2Nhc2UgWmI6cmV0dXJuIGM9cWcoYi50eXBlLGIua2V5LGIucHJvcHMsbnVsbCxhLm1vZGUsYyksYy5yZWY9bGcoYSxudWxsLGIpLGMucmV0dXJuPWEsYztjYXNlICRiOnJldHVybiBiPXJnKGIsYS5tb2RlLGMpLGIucmV0dXJuPWEsYn1pZihrZyhiKXx8XG5tYyhiKSlyZXR1cm4gYj1zZyhiLGEubW9kZSxjLG51bGwpLGIucmV0dXJuPWEsYjttZyhhLGIpfXJldHVybiBudWxsfWZ1bmN0aW9uIHgoYSxiLGMsZCl7dmFyIGU9bnVsbCE9PWI/Yi5rZXk6bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGN8fFwibnVtYmVyXCI9PT10eXBlb2YgYylyZXR1cm4gbnVsbCE9PWU/bnVsbDpnKGEsYixcIlwiK2MsZCk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yyl7c3dpdGNoKGMuJCR0eXBlb2Ype2Nhc2UgWmI6cmV0dXJuIGMua2V5PT09ZT9jLnR5cGU9PT1hYz9uKGEsYixjLnByb3BzLmNoaWxkcmVuLGQsZSk6ayhhLGIsYyxkKTpudWxsO2Nhc2UgJGI6cmV0dXJuIGMua2V5PT09ZT9sKGEsYixjLGQpOm51bGx9aWYoa2coYyl8fG1jKGMpKXJldHVybiBudWxsIT09ZT9udWxsOm4oYSxiLGMsZCxudWxsKTttZyhhLGMpfXJldHVybiBudWxsfWZ1bmN0aW9uIHYoYSxiLGMsZCxlKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGR8fFwibnVtYmVyXCI9PT10eXBlb2YgZClyZXR1cm4gYT1cbmEuZ2V0KGMpfHxudWxsLGcoYixhLFwiXCIrZCxlKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGQmJm51bGwhPT1kKXtzd2l0Y2goZC4kJHR5cGVvZil7Y2FzZSBaYjpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsZC50eXBlPT09YWM/bihiLGEsZC5wcm9wcy5jaGlsZHJlbixlLGQua2V5KTprKGIsYSxkLGUpO2Nhc2UgJGI6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGwoYixhLGQsZSl9aWYoa2coZCl8fG1jKGQpKXJldHVybiBhPWEuZ2V0KGMpfHxudWxsLG4oYixhLGQsZSxudWxsKTttZyhiLGQpfXJldHVybiBudWxsfWZ1bmN0aW9uIHJiKGUsaCxnLGspe2Zvcih2YXIgbD1udWxsLHU9bnVsbCxuPWgsdz1oPTAsQz1udWxsO251bGwhPT1uJiZ3PGcubGVuZ3RoO3crKyl7bi5pbmRleD53PyhDPW4sbj1udWxsKTpDPW4uc2libGluZzt2YXIgcD14KGUsbixnW3ddLGspO2lmKG51bGw9PT1wKXtudWxsPT09biYmKG49Qyk7YnJlYWt9YSYmXG5uJiZudWxsPT09cC5hbHRlcm5hdGUmJmIoZSxuKTtoPWYocCxoLHcpO251bGw9PT11P2w9cDp1LnNpYmxpbmc9cDt1PXA7bj1DfWlmKHc9PT1nLmxlbmd0aClyZXR1cm4gYyhlLG4pLGw7aWYobnVsbD09PW4pe2Zvcig7dzxnLmxlbmd0aDt3Kyspbj16KGUsZ1t3XSxrKSxudWxsIT09biYmKGg9ZihuLGgsdyksbnVsbD09PXU/bD1uOnUuc2libGluZz1uLHU9bik7cmV0dXJuIGx9Zm9yKG49ZChlLG4pO3c8Zy5sZW5ndGg7dysrKUM9dihuLGUsdyxnW3ddLGspLG51bGwhPT1DJiYoYSYmbnVsbCE9PUMuYWx0ZXJuYXRlJiZuLmRlbGV0ZShudWxsPT09Qy5rZXk/dzpDLmtleSksaD1mKEMsaCx3KSxudWxsPT09dT9sPUM6dS5zaWJsaW5nPUMsdT1DKTthJiZuLmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiBsfWZ1bmN0aW9uIEJlKGUsaCxnLGspe3ZhciBsPW1jKGcpO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBsKXRocm93IHQoRXJyb3IoMTUwKSk7Zz1sLmNhbGwoZyk7XG5pZihudWxsPT1nKXRocm93IHQoRXJyb3IoMTUxKSk7Zm9yKHZhciBuPWw9bnVsbCx1PWgsdz1oPTAsQz1udWxsLHA9Zy5uZXh0KCk7bnVsbCE9PXUmJiFwLmRvbmU7dysrLHA9Zy5uZXh0KCkpe3UuaW5kZXg+dz8oQz11LHU9bnVsbCk6Qz11LnNpYmxpbmc7dmFyIHI9eChlLHUscC52YWx1ZSxrKTtpZihudWxsPT09cil7bnVsbD09PXUmJih1PUMpO2JyZWFrfWEmJnUmJm51bGw9PT1yLmFsdGVybmF0ZSYmYihlLHUpO2g9ZihyLGgsdyk7bnVsbD09PW4/bD1yOm4uc2libGluZz1yO249cjt1PUN9aWYocC5kb25lKXJldHVybiBjKGUsdSksbDtpZihudWxsPT09dSl7Zm9yKDshcC5kb25lO3crKyxwPWcubmV4dCgpKXA9eihlLHAudmFsdWUsayksbnVsbCE9PXAmJihoPWYocCxoLHcpLG51bGw9PT1uP2w9cDpuLnNpYmxpbmc9cCxuPXApO3JldHVybiBsfWZvcih1PWQoZSx1KTshcC5kb25lO3crKyxwPWcubmV4dCgpKXA9dih1LGUsdyxwLnZhbHVlLGspLG51bGwhPT1wJiYoYSYmbnVsbCE9PVxucC5hbHRlcm5hdGUmJnUuZGVsZXRlKG51bGw9PT1wLmtleT93OnAua2V5KSxoPWYocCxoLHcpLG51bGw9PT1uP2w9cDpuLnNpYmxpbmc9cCxuPXApO2EmJnUuZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIGx9cmV0dXJuIGZ1bmN0aW9uKGEsZCxmLGcpe3ZhciBrPVwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYmJmYudHlwZT09PWFjJiZudWxsPT09Zi5rZXk7ayYmKGY9Zi5wcm9wcy5jaGlsZHJlbik7dmFyIGw9XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZjtpZihsKXN3aXRjaChmLiQkdHlwZW9mKXtjYXNlIFpiOmE6e2w9Zi5rZXk7Zm9yKGs9ZDtudWxsIT09azspe2lmKGsua2V5PT09bCl7aWYoNz09PWsudGFnP2YudHlwZT09PWFjOmsuZWxlbWVudFR5cGU9PT1mLnR5cGUpe2MoYSxrLnNpYmxpbmcpO2Q9ZShrLGYudHlwZT09PWFjP2YucHJvcHMuY2hpbGRyZW46Zi5wcm9wcyxnKTtkLnJlZj1sZyhhLGssZik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1jKGEsXG5rKTticmVha31lbHNlIGIoYSxrKTtrPWsuc2libGluZ31mLnR5cGU9PT1hYz8oZD1zZyhmLnByb3BzLmNoaWxkcmVuLGEubW9kZSxnLGYua2V5KSxkLnJldHVybj1hLGE9ZCk6KGc9cWcoZi50eXBlLGYua2V5LGYucHJvcHMsbnVsbCxhLm1vZGUsZyksZy5yZWY9bGcoYSxkLGYpLGcucmV0dXJuPWEsYT1nKX1yZXR1cm4gaChhKTtjYXNlICRiOmE6e2ZvcihrPWYua2V5O251bGwhPT1kOyl7aWYoZC5rZXk9PT1rKXtpZig0PT09ZC50YWcmJmQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm89PT1mLmNvbnRhaW5lckluZm8mJmQuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uPT09Zi5pbXBsZW1lbnRhdGlvbil7YyhhLGQuc2libGluZyk7ZD1lKGQsZi5jaGlsZHJlbnx8W10sZyk7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1jKGEsZCk7YnJlYWt9ZWxzZSBiKGEsZCk7ZD1kLnNpYmxpbmd9ZD1yZyhmLGEubW9kZSxnKTtkLnJldHVybj1hO2E9ZH1yZXR1cm4gaChhKX1pZihcInN0cmluZ1wiPT09dHlwZW9mIGZ8fFxuXCJudW1iZXJcIj09PXR5cGVvZiBmKXJldHVybiBmPVwiXCIrZixudWxsIT09ZCYmNj09PWQudGFnPyhjKGEsZC5zaWJsaW5nKSxkPWUoZCxmLGcpLGQucmV0dXJuPWEsYT1kKTooYyhhLGQpLGQ9cGcoZixhLm1vZGUsZyksZC5yZXR1cm49YSxhPWQpLGgoYSk7aWYoa2coZikpcmV0dXJuIHJiKGEsZCxmLGcpO2lmKG1jKGYpKXJldHVybiBCZShhLGQsZixnKTtsJiZtZyhhLGYpO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgZiYmIWspc3dpdGNoKGEudGFnKXtjYXNlIDE6Y2FzZSAwOnRocm93IGE9YS50eXBlLHQoRXJyb3IoMTUyKSxhLmRpc3BsYXlOYW1lfHxhLm5hbWV8fFwiQ29tcG9uZW50XCIpO31yZXR1cm4gYyhhLGQpfX12YXIgdGc9bmcoITApLHVnPW5nKCExKSx2Zz17fSx3Zz17Y3VycmVudDp2Z30seGc9e2N1cnJlbnQ6dmd9LHlnPXtjdXJyZW50OnZnfTtmdW5jdGlvbiB6ZyhhKXtpZihhPT09dmcpdGhyb3cgdChFcnJvcigxNzQpKTtyZXR1cm4gYX1cbmZ1bmN0aW9uIEFnKGEsYil7Sih5ZyxiLGEpO0ooeGcsYSxhKTtKKHdnLHZnLGEpO3ZhciBjPWIubm9kZVR5cGU7c3dpdGNoKGMpe2Nhc2UgOTpjYXNlIDExOmI9KGI9Yi5kb2N1bWVudEVsZW1lbnQpP2IubmFtZXNwYWNlVVJJOnRlKG51bGwsXCJcIik7YnJlYWs7ZGVmYXVsdDpjPTg9PT1jP2IucGFyZW50Tm9kZTpiLGI9Yy5uYW1lc3BhY2VVUkl8fG51bGwsYz1jLnRhZ05hbWUsYj10ZShiLGMpfUgod2csYSk7Sih3ZyxiLGEpfWZ1bmN0aW9uIEJnKGEpe0god2csYSk7SCh4ZyxhKTtIKHlnLGEpfWZ1bmN0aW9uIENnKGEpe3pnKHlnLmN1cnJlbnQpO3ZhciBiPXpnKHdnLmN1cnJlbnQpO3ZhciBjPXRlKGIsYS50eXBlKTtiIT09YyYmKEooeGcsYSxhKSxKKHdnLGMsYSkpfWZ1bmN0aW9uIERnKGEpe3hnLmN1cnJlbnQ9PT1hJiYoSCh3ZyxhKSxIKHhnLGEpKX12YXIgRWc9MSxGZz0xLEdnPTIsUD17Y3VycmVudDowfTtcbmZ1bmN0aW9uIEhnKGEpe2Zvcih2YXIgYj1hO251bGwhPT1iOyl7aWYoMTM9PT1iLnRhZyl7aWYobnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSlyZXR1cm4gYn1lbHNlIGlmKDE5PT09Yi50YWcmJnZvaWQgMCE9PWIubWVtb2l6ZWRQcm9wcy5yZXZlYWxPcmRlcil7aWYoMCE9PShiLmVmZmVjdFRhZyY2NCkpcmV0dXJuIGJ9ZWxzZSBpZihudWxsIT09Yi5jaGlsZCl7Yi5jaGlsZC5yZXR1cm49YjtiPWIuY2hpbGQ7Y29udGludWV9aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfXJldHVybiBudWxsfVxudmFyIElnPTAsSmc9MixLZz00LExnPTgsTWc9MTYsTmc9MzIsT2c9NjQsUGc9MTI4LFFnPVhiLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsUmc9MCxTZz1udWxsLFE9bnVsbCxUZz1udWxsLFVnPW51bGwsUj1udWxsLFZnPW51bGwsV2c9MCxYZz1udWxsLFlnPTAsWmc9ITEsJGc9bnVsbCxhaD0wO2Z1bmN0aW9uIGJoKCl7dGhyb3cgdChFcnJvcigzMjEpKTt9ZnVuY3Rpb24gY2goYSxiKXtpZihudWxsPT09YilyZXR1cm4hMTtmb3IodmFyIGM9MDtjPGIubGVuZ3RoJiZjPGEubGVuZ3RoO2MrKylpZighaGQoYVtjXSxiW2NdKSlyZXR1cm4hMTtyZXR1cm4hMH1cbmZ1bmN0aW9uIGRoKGEsYixjLGQsZSxmKXtSZz1mO1NnPWI7VGc9bnVsbCE9PWE/YS5tZW1vaXplZFN0YXRlOm51bGw7UWcuY3VycmVudD1udWxsPT09VGc/ZWg6Zmg7Yj1jKGQsZSk7aWYoWmcpe2RvIFpnPSExLGFoKz0xLFRnPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsLFZnPVVnLFhnPVI9UT1udWxsLFFnLmN1cnJlbnQ9ZmgsYj1jKGQsZSk7d2hpbGUoWmcpOyRnPW51bGw7YWg9MH1RZy5jdXJyZW50PWhoO2E9U2c7YS5tZW1vaXplZFN0YXRlPVVnO2EuZXhwaXJhdGlvblRpbWU9V2c7YS51cGRhdGVRdWV1ZT1YZzthLmVmZmVjdFRhZ3w9WWc7YT1udWxsIT09USYmbnVsbCE9PVEubmV4dDtSZz0wO1ZnPVI9VWc9VGc9UT1TZz1udWxsO1dnPTA7WGc9bnVsbDtZZz0wO2lmKGEpdGhyb3cgdChFcnJvcigzMDApKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIGloKCl7UWcuY3VycmVudD1oaDtSZz0wO1ZnPVI9VWc9VGc9UT1TZz1udWxsO1dnPTA7WGc9bnVsbDtZZz0wO1pnPSExOyRnPW51bGw7YWg9MH1mdW5jdGlvbiBqaCgpe3ZhciBhPXttZW1vaXplZFN0YXRlOm51bGwsYmFzZVN0YXRlOm51bGwscXVldWU6bnVsbCxiYXNlVXBkYXRlOm51bGwsbmV4dDpudWxsfTtudWxsPT09Uj9VZz1SPWE6Uj1SLm5leHQ9YTtyZXR1cm4gUn1mdW5jdGlvbiBraCgpe2lmKG51bGwhPT1WZylSPVZnLFZnPVIubmV4dCxRPVRnLFRnPW51bGwhPT1RP1EubmV4dDpudWxsO2Vsc2V7aWYobnVsbD09PVRnKXRocm93IHQoRXJyb3IoMzEwKSk7UT1UZzt2YXIgYT17bWVtb2l6ZWRTdGF0ZTpRLm1lbW9pemVkU3RhdGUsYmFzZVN0YXRlOlEuYmFzZVN0YXRlLHF1ZXVlOlEucXVldWUsYmFzZVVwZGF0ZTpRLmJhc2VVcGRhdGUsbmV4dDpudWxsfTtSPW51bGw9PT1SP1VnPWE6Ui5uZXh0PWE7VGc9US5uZXh0fXJldHVybiBSfVxuZnVuY3Rpb24gbGgoYSxiKXtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKGEpOmJ9XG5mdW5jdGlvbiBtaChhKXt2YXIgYj1raCgpLGM9Yi5xdWV1ZTtpZihudWxsPT09Yyl0aHJvdyB0KEVycm9yKDMxMSkpO2MubGFzdFJlbmRlcmVkUmVkdWNlcj1hO2lmKDA8YWgpe3ZhciBkPWMuZGlzcGF0Y2g7aWYobnVsbCE9PSRnKXt2YXIgZT0kZy5nZXQoYyk7aWYodm9pZCAwIT09ZSl7JGcuZGVsZXRlKGMpO3ZhciBmPWIubWVtb2l6ZWRTdGF0ZTtkbyBmPWEoZixlLmFjdGlvbiksZT1lLm5leHQ7d2hpbGUobnVsbCE9PWUpO2hkKGYsYi5tZW1vaXplZFN0YXRlKXx8KExmPSEwKTtiLm1lbW9pemVkU3RhdGU9ZjtiLmJhc2VVcGRhdGU9PT1jLmxhc3QmJihiLmJhc2VTdGF0ZT1mKTtjLmxhc3RSZW5kZXJlZFN0YXRlPWY7cmV0dXJuW2YsZF19fXJldHVybltiLm1lbW9pemVkU3RhdGUsZF19ZD1jLmxhc3Q7dmFyIGg9Yi5iYXNlVXBkYXRlO2Y9Yi5iYXNlU3RhdGU7bnVsbCE9PWg/KG51bGwhPT1kJiYoZC5uZXh0PW51bGwpLGQ9aC5uZXh0KTpkPW51bGwhPT1kP2QubmV4dDpudWxsO2lmKG51bGwhPT1cbmQpe3ZhciBnPWU9bnVsbCxrPWQsbD0hMTtkb3t2YXIgbj1rLmV4cGlyYXRpb25UaW1lO248Umc/KGx8fChsPSEwLGc9aCxlPWYpLG4+V2cmJihXZz1uKSk6KFhmKG4say5zdXNwZW5zZUNvbmZpZyksZj1rLmVhZ2VyUmVkdWNlcj09PWE/ay5lYWdlclN0YXRlOmEoZixrLmFjdGlvbikpO2g9aztrPWsubmV4dH13aGlsZShudWxsIT09ayYmayE9PWQpO2x8fChnPWgsZT1mKTtoZChmLGIubWVtb2l6ZWRTdGF0ZSl8fChMZj0hMCk7Yi5tZW1vaXplZFN0YXRlPWY7Yi5iYXNlVXBkYXRlPWc7Yi5iYXNlU3RhdGU9ZTtjLmxhc3RSZW5kZXJlZFN0YXRlPWZ9cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxjLmRpc3BhdGNoXX1cbmZ1bmN0aW9uIG5oKGEsYixjLGQpe2E9e3RhZzphLGNyZWF0ZTpiLGRlc3Ryb3k6YyxkZXBzOmQsbmV4dDpudWxsfTtudWxsPT09WGc/KFhnPXtsYXN0RWZmZWN0Om51bGx9LFhnLmxhc3RFZmZlY3Q9YS5uZXh0PWEpOihiPVhnLmxhc3RFZmZlY3QsbnVsbD09PWI/WGcubGFzdEVmZmVjdD1hLm5leHQ9YTooYz1iLm5leHQsYi5uZXh0PWEsYS5uZXh0PWMsWGcubGFzdEVmZmVjdD1hKSk7cmV0dXJuIGF9ZnVuY3Rpb24gb2goYSxiLGMsZCl7dmFyIGU9amgoKTtZZ3w9YTtlLm1lbW9pemVkU3RhdGU9bmgoYixjLHZvaWQgMCx2b2lkIDA9PT1kP251bGw6ZCl9XG5mdW5jdGlvbiBwaChhLGIsYyxkKXt2YXIgZT1raCgpO2Q9dm9pZCAwPT09ZD9udWxsOmQ7dmFyIGY9dm9pZCAwO2lmKG51bGwhPT1RKXt2YXIgaD1RLm1lbW9pemVkU3RhdGU7Zj1oLmRlc3Ryb3k7aWYobnVsbCE9PWQmJmNoKGQsaC5kZXBzKSl7bmgoSWcsYyxmLGQpO3JldHVybn19WWd8PWE7ZS5tZW1vaXplZFN0YXRlPW5oKGIsYyxmLGQpfWZ1bmN0aW9uIHFoKGEsYil7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpcmV0dXJuIGE9YSgpLGIoYSksZnVuY3Rpb24oKXtiKG51bGwpfTtpZihudWxsIT09YiYmdm9pZCAwIT09YilyZXR1cm4gYT1hKCksYi5jdXJyZW50PWEsZnVuY3Rpb24oKXtiLmN1cnJlbnQ9bnVsbH19ZnVuY3Rpb24gcmgoKXt9XG5mdW5jdGlvbiBzaChhLGIsYyl7aWYoISgyNT5haCkpdGhyb3cgdChFcnJvcigzMDEpKTt2YXIgZD1hLmFsdGVybmF0ZTtpZihhPT09U2d8fG51bGwhPT1kJiZkPT09U2cpaWYoWmc9ITAsYT17ZXhwaXJhdGlvblRpbWU6Umcsc3VzcGVuc2VDb25maWc6bnVsbCxhY3Rpb246YyxlYWdlclJlZHVjZXI6bnVsbCxlYWdlclN0YXRlOm51bGwsbmV4dDpudWxsfSxudWxsPT09JGcmJigkZz1uZXcgTWFwKSxjPSRnLmdldChiKSx2b2lkIDA9PT1jKSRnLnNldChiLGEpO2Vsc2V7Zm9yKGI9YztudWxsIT09Yi5uZXh0OyliPWIubmV4dDtiLm5leHQ9YX1lbHNle3ZhciBlPWNnKCksZj0kZi5zdXNwZW5zZTtlPWRnKGUsYSxmKTtmPXtleHBpcmF0aW9uVGltZTplLHN1c3BlbnNlQ29uZmlnOmYsYWN0aW9uOmMsZWFnZXJSZWR1Y2VyOm51bGwsZWFnZXJTdGF0ZTpudWxsLG5leHQ6bnVsbH07dmFyIGg9Yi5sYXN0O2lmKG51bGw9PT1oKWYubmV4dD1mO2Vsc2V7dmFyIGc9aC5uZXh0O251bGwhPT1nJiZcbihmLm5leHQ9Zyk7aC5uZXh0PWZ9Yi5sYXN0PWY7aWYoMD09PWEuZXhwaXJhdGlvblRpbWUmJihudWxsPT09ZHx8MD09PWQuZXhwaXJhdGlvblRpbWUpJiYoZD1iLmxhc3RSZW5kZXJlZFJlZHVjZXIsbnVsbCE9PWQpKXRyeXt2YXIgaz1iLmxhc3RSZW5kZXJlZFN0YXRlLGw9ZChrLGMpO2YuZWFnZXJSZWR1Y2VyPWQ7Zi5lYWdlclN0YXRlPWw7aWYoaGQobCxrKSlyZXR1cm59Y2F0Y2gobil7fWZpbmFsbHl7fWVnKGEsZSl9fVxudmFyIGhoPXtyZWFkQ29udGV4dDpNZix1c2VDYWxsYmFjazpiaCx1c2VDb250ZXh0OmJoLHVzZUVmZmVjdDpiaCx1c2VJbXBlcmF0aXZlSGFuZGxlOmJoLHVzZUxheW91dEVmZmVjdDpiaCx1c2VNZW1vOmJoLHVzZVJlZHVjZXI6YmgsdXNlUmVmOmJoLHVzZVN0YXRlOmJoLHVzZURlYnVnVmFsdWU6YmgsdXNlUmVzcG9uZGVyOmJofSxlaD17cmVhZENvbnRleHQ6TWYsdXNlQ2FsbGJhY2s6ZnVuY3Rpb24oYSxiKXtqaCgpLm1lbW9pemVkU3RhdGU9W2Esdm9pZCAwPT09Yj9udWxsOmJdO3JldHVybiBhfSx1c2VDb250ZXh0Ok1mLHVzZUVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBvaCg1MTYsUGd8T2csYSxiKX0sdXNlSW1wZXJhdGl2ZUhhbmRsZTpmdW5jdGlvbihhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIG9oKDQsS2d8TmcscWguYmluZChudWxsLGIsYSksYyl9LHVzZUxheW91dEVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBvaCg0LFxuS2d8TmcsYSxiKX0sdXNlTWVtbzpmdW5jdGlvbihhLGIpe3ZhciBjPWpoKCk7Yj12b2lkIDA9PT1iP251bGw6YjthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9LHVzZVJlZHVjZXI6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWpoKCk7Yj12b2lkIDAhPT1jP2MoYik6YjtkLm1lbW9pemVkU3RhdGU9ZC5iYXNlU3RhdGU9YjthPWQucXVldWU9e2xhc3Q6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6YSxsYXN0UmVuZGVyZWRTdGF0ZTpifTthPWEuZGlzcGF0Y2g9c2guYmluZChudWxsLFNnLGEpO3JldHVybltkLm1lbW9pemVkU3RhdGUsYV19LHVzZVJlZjpmdW5jdGlvbihhKXt2YXIgYj1qaCgpO2E9e2N1cnJlbnQ6YX07cmV0dXJuIGIubWVtb2l6ZWRTdGF0ZT1hfSx1c2VTdGF0ZTpmdW5jdGlvbihhKXt2YXIgYj1qaCgpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBhJiYoYT1hKCkpO2IubWVtb2l6ZWRTdGF0ZT1iLmJhc2VTdGF0ZT1hO2E9Yi5xdWV1ZT1cbntsYXN0Om51bGwsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOmxoLGxhc3RSZW5kZXJlZFN0YXRlOmF9O2E9YS5kaXNwYXRjaD1zaC5iaW5kKG51bGwsU2csYSk7cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxhXX0sdXNlRGVidWdWYWx1ZTpyaCx1c2VSZXNwb25kZXI6a2R9LGZoPXtyZWFkQ29udGV4dDpNZix1c2VDYWxsYmFjazpmdW5jdGlvbihhLGIpe3ZhciBjPWtoKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZjaChiLGRbMV0pKXJldHVybiBkWzBdO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX0sdXNlQ29udGV4dDpNZix1c2VFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gcGgoNTE2LFBnfE9nLGEsYil9LHVzZUltcGVyYXRpdmVIYW5kbGU6ZnVuY3Rpb24oYSxiLGMpe2M9bnVsbCE9PWMmJnZvaWQgMCE9PWM/Yy5jb25jYXQoW2FdKTpudWxsO3JldHVybiBwaCg0LEtnfE5nLHFoLmJpbmQobnVsbCxcbmIsYSksYyl9LHVzZUxheW91dEVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBwaCg0LEtnfE5nLGEsYil9LHVzZU1lbW86ZnVuY3Rpb24oYSxiKXt2YXIgYz1raCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7dmFyIGQ9Yy5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kJiZudWxsIT09YiYmY2goYixkWzFdKSlyZXR1cm4gZFswXTthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9LHVzZVJlZHVjZXI6bWgsdXNlUmVmOmZ1bmN0aW9uKCl7cmV0dXJuIGtoKCkubWVtb2l6ZWRTdGF0ZX0sdXNlU3RhdGU6ZnVuY3Rpb24oYSl7cmV0dXJuIG1oKGxoLGEpfSx1c2VEZWJ1Z1ZhbHVlOnJoLHVzZVJlc3BvbmRlcjprZH0sdGg9bnVsbCx1aD1udWxsLHZoPSExO1xuZnVuY3Rpb24gd2goYSxiKXt2YXIgYz14aCg1LG51bGwsbnVsbCwwKTtjLmVsZW1lbnRUeXBlPVwiREVMRVRFRFwiO2MudHlwZT1cIkRFTEVURURcIjtjLnN0YXRlTm9kZT1iO2MucmV0dXJuPWE7Yy5lZmZlY3RUYWc9ODtudWxsIT09YS5sYXN0RWZmZWN0PyhhLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1jLGEubGFzdEVmZmVjdD1jKTphLmZpcnN0RWZmZWN0PWEubGFzdEVmZmVjdD1jfWZ1bmN0aW9uIHloKGEsYil7c3dpdGNoKGEudGFnKXtjYXNlIDU6dmFyIGM9YS50eXBlO2I9MSE9PWIubm9kZVR5cGV8fGMudG9Mb3dlckNhc2UoKSE9PWIubm9kZU5hbWUudG9Mb3dlckNhc2UoKT9udWxsOmI7cmV0dXJuIG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDY6cmV0dXJuIGI9XCJcIj09PWEucGVuZGluZ1Byb3BzfHwzIT09Yi5ub2RlVHlwZT9udWxsOmIsbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2Nhc2UgMTM6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiB6aChhKXtpZih2aCl7dmFyIGI9dWg7aWYoYil7dmFyIGM9YjtpZigheWgoYSxiKSl7Yj1OZShjLm5leHRTaWJsaW5nKTtpZighYnx8IXloKGEsYikpe2EuZWZmZWN0VGFnfD0yO3ZoPSExO3RoPWE7cmV0dXJufXdoKHRoLGMpfXRoPWE7dWg9TmUoYi5maXJzdENoaWxkKX1lbHNlIGEuZWZmZWN0VGFnfD0yLHZoPSExLHRoPWF9fWZ1bmN0aW9uIEFoKGEpe2ZvcihhPWEucmV0dXJuO251bGwhPT1hJiY1IT09YS50YWcmJjMhPT1hLnRhZyYmMTghPT1hLnRhZzspYT1hLnJldHVybjt0aD1hfVxuZnVuY3Rpb24gQmgoYSl7aWYoYSE9PXRoKXJldHVybiExO2lmKCF2aClyZXR1cm4gQWgoYSksdmg9ITAsITE7dmFyIGI9YS50eXBlO2lmKDUhPT1hLnRhZ3x8XCJoZWFkXCIhPT1iJiZcImJvZHlcIiE9PWImJiFLZShiLGEubWVtb2l6ZWRQcm9wcykpZm9yKGI9dWg7Yjspd2goYSxiKSxiPU5lKGIubmV4dFNpYmxpbmcpO0FoKGEpO3VoPXRoP05lKGEuc3RhdGVOb2RlLm5leHRTaWJsaW5nKTpudWxsO3JldHVybiEwfWZ1bmN0aW9uIENoKCl7dWg9dGg9bnVsbDt2aD0hMX12YXIgRGg9WGIuUmVhY3RDdXJyZW50T3duZXIsTGY9ITE7ZnVuY3Rpb24gUyhhLGIsYyxkKXtiLmNoaWxkPW51bGw9PT1hP3VnKGIsbnVsbCxjLGQpOnRnKGIsYS5jaGlsZCxjLGQpfVxuZnVuY3Rpb24gRWgoYSxiLGMsZCxlKXtjPWMucmVuZGVyO3ZhciBmPWIucmVmO0tmKGIsZSk7ZD1kaChhLGIsYyxkLGYsZSk7aWYobnVsbCE9PWEmJiFMZilyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZWZmZWN0VGFnJj0tNTE3LGEuZXhwaXJhdGlvblRpbWU8PWUmJihhLmV4cGlyYXRpb25UaW1lPTApLEZoKGEsYixlKTtiLmVmZmVjdFRhZ3w9MTtTKGEsYixkLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gR2goYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1hKXt2YXIgaD1jLnR5cGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGgmJiFIaChoKSYmdm9pZCAwPT09aC5kZWZhdWx0UHJvcHMmJm51bGw9PT1jLmNvbXBhcmUmJnZvaWQgMD09PWMuZGVmYXVsdFByb3BzKXJldHVybiBiLnRhZz0xNSxiLnR5cGU9aCxJaChhLGIsaCxkLGUsZik7YT1xZyhjLnR5cGUsbnVsbCxkLG51bGwsYi5tb2RlLGYpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1oPWEuY2hpbGQ7aWYoZTxmJiYoZT1oLm1lbW9pemVkUHJvcHMsYz1jLmNvbXBhcmUsYz1udWxsIT09Yz9jOmpkLGMoZSxkKSYmYS5yZWY9PT1iLnJlZikpcmV0dXJuIEZoKGEsYixmKTtiLmVmZmVjdFRhZ3w9MTthPW9nKGgsZCxmKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9XG5mdW5jdGlvbiBJaChhLGIsYyxkLGUsZil7cmV0dXJuIG51bGwhPT1hJiZqZChhLm1lbW9pemVkUHJvcHMsZCkmJmEucmVmPT09Yi5yZWYmJihMZj0hMSxlPGYpP0ZoKGEsYixmKTpKaChhLGIsYyxkLGYpfWZ1bmN0aW9uIEtoKGEsYil7dmFyIGM9Yi5yZWY7aWYobnVsbD09PWEmJm51bGwhPT1jfHxudWxsIT09YSYmYS5yZWYhPT1jKWIuZWZmZWN0VGFnfD0xMjh9ZnVuY3Rpb24gSmgoYSxiLGMsZCxlKXt2YXIgZj1OKGMpP1JlOkwuY3VycmVudDtmPVNlKGIsZik7S2YoYixlKTtjPWRoKGEsYixjLGQsZixlKTtpZihudWxsIT09YSYmIUxmKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5lZmZlY3RUYWcmPS01MTcsYS5leHBpcmF0aW9uVGltZTw9ZSYmKGEuZXhwaXJhdGlvblRpbWU9MCksRmgoYSxiLGUpO2IuZWZmZWN0VGFnfD0xO1MoYSxiLGMsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBMaChhLGIsYyxkLGUpe2lmKE4oYykpe3ZhciBmPSEwO1hlKGIpfWVsc2UgZj0hMTtLZihiLGUpO2lmKG51bGw9PT1iLnN0YXRlTm9kZSludWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9MiksaGcoYixjLGQsZSksamcoYixjLGQsZSksZD0hMDtlbHNlIGlmKG51bGw9PT1hKXt2YXIgaD1iLnN0YXRlTm9kZSxnPWIubWVtb2l6ZWRQcm9wcztoLnByb3BzPWc7dmFyIGs9aC5jb250ZXh0LGw9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGwmJm51bGwhPT1sP2w9TWYobCk6KGw9TihjKT9SZTpMLmN1cnJlbnQsbD1TZShiLGwpKTt2YXIgbj1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyx6PVwiZnVuY3Rpb25cIj09PXR5cGVvZiBufHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgaC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZTt6fHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgaC5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXG5cImZ1bmN0aW9uXCIhPT10eXBlb2YgaC5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoZyE9PWR8fGshPT1sKSYmaWcoYixoLGQsbCk7TmY9ITE7dmFyIHg9Yi5tZW1vaXplZFN0YXRlO2s9aC5zdGF0ZT14O3ZhciB2PWIudXBkYXRlUXVldWU7bnVsbCE9PXYmJihXZihiLHYsZCxoLGUpLGs9Yi5tZW1vaXplZFN0YXRlKTtnIT09ZHx8eCE9PWt8fE0uY3VycmVudHx8TmY/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBuJiYoYmcoYixjLG4sZCksaz1iLm1lbW9pemVkU3RhdGUpLChnPU5mfHxnZyhiLGMsZyxkLHgsayxsKSk/KHp8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBoLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBoLmNvbXBvbmVudFdpbGxNb3VudHx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBoLmNvbXBvbmVudFdpbGxNb3VudCYmaC5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgaC5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcbmguVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgaC5jb21wb25lbnREaWRNb3VudCYmKGIuZWZmZWN0VGFnfD00KSk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBoLmNvbXBvbmVudERpZE1vdW50JiYoYi5lZmZlY3RUYWd8PTQpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT1rKSxoLnByb3BzPWQsaC5zdGF0ZT1rLGguY29udGV4dD1sLGQ9Zyk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBoLmNvbXBvbmVudERpZE1vdW50JiYoYi5lZmZlY3RUYWd8PTQpLGQ9ITEpfWVsc2UgaD1iLnN0YXRlTm9kZSxnPWIubWVtb2l6ZWRQcm9wcyxoLnByb3BzPWIudHlwZT09PWIuZWxlbWVudFR5cGU/ZzpBZihiLnR5cGUsZyksaz1oLmNvbnRleHQsbD1jLmNvbnRleHRUeXBlLFwib2JqZWN0XCI9PT10eXBlb2YgbCYmbnVsbCE9PWw/bD1NZihsKToobD1OKGMpP1JlOkwuY3VycmVudCxsPVNlKGIsbCkpLG49Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMsKHo9XG5cImZ1bmN0aW9uXCI9PT10eXBlb2Ygbnx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGguZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUpfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgaC5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGguY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGchPT1kfHxrIT09bCkmJmlnKGIsaCxkLGwpLE5mPSExLGs9Yi5tZW1vaXplZFN0YXRlLHg9aC5zdGF0ZT1rLHY9Yi51cGRhdGVRdWV1ZSxudWxsIT09diYmKFdmKGIsdixkLGgsZSkseD1iLm1lbW9pemVkU3RhdGUpLGchPT1kfHxrIT09eHx8TS5jdXJyZW50fHxOZj8oXCJmdW5jdGlvblwiPT09dHlwZW9mIG4mJihiZyhiLGMsbixkKSx4PWIubWVtb2l6ZWRTdGF0ZSksKG49TmZ8fGdnKGIsYyxnLGQsayx4LGwpKT8oenx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGguVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBoLmNvbXBvbmVudFdpbGxVcGRhdGV8fFxuKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBoLmNvbXBvbmVudFdpbGxVcGRhdGUmJmguY29tcG9uZW50V2lsbFVwZGF0ZShkLHgsbCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGguVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJmguVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUoZCx4LGwpKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgaC5jb21wb25lbnREaWRVcGRhdGUmJihiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGguZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUmJihiLmVmZmVjdFRhZ3w9MjU2KSk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBoLmNvbXBvbmVudERpZFVwZGF0ZXx8Zz09PWEubWVtb2l6ZWRQcm9wcyYmaz09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgaC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8Zz09PWEubWVtb2l6ZWRQcm9wcyYmaz09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD0yNTYpLGIubWVtb2l6ZWRQcm9wcz1cbmQsYi5tZW1vaXplZFN0YXRlPXgpLGgucHJvcHM9ZCxoLnN0YXRlPXgsaC5jb250ZXh0PWwsZD1uKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGguY29tcG9uZW50RGlkVXBkYXRlfHxnPT09YS5tZW1vaXplZFByb3BzJiZrPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBoLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxnPT09YS5tZW1vaXplZFByb3BzJiZrPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTI1NiksZD0hMSk7cmV0dXJuIE1oKGEsYixjLGQsZixlKX1cbmZ1bmN0aW9uIE1oKGEsYixjLGQsZSxmKXtLaChhLGIpO3ZhciBoPTAhPT0oYi5lZmZlY3RUYWcmNjQpO2lmKCFkJiYhaClyZXR1cm4gZSYmWWUoYixjLCExKSxGaChhLGIsZik7ZD1iLnN0YXRlTm9kZTtEaC5jdXJyZW50PWI7dmFyIGc9aCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGMuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yP251bGw6ZC5yZW5kZXIoKTtiLmVmZmVjdFRhZ3w9MTtudWxsIT09YSYmaD8oYi5jaGlsZD10ZyhiLGEuY2hpbGQsbnVsbCxmKSxiLmNoaWxkPXRnKGIsbnVsbCxnLGYpKTpTKGEsYixnLGYpO2IubWVtb2l6ZWRTdGF0ZT1kLnN0YXRlO2UmJlllKGIsYywhMCk7cmV0dXJuIGIuY2hpbGR9ZnVuY3Rpb24gTmgoYSl7dmFyIGI9YS5zdGF0ZU5vZGU7Yi5wZW5kaW5nQ29udGV4dD9WZShhLGIucGVuZGluZ0NvbnRleHQsYi5wZW5kaW5nQ29udGV4dCE9PWIuY29udGV4dCk6Yi5jb250ZXh0JiZWZShhLGIuY29udGV4dCwhMSk7QWcoYSxiLmNvbnRhaW5lckluZm8pfVxudmFyIE9oPXt9O1xuZnVuY3Rpb24gUGgoYSxiLGMpe3ZhciBkPWIubW9kZSxlPWIucGVuZGluZ1Byb3BzLGY9UC5jdXJyZW50LGg9bnVsbCxnPSExLGs7KGs9MCE9PShiLmVmZmVjdFRhZyY2NCkpfHwoaz0wIT09KGYmR2cpJiYobnVsbD09PWF8fG51bGwhPT1hLm1lbW9pemVkU3RhdGUpKTtrPyhoPU9oLGc9ITAsYi5lZmZlY3RUYWcmPS02NSk6bnVsbCE9PWEmJm51bGw9PT1hLm1lbW9pemVkU3RhdGV8fHZvaWQgMD09PWUuZmFsbGJhY2t8fCEwPT09ZS51bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFja3x8KGZ8PUZnKTtmJj1FZztKKFAsZixiKTtpZihudWxsPT09YSlpZihnKXtlPWUuZmFsbGJhY2s7YT1zZyhudWxsLGQsMCxudWxsKTthLnJldHVybj1iO2lmKDA9PT0oYi5tb2RlJjIpKWZvcihnPW51bGwhPT1iLm1lbW9pemVkU3RhdGU/Yi5jaGlsZC5jaGlsZDpiLmNoaWxkLGEuY2hpbGQ9ZztudWxsIT09ZzspZy5yZXR1cm49YSxnPWcuc2libGluZztjPXNnKGUsZCxjLG51bGwpO2MucmV0dXJuPWI7YS5zaWJsaW5nPVxuYztkPWF9ZWxzZSBkPWM9dWcoYixudWxsLGUuY2hpbGRyZW4sYyk7ZWxzZXtpZihudWxsIT09YS5tZW1vaXplZFN0YXRlKWlmKGY9YS5jaGlsZCxkPWYuc2libGluZyxnKXtlPWUuZmFsbGJhY2s7Yz1vZyhmLGYucGVuZGluZ1Byb3BzLDApO2MucmV0dXJuPWI7aWYoMD09PShiLm1vZGUmMikmJihnPW51bGwhPT1iLm1lbW9pemVkU3RhdGU/Yi5jaGlsZC5jaGlsZDpiLmNoaWxkLGchPT1mLmNoaWxkKSlmb3IoYy5jaGlsZD1nO251bGwhPT1nOylnLnJldHVybj1jLGc9Zy5zaWJsaW5nO2U9b2coZCxlLGQuZXhwaXJhdGlvblRpbWUpO2UucmV0dXJuPWI7Yy5zaWJsaW5nPWU7ZD1jO2MuY2hpbGRFeHBpcmF0aW9uVGltZT0wO2M9ZX1lbHNlIGQ9Yz10ZyhiLGYuY2hpbGQsZS5jaGlsZHJlbixjKTtlbHNlIGlmKGY9YS5jaGlsZCxnKXtnPWUuZmFsbGJhY2s7ZT1zZyhudWxsLGQsMCxudWxsKTtlLnJldHVybj1iO2UuY2hpbGQ9ZjtudWxsIT09ZiYmKGYucmV0dXJuPWUpO2lmKDA9PT0oYi5tb2RlJlxuMikpZm9yKGY9bnVsbCE9PWIubWVtb2l6ZWRTdGF0ZT9iLmNoaWxkLmNoaWxkOmIuY2hpbGQsZS5jaGlsZD1mO251bGwhPT1mOylmLnJldHVybj1lLGY9Zi5zaWJsaW5nO2M9c2coZyxkLGMsbnVsbCk7Yy5yZXR1cm49YjtlLnNpYmxpbmc9YztjLmVmZmVjdFRhZ3w9MjtkPWU7ZS5jaGlsZEV4cGlyYXRpb25UaW1lPTB9ZWxzZSBjPWQ9dGcoYixmLGUuY2hpbGRyZW4sYyk7Yi5zdGF0ZU5vZGU9YS5zdGF0ZU5vZGV9Yi5tZW1vaXplZFN0YXRlPWg7Yi5jaGlsZD1kO3JldHVybiBjfWZ1bmN0aW9uIFFoKGEsYixjLGQsZSl7dmFyIGY9YS5tZW1vaXplZFN0YXRlO251bGw9PT1mP2EubWVtb2l6ZWRTdGF0ZT17aXNCYWNrd2FyZHM6YixyZW5kZXJpbmc6bnVsbCxsYXN0OmQsdGFpbDpjLHRhaWxFeHBpcmF0aW9uOjAsdGFpbE1vZGU6ZX06KGYuaXNCYWNrd2FyZHM9YixmLnJlbmRlcmluZz1udWxsLGYubGFzdD1kLGYudGFpbD1jLGYudGFpbEV4cGlyYXRpb249MCxmLnRhaWxNb2RlPWUpfVxuZnVuY3Rpb24gUmgoYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9ZC5yZXZlYWxPcmRlcixmPWQudGFpbDtTKGEsYixkLmNoaWxkcmVuLGMpO2Q9UC5jdXJyZW50O2lmKDAhPT0oZCZHZykpZD1kJkVnfEdnLGIuZWZmZWN0VGFnfD02NDtlbHNle2lmKG51bGwhPT1hJiYwIT09KGEuZWZmZWN0VGFnJjY0KSlhOmZvcihhPWIuY2hpbGQ7bnVsbCE9PWE7KXtpZigxMz09PWEudGFnKXtpZihudWxsIT09YS5tZW1vaXplZFN0YXRlKXthLmV4cGlyYXRpb25UaW1lPGMmJihhLmV4cGlyYXRpb25UaW1lPWMpO3ZhciBoPWEuYWx0ZXJuYXRlO251bGwhPT1oJiZoLmV4cGlyYXRpb25UaW1lPGMmJihoLmV4cGlyYXRpb25UaW1lPWMpO0pmKGEucmV0dXJuLGMpfX1lbHNlIGlmKG51bGwhPT1hLmNoaWxkKXthLmNoaWxkLnJldHVybj1hO2E9YS5jaGlsZDtjb250aW51ZX1pZihhPT09YilicmVhayBhO2Zvcig7bnVsbD09PWEuc2libGluZzspe2lmKG51bGw9PT1hLnJldHVybnx8YS5yZXR1cm49PT1cbmIpYnJlYWsgYTthPWEucmV0dXJufWEuc2libGluZy5yZXR1cm49YS5yZXR1cm47YT1hLnNpYmxpbmd9ZCY9RWd9SihQLGQsYik7aWYoMD09PShiLm1vZGUmMikpYi5tZW1vaXplZFN0YXRlPW51bGw7ZWxzZSBzd2l0Y2goZSl7Y2FzZSBcImZvcndhcmRzXCI6Yz1iLmNoaWxkO2ZvcihlPW51bGw7bnVsbCE9PWM7KWQ9Yy5hbHRlcm5hdGUsbnVsbCE9PWQmJm51bGw9PT1IZyhkKSYmKGU9YyksYz1jLnNpYmxpbmc7Yz1lO251bGw9PT1jPyhlPWIuY2hpbGQsYi5jaGlsZD1udWxsKTooZT1jLnNpYmxpbmcsYy5zaWJsaW5nPW51bGwpO1FoKGIsITEsZSxjLGYpO2JyZWFrO2Nhc2UgXCJiYWNrd2FyZHNcIjpjPW51bGw7ZT1iLmNoaWxkO2ZvcihiLmNoaWxkPW51bGw7bnVsbCE9PWU7KXtkPWUuYWx0ZXJuYXRlO2lmKG51bGwhPT1kJiZudWxsPT09SGcoZCkpe2IuY2hpbGQ9ZTticmVha31kPWUuc2libGluZztlLnNpYmxpbmc9YztjPWU7ZT1kfVFoKGIsITAsYyxudWxsLGYpO2JyZWFrO2Nhc2UgXCJ0b2dldGhlclwiOlFoKGIsXG4hMSxudWxsLG51bGwsdm9pZCAwKTticmVhaztkZWZhdWx0OmIubWVtb2l6ZWRTdGF0ZT1udWxsfXJldHVybiBiLmNoaWxkfWZ1bmN0aW9uIEZoKGEsYixjKXtudWxsIT09YSYmKGIuZGVwZW5kZW5jaWVzPWEuZGVwZW5kZW5jaWVzKTtpZihiLmNoaWxkRXhwaXJhdGlvblRpbWU8YylyZXR1cm4gbnVsbDtpZihudWxsIT09YSYmYi5jaGlsZCE9PWEuY2hpbGQpdGhyb3cgdChFcnJvcigxNTMpKTtpZihudWxsIT09Yi5jaGlsZCl7YT1iLmNoaWxkO2M9b2coYSxhLnBlbmRpbmdQcm9wcyxhLmV4cGlyYXRpb25UaW1lKTtiLmNoaWxkPWM7Zm9yKGMucmV0dXJuPWI7bnVsbCE9PWEuc2libGluZzspYT1hLnNpYmxpbmcsYz1jLnNpYmxpbmc9b2coYSxhLnBlbmRpbmdQcm9wcyxhLmV4cGlyYXRpb25UaW1lKSxjLnJldHVybj1iO2Muc2libGluZz1udWxsfXJldHVybiBiLmNoaWxkfWZ1bmN0aW9uIFNoKGEpe2EuZWZmZWN0VGFnfD00fVxudmFyIFRoPXZvaWQgMCxVaD12b2lkIDAsVmg9dm9pZCAwLFdoPXZvaWQgMDtUaD1mdW5jdGlvbihhLGIpe2Zvcih2YXIgYz1iLmNoaWxkO251bGwhPT1jOyl7aWYoNT09PWMudGFnfHw2PT09Yy50YWcpYS5hcHBlbmRDaGlsZChjLnN0YXRlTm9kZSk7ZWxzZSBpZigyMD09PWMudGFnKWEuYXBwZW5kQ2hpbGQoYy5zdGF0ZU5vZGUuaW5zdGFuY2UpO2Vsc2UgaWYoNCE9PWMudGFnJiZudWxsIT09Yy5jaGlsZCl7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9aWYoYz09PWIpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWIpcmV0dXJuO2M9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319O1VoPWZ1bmN0aW9uKCl7fTtcblZoPWZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGY9YS5tZW1vaXplZFByb3BzO2lmKGYhPT1kKXt2YXIgaD1iLnN0YXRlTm9kZTt6Zyh3Zy5jdXJyZW50KTthPW51bGw7c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOmY9QmMoaCxmKTtkPUJjKGgsZCk7YT1bXTticmVhaztjYXNlIFwib3B0aW9uXCI6Zj1sZShoLGYpO2Q9bGUoaCxkKTthPVtdO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpmPW0oe30sZix7dmFsdWU6dm9pZCAwfSk7ZD1tKHt9LGQse3ZhbHVlOnZvaWQgMH0pO2E9W107YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6Zj1uZShoLGYpO2Q9bmUoaCxkKTthPVtdO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiIT09dHlwZW9mIGYub25DbGljayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGQub25DbGljayYmKGgub25jbGljaz1HZSl9RGUoYyxkKTtoPWM9dm9pZCAwO3ZhciBnPW51bGw7Zm9yKGMgaW4gZilpZighZC5oYXNPd25Qcm9wZXJ0eShjKSYmZi5oYXNPd25Qcm9wZXJ0eShjKSYmbnVsbCE9ZltjXSlpZihcInN0eWxlXCI9PT1cbmMpe3ZhciBrPWZbY107Zm9yKGggaW4gaylrLmhhc093blByb3BlcnR5KGgpJiYoZ3x8KGc9e30pLGdbaF09XCJcIil9ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIiE9PWMmJlwiY2hpbGRyZW5cIiE9PWMmJlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1jJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09YyYmXCJhdXRvRm9jdXNcIiE9PWMmJihpYS5oYXNPd25Qcm9wZXJ0eShjKT9hfHwoYT1bXSk6KGE9YXx8W10pLnB1c2goYyxudWxsKSk7Zm9yKGMgaW4gZCl7dmFyIGw9ZFtjXTtrPW51bGwhPWY/ZltjXTp2b2lkIDA7aWYoZC5oYXNPd25Qcm9wZXJ0eShjKSYmbCE9PWsmJihudWxsIT1sfHxudWxsIT1rKSlpZihcInN0eWxlXCI9PT1jKWlmKGspe2ZvcihoIGluIGspIWsuaGFzT3duUHJvcGVydHkoaCl8fGwmJmwuaGFzT3duUHJvcGVydHkoaCl8fChnfHwoZz17fSksZ1toXT1cIlwiKTtmb3IoaCBpbiBsKWwuaGFzT3duUHJvcGVydHkoaCkmJmtbaF0hPT1sW2hdJiYoZ3x8XG4oZz17fSksZ1toXT1sW2hdKX1lbHNlIGd8fChhfHwoYT1bXSksYS5wdXNoKGMsZykpLGc9bDtlbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Yz8obD1sP2wuX19odG1sOnZvaWQgMCxrPWs/ay5fX2h0bWw6dm9pZCAwLG51bGwhPWwmJmshPT1sJiYoYT1hfHxbXSkucHVzaChjLFwiXCIrbCkpOlwiY2hpbGRyZW5cIj09PWM/az09PWx8fFwic3RyaW5nXCIhPT10eXBlb2YgbCYmXCJudW1iZXJcIiE9PXR5cGVvZiBsfHwoYT1hfHxbXSkucHVzaChjLFwiXCIrbCk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWMmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1jJiYoaWEuaGFzT3duUHJvcGVydHkoYyk/KG51bGwhPWwmJkZlKGUsYyksYXx8az09PWx8fChhPVtdKSk6KGE9YXx8W10pLnB1c2goYyxsKSl9ZyYmKGE9YXx8W10pLnB1c2goXCJzdHlsZVwiLGcpO2U9YTsoYi51cGRhdGVRdWV1ZT1lKSYmU2goYil9fTtXaD1mdW5jdGlvbihhLGIsYyxkKXtjIT09ZCYmU2goYil9O1xuZnVuY3Rpb24gJGgoYSxiKXtzd2l0Y2goYS50YWlsTW9kZSl7Y2FzZSBcImhpZGRlblwiOmI9YS50YWlsO2Zvcih2YXIgYz1udWxsO251bGwhPT1iOyludWxsIT09Yi5hbHRlcm5hdGUmJihjPWIpLGI9Yi5zaWJsaW5nO251bGw9PT1jP2EudGFpbD1udWxsOmMuc2libGluZz1udWxsO2JyZWFrO2Nhc2UgXCJjb2xsYXBzZWRcIjpjPWEudGFpbDtmb3IodmFyIGQ9bnVsbDtudWxsIT09YzspbnVsbCE9PWMuYWx0ZXJuYXRlJiYoZD1jKSxjPWMuc2libGluZztudWxsPT09ZD9ifHxudWxsPT09YS50YWlsP2EudGFpbD1udWxsOmEudGFpbC5zaWJsaW5nPW51bGw6ZC5zaWJsaW5nPW51bGx9fVxuZnVuY3Rpb24gYWkoYSl7c3dpdGNoKGEudGFnKXtjYXNlIDE6TihhLnR5cGUpJiZUZShhKTt2YXIgYj1hLmVmZmVjdFRhZztyZXR1cm4gYiYyMDQ4PyhhLmVmZmVjdFRhZz1iJi0yMDQ5fDY0LGEpOm51bGw7Y2FzZSAzOkJnKGEpO1VlKGEpO2I9YS5lZmZlY3RUYWc7aWYoMCE9PShiJjY0KSl0aHJvdyB0KEVycm9yKDI4NSkpO2EuZWZmZWN0VGFnPWImLTIwNDl8NjQ7cmV0dXJuIGE7Y2FzZSA1OnJldHVybiBEZyhhKSxudWxsO2Nhc2UgMTM6cmV0dXJuIEgoUCxhKSxiPWEuZWZmZWN0VGFnLGImMjA0OD8oYS5lZmZlY3RUYWc9YiYtMjA0OXw2NCxhKTpudWxsO2Nhc2UgMTg6cmV0dXJuIG51bGw7Y2FzZSAxOTpyZXR1cm4gSChQLGEpLG51bGw7Y2FzZSA0OnJldHVybiBCZyhhKSxudWxsO2Nhc2UgMTA6cmV0dXJuIElmKGEpLG51bGw7ZGVmYXVsdDpyZXR1cm4gbnVsbH19ZnVuY3Rpb24gYmkoYSxiKXtyZXR1cm57dmFsdWU6YSxzb3VyY2U6YixzdGFjazpwYyhiKX19XG52YXIgY2k9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtTZXQ/V2Vha1NldDpTZXQ7ZnVuY3Rpb24gZGkoYSxiKXt2YXIgYz1iLnNvdXJjZSxkPWIuc3RhY2s7bnVsbD09PWQmJm51bGwhPT1jJiYoZD1wYyhjKSk7bnVsbCE9PWMmJm9jKGMudHlwZSk7Yj1iLnZhbHVlO251bGwhPT1hJiYxPT09YS50YWcmJm9jKGEudHlwZSk7dHJ5e2NvbnNvbGUuZXJyb3IoYil9Y2F0Y2goZSl7c2V0VGltZW91dChmdW5jdGlvbigpe3Rocm93IGU7fSl9fWZ1bmN0aW9uIGVpKGEsYil7dHJ5e2IucHJvcHM9YS5tZW1vaXplZFByb3BzLGIuc3RhdGU9YS5tZW1vaXplZFN0YXRlLGIuY29tcG9uZW50V2lsbFVubW91bnQoKX1jYXRjaChjKXtmaShhLGMpfX1mdW5jdGlvbiBnaShhKXt2YXIgYj1hLnJlZjtpZihudWxsIT09YilpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYil0cnl7YihudWxsKX1jYXRjaChjKXtmaShhLGMpfWVsc2UgYi5jdXJyZW50PW51bGx9XG5mdW5jdGlvbiBoaShhLGIsYyl7Yz1jLnVwZGF0ZVF1ZXVlO2M9bnVsbCE9PWM/Yy5sYXN0RWZmZWN0Om51bGw7aWYobnVsbCE9PWMpe3ZhciBkPWM9Yy5uZXh0O2Rve2lmKChkLnRhZyZhKSE9PUlnKXt2YXIgZT1kLmRlc3Ryb3k7ZC5kZXN0cm95PXZvaWQgMDt2b2lkIDAhPT1lJiZlKCl9KGQudGFnJmIpIT09SWcmJihlPWQuY3JlYXRlLGQuZGVzdHJveT1lKCkpO2Q9ZC5uZXh0fXdoaWxlKGQhPT1jKX19XG5mdW5jdGlvbiBpaShhLGIpe1wiZnVuY3Rpb25cIj09PXR5cGVvZiBqaSYmamkoYSk7c3dpdGNoKGEudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6dmFyIGM9YS51cGRhdGVRdWV1ZTtpZihudWxsIT09YyYmKGM9Yy5sYXN0RWZmZWN0LG51bGwhPT1jKSl7dmFyIGQ9Yy5uZXh0O3ZmKDk3PGI/OTc6YixmdW5jdGlvbigpe3ZhciBiPWQ7ZG97dmFyIGM9Yi5kZXN0cm95O2lmKHZvaWQgMCE9PWMpe3ZhciBoPWE7dHJ5e2MoKX1jYXRjaChnKXtmaShoLGcpfX1iPWIubmV4dH13aGlsZShiIT09ZCl9KX1icmVhaztjYXNlIDE6Z2koYSk7Yj1hLnN0YXRlTm9kZTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5jb21wb25lbnRXaWxsVW5tb3VudCYmZWkoYSxiKTticmVhaztjYXNlIDU6Z2koYSk7YnJlYWs7Y2FzZSA0OmtpKGEsYil9fVxuZnVuY3Rpb24gbGkoYSxiKXtmb3IodmFyIGM9YTs7KWlmKGlpKGMsYiksbnVsbCE9PWMuY2hpbGQmJjQhPT1jLnRhZyljLmNoaWxkLnJldHVybj1jLGM9Yy5jaGlsZDtlbHNle2lmKGM9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8Yy5yZXR1cm49PT1hKXJldHVybjtjPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fWZ1bmN0aW9uIG1pKGEpe3JldHVybiA1PT09YS50YWd8fDM9PT1hLnRhZ3x8ND09PWEudGFnfVxuZnVuY3Rpb24gbmkoYSl7YTp7Zm9yKHZhciBiPWEucmV0dXJuO251bGwhPT1iOyl7aWYobWkoYikpe3ZhciBjPWI7YnJlYWsgYX1iPWIucmV0dXJufXRocm93IHQoRXJyb3IoMTYwKSk7fWI9Yy5zdGF0ZU5vZGU7c3dpdGNoKGMudGFnKXtjYXNlIDU6dmFyIGQ9ITE7YnJlYWs7Y2FzZSAzOmI9Yi5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7Y2FzZSA0OmI9Yi5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7ZGVmYXVsdDp0aHJvdyB0KEVycm9yKDE2MSkpO31jLmVmZmVjdFRhZyYxNiYmKHdlKGIsXCJcIiksYy5lZmZlY3RUYWcmPS0xNyk7YTpiOmZvcihjPWE7Oyl7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxtaShjLnJldHVybikpe2M9bnVsbDticmVhayBhfWM9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtmb3IoYz1jLnNpYmxpbmc7NSE9PWMudGFnJiY2IT09Yy50YWcmJjE4IT09Yy50YWc7KXtpZihjLmVmZmVjdFRhZyYyKWNvbnRpbnVlIGI7XG5pZihudWxsPT09Yy5jaGlsZHx8ND09PWMudGFnKWNvbnRpbnVlIGI7ZWxzZSBjLmNoaWxkLnJldHVybj1jLGM9Yy5jaGlsZH1pZighKGMuZWZmZWN0VGFnJjIpKXtjPWMuc3RhdGVOb2RlO2JyZWFrIGF9fWZvcih2YXIgZT1hOzspe3ZhciBmPTU9PT1lLnRhZ3x8Nj09PWUudGFnO2lmKGZ8fDIwPT09ZS50YWcpe3ZhciBoPWY/ZS5zdGF0ZU5vZGU6ZS5zdGF0ZU5vZGUuaW5zdGFuY2U7aWYoYylpZihkKXtmPWI7dmFyIGc9aDtoPWM7OD09PWYubm9kZVR5cGU/Zi5wYXJlbnROb2RlLmluc2VydEJlZm9yZShnLGgpOmYuaW5zZXJ0QmVmb3JlKGcsaCl9ZWxzZSBiLmluc2VydEJlZm9yZShoLGMpO2Vsc2UgZD8oZz1iLDg9PT1nLm5vZGVUeXBlPyhmPWcucGFyZW50Tm9kZSxmLmluc2VydEJlZm9yZShoLGcpKTooZj1nLGYuYXBwZW5kQ2hpbGQoaCkpLGc9Zy5fcmVhY3RSb290Q29udGFpbmVyLG51bGwhPT1nJiZ2b2lkIDAhPT1nfHxudWxsIT09Zi5vbmNsaWNrfHwoZi5vbmNsaWNrPUdlKSk6XG5iLmFwcGVuZENoaWxkKGgpfWVsc2UgaWYoNCE9PWUudGFnJiZudWxsIT09ZS5jaGlsZCl7ZS5jaGlsZC5yZXR1cm49ZTtlPWUuY2hpbGQ7Y29udGludWV9aWYoZT09PWEpYnJlYWs7Zm9yKDtudWxsPT09ZS5zaWJsaW5nOyl7aWYobnVsbD09PWUucmV0dXJufHxlLnJldHVybj09PWEpcmV0dXJuO2U9ZS5yZXR1cm59ZS5zaWJsaW5nLnJldHVybj1lLnJldHVybjtlPWUuc2libGluZ319XG5mdW5jdGlvbiBraShhLGIpe2Zvcih2YXIgYz1hLGQ9ITEsZT12b2lkIDAsZj12b2lkIDA7Oyl7aWYoIWQpe2Q9Yy5yZXR1cm47YTpmb3IoOzspe2lmKG51bGw9PT1kKXRocm93IHQoRXJyb3IoMTYwKSk7ZT1kLnN0YXRlTm9kZTtzd2l0Y2goZC50YWcpe2Nhc2UgNTpmPSExO2JyZWFrIGE7Y2FzZSAzOmU9ZS5jb250YWluZXJJbmZvO2Y9ITA7YnJlYWsgYTtjYXNlIDQ6ZT1lLmNvbnRhaW5lckluZm87Zj0hMDticmVhayBhfWQ9ZC5yZXR1cm59ZD0hMH1pZig1PT09Yy50YWd8fDY9PT1jLnRhZylpZihsaShjLGIpLGYpe3ZhciBoPWUsZz1jLnN0YXRlTm9kZTs4PT09aC5ub2RlVHlwZT9oLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZyk6aC5yZW1vdmVDaGlsZChnKX1lbHNlIGUucmVtb3ZlQ2hpbGQoYy5zdGF0ZU5vZGUpO2Vsc2UgaWYoMjA9PT1jLnRhZylnPWMuc3RhdGVOb2RlLmluc3RhbmNlLGxpKGMsYiksZj8oaD1lLDg9PT1oLm5vZGVUeXBlP2gucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChnKTpcbmgucmVtb3ZlQ2hpbGQoZykpOmUucmVtb3ZlQ2hpbGQoZyk7ZWxzZSBpZig0PT09Yy50YWcpe2lmKG51bGwhPT1jLmNoaWxkKXtlPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87Zj0hMDtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX19ZWxzZSBpZihpaShjLGIpLG51bGwhPT1jLmNoaWxkKXtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX1pZihjPT09YSlicmVhaztmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fGMucmV0dXJuPT09YSlyZXR1cm47Yz1jLnJldHVybjs0PT09Yy50YWcmJihkPSExKX1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2M9Yy5zaWJsaW5nfX1cbmZ1bmN0aW9uIG9pKGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6aGkoS2csTGcsYik7YnJlYWs7Y2FzZSAxOmJyZWFrO2Nhc2UgNTp2YXIgYz1iLnN0YXRlTm9kZTtpZihudWxsIT1jKXt2YXIgZD1iLm1lbW9pemVkUHJvcHMsZT1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6ZDthPWIudHlwZTt2YXIgZj1iLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9bnVsbDtpZihudWxsIT09Zil7Y1tHYV09ZDtcImlucHV0XCI9PT1hJiZcInJhZGlvXCI9PT1kLnR5cGUmJm51bGwhPWQubmFtZSYmRGMoYyxkKTtFZShhLGUpO2I9RWUoYSxkKTtmb3IoZT0wO2U8Zi5sZW5ndGg7ZSs9Mil7dmFyIGg9ZltlXSxnPWZbZSsxXTtcInN0eWxlXCI9PT1oP0FlKGMsZyk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09aD92ZShjLGcpOlwiY2hpbGRyZW5cIj09PWg/d2UoYyxnKTp6YyhjLGgsZyxiKX1zd2l0Y2goYSl7Y2FzZSBcImlucHV0XCI6RWMoYyxkKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpwZShjLFxuZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmI9Yy5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlLGMuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZT0hIWQubXVsdGlwbGUsYT1kLnZhbHVlLG51bGwhPWE/bWUoYywhIWQubXVsdGlwbGUsYSwhMSk6YiE9PSEhZC5tdWx0aXBsZSYmKG51bGwhPWQuZGVmYXVsdFZhbHVlP21lKGMsISFkLm11bHRpcGxlLGQuZGVmYXVsdFZhbHVlLCEwKTptZShjLCEhZC5tdWx0aXBsZSxkLm11bHRpcGxlP1tdOlwiXCIsITEpKX19fWJyZWFrO2Nhc2UgNjppZihudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgdChFcnJvcigxNjIpKTtiLnN0YXRlTm9kZS5ub2RlVmFsdWU9Yi5tZW1vaXplZFByb3BzO2JyZWFrO2Nhc2UgMzpicmVhaztjYXNlIDEyOmJyZWFrO2Nhc2UgMTM6Yz1iO251bGw9PT1iLm1lbW9pemVkU3RhdGU/ZD0hMTooZD0hMCxjPWIuY2hpbGQscGk9c2YoKSk7aWYobnVsbCE9PWMpYTpmb3IoYT1jOzspe2lmKDU9PT1hLnRhZylmPWEuc3RhdGVOb2RlLGQ/KGY9XG5mLnN0eWxlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLnNldFByb3BlcnR5P2Yuc2V0UHJvcGVydHkoXCJkaXNwbGF5XCIsXCJub25lXCIsXCJpbXBvcnRhbnRcIik6Zi5kaXNwbGF5PVwibm9uZVwiKTooZj1hLnN0YXRlTm9kZSxlPWEubWVtb2l6ZWRQcm9wcy5zdHlsZSxlPXZvaWQgMCE9PWUmJm51bGwhPT1lJiZlLmhhc093blByb3BlcnR5KFwiZGlzcGxheVwiKT9lLmRpc3BsYXk6bnVsbCxmLnN0eWxlLmRpc3BsYXk9emUoXCJkaXNwbGF5XCIsZSkpO2Vsc2UgaWYoNj09PWEudGFnKWEuc3RhdGVOb2RlLm5vZGVWYWx1ZT1kP1wiXCI6YS5tZW1vaXplZFByb3BzO2Vsc2UgaWYoMTM9PT1hLnRhZyYmbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSl7Zj1hLmNoaWxkLnNpYmxpbmc7Zi5yZXR1cm49YTthPWY7Y29udGludWV9ZWxzZSBpZihudWxsIT09YS5jaGlsZCl7YS5jaGlsZC5yZXR1cm49YTthPWEuY2hpbGQ7Y29udGludWV9aWYoYT09PWMpYnJlYWsgYTtmb3IoO251bGw9PT1hLnNpYmxpbmc7KXtpZihudWxsPT09XG5hLnJldHVybnx8YS5yZXR1cm49PT1jKWJyZWFrIGE7YT1hLnJldHVybn1hLnNpYmxpbmcucmV0dXJuPWEucmV0dXJuO2E9YS5zaWJsaW5nfXFpKGIpO2JyZWFrO2Nhc2UgMTk6cWkoYik7YnJlYWs7Y2FzZSAxNzpicmVhaztjYXNlIDIwOmJyZWFrO2RlZmF1bHQ6dGhyb3cgdChFcnJvcigxNjMpKTt9fWZ1bmN0aW9uIHFpKGEpe3ZhciBiPWEudXBkYXRlUXVldWU7aWYobnVsbCE9PWIpe2EudXBkYXRlUXVldWU9bnVsbDt2YXIgYz1hLnN0YXRlTm9kZTtudWxsPT09YyYmKGM9YS5zdGF0ZU5vZGU9bmV3IGNpKTtiLmZvckVhY2goZnVuY3Rpb24oYil7dmFyIGQ9cmkuYmluZChudWxsLGEsYik7Yy5oYXMoYil8fChjLmFkZChiKSxiLnRoZW4oZCxkKSl9KX19dmFyIHNpPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrTWFwP1dlYWtNYXA6TWFwO1xuZnVuY3Rpb24gdGkoYSxiLGMpe2M9UWYoYyxudWxsKTtjLnRhZz0zO2MucGF5bG9hZD17ZWxlbWVudDpudWxsfTt2YXIgZD1iLnZhbHVlO2MuY2FsbGJhY2s9ZnVuY3Rpb24oKXt1aXx8KHVpPSEwLHZpPWQpO2RpKGEsYil9O3JldHVybiBjfVxuZnVuY3Rpb24gd2koYSxiLGMpe2M9UWYoYyxudWxsKTtjLnRhZz0zO3ZhciBkPWEudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe3ZhciBlPWIudmFsdWU7Yy5wYXlsb2FkPWZ1bmN0aW9uKCl7ZGkoYSxiKTtyZXR1cm4gZChlKX19dmFyIGY9YS5zdGF0ZU5vZGU7bnVsbCE9PWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLmNvbXBvbmVudERpZENhdGNoJiYoYy5jYWxsYmFjaz1mdW5jdGlvbigpe1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBkJiYobnVsbD09PXhpP3hpPW5ldyBTZXQoW3RoaXNdKTp4aS5hZGQodGhpcyksZGkoYSxiKSk7dmFyIGM9Yi5zdGFjazt0aGlzLmNvbXBvbmVudERpZENhdGNoKGIudmFsdWUse2NvbXBvbmVudFN0YWNrOm51bGwhPT1jP2M6XCJcIn0pfSk7cmV0dXJuIGN9XG52YXIgeWk9TWF0aC5jZWlsLHppPVhiLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsQWk9WGIuUmVhY3RDdXJyZW50T3duZXIsVD0wLEJpPTgsQ2k9MTYsRGk9MzIsRWk9MCxGaT0xLEdpPTIsSGk9MyxJaT00LFU9VCxKaT1udWxsLFY9bnVsbCxXPTAsWD1FaSxLaT0xMDczNzQxODIzLExpPTEwNzM3NDE4MjMsTWk9bnVsbCxOaT0hMSxwaT0wLE9pPTUwMCxZPW51bGwsdWk9ITEsdmk9bnVsbCx4aT1udWxsLFBpPSExLFFpPW51bGwsUmk9OTAsU2k9MCxUaT1udWxsLFVpPTAsVmk9bnVsbCxXaT0wO2Z1bmN0aW9uIGNnKCl7cmV0dXJuKFUmKENpfERpKSkhPT1UPzEwNzM3NDE4MjEtKHNmKCkvMTB8MCk6MCE9PVdpP1dpOldpPTEwNzM3NDE4MjEtKHNmKCkvMTB8MCl9XG5mdW5jdGlvbiBkZyhhLGIsYyl7Yj1iLm1vZGU7aWYoMD09PShiJjIpKXJldHVybiAxMDczNzQxODIzO3ZhciBkPXRmKCk7aWYoMD09PShiJjQpKXJldHVybiA5OT09PWQ/MTA3Mzc0MTgyMzoxMDczNzQxODIyO2lmKChVJkNpKSE9PVQpcmV0dXJuIFc7aWYobnVsbCE9PWMpYT0xMDczNzQxODIxLTI1KigoKDEwNzM3NDE4MjEtYSsoYy50aW1lb3V0TXN8MHx8NUUzKS8xMCkvMjV8MCkrMSk7ZWxzZSBzd2l0Y2goZCl7Y2FzZSA5OTphPTEwNzM3NDE4MjM7YnJlYWs7Y2FzZSA5ODphPTEwNzM3NDE4MjEtMTAqKCgoMTA3Mzc0MTgyMS1hKzE1KS8xMHwwKSsxKTticmVhaztjYXNlIDk3OmNhc2UgOTY6YT0xMDczNzQxODIxLTI1KigoKDEwNzM3NDE4MjEtYSs1MDApLzI1fDApKzEpO2JyZWFrO2Nhc2UgOTU6YT0xO2JyZWFrO2RlZmF1bHQ6dGhyb3cgdChFcnJvcigzMjYpKTt9bnVsbCE9PUppJiZhPT09VyYmLS1hO3JldHVybiBhfXZhciBYaT0wO1xuZnVuY3Rpb24gZWcoYSxiKXtpZig1MDxVaSl0aHJvdyBVaT0wLFZpPW51bGwsdChFcnJvcigxODUpKTthPVlpKGEsYik7aWYobnVsbCE9PWEpe2EucGluZ1RpbWU9MDt2YXIgYz10ZigpO2lmKDEwNzM3NDE4MjM9PT1iKWlmKChVJkJpKSE9PVQmJihVJihDaXxEaSkpPT09VClmb3IodmFyIGQ9WihhLDEwNzM3NDE4MjMsITApO251bGwhPT1kOylkPWQoITApO2Vsc2UgWmkoYSw5OSwxMDczNzQxODIzKSxVPT09VCYmTygpO2Vsc2UgWmkoYSxjLGIpOyhVJjQpPT09VHx8OTghPT1jJiY5OSE9PWN8fChudWxsPT09VGk/VGk9bmV3IE1hcChbW2EsYl1dKTooYz1UaS5nZXQoYSksKHZvaWQgMD09PWN8fGM+YikmJlRpLnNldChhLGIpKSl9fVxuZnVuY3Rpb24gWWkoYSxiKXthLmV4cGlyYXRpb25UaW1lPGImJihhLmV4cGlyYXRpb25UaW1lPWIpO3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiZjLmV4cGlyYXRpb25UaW1lPGImJihjLmV4cGlyYXRpb25UaW1lPWIpO3ZhciBkPWEucmV0dXJuLGU9bnVsbDtpZihudWxsPT09ZCYmMz09PWEudGFnKWU9YS5zdGF0ZU5vZGU7ZWxzZSBmb3IoO251bGwhPT1kOyl7Yz1kLmFsdGVybmF0ZTtkLmNoaWxkRXhwaXJhdGlvblRpbWU8YiYmKGQuY2hpbGRFeHBpcmF0aW9uVGltZT1iKTtudWxsIT09YyYmYy5jaGlsZEV4cGlyYXRpb25UaW1lPGImJihjLmNoaWxkRXhwaXJhdGlvblRpbWU9Yik7aWYobnVsbD09PWQucmV0dXJuJiYzPT09ZC50YWcpe2U9ZC5zdGF0ZU5vZGU7YnJlYWt9ZD1kLnJldHVybn1udWxsIT09ZSYmKGI+ZS5maXJzdFBlbmRpbmdUaW1lJiYoZS5maXJzdFBlbmRpbmdUaW1lPWIpLGE9ZS5sYXN0UGVuZGluZ1RpbWUsMD09PWF8fGI8YSkmJihlLmxhc3RQZW5kaW5nVGltZT1cbmIpO3JldHVybiBlfWZ1bmN0aW9uIFppKGEsYixjKXtpZihhLmNhbGxiYWNrRXhwaXJhdGlvblRpbWU8Yyl7dmFyIGQ9YS5jYWxsYmFja05vZGU7bnVsbCE9PWQmJmQhPT1tZiYmYWYoZCk7YS5jYWxsYmFja0V4cGlyYXRpb25UaW1lPWM7MTA3Mzc0MTgyMz09PWM/YS5jYWxsYmFja05vZGU9eGYoJGkuYmluZChudWxsLGEsWi5iaW5kKG51bGwsYSxjKSkpOihkPW51bGwsMSE9PWMmJihkPXt0aW1lb3V0OjEwKigxMDczNzQxODIxLWMpLXNmKCl9KSxhLmNhbGxiYWNrTm9kZT13ZihiLCRpLmJpbmQobnVsbCxhLFouYmluZChudWxsLGEsYykpLGQpKX19ZnVuY3Rpb24gJGkoYSxiLGMpe3ZhciBkPWEuY2FsbGJhY2tOb2RlLGU9bnVsbDt0cnl7cmV0dXJuIGU9YihjKSxudWxsIT09ZT8kaS5iaW5kKG51bGwsYSxlKTpudWxsfWZpbmFsbHl7bnVsbD09PWUmJmQ9PT1hLmNhbGxiYWNrTm9kZSYmKGEuY2FsbGJhY2tOb2RlPW51bGwsYS5jYWxsYmFja0V4cGlyYXRpb25UaW1lPTApfX1cbmZ1bmN0aW9uIGFqKCl7KFUmKDF8Q2l8RGkpKT09PVQmJihiaigpLGNqKCkpfWZ1bmN0aW9uIGRqKGEsYil7dmFyIGM9YS5maXJzdEJhdGNoO3JldHVybiBudWxsIT09YyYmYy5fZGVmZXImJmMuX2V4cGlyYXRpb25UaW1lPj1iPyh3Zig5NyxmdW5jdGlvbigpe2MuX29uQ29tcGxldGUoKTtyZXR1cm4gbnVsbH0pLCEwKTohMX1mdW5jdGlvbiBiaigpe2lmKG51bGwhPT1UaSl7dmFyIGE9VGk7VGk9bnVsbDthLmZvckVhY2goZnVuY3Rpb24oYSxjKXt4ZihaLmJpbmQobnVsbCxjLGEpKX0pO08oKX19ZnVuY3Rpb24gZWooYSxiKXt2YXIgYz1VO1V8PTE7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7VT1jLFU9PT1UJiZPKCl9fWZ1bmN0aW9uIGZqKGEsYixjLGQpe3ZhciBlPVU7VXw9NDt0cnl7cmV0dXJuIHZmKDk4LGEuYmluZChudWxsLGIsYyxkKSl9ZmluYWxseXtVPWUsVT09PVQmJk8oKX19XG5mdW5jdGlvbiBnaihhLGIpe3ZhciBjPVU7VSY9LTI7VXw9Qmk7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7VT1jLFU9PT1UJiZPKCl9fVxuZnVuY3Rpb24gaGooYSxiKXthLmZpbmlzaGVkV29yaz1udWxsO2EuZmluaXNoZWRFeHBpcmF0aW9uVGltZT0wO3ZhciBjPWEudGltZW91dEhhbmRsZTstMSE9PWMmJihhLnRpbWVvdXRIYW5kbGU9LTEsTWUoYykpO2lmKG51bGwhPT1WKWZvcihjPVYucmV0dXJuO251bGwhPT1jOyl7dmFyIGQ9Yztzd2l0Y2goZC50YWcpe2Nhc2UgMTp2YXIgZT1kLnR5cGUuY2hpbGRDb250ZXh0VHlwZXM7bnVsbCE9PWUmJnZvaWQgMCE9PWUmJlRlKGQpO2JyZWFrO2Nhc2UgMzpCZyhkKTtVZShkKTticmVhaztjYXNlIDU6RGcoZCk7YnJlYWs7Y2FzZSA0OkJnKGQpO2JyZWFrO2Nhc2UgMTM6SChQLGQpO2JyZWFrO2Nhc2UgMTk6SChQLGQpO2JyZWFrO2Nhc2UgMTA6SWYoZCl9Yz1jLnJldHVybn1KaT1hO1Y9b2coYS5jdXJyZW50LG51bGwsYik7Vz1iO1g9RWk7TGk9S2k9MTA3Mzc0MTgyMztNaT1udWxsO05pPSExfVxuZnVuY3Rpb24gWihhLGIsYyl7aWYoKFUmKENpfERpKSkhPT1UKXRocm93IHQoRXJyb3IoMzI3KSk7aWYoYS5maXJzdFBlbmRpbmdUaW1lPGIpcmV0dXJuIG51bGw7aWYoYyYmYS5maW5pc2hlZEV4cGlyYXRpb25UaW1lPT09YilyZXR1cm4gaWouYmluZChudWxsLGEpO2NqKCk7aWYoYSE9PUppfHxiIT09VyloaihhLGIpO2Vsc2UgaWYoWD09PUhpKWlmKE5pKWhqKGEsYik7ZWxzZXt2YXIgZD1hLmxhc3RQZW5kaW5nVGltZTtpZihkPGIpcmV0dXJuIFouYmluZChudWxsLGEsZCl9aWYobnVsbCE9PVYpe2Q9VTtVfD1DaTt2YXIgZT16aS5jdXJyZW50O251bGw9PT1lJiYoZT1oaCk7emkuY3VycmVudD1oaDtpZihjKXtpZigxMDczNzQxODIzIT09Yil7dmFyIGY9Y2coKTtpZihmPGIpcmV0dXJuIFU9ZCxHZigpLHppLmN1cnJlbnQ9ZSxaLmJpbmQobnVsbCxhLGYpfX1lbHNlIFdpPTA7ZG8gdHJ5e2lmKGMpZm9yKDtudWxsIT09VjspVj1qaihWKTtlbHNlIGZvcig7bnVsbCE9PVYmJiFiZigpOylWPVxuamooVik7YnJlYWt9Y2F0Y2gocmIpe0dmKCk7aWgoKTtmPVY7aWYobnVsbD09PWZ8fG51bGw9PT1mLnJldHVybil0aHJvdyBoaihhLGIpLFU9ZCxyYjthOnt2YXIgaD1hLGc9Zi5yZXR1cm4saz1mLGw9cmIsbj1XO2suZWZmZWN0VGFnfD0xMDI0O2suZmlyc3RFZmZlY3Q9ay5sYXN0RWZmZWN0PW51bGw7aWYobnVsbCE9PWwmJlwib2JqZWN0XCI9PT10eXBlb2YgbCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGwudGhlbil7dmFyIHo9bCx4PTAhPT0oUC5jdXJyZW50JkZnKTtsPWc7ZG97dmFyIHY7aWYodj0xMz09PWwudGFnKW51bGwhPT1sLm1lbW9pemVkU3RhdGU/dj0hMToodj1sLm1lbW9pemVkUHJvcHMsdj12b2lkIDA9PT12LmZhbGxiYWNrPyExOiEwIT09di51bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFjaz8hMDp4PyExOiEwKTtpZih2KXtnPWwudXBkYXRlUXVldWU7bnVsbD09PWc/KGc9bmV3IFNldCxnLmFkZCh6KSxsLnVwZGF0ZVF1ZXVlPWcpOmcuYWRkKHopO2lmKDA9PT0obC5tb2RlJlxuMikpe2wuZWZmZWN0VGFnfD02NDtrLmVmZmVjdFRhZyY9LTE5NTc7MT09PWsudGFnJiYobnVsbD09PWsuYWx0ZXJuYXRlP2sudGFnPTE3OihuPVFmKDEwNzM3NDE4MjMsbnVsbCksbi50YWc9MixTZihrLG4pKSk7ay5leHBpcmF0aW9uVGltZT0xMDczNzQxODIzO2JyZWFrIGF9az1oO2g9bjt4PWsucGluZ0NhY2hlO251bGw9PT14Pyh4PWsucGluZ0NhY2hlPW5ldyBzaSxnPW5ldyBTZXQseC5zZXQoeixnKSk6KGc9eC5nZXQoeiksdm9pZCAwPT09ZyYmKGc9bmV3IFNldCx4LnNldCh6LGcpKSk7Zy5oYXMoaCl8fChnLmFkZChoKSxrPWtqLmJpbmQobnVsbCxrLHosaCksei50aGVuKGssaykpO2wuZWZmZWN0VGFnfD0yMDQ4O2wuZXhwaXJhdGlvblRpbWU9bjticmVhayBhfWw9bC5yZXR1cm59d2hpbGUobnVsbCE9PWwpO2w9RXJyb3IoKG9jKGsudHlwZSl8fFwiQSBSZWFjdCBjb21wb25lbnRcIikrXCIgc3VzcGVuZGVkIHdoaWxlIHJlbmRlcmluZywgYnV0IG5vIGZhbGxiYWNrIFVJIHdhcyBzcGVjaWZpZWQuXFxuXFxuQWRkIGEgPFN1c3BlbnNlIGZhbGxiYWNrPS4uLj4gY29tcG9uZW50IGhpZ2hlciBpbiB0aGUgdHJlZSB0byBwcm92aWRlIGEgbG9hZGluZyBpbmRpY2F0b3Igb3IgcGxhY2Vob2xkZXIgdG8gZGlzcGxheS5cIitcbnBjKGspKX1YIT09SWkmJihYPUZpKTtsPWJpKGwsayk7az1nO2Rve3N3aXRjaChrLnRhZyl7Y2FzZSAzOmsuZWZmZWN0VGFnfD0yMDQ4O2suZXhwaXJhdGlvblRpbWU9bjtuPXRpKGssbCxuKTtUZihrLG4pO2JyZWFrIGE7Y2FzZSAxOmlmKHo9bCxoPWsudHlwZSxnPWsuc3RhdGVOb2RlLDA9PT0oay5lZmZlY3RUYWcmNjQpJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGguZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxudWxsIT09ZyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09eGl8fCF4aS5oYXMoZykpKSl7ay5lZmZlY3RUYWd8PTIwNDg7ay5leHBpcmF0aW9uVGltZT1uO249d2koayx6LG4pO1RmKGssbik7YnJlYWsgYX19az1rLnJldHVybn13aGlsZShudWxsIT09ayl9Vj1saihmKX13aGlsZSgxKTtVPWQ7R2YoKTt6aS5jdXJyZW50PWU7aWYobnVsbCE9PVYpcmV0dXJuIFouYmluZChudWxsLGEsYil9YS5maW5pc2hlZFdvcms9YS5jdXJyZW50LmFsdGVybmF0ZTtcbmEuZmluaXNoZWRFeHBpcmF0aW9uVGltZT1iO2lmKGRqKGEsYikpcmV0dXJuIG51bGw7Smk9bnVsbDtzd2l0Y2goWCl7Y2FzZSBFaTp0aHJvdyB0KEVycm9yKDMyOCkpO2Nhc2UgRmk6cmV0dXJuIGQ9YS5sYXN0UGVuZGluZ1RpbWUsZDxiP1ouYmluZChudWxsLGEsZCk6Yz9pai5iaW5kKG51bGwsYSk6KGhqKGEsYikseGYoWi5iaW5kKG51bGwsYSxiKSksbnVsbCk7Y2FzZSBHaTppZigxMDczNzQxODIzPT09S2kmJiFjJiYoYz1waStPaS1zZigpLDEwPGMpKXtpZihOaSlyZXR1cm4gaGooYSxiKSxaLmJpbmQobnVsbCxhLGIpO2Q9YS5sYXN0UGVuZGluZ1RpbWU7aWYoZDxiKXJldHVybiBaLmJpbmQobnVsbCxhLGQpO2EudGltZW91dEhhbmRsZT1MZShpai5iaW5kKG51bGwsYSksYyk7cmV0dXJuIG51bGx9cmV0dXJuIGlqLmJpbmQobnVsbCxhKTtjYXNlIEhpOmlmKCFjKXtpZihOaSlyZXR1cm4gaGooYSxiKSxaLmJpbmQobnVsbCxhLGIpO2M9YS5sYXN0UGVuZGluZ1RpbWU7aWYoYzxiKXJldHVybiBaLmJpbmQobnVsbCxcbmEsYyk7MTA3Mzc0MTgyMyE9PUxpP2M9MTAqKDEwNzM3NDE4MjEtTGkpLXNmKCk6MTA3Mzc0MTgyMz09PUtpP2M9MDooYz0xMCooMTA3Mzc0MTgyMS1LaSktNUUzLGQ9c2YoKSxiPTEwKigxMDczNzQxODIxLWIpLWQsYz1kLWMsMD5jJiYoYz0wKSxjPSgxMjA+Yz8xMjA6NDgwPmM/NDgwOjEwODA+Yz8xMDgwOjE5MjA+Yz8xOTIwOjNFMz5jPzNFMzo0MzIwPmM/NDMyMDoxOTYwKnlpKGMvMTk2MCkpLWMsYjxjJiYoYz1iKSk7aWYoMTA8YylyZXR1cm4gYS50aW1lb3V0SGFuZGxlPUxlKGlqLmJpbmQobnVsbCxhKSxjKSxudWxsfXJldHVybiBpai5iaW5kKG51bGwsYSk7Y2FzZSBJaTpyZXR1cm4hYyYmMTA3Mzc0MTgyMyE9PUtpJiZudWxsIT09TWkmJihkPUtpLGU9TWksYj1lLmJ1c3lNaW5EdXJhdGlvbk1zfDAsMD49Yj9iPTA6KGM9ZS5idXN5RGVsYXlNc3wwLGQ9c2YoKS0oMTAqKDEwNzM3NDE4MjEtZCktKGUudGltZW91dE1zfDB8fDVFMykpLGI9ZDw9Yz8wOmMrYi1kKSwxMDxiKT8oYS50aW1lb3V0SGFuZGxlPVxuTGUoaWouYmluZChudWxsLGEpLGIpLG51bGwpOmlqLmJpbmQobnVsbCxhKTtkZWZhdWx0OnRocm93IHQoRXJyb3IoMzI5KSk7fX1mdW5jdGlvbiBYZihhLGIpe2E8S2kmJjE8YSYmKEtpPWEpO251bGwhPT1iJiZhPExpJiYxPGEmJihMaT1hLE1pPWIpfWZ1bmN0aW9uIGpqKGEpe3ZhciBiPW1qKGEuYWx0ZXJuYXRlLGEsVyk7YS5tZW1vaXplZFByb3BzPWEucGVuZGluZ1Byb3BzO251bGw9PT1iJiYoYj1saihhKSk7QWkuY3VycmVudD1udWxsO3JldHVybiBifVxuZnVuY3Rpb24gbGooYSl7Vj1hO2Rve3ZhciBiPVYuYWx0ZXJuYXRlO2E9Vi5yZXR1cm47aWYoMD09PShWLmVmZmVjdFRhZyYxMDI0KSl7YTp7dmFyIGM9YjtiPVY7dmFyIGQ9VyxlPWIucGVuZGluZ1Byb3BzO3N3aXRjaChiLnRhZyl7Y2FzZSAyOmJyZWFrO2Nhc2UgMTY6YnJlYWs7Y2FzZSAxNTpjYXNlIDA6YnJlYWs7Y2FzZSAxOk4oYi50eXBlKSYmVGUoYik7YnJlYWs7Y2FzZSAzOkJnKGIpO1VlKGIpO2Q9Yi5zdGF0ZU5vZGU7ZC5wZW5kaW5nQ29udGV4dCYmKGQuY29udGV4dD1kLnBlbmRpbmdDb250ZXh0LGQucGVuZGluZ0NvbnRleHQ9bnVsbCk7aWYobnVsbD09PWN8fG51bGw9PT1jLmNoaWxkKUJoKGIpLGIuZWZmZWN0VGFnJj0tMztVaChiKTticmVhaztjYXNlIDU6RGcoYik7ZD16Zyh5Zy5jdXJyZW50KTt2YXIgZj1iLnR5cGU7aWYobnVsbCE9PWMmJm51bGwhPWIuc3RhdGVOb2RlKVZoKGMsYixmLGUsZCksYy5yZWYhPT1iLnJlZiYmKGIuZWZmZWN0VGFnfD0xMjgpO2Vsc2UgaWYoZSl7dmFyIGg9XG56Zyh3Zy5jdXJyZW50KTtpZihCaChiKSl7Yz1iO2U9dm9pZCAwO2Y9Yy5zdGF0ZU5vZGU7dmFyIGc9Yy50eXBlLGs9Yy5tZW1vaXplZFByb3BzO2ZbRmFdPWM7ZltHYV09aztzd2l0Y2goZyl7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwiZW1iZWRcIjpHKFwibG9hZFwiLGYpO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcih2YXIgbD0wO2w8YmIubGVuZ3RoO2wrKylHKGJiW2xdLGYpO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpHKFwiZXJyb3JcIixmKTticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpHKFwiZXJyb3JcIixmKTtHKFwibG9hZFwiLGYpO2JyZWFrO2Nhc2UgXCJmb3JtXCI6RyhcInJlc2V0XCIsZik7RyhcInN1Ym1pdFwiLGYpO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RyhcInRvZ2dsZVwiLGYpO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOkNjKGYsayk7RyhcImludmFsaWRcIixmKTtGZShkLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmYuX3dyYXBwZXJTdGF0ZT1cbnt3YXNNdWx0aXBsZTohIWsubXVsdGlwbGV9O0coXCJpbnZhbGlkXCIsZik7RmUoZCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOm9lKGYsayksRyhcImludmFsaWRcIixmKSxGZShkLFwib25DaGFuZ2VcIil9RGUoZyxrKTtsPW51bGw7Zm9yKGUgaW4gaylrLmhhc093blByb3BlcnR5KGUpJiYoaD1rW2VdLFwiY2hpbGRyZW5cIj09PWU/XCJzdHJpbmdcIj09PXR5cGVvZiBoP2YudGV4dENvbnRlbnQhPT1oJiYobD1bXCJjaGlsZHJlblwiLGhdKTpcIm51bWJlclwiPT09dHlwZW9mIGgmJmYudGV4dENvbnRlbnQhPT1cIlwiK2gmJihsPVtcImNoaWxkcmVuXCIsXCJcIitoXSk6aWEuaGFzT3duUHJvcGVydHkoZSkmJm51bGwhPWgmJkZlKGQsZSkpO3N3aXRjaChnKXtjYXNlIFwiaW5wdXRcIjpWYihmKTtHYyhmLGssITApO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlZiKGYpO3FlKGYsayk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJvcHRpb25cIjpicmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBrLm9uQ2xpY2smJlxuKGYub25jbGljaz1HZSl9ZD1sO2MudXBkYXRlUXVldWU9ZDtudWxsIT09ZCYmU2goYil9ZWxzZXtrPWY7Yz1lO2c9YjtsPTk9PT1kLm5vZGVUeXBlP2Q6ZC5vd25lckRvY3VtZW50O2g9PT1yZS5odG1sJiYoaD1zZShrKSk7aD09PXJlLmh0bWw/XCJzY3JpcHRcIj09PWs/KGs9bC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGsuaW5uZXJIVE1MPVwiPHNjcmlwdD5cXHgzYy9zY3JpcHQ+XCIsbD1rLnJlbW92ZUNoaWxkKGsuZmlyc3RDaGlsZCkpOlwic3RyaW5nXCI9PT10eXBlb2YgYy5pcz9sPWwuY3JlYXRlRWxlbWVudChrLHtpczpjLmlzfSk6KGw9bC5jcmVhdGVFbGVtZW50KGspLFwic2VsZWN0XCI9PT1rJiYoaz1sLGMubXVsdGlwbGU/ay5tdWx0aXBsZT0hMDpjLnNpemUmJihrLnNpemU9Yy5zaXplKSkpOmw9bC5jcmVhdGVFbGVtZW50TlMoaCxrKTtrPWw7a1tGYV09ZztrW0dhXT1jO2M9aztUaChjLGIsITEsITEpO2c9Yzt2YXIgbj1kLHo9RWUoZixlKTtzd2l0Y2goZil7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwiZW1iZWRcIjpHKFwibG9hZFwiLFxuZyk7ZD1lO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihkPTA7ZDxiYi5sZW5ndGg7ZCsrKUcoYmJbZF0sZyk7ZD1lO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpHKFwiZXJyb3JcIixnKTtkPWU7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RyhcImVycm9yXCIsZyk7RyhcImxvYWRcIixnKTtkPWU7YnJlYWs7Y2FzZSBcImZvcm1cIjpHKFwicmVzZXRcIixnKTtHKFwic3VibWl0XCIsZyk7ZD1lO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RyhcInRvZ2dsZVwiLGcpO2Q9ZTticmVhaztjYXNlIFwiaW5wdXRcIjpDYyhnLGUpO2Q9QmMoZyxlKTtHKFwiaW52YWxpZFwiLGcpO0ZlKG4sXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwib3B0aW9uXCI6ZD1sZShnLGUpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpnLl93cmFwcGVyU3RhdGU9e3dhc011bHRpcGxlOiEhZS5tdWx0aXBsZX07ZD1tKHt9LGUse3ZhbHVlOnZvaWQgMH0pO0coXCJpbnZhbGlkXCIsZyk7RmUobixcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOm9lKGcsXG5lKTtkPW5lKGcsZSk7RyhcImludmFsaWRcIixnKTtGZShuLFwib25DaGFuZ2VcIik7YnJlYWs7ZGVmYXVsdDpkPWV9RGUoZixkKTtrPXZvaWQgMDtsPWY7aD1nO3ZhciB4PWQ7Zm9yKGsgaW4geClpZih4Lmhhc093blByb3BlcnR5KGspKXt2YXIgdj14W2tdO1wic3R5bGVcIj09PWs/QWUoaCx2KTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1rPyh2PXY/di5fX2h0bWw6dm9pZCAwLG51bGwhPXYmJnZlKGgsdikpOlwiY2hpbGRyZW5cIj09PWs/XCJzdHJpbmdcIj09PXR5cGVvZiB2PyhcInRleHRhcmVhXCIhPT1sfHxcIlwiIT09dikmJndlKGgsdik6XCJudW1iZXJcIj09PXR5cGVvZiB2JiZ3ZShoLFwiXCIrdik6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWsmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1rJiZcImF1dG9Gb2N1c1wiIT09ayYmKGlhLmhhc093blByb3BlcnR5KGspP251bGwhPXYmJkZlKG4sayk6bnVsbCE9diYmemMoaCxrLHYseikpfXN3aXRjaChmKXtjYXNlIFwiaW5wdXRcIjpWYihnKTtcbkdjKGcsZSwhMSk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6VmIoZyk7cWUoZyxlKTticmVhaztjYXNlIFwib3B0aW9uXCI6bnVsbCE9ZS52YWx1ZSYmZy5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLFwiXCIrQWMoZS52YWx1ZSkpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpkPWc7Zz1lO2QubXVsdGlwbGU9ISFnLm11bHRpcGxlO2s9Zy52YWx1ZTtudWxsIT1rP21lKGQsISFnLm11bHRpcGxlLGssITEpOm51bGwhPWcuZGVmYXVsdFZhbHVlJiZtZShkLCEhZy5tdWx0aXBsZSxnLmRlZmF1bHRWYWx1ZSwhMCk7YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5vbkNsaWNrJiYoZy5vbmNsaWNrPUdlKX1KZShmLGUpJiZTaChiKTtiLnN0YXRlTm9kZT1jfW51bGwhPT1iLnJlZiYmKGIuZWZmZWN0VGFnfD0xMjgpfWVsc2UgaWYobnVsbD09PWIuc3RhdGVOb2RlKXRocm93IHQoRXJyb3IoMTY2KSk7YnJlYWs7Y2FzZSA2OmlmKGMmJm51bGwhPWIuc3RhdGVOb2RlKVdoKGMsYixjLm1lbW9pemVkUHJvcHMsXG5lKTtlbHNle2lmKFwic3RyaW5nXCIhPT10eXBlb2YgZSYmbnVsbD09PWIuc3RhdGVOb2RlKXRocm93IHQoRXJyb3IoMTY2KSk7Yz16Zyh5Zy5jdXJyZW50KTt6Zyh3Zy5jdXJyZW50KTtCaChiKT8oZD1iLnN0YXRlTm9kZSxjPWIubWVtb2l6ZWRQcm9wcyxkW0ZhXT1iLGQubm9kZVZhbHVlIT09YyYmU2goYikpOihkPWIsYz0oOT09PWMubm9kZVR5cGU/YzpjLm93bmVyRG9jdW1lbnQpLmNyZWF0ZVRleHROb2RlKGUpLGNbRmFdPWIsZC5zdGF0ZU5vZGU9Yyl9YnJlYWs7Y2FzZSAxMTpicmVhaztjYXNlIDEzOkgoUCxiKTtlPWIubWVtb2l6ZWRTdGF0ZTtpZigwIT09KGIuZWZmZWN0VGFnJjY0KSl7Yi5leHBpcmF0aW9uVGltZT1kO2JyZWFrIGF9ZD1udWxsIT09ZTtlPSExO251bGw9PT1jP0JoKGIpOihmPWMubWVtb2l6ZWRTdGF0ZSxlPW51bGwhPT1mLGR8fG51bGw9PT1mfHwoZj1jLmNoaWxkLnNpYmxpbmcsbnVsbCE9PWYmJihnPWIuZmlyc3RFZmZlY3QsbnVsbCE9PWc/KGIuZmlyc3RFZmZlY3Q9XG5mLGYubmV4dEVmZmVjdD1nKTooYi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9ZixmLm5leHRFZmZlY3Q9bnVsbCksZi5lZmZlY3RUYWc9OCkpKTtpZihkJiYhZSYmMCE9PShiLm1vZGUmMikpaWYobnVsbD09PWMmJiEwIT09Yi5tZW1vaXplZFByb3BzLnVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrfHwwIT09KFAuY3VycmVudCZGZykpWD09PUVpJiYoWD1HaSk7ZWxzZSBpZihYPT09RWl8fFg9PT1HaSlYPUhpO2lmKGR8fGUpYi5lZmZlY3RUYWd8PTQ7YnJlYWs7Y2FzZSA3OmJyZWFrO2Nhc2UgODpicmVhaztjYXNlIDEyOmJyZWFrO2Nhc2UgNDpCZyhiKTtVaChiKTticmVhaztjYXNlIDEwOklmKGIpO2JyZWFrO2Nhc2UgOTpicmVhaztjYXNlIDE0OmJyZWFrO2Nhc2UgMTc6TihiLnR5cGUpJiZUZShiKTticmVhaztjYXNlIDE4OmJyZWFrO2Nhc2UgMTk6SChQLGIpO2U9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGw9PT1lKWJyZWFrO2Y9MCE9PShiLmVmZmVjdFRhZyY2NCk7Zz1lLnJlbmRlcmluZztcbmlmKG51bGw9PT1nKWlmKGYpJGgoZSwhMSk7ZWxzZXtpZihYIT09RWl8fG51bGwhPT1jJiYwIT09KGMuZWZmZWN0VGFnJjY0KSlmb3IoYz1iLmNoaWxkO251bGwhPT1jOyl7Zz1IZyhjKTtpZihudWxsIT09Zyl7Yi5lZmZlY3RUYWd8PTY0OyRoKGUsITEpO2M9Zy51cGRhdGVRdWV1ZTtudWxsIT09YyYmKGIudXBkYXRlUXVldWU9YyxiLmVmZmVjdFRhZ3w9NCk7Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9bnVsbDtmb3IoYz1iLmNoaWxkO251bGwhPT1jOyllPWMsZj1kLGUuZWZmZWN0VGFnJj0yLGUubmV4dEVmZmVjdD1udWxsLGUuZmlyc3RFZmZlY3Q9bnVsbCxlLmxhc3RFZmZlY3Q9bnVsbCxnPWUuYWx0ZXJuYXRlLG51bGw9PT1nPyhlLmNoaWxkRXhwaXJhdGlvblRpbWU9MCxlLmV4cGlyYXRpb25UaW1lPWYsZS5jaGlsZD1udWxsLGUubWVtb2l6ZWRQcm9wcz1udWxsLGUubWVtb2l6ZWRTdGF0ZT1udWxsLGUudXBkYXRlUXVldWU9bnVsbCxlLmRlcGVuZGVuY2llcz1udWxsKTooZS5jaGlsZEV4cGlyYXRpb25UaW1lPVxuZy5jaGlsZEV4cGlyYXRpb25UaW1lLGUuZXhwaXJhdGlvblRpbWU9Zy5leHBpcmF0aW9uVGltZSxlLmNoaWxkPWcuY2hpbGQsZS5tZW1vaXplZFByb3BzPWcubWVtb2l6ZWRQcm9wcyxlLm1lbW9pemVkU3RhdGU9Zy5tZW1vaXplZFN0YXRlLGUudXBkYXRlUXVldWU9Zy51cGRhdGVRdWV1ZSxmPWcuZGVwZW5kZW5jaWVzLGUuZGVwZW5kZW5jaWVzPW51bGw9PT1mP251bGw6e2V4cGlyYXRpb25UaW1lOmYuZXhwaXJhdGlvblRpbWUsZmlyc3RDb250ZXh0OmYuZmlyc3RDb250ZXh0LHJlc3BvbmRlcnM6Zi5yZXNwb25kZXJzfSksYz1jLnNpYmxpbmc7SihQLFAuY3VycmVudCZFZ3xHZyxiKTtiPWIuY2hpbGQ7YnJlYWsgYX1jPWMuc2libGluZ319ZWxzZXtpZighZilpZihjPUhnKGcpLG51bGwhPT1jKXtpZihiLmVmZmVjdFRhZ3w9NjQsZj0hMCwkaChlLCEwKSxudWxsPT09ZS50YWlsJiZcImhpZGRlblwiPT09ZS50YWlsTW9kZSl7ZD1jLnVwZGF0ZVF1ZXVlO251bGwhPT1kJiYoYi51cGRhdGVRdWV1ZT1cbmQsYi5lZmZlY3RUYWd8PTQpO2I9Yi5sYXN0RWZmZWN0PWUubGFzdEVmZmVjdDtudWxsIT09YiYmKGIubmV4dEVmZmVjdD1udWxsKTticmVha319ZWxzZSBzZigpPmUudGFpbEV4cGlyYXRpb24mJjE8ZCYmKGIuZWZmZWN0VGFnfD02NCxmPSEwLCRoKGUsITEpLGIuZXhwaXJhdGlvblRpbWU9Yi5jaGlsZEV4cGlyYXRpb25UaW1lPWQtMSk7ZS5pc0JhY2t3YXJkcz8oZy5zaWJsaW5nPWIuY2hpbGQsYi5jaGlsZD1nKTooZD1lLmxhc3QsbnVsbCE9PWQ/ZC5zaWJsaW5nPWc6Yi5jaGlsZD1nLGUubGFzdD1nKX1pZihudWxsIT09ZS50YWlsKXswPT09ZS50YWlsRXhwaXJhdGlvbiYmKGUudGFpbEV4cGlyYXRpb249c2YoKSs1MDApO2Q9ZS50YWlsO2UucmVuZGVyaW5nPWQ7ZS50YWlsPWQuc2libGluZztlLmxhc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0O2Quc2libGluZz1udWxsO2M9UC5jdXJyZW50O2M9Zj9jJkVnfEdnOmMmRWc7SihQLGMsYik7Yj1kO2JyZWFrIGF9YnJlYWs7Y2FzZSAyMDpicmVhaztcbmRlZmF1bHQ6dGhyb3cgdChFcnJvcigxNTYpKTt9Yj1udWxsfWQ9VjtpZigxPT09V3x8MSE9PWQuY2hpbGRFeHBpcmF0aW9uVGltZSl7Yz0wO2ZvcihlPWQuY2hpbGQ7bnVsbCE9PWU7KWY9ZS5leHBpcmF0aW9uVGltZSxnPWUuY2hpbGRFeHBpcmF0aW9uVGltZSxmPmMmJihjPWYpLGc+YyYmKGM9ZyksZT1lLnNpYmxpbmc7ZC5jaGlsZEV4cGlyYXRpb25UaW1lPWN9aWYobnVsbCE9PWIpcmV0dXJuIGI7bnVsbCE9PWEmJjA9PT0oYS5lZmZlY3RUYWcmMTAyNCkmJihudWxsPT09YS5maXJzdEVmZmVjdCYmKGEuZmlyc3RFZmZlY3Q9Vi5maXJzdEVmZmVjdCksbnVsbCE9PVYubGFzdEVmZmVjdCYmKG51bGwhPT1hLmxhc3RFZmZlY3QmJihhLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1WLmZpcnN0RWZmZWN0KSxhLmxhc3RFZmZlY3Q9Vi5sYXN0RWZmZWN0KSwxPFYuZWZmZWN0VGFnJiYobnVsbCE9PWEubGFzdEVmZmVjdD9hLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1WOmEuZmlyc3RFZmZlY3Q9VixcbmEubGFzdEVmZmVjdD1WKSl9ZWxzZXtiPWFpKFYsVyk7aWYobnVsbCE9PWIpcmV0dXJuIGIuZWZmZWN0VGFnJj0xMDIzLGI7bnVsbCE9PWEmJihhLmZpcnN0RWZmZWN0PWEubGFzdEVmZmVjdD1udWxsLGEuZWZmZWN0VGFnfD0xMDI0KX1iPVYuc2libGluZztpZihudWxsIT09YilyZXR1cm4gYjtWPWF9d2hpbGUobnVsbCE9PVYpO1g9PT1FaSYmKFg9SWkpO3JldHVybiBudWxsfWZ1bmN0aW9uIGlqKGEpe3ZhciBiPXRmKCk7dmYoOTksbmouYmluZChudWxsLGEsYikpO251bGwhPT1RaSYmd2YoOTcsZnVuY3Rpb24oKXtjaigpO3JldHVybiBudWxsfSk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBuaihhLGIpe2NqKCk7aWYoKFUmKENpfERpKSkhPT1UKXRocm93IHQoRXJyb3IoMzI3KSk7dmFyIGM9YS5maW5pc2hlZFdvcmssZD1hLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU7aWYobnVsbD09PWMpcmV0dXJuIG51bGw7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU9MDtpZihjPT09YS5jdXJyZW50KXRocm93IHQoRXJyb3IoMTc3KSk7YS5jYWxsYmFja05vZGU9bnVsbDthLmNhbGxiYWNrRXhwaXJhdGlvblRpbWU9MDt2YXIgZT1jLmV4cGlyYXRpb25UaW1lLGY9Yy5jaGlsZEV4cGlyYXRpb25UaW1lO2U9Zj5lP2Y6ZTthLmZpcnN0UGVuZGluZ1RpbWU9ZTtlPGEubGFzdFBlbmRpbmdUaW1lJiYoYS5sYXN0UGVuZGluZ1RpbWU9ZSk7YT09PUppJiYoVj1KaT1udWxsLFc9MCk7MTxjLmVmZmVjdFRhZz9udWxsIT09Yy5sYXN0RWZmZWN0PyhjLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1jLGU9Yy5maXJzdEVmZmVjdCk6ZT1jOmU9Yy5maXJzdEVmZmVjdDtcbmlmKG51bGwhPT1lKXtmPVU7VXw9RGk7QWkuY3VycmVudD1udWxsO0hlPVFkO3ZhciBoPWFlKCk7aWYoYmUoaCkpe2lmKFwic2VsZWN0aW9uU3RhcnRcImluIGgpdmFyIGc9e3N0YXJ0Omguc2VsZWN0aW9uU3RhcnQsZW5kOmguc2VsZWN0aW9uRW5kfTtlbHNlIGE6e2c9KGc9aC5vd25lckRvY3VtZW50KSYmZy5kZWZhdWx0Vmlld3x8d2luZG93O3ZhciBrPWcuZ2V0U2VsZWN0aW9uJiZnLmdldFNlbGVjdGlvbigpO2lmKGsmJjAhPT1rLnJhbmdlQ291bnQpe2c9ay5hbmNob3JOb2RlO3ZhciBsPWsuYW5jaG9yT2Zmc2V0LG49ay5mb2N1c05vZGU7az1rLmZvY3VzT2Zmc2V0O3RyeXtnLm5vZGVUeXBlLG4ubm9kZVR5cGV9Y2F0Y2goemIpe2c9bnVsbDticmVhayBhfXZhciB6PTAseD0tMSx2PS0xLHJiPTAsQmU9MCx1PWgsdz1udWxsO2I6Zm9yKDs7KXtmb3IodmFyIEM7Oyl7dSE9PWd8fDAhPT1sJiYzIT09dS5ub2RlVHlwZXx8KHg9eitsKTt1IT09bnx8MCE9PWsmJjMhPT11Lm5vZGVUeXBlfHxcbih2PXorayk7Mz09PXUubm9kZVR5cGUmJih6Kz11Lm5vZGVWYWx1ZS5sZW5ndGgpO2lmKG51bGw9PT0oQz11LmZpcnN0Q2hpbGQpKWJyZWFrO3c9dTt1PUN9Zm9yKDs7KXtpZih1PT09aClicmVhayBiO3c9PT1nJiYrK3JiPT09bCYmKHg9eik7dz09PW4mJisrQmU9PT1rJiYodj16KTtpZihudWxsIT09KEM9dS5uZXh0U2libGluZykpYnJlYWs7dT13O3c9dS5wYXJlbnROb2RlfXU9Q31nPS0xPT09eHx8LTE9PT12P251bGw6e3N0YXJ0OngsZW5kOnZ9fWVsc2UgZz1udWxsfWc9Z3x8e3N0YXJ0OjAsZW5kOjB9fWVsc2UgZz1udWxsO0llPXtmb2N1c2VkRWxlbTpoLHNlbGVjdGlvblJhbmdlOmd9O1FkPSExO1k9ZTtkbyB0cnl7Zm9yKDtudWxsIT09WTspe2lmKDAhPT0oWS5lZmZlY3RUYWcmMjU2KSl7dmFyIEk9WS5hbHRlcm5hdGU7aD1ZO3N3aXRjaChoLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpoaShKZyxJZyxoKTticmVhaztjYXNlIDE6aWYoaC5lZmZlY3RUYWcmMjU2JiZudWxsIT09XG5JKXt2YXIgRT1JLm1lbW9pemVkUHJvcHMsdWE9SS5tZW1vaXplZFN0YXRlLGdoPWguc3RhdGVOb2RlLG9qPWdoLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKGguZWxlbWVudFR5cGU9PT1oLnR5cGU/RTpBZihoLnR5cGUsRSksdWEpO2doLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlPW9qfWJyZWFrO2Nhc2UgMzpjYXNlIDU6Y2FzZSA2OmNhc2UgNDpjYXNlIDE3OmJyZWFrO2RlZmF1bHQ6dGhyb3cgdChFcnJvcigxNjMpKTt9fVk9WS5uZXh0RWZmZWN0fX1jYXRjaCh6Yil7aWYobnVsbD09PVkpdGhyb3cgdChFcnJvcigzMzApKTtmaShZLHpiKTtZPVkubmV4dEVmZmVjdH13aGlsZShudWxsIT09WSk7WT1lO2RvIHRyeXtmb3IoST1iO251bGwhPT1ZOyl7dmFyIEE9WS5lZmZlY3RUYWc7QSYxNiYmd2UoWS5zdGF0ZU5vZGUsXCJcIik7aWYoQSYxMjgpe3ZhciBwPVkuYWx0ZXJuYXRlO2lmKG51bGwhPT1wKXt2YXIgcj1wLnJlZjtudWxsIT09ciYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiByP1xucihudWxsKTpyLmN1cnJlbnQ9bnVsbCl9fXN3aXRjaChBJjE0KXtjYXNlIDI6bmkoWSk7WS5lZmZlY3RUYWcmPS0zO2JyZWFrO2Nhc2UgNjpuaShZKTtZLmVmZmVjdFRhZyY9LTM7b2koWS5hbHRlcm5hdGUsWSk7YnJlYWs7Y2FzZSA0Om9pKFkuYWx0ZXJuYXRlLFkpO2JyZWFrO2Nhc2UgODpFPVk7a2koRSxJKTtFLnJldHVybj1udWxsO0UuY2hpbGQ9bnVsbDtFLm1lbW9pemVkU3RhdGU9bnVsbDtFLnVwZGF0ZVF1ZXVlPW51bGw7RS5kZXBlbmRlbmNpZXM9bnVsbDt2YXIgSz1FLmFsdGVybmF0ZTtudWxsIT09SyYmKEsucmV0dXJuPW51bGwsSy5jaGlsZD1udWxsLEsubWVtb2l6ZWRTdGF0ZT1udWxsLEsudXBkYXRlUXVldWU9bnVsbCxLLmRlcGVuZGVuY2llcz1udWxsKX1ZPVkubmV4dEVmZmVjdH19Y2F0Y2goemIpe2lmKG51bGw9PT1ZKXRocm93IHQoRXJyb3IoMzMwKSk7ZmkoWSx6Yik7WT1ZLm5leHRFZmZlY3R9d2hpbGUobnVsbCE9PVkpO3I9SWU7cD1hZSgpO0E9ci5mb2N1c2VkRWxlbTtcbkk9ci5zZWxlY3Rpb25SYW5nZTtpZihwIT09QSYmQSYmQS5vd25lckRvY3VtZW50JiYkZChBLm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LEEpKXtudWxsIT09SSYmYmUoQSkmJihwPUkuc3RhcnQscj1JLmVuZCx2b2lkIDA9PT1yJiYocj1wKSxcInNlbGVjdGlvblN0YXJ0XCJpbiBBPyhBLnNlbGVjdGlvblN0YXJ0PXAsQS5zZWxlY3Rpb25FbmQ9TWF0aC5taW4ocixBLnZhbHVlLmxlbmd0aCkpOihyPShwPUEub3duZXJEb2N1bWVudHx8ZG9jdW1lbnQpJiZwLmRlZmF1bHRWaWV3fHx3aW5kb3csci5nZXRTZWxlY3Rpb24mJihyPXIuZ2V0U2VsZWN0aW9uKCksRT1BLnRleHRDb250ZW50Lmxlbmd0aCxLPU1hdGgubWluKEkuc3RhcnQsRSksST12b2lkIDA9PT1JLmVuZD9LOk1hdGgubWluKEkuZW5kLEUpLCFyLmV4dGVuZCYmSz5JJiYoRT1JLEk9SyxLPUUpLEU9WmQoQSxLKSx1YT1aZChBLEkpLEUmJnVhJiYoMSE9PXIucmFuZ2VDb3VudHx8ci5hbmNob3JOb2RlIT09RS5ub2RlfHxyLmFuY2hvck9mZnNldCE9PVxuRS5vZmZzZXR8fHIuZm9jdXNOb2RlIT09dWEubm9kZXx8ci5mb2N1c09mZnNldCE9PXVhLm9mZnNldCkmJihwPXAuY3JlYXRlUmFuZ2UoKSxwLnNldFN0YXJ0KEUubm9kZSxFLm9mZnNldCksci5yZW1vdmVBbGxSYW5nZXMoKSxLPkk/KHIuYWRkUmFuZ2UocCksci5leHRlbmQodWEubm9kZSx1YS5vZmZzZXQpKToocC5zZXRFbmQodWEubm9kZSx1YS5vZmZzZXQpLHIuYWRkUmFuZ2UocCkpKSkpKTtwPVtdO2ZvcihyPUE7cj1yLnBhcmVudE5vZGU7KTE9PT1yLm5vZGVUeXBlJiZwLnB1c2goe2VsZW1lbnQ6cixsZWZ0OnIuc2Nyb2xsTGVmdCx0b3A6ci5zY3JvbGxUb3B9KTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgQS5mb2N1cyYmQS5mb2N1cygpO2ZvcihBPTA7QTxwLmxlbmd0aDtBKyspcj1wW0FdLHIuZWxlbWVudC5zY3JvbGxMZWZ0PXIubGVmdCxyLmVsZW1lbnQuc2Nyb2xsVG9wPXIudG9wfUllPW51bGw7UWQ9ISFIZTtIZT1udWxsO2EuY3VycmVudD1jO1k9ZTtkbyB0cnl7Zm9yKEE9ZDtudWxsIT09XG5ZOyl7dmFyICRhPVkuZWZmZWN0VGFnO2lmKCRhJjM2KXt2YXIgbmM9WS5hbHRlcm5hdGU7cD1ZO3I9QTtzd2l0Y2gocC50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6aGkoTWcsTmcscCk7YnJlYWs7Y2FzZSAxOnZhciBtZD1wLnN0YXRlTm9kZTtpZihwLmVmZmVjdFRhZyY0KWlmKG51bGw9PT1uYyltZC5jb21wb25lbnREaWRNb3VudCgpO2Vsc2V7dmFyIEZqPXAuZWxlbWVudFR5cGU9PT1wLnR5cGU/bmMubWVtb2l6ZWRQcm9wczpBZihwLnR5cGUsbmMubWVtb2l6ZWRQcm9wcyk7bWQuY29tcG9uZW50RGlkVXBkYXRlKEZqLG5jLm1lbW9pemVkU3RhdGUsbWQuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUpfXZhciBYaD1wLnVwZGF0ZVF1ZXVlO251bGwhPT1YaCYmWWYocCxYaCxtZCxyKTticmVhaztjYXNlIDM6dmFyIFloPXAudXBkYXRlUXVldWU7aWYobnVsbCE9PVloKXtLPW51bGw7aWYobnVsbCE9PXAuY2hpbGQpc3dpdGNoKHAuY2hpbGQudGFnKXtjYXNlIDU6Sz1cbnAuY2hpbGQuc3RhdGVOb2RlO2JyZWFrO2Nhc2UgMTpLPXAuY2hpbGQuc3RhdGVOb2RlfVlmKHAsWWgsSyxyKX1icmVhaztjYXNlIDU6dmFyIEdqPXAuc3RhdGVOb2RlO251bGw9PT1uYyYmcC5lZmZlY3RUYWcmNCYmKHI9R2osSmUocC50eXBlLHAubWVtb2l6ZWRQcm9wcykmJnIuZm9jdXMoKSk7YnJlYWs7Y2FzZSA2OmJyZWFrO2Nhc2UgNDpicmVhaztjYXNlIDEyOmJyZWFrO2Nhc2UgMTM6Y2FzZSAxOTpjYXNlIDE3OmNhc2UgMjA6YnJlYWs7ZGVmYXVsdDp0aHJvdyB0KEVycm9yKDE2MykpO319aWYoJGEmMTI4KXt2YXIgbmQ9WS5yZWY7aWYobnVsbCE9PW5kKXt2YXIgWmg9WS5zdGF0ZU5vZGU7c3dpdGNoKFkudGFnKXtjYXNlIDU6dmFyIGdmPVpoO2JyZWFrO2RlZmF1bHQ6Z2Y9Wmh9XCJmdW5jdGlvblwiPT09dHlwZW9mIG5kP25kKGdmKTpuZC5jdXJyZW50PWdmfX0kYSY1MTImJihQaT0hMCk7WT1ZLm5leHRFZmZlY3R9fWNhdGNoKHpiKXtpZihudWxsPT09WSl0aHJvdyB0KEVycm9yKDMzMCkpO1xuZmkoWSx6Yik7WT1ZLm5leHRFZmZlY3R9d2hpbGUobnVsbCE9PVkpO1k9bnVsbDtuZigpO1U9Zn1lbHNlIGEuY3VycmVudD1jO2lmKFBpKVBpPSExLFFpPWEsU2k9ZCxSaT1iO2Vsc2UgZm9yKFk9ZTtudWxsIT09WTspYj1ZLm5leHRFZmZlY3QsWS5uZXh0RWZmZWN0PW51bGwsWT1iO2I9YS5maXJzdFBlbmRpbmdUaW1lOzAhPT1iPygkYT1jZygpLCRhPXpmKCRhLGIpLFppKGEsJGEsYikpOnhpPW51bGw7XCJmdW5jdGlvblwiPT09dHlwZW9mIHBqJiZwaihjLnN0YXRlTm9kZSxkKTsxMDczNzQxODIzPT09Yj9hPT09Vmk/VWkrKzooVWk9MCxWaT1hKTpVaT0wO2lmKHVpKXRocm93IHVpPSExLGE9dmksdmk9bnVsbCxhO2lmKChVJkJpKSE9PVQpcmV0dXJuIG51bGw7TygpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gY2ooKXtpZihudWxsPT09UWkpcmV0dXJuITE7dmFyIGE9UWksYj1TaSxjPVJpO1FpPW51bGw7U2k9MDtSaT05MDtyZXR1cm4gdmYoOTc8Yz85NzpjLHFqLmJpbmQobnVsbCxhLGIpKX1mdW5jdGlvbiBxaihhKXtpZigoVSYoQ2l8RGkpKSE9PVQpdGhyb3cgdChFcnJvcigzMzEpKTt2YXIgYj1VO1V8PURpO2ZvcihhPWEuY3VycmVudC5maXJzdEVmZmVjdDtudWxsIT09YTspe3RyeXt2YXIgYz1hO2lmKDAhPT0oYy5lZmZlY3RUYWcmNTEyKSlzd2l0Y2goYy50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6aGkoUGcsSWcsYyksaGkoSWcsT2csYyl9fWNhdGNoKGQpe2lmKG51bGw9PT1hKXRocm93IHQoRXJyb3IoMzMwKSk7ZmkoYSxkKX1jPWEubmV4dEVmZmVjdDthLm5leHRFZmZlY3Q9bnVsbDthPWN9VT1iO08oKTtyZXR1cm4hMH1cbmZ1bmN0aW9uIHJqKGEsYixjKXtiPWJpKGMsYik7Yj10aShhLGIsMTA3Mzc0MTgyMyk7U2YoYSxiKTthPVlpKGEsMTA3Mzc0MTgyMyk7bnVsbCE9PWEmJlppKGEsOTksMTA3Mzc0MTgyMyl9ZnVuY3Rpb24gZmkoYSxiKXtpZigzPT09YS50YWcpcmooYSxhLGIpO2Vsc2UgZm9yKHZhciBjPWEucmV0dXJuO251bGwhPT1jOyl7aWYoMz09PWMudGFnKXtyaihjLGEsYik7YnJlYWt9ZWxzZSBpZigxPT09Yy50YWcpe3ZhciBkPWMuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT14aXx8IXhpLmhhcyhkKSkpe2E9YmkoYixhKTthPXdpKGMsYSwxMDczNzQxODIzKTtTZihjLGEpO2M9WWkoYywxMDczNzQxODIzKTtudWxsIT09YyYmWmkoYyw5OSwxMDczNzQxODIzKTticmVha319Yz1jLnJldHVybn19XG5mdW5jdGlvbiBraihhLGIsYyl7dmFyIGQ9YS5waW5nQ2FjaGU7bnVsbCE9PWQmJmQuZGVsZXRlKGIpO0ppPT09YSYmVz09PWM/WD09PUhpfHxYPT09R2kmJjEwNzM3NDE4MjM9PT1LaSYmc2YoKS1waTxPaT9oaihhLFcpOk5pPSEwOmEubGFzdFBlbmRpbmdUaW1lPGN8fChiPWEucGluZ1RpbWUsMCE9PWImJmI8Y3x8KGEucGluZ1RpbWU9YyxhLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU9PT1jJiYoYS5maW5pc2hlZEV4cGlyYXRpb25UaW1lPTAsYS5maW5pc2hlZFdvcms9bnVsbCksYj1jZygpLGI9emYoYixjKSxaaShhLGIsYykpKX1mdW5jdGlvbiByaShhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO251bGwhPT1jJiZjLmRlbGV0ZShiKTtjPWNnKCk7Yj1kZyhjLGEsbnVsbCk7Yz16ZihjLGIpO2E9WWkoYSxiKTtudWxsIT09YSYmWmkoYSxjLGIpfXZhciBtaj12b2lkIDA7XG5taj1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9Yi5leHBpcmF0aW9uVGltZTtpZihudWxsIT09YSl7dmFyIGU9Yi5wZW5kaW5nUHJvcHM7aWYoYS5tZW1vaXplZFByb3BzIT09ZXx8TS5jdXJyZW50KUxmPSEwO2Vsc2UgaWYoZDxjKXtMZj0hMTtzd2l0Y2goYi50YWcpe2Nhc2UgMzpOaChiKTtDaCgpO2JyZWFrO2Nhc2UgNTpDZyhiKTtpZihiLm1vZGUmNCYmMSE9PWMmJmUuaGlkZGVuKXJldHVybiBiLmV4cGlyYXRpb25UaW1lPWIuY2hpbGRFeHBpcmF0aW9uVGltZT0xLG51bGw7YnJlYWs7Y2FzZSAxOk4oYi50eXBlKSYmWGUoYik7YnJlYWs7Y2FzZSA0OkFnKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7YnJlYWs7Y2FzZSAxMDpIZihiLGIubWVtb2l6ZWRQcm9wcy52YWx1ZSk7YnJlYWs7Y2FzZSAxMzppZihudWxsIT09Yi5tZW1vaXplZFN0YXRlKXtkPWIuY2hpbGQuY2hpbGRFeHBpcmF0aW9uVGltZTtpZigwIT09ZCYmZD49YylyZXR1cm4gUGgoYSxiLGMpO0ooUCxQLmN1cnJlbnQmXG5FZyxiKTtiPUZoKGEsYixjKTtyZXR1cm4gbnVsbCE9PWI/Yi5zaWJsaW5nOm51bGx9SihQLFAuY3VycmVudCZFZyxiKTticmVhaztjYXNlIDE5OmQ9Yi5jaGlsZEV4cGlyYXRpb25UaW1lPj1jO2lmKDAhPT0oYS5lZmZlY3RUYWcmNjQpKXtpZihkKXJldHVybiBSaChhLGIsYyk7Yi5lZmZlY3RUYWd8PTY0fWU9Yi5tZW1vaXplZFN0YXRlO251bGwhPT1lJiYoZS5yZW5kZXJpbmc9bnVsbCxlLnRhaWw9bnVsbCk7SihQLFAuY3VycmVudCxiKTtpZighZClyZXR1cm4gbnVsbH1yZXR1cm4gRmgoYSxiLGMpfX1lbHNlIExmPSExO2IuZXhwaXJhdGlvblRpbWU9MDtzd2l0Y2goYi50YWcpe2Nhc2UgMjpkPWIudHlwZTtudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9Mik7YT1iLnBlbmRpbmdQcm9wcztlPVNlKGIsTC5jdXJyZW50KTtLZihiLGMpO2U9ZGgobnVsbCxiLGQsYSxlLGMpO2IuZWZmZWN0VGFnfD0xO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZSYmXG5udWxsIT09ZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGUucmVuZGVyJiZ2b2lkIDA9PT1lLiQkdHlwZW9mKXtiLnRhZz0xO2loKCk7aWYoTihkKSl7dmFyIGY9ITA7WGUoYil9ZWxzZSBmPSExO2IubWVtb2l6ZWRTdGF0ZT1udWxsIT09ZS5zdGF0ZSYmdm9pZCAwIT09ZS5zdGF0ZT9lLnN0YXRlOm51bGw7dmFyIGg9ZC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGgmJmJnKGIsZCxoLGEpO2UudXBkYXRlcj1mZztiLnN0YXRlTm9kZT1lO2UuX3JlYWN0SW50ZXJuYWxGaWJlcj1iO2pnKGIsZCxhLGMpO2I9TWgobnVsbCxiLGQsITAsZixjKX1lbHNlIGIudGFnPTAsUyhudWxsLGIsZSxjKSxiPWIuY2hpbGQ7cmV0dXJuIGI7Y2FzZSAxNjplPWIuZWxlbWVudFR5cGU7bnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpO2E9Yi5wZW5kaW5nUHJvcHM7ZT1CZihlKTtiLnR5cGU9ZTtmPWIudGFnPXNqKGUpO1xuYT1BZihlLGEpO3N3aXRjaChmKXtjYXNlIDA6Yj1KaChudWxsLGIsZSxhLGMpO2JyZWFrO2Nhc2UgMTpiPUxoKG51bGwsYixlLGEsYyk7YnJlYWs7Y2FzZSAxMTpiPUVoKG51bGwsYixlLGEsYyk7YnJlYWs7Y2FzZSAxNDpiPUdoKG51bGwsYixlLEFmKGUudHlwZSxhKSxkLGMpO2JyZWFrO2RlZmF1bHQ6dGhyb3cgdChFcnJvcigzMDYpLGUsXCJcIik7fXJldHVybiBiO2Nhc2UgMDpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6QWYoZCxlKSxKaChhLGIsZCxlLGMpO2Nhc2UgMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6QWYoZCxlKSxMaChhLGIsZCxlLGMpO2Nhc2UgMzpOaChiKTtkPWIudXBkYXRlUXVldWU7aWYobnVsbD09PWQpdGhyb3cgdChFcnJvcigyODIpKTtlPWIubWVtb2l6ZWRTdGF0ZTtlPW51bGwhPT1lP2UuZWxlbWVudDpudWxsO1dmKGIsZCxiLnBlbmRpbmdQcm9wcyxcbm51bGwsYyk7ZD1iLm1lbW9pemVkU3RhdGUuZWxlbWVudDtpZihkPT09ZSlDaCgpLGI9RmgoYSxiLGMpO2Vsc2V7ZT1iLnN0YXRlTm9kZTtpZihlPShudWxsPT09YXx8bnVsbD09PWEuY2hpbGQpJiZlLmh5ZHJhdGUpdWg9TmUoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mby5maXJzdENoaWxkKSx0aD1iLGU9dmg9ITA7ZT8oYi5lZmZlY3RUYWd8PTIsYi5jaGlsZD11ZyhiLG51bGwsZCxjKSk6KFMoYSxiLGQsYyksQ2goKSk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgNTpyZXR1cm4gQ2coYiksbnVsbD09PWEmJnpoKGIpLGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZj1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6bnVsbCxoPWUuY2hpbGRyZW4sS2UoZCxlKT9oPW51bGw6bnVsbCE9PWYmJktlKGQsZikmJihiLmVmZmVjdFRhZ3w9MTYpLEtoKGEsYiksYi5tb2RlJjQmJjEhPT1jJiZlLmhpZGRlbj8oYi5leHBpcmF0aW9uVGltZT1iLmNoaWxkRXhwaXJhdGlvblRpbWU9MSxiPW51bGwpOlxuKFMoYSxiLGgsYyksYj1iLmNoaWxkKSxiO2Nhc2UgNjpyZXR1cm4gbnVsbD09PWEmJnpoKGIpLG51bGw7Y2FzZSAxMzpyZXR1cm4gUGgoYSxiLGMpO2Nhc2UgNDpyZXR1cm4gQWcoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxkPWIucGVuZGluZ1Byb3BzLG51bGw9PT1hP2IuY2hpbGQ9dGcoYixudWxsLGQsYyk6UyhhLGIsZCxjKSxiLmNoaWxkO2Nhc2UgMTE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOkFmKGQsZSksRWgoYSxiLGQsZSxjKTtjYXNlIDc6cmV0dXJuIFMoYSxiLGIucGVuZGluZ1Byb3BzLGMpLGIuY2hpbGQ7Y2FzZSA4OnJldHVybiBTKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixjKSxiLmNoaWxkO2Nhc2UgMTI6cmV0dXJuIFMoYSxiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLGMpLGIuY2hpbGQ7Y2FzZSAxMDphOntkPWIudHlwZS5fY29udGV4dDtlPWIucGVuZGluZ1Byb3BzO2g9Yi5tZW1vaXplZFByb3BzO1xuZj1lLnZhbHVlO0hmKGIsZik7aWYobnVsbCE9PWgpe3ZhciBnPWgudmFsdWU7Zj1oZChnLGYpPzA6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLl9jYWxjdWxhdGVDaGFuZ2VkQml0cz9kLl9jYWxjdWxhdGVDaGFuZ2VkQml0cyhnLGYpOjEwNzM3NDE4MjMpfDA7aWYoMD09PWYpe2lmKGguY2hpbGRyZW49PT1lLmNoaWxkcmVuJiYhTS5jdXJyZW50KXtiPUZoKGEsYixjKTticmVhayBhfX1lbHNlIGZvcihnPWIuY2hpbGQsbnVsbCE9PWcmJihnLnJldHVybj1iKTtudWxsIT09Zzspe3ZhciBrPWcuZGVwZW5kZW5jaWVzO2lmKG51bGwhPT1rKXtoPWcuY2hpbGQ7Zm9yKHZhciBsPWsuZmlyc3RDb250ZXh0O251bGwhPT1sOyl7aWYobC5jb250ZXh0PT09ZCYmMCE9PShsLm9ic2VydmVkQml0cyZmKSl7MT09PWcudGFnJiYobD1RZihjLG51bGwpLGwudGFnPTIsU2YoZyxsKSk7Zy5leHBpcmF0aW9uVGltZTxjJiYoZy5leHBpcmF0aW9uVGltZT1jKTtsPWcuYWx0ZXJuYXRlO251bGwhPT1sJiZsLmV4cGlyYXRpb25UaW1lPFxuYyYmKGwuZXhwaXJhdGlvblRpbWU9Yyk7SmYoZy5yZXR1cm4sYyk7ay5leHBpcmF0aW9uVGltZTxjJiYoay5leHBpcmF0aW9uVGltZT1jKTticmVha31sPWwubmV4dH19ZWxzZSBoPTEwPT09Zy50YWc/Zy50eXBlPT09Yi50eXBlP251bGw6Zy5jaGlsZDpnLmNoaWxkO2lmKG51bGwhPT1oKWgucmV0dXJuPWc7ZWxzZSBmb3IoaD1nO251bGwhPT1oOyl7aWYoaD09PWIpe2g9bnVsbDticmVha31nPWguc2libGluZztpZihudWxsIT09Zyl7Zy5yZXR1cm49aC5yZXR1cm47aD1nO2JyZWFrfWg9aC5yZXR1cm59Zz1ofX1TKGEsYixlLmNoaWxkcmVuLGMpO2I9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDk6cmV0dXJuIGU9Yi50eXBlLGY9Yi5wZW5kaW5nUHJvcHMsZD1mLmNoaWxkcmVuLEtmKGIsYyksZT1NZihlLGYudW5zdGFibGVfb2JzZXJ2ZWRCaXRzKSxkPWQoZSksYi5lZmZlY3RUYWd8PTEsUyhhLGIsZCxjKSxiLmNoaWxkO2Nhc2UgMTQ6cmV0dXJuIGU9Yi50eXBlLGY9QWYoZSxiLnBlbmRpbmdQcm9wcyksXG5mPUFmKGUudHlwZSxmKSxHaChhLGIsZSxmLGQsYyk7Y2FzZSAxNTpyZXR1cm4gSWgoYSxiLGIudHlwZSxiLnBlbmRpbmdQcm9wcyxkLGMpO2Nhc2UgMTc6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOkFmKGQsZSksbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpLGIudGFnPTEsTihkKT8oYT0hMCxYZShiKSk6YT0hMSxLZihiLGMpLGhnKGIsZCxlLGMpLGpnKGIsZCxlLGMpLE1oKG51bGwsYixkLCEwLGEsYyk7Y2FzZSAxOTpyZXR1cm4gUmgoYSxiLGMpfXRocm93IHQoRXJyb3IoMTU2KSk7fTt2YXIgcGo9bnVsbCxqaT1udWxsO1xuZnVuY3Rpb24gdGooYSl7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18pcmV0dXJuITE7dmFyIGI9X19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fO2lmKGIuaXNEaXNhYmxlZHx8IWIuc3VwcG9ydHNGaWJlcilyZXR1cm4hMDt0cnl7dmFyIGM9Yi5pbmplY3QoYSk7cGo9ZnVuY3Rpb24oYSl7dHJ5e2Iub25Db21taXRGaWJlclJvb3QoYyxhLHZvaWQgMCw2ND09PShhLmN1cnJlbnQuZWZmZWN0VGFnJjY0KSl9Y2F0Y2goZSl7fX07amk9ZnVuY3Rpb24oYSl7dHJ5e2Iub25Db21taXRGaWJlclVubW91bnQoYyxhKX1jYXRjaChlKXt9fX1jYXRjaChkKXt9cmV0dXJuITB9XG5mdW5jdGlvbiB1aihhLGIsYyxkKXt0aGlzLnRhZz1hO3RoaXMua2V5PWM7dGhpcy5zaWJsaW5nPXRoaXMuY2hpbGQ9dGhpcy5yZXR1cm49dGhpcy5zdGF0ZU5vZGU9dGhpcy50eXBlPXRoaXMuZWxlbWVudFR5cGU9bnVsbDt0aGlzLmluZGV4PTA7dGhpcy5yZWY9bnVsbDt0aGlzLnBlbmRpbmdQcm9wcz1iO3RoaXMuZGVwZW5kZW5jaWVzPXRoaXMubWVtb2l6ZWRTdGF0ZT10aGlzLnVwZGF0ZVF1ZXVlPXRoaXMubWVtb2l6ZWRQcm9wcz1udWxsO3RoaXMubW9kZT1kO3RoaXMuZWZmZWN0VGFnPTA7dGhpcy5sYXN0RWZmZWN0PXRoaXMuZmlyc3RFZmZlY3Q9dGhpcy5uZXh0RWZmZWN0PW51bGw7dGhpcy5jaGlsZEV4cGlyYXRpb25UaW1lPXRoaXMuZXhwaXJhdGlvblRpbWU9MDt0aGlzLmFsdGVybmF0ZT1udWxsfWZ1bmN0aW9uIHhoKGEsYixjLGQpe3JldHVybiBuZXcgdWooYSxiLGMsZCl9XG5mdW5jdGlvbiBIaChhKXthPWEucHJvdG90eXBlO3JldHVybiEoIWF8fCFhLmlzUmVhY3RDb21wb25lbnQpfWZ1bmN0aW9uIHNqKGEpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBIaChhKT8xOjA7aWYodm9pZCAwIT09YSYmbnVsbCE9PWEpe2E9YS4kJHR5cGVvZjtpZihhPT09Z2MpcmV0dXJuIDExO2lmKGE9PT1qYylyZXR1cm4gMTR9cmV0dXJuIDJ9XG5mdW5jdGlvbiBvZyhhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO251bGw9PT1jPyhjPXhoKGEudGFnLGIsYS5rZXksYS5tb2RlKSxjLmVsZW1lbnRUeXBlPWEuZWxlbWVudFR5cGUsYy50eXBlPWEudHlwZSxjLnN0YXRlTm9kZT1hLnN0YXRlTm9kZSxjLmFsdGVybmF0ZT1hLGEuYWx0ZXJuYXRlPWMpOihjLnBlbmRpbmdQcm9wcz1iLGMuZWZmZWN0VGFnPTAsYy5uZXh0RWZmZWN0PW51bGwsYy5maXJzdEVmZmVjdD1udWxsLGMubGFzdEVmZmVjdD1udWxsKTtjLmNoaWxkRXhwaXJhdGlvblRpbWU9YS5jaGlsZEV4cGlyYXRpb25UaW1lO2MuZXhwaXJhdGlvblRpbWU9YS5leHBpcmF0aW9uVGltZTtjLmNoaWxkPWEuY2hpbGQ7Yy5tZW1vaXplZFByb3BzPWEubWVtb2l6ZWRQcm9wcztjLm1lbW9pemVkU3RhdGU9YS5tZW1vaXplZFN0YXRlO2MudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZTtiPWEuZGVwZW5kZW5jaWVzO2MuZGVwZW5kZW5jaWVzPW51bGw9PT1iP251bGw6e2V4cGlyYXRpb25UaW1lOmIuZXhwaXJhdGlvblRpbWUsXG5maXJzdENvbnRleHQ6Yi5maXJzdENvbnRleHQscmVzcG9uZGVyczpiLnJlc3BvbmRlcnN9O2Muc2libGluZz1hLnNpYmxpbmc7Yy5pbmRleD1hLmluZGV4O2MucmVmPWEucmVmO3JldHVybiBjfVxuZnVuY3Rpb24gcWcoYSxiLGMsZCxlLGYpe3ZhciBoPTI7ZD1hO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKUhoKGEpJiYoaD0xKTtlbHNlIGlmKFwic3RyaW5nXCI9PT10eXBlb2YgYSloPTU7ZWxzZSBhOnN3aXRjaChhKXtjYXNlIGFjOnJldHVybiBzZyhjLmNoaWxkcmVuLGUsZixiKTtjYXNlIGZjOmg9ODtlfD03O2JyZWFrO2Nhc2UgYmM6aD04O2V8PTE7YnJlYWs7Y2FzZSBjYzpyZXR1cm4gYT14aCgxMixjLGIsZXw4KSxhLmVsZW1lbnRUeXBlPWNjLGEudHlwZT1jYyxhLmV4cGlyYXRpb25UaW1lPWYsYTtjYXNlIGhjOnJldHVybiBhPXhoKDEzLGMsYixlKSxhLnR5cGU9aGMsYS5lbGVtZW50VHlwZT1oYyxhLmV4cGlyYXRpb25UaW1lPWYsYTtjYXNlIGljOnJldHVybiBhPXhoKDE5LGMsYixlKSxhLmVsZW1lbnRUeXBlPWljLGEuZXhwaXJhdGlvblRpbWU9ZixhO2RlZmF1bHQ6aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBkYzpoPVxuMTA7YnJlYWsgYTtjYXNlIGVjOmg9OTticmVhayBhO2Nhc2UgZ2M6aD0xMTticmVhayBhO2Nhc2UgamM6aD0xNDticmVhayBhO2Nhc2Uga2M6aD0xNjtkPW51bGw7YnJlYWsgYX10aHJvdyB0KEVycm9yKDEzMCksbnVsbD09YT9hOnR5cGVvZiBhLFwiXCIpO31iPXhoKGgsYyxiLGUpO2IuZWxlbWVudFR5cGU9YTtiLnR5cGU9ZDtiLmV4cGlyYXRpb25UaW1lPWY7cmV0dXJuIGJ9ZnVuY3Rpb24gc2coYSxiLGMsZCl7YT14aCg3LGEsZCxiKTthLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGF9ZnVuY3Rpb24gcGcoYSxiLGMpe2E9eGgoNixhLG51bGwsYik7YS5leHBpcmF0aW9uVGltZT1jO3JldHVybiBhfVxuZnVuY3Rpb24gcmcoYSxiLGMpe2I9eGgoNCxudWxsIT09YS5jaGlsZHJlbj9hLmNoaWxkcmVuOltdLGEua2V5LGIpO2IuZXhwaXJhdGlvblRpbWU9YztiLnN0YXRlTm9kZT17Y29udGFpbmVySW5mbzphLmNvbnRhaW5lckluZm8scGVuZGluZ0NoaWxkcmVuOm51bGwsaW1wbGVtZW50YXRpb246YS5pbXBsZW1lbnRhdGlvbn07cmV0dXJuIGJ9XG5mdW5jdGlvbiB2aihhLGIsYyl7dGhpcy50YWc9Yjt0aGlzLmN1cnJlbnQ9bnVsbDt0aGlzLmNvbnRhaW5lckluZm89YTt0aGlzLnBpbmdDYWNoZT10aGlzLnBlbmRpbmdDaGlsZHJlbj1udWxsO3RoaXMuZmluaXNoZWRFeHBpcmF0aW9uVGltZT0wO3RoaXMuZmluaXNoZWRXb3JrPW51bGw7dGhpcy50aW1lb3V0SGFuZGxlPS0xO3RoaXMucGVuZGluZ0NvbnRleHQ9dGhpcy5jb250ZXh0PW51bGw7dGhpcy5oeWRyYXRlPWM7dGhpcy5jYWxsYmFja05vZGU9dGhpcy5maXJzdEJhdGNoPW51bGw7dGhpcy5waW5nVGltZT10aGlzLmxhc3RQZW5kaW5nVGltZT10aGlzLmZpcnN0UGVuZGluZ1RpbWU9dGhpcy5jYWxsYmFja0V4cGlyYXRpb25UaW1lPTB9ZnVuY3Rpb24gd2ooYSxiLGMpe2E9bmV3IHZqKGEsYixjKTtiPXhoKDMsbnVsbCxudWxsLDI9PT1iPzc6MT09PWI/MzowKTthLmN1cnJlbnQ9YjtyZXR1cm4gYi5zdGF0ZU5vZGU9YX1cbmZ1bmN0aW9uIHhqKGEsYixjLGQsZSxmKXt2YXIgaD1iLmN1cnJlbnQ7YTppZihjKXtjPWMuX3JlYWN0SW50ZXJuYWxGaWJlcjtiOntpZigyIT09bGQoYyl8fDEhPT1jLnRhZyl0aHJvdyB0KEVycm9yKDE3MCkpO3ZhciBnPWM7ZG97c3dpdGNoKGcudGFnKXtjYXNlIDM6Zz1nLnN0YXRlTm9kZS5jb250ZXh0O2JyZWFrIGI7Y2FzZSAxOmlmKE4oZy50eXBlKSl7Zz1nLnN0YXRlTm9kZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dDticmVhayBifX1nPWcucmV0dXJufXdoaWxlKG51bGwhPT1nKTt0aHJvdyB0KEVycm9yKDE3MSkpO31pZigxPT09Yy50YWcpe3ZhciBrPWMudHlwZTtpZihOKGspKXtjPVdlKGMsayxnKTticmVhayBhfX1jPWd9ZWxzZSBjPVFlO251bGw9PT1iLmNvbnRleHQ/Yi5jb250ZXh0PWM6Yi5wZW5kaW5nQ29udGV4dD1jO2I9ZjtlPVFmKGQsZSk7ZS5wYXlsb2FkPXtlbGVtZW50OmF9O2I9dm9pZCAwPT09Yj9udWxsOmI7bnVsbCE9PWImJlxuKGUuY2FsbGJhY2s9Yik7U2YoaCxlKTtlZyhoLGQpO3JldHVybiBkfWZ1bmN0aW9uIHlqKGEsYixjLGQpe3ZhciBlPWIuY3VycmVudCxmPWNnKCksaD0kZi5zdXNwZW5zZTtlPWRnKGYsZSxoKTtyZXR1cm4geGooYSxiLGMsZSxoLGQpfWZ1bmN0aW9uIHpqKGEpe2E9YS5jdXJyZW50O2lmKCFhLmNoaWxkKXJldHVybiBudWxsO3N3aXRjaChhLmNoaWxkLnRhZyl7Y2FzZSA1OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZTtkZWZhdWx0OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZX19ZnVuY3Rpb24gQWooYSxiLGMpe3ZhciBkPTM8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpudWxsO3JldHVybnskJHR5cGVvZjokYixrZXk6bnVsbD09ZD9udWxsOlwiXCIrZCxjaGlsZHJlbjphLGNvbnRhaW5lckluZm86YixpbXBsZW1lbnRhdGlvbjpjfX1cbkRiPWZ1bmN0aW9uKGEsYixjKXtzd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6RWMoYSxjKTtiPWMubmFtZTtpZihcInJhZGlvXCI9PT1jLnR5cGUmJm51bGwhPWIpe2ZvcihjPWE7Yy5wYXJlbnROb2RlOyljPWMucGFyZW50Tm9kZTtjPWMucXVlcnlTZWxlY3RvckFsbChcImlucHV0W25hbWU9XCIrSlNPTi5zdHJpbmdpZnkoXCJcIitiKSsnXVt0eXBlPVwicmFkaW9cIl0nKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKXt2YXIgZD1jW2JdO2lmKGQhPT1hJiZkLmZvcm09PT1hLmZvcm0pe3ZhciBlPUthKGQpO2lmKCFlKXRocm93IHQoRXJyb3IoOTApKTtXYihkKTtFYyhkLGUpfX19YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6cGUoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1jLnZhbHVlLG51bGwhPWImJm1lKGEsISFjLm11bHRpcGxlLGIsITEpfX07XG5mdW5jdGlvbiBCaihhKXt2YXIgYj0xMDczNzQxODIxLTI1KigoKDEwNzM3NDE4MjEtY2coKSs1MDApLzI1fDApKzEpO2I8PVhpJiYtLWI7dGhpcy5fZXhwaXJhdGlvblRpbWU9WGk9Yjt0aGlzLl9yb290PWE7dGhpcy5fY2FsbGJhY2tzPXRoaXMuX25leHQ9bnVsbDt0aGlzLl9oYXNDaGlsZHJlbj10aGlzLl9kaWRDb21wbGV0ZT0hMTt0aGlzLl9jaGlsZHJlbj1udWxsO3RoaXMuX2RlZmVyPSEwfUJqLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSl7aWYoIXRoaXMuX2RlZmVyKXRocm93IHQoRXJyb3IoMjUwKSk7dGhpcy5faGFzQ2hpbGRyZW49ITA7dGhpcy5fY2hpbGRyZW49YTt2YXIgYj10aGlzLl9yb290Ll9pbnRlcm5hbFJvb3QsYz10aGlzLl9leHBpcmF0aW9uVGltZSxkPW5ldyBDajt4aihhLGIsbnVsbCxjLG51bGwsZC5fb25Db21taXQpO3JldHVybiBkfTtcbkJqLnByb3RvdHlwZS50aGVuPWZ1bmN0aW9uKGEpe2lmKHRoaXMuX2RpZENvbXBsZXRlKWEoKTtlbHNle3ZhciBiPXRoaXMuX2NhbGxiYWNrcztudWxsPT09YiYmKGI9dGhpcy5fY2FsbGJhY2tzPVtdKTtiLnB1c2goYSl9fTtcbkJqLnByb3RvdHlwZS5jb21taXQ9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLl9yb290Ll9pbnRlcm5hbFJvb3QsYj1hLmZpcnN0QmF0Y2g7aWYoIXRoaXMuX2RlZmVyfHxudWxsPT09Yil0aHJvdyB0KEVycm9yKDI1MSkpO2lmKHRoaXMuX2hhc0NoaWxkcmVuKXt2YXIgYz10aGlzLl9leHBpcmF0aW9uVGltZTtpZihiIT09dGhpcyl7dGhpcy5faGFzQ2hpbGRyZW4mJihjPXRoaXMuX2V4cGlyYXRpb25UaW1lPWIuX2V4cGlyYXRpb25UaW1lLHRoaXMucmVuZGVyKHRoaXMuX2NoaWxkcmVuKSk7Zm9yKHZhciBkPW51bGwsZT1iO2UhPT10aGlzOylkPWUsZT1lLl9uZXh0O2lmKG51bGw9PT1kKXRocm93IHQoRXJyb3IoMjUxKSk7ZC5fbmV4dD1lLl9uZXh0O3RoaXMuX25leHQ9YjthLmZpcnN0QmF0Y2g9dGhpc310aGlzLl9kZWZlcj0hMTtiPWM7aWYoKFUmKENpfERpKSkhPT1UKXRocm93IHQoRXJyb3IoMjUzKSk7eGYoWi5iaW5kKG51bGwsYSxiKSk7TygpO2I9dGhpcy5fbmV4dDt0aGlzLl9uZXh0PVxubnVsbDtiPWEuZmlyc3RCYXRjaD1iO251bGwhPT1iJiZiLl9oYXNDaGlsZHJlbiYmYi5yZW5kZXIoYi5fY2hpbGRyZW4pfWVsc2UgdGhpcy5fbmV4dD1udWxsLHRoaXMuX2RlZmVyPSExfTtCai5wcm90b3R5cGUuX29uQ29tcGxldGU9ZnVuY3Rpb24oKXtpZighdGhpcy5fZGlkQ29tcGxldGUpe3RoaXMuX2RpZENvbXBsZXRlPSEwO3ZhciBhPXRoaXMuX2NhbGxiYWNrcztpZihudWxsIT09YSlmb3IodmFyIGI9MDtiPGEubGVuZ3RoO2IrKykoMCxhW2JdKSgpfX07ZnVuY3Rpb24gQ2ooKXt0aGlzLl9jYWxsYmFja3M9bnVsbDt0aGlzLl9kaWRDb21taXQ9ITE7dGhpcy5fb25Db21taXQ9dGhpcy5fb25Db21taXQuYmluZCh0aGlzKX1Dai5wcm90b3R5cGUudGhlbj1mdW5jdGlvbihhKXtpZih0aGlzLl9kaWRDb21taXQpYSgpO2Vsc2V7dmFyIGI9dGhpcy5fY2FsbGJhY2tzO251bGw9PT1iJiYoYj10aGlzLl9jYWxsYmFja3M9W10pO2IucHVzaChhKX19O1xuQ2oucHJvdG90eXBlLl9vbkNvbW1pdD1mdW5jdGlvbigpe2lmKCF0aGlzLl9kaWRDb21taXQpe3RoaXMuX2RpZENvbW1pdD0hMDt2YXIgYT10aGlzLl9jYWxsYmFja3M7aWYobnVsbCE9PWEpZm9yKHZhciBiPTA7YjxhLmxlbmd0aDtiKyspe3ZhciBjPWFbYl07aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGMpdGhyb3cgdChFcnJvcigxOTEpLGMpO2MoKX19fTtmdW5jdGlvbiBEaihhLGIsYyl7dGhpcy5faW50ZXJuYWxSb290PXdqKGEsYixjKX1mdW5jdGlvbiBFaihhLGIpe3RoaXMuX2ludGVybmFsUm9vdD13aihhLDIsYil9RWoucHJvdG90eXBlLnJlbmRlcj1Eai5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcy5faW50ZXJuYWxSb290LGQ9bmV3IENqO2I9dm9pZCAwPT09Yj9udWxsOmI7bnVsbCE9PWImJmQudGhlbihiKTt5aihhLGMsbnVsbCxkLl9vbkNvbW1pdCk7cmV0dXJuIGR9O1xuRWoucHJvdG90eXBlLnVubW91bnQ9RGoucHJvdG90eXBlLnVubW91bnQ9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5faW50ZXJuYWxSb290LGM9bmV3IENqO2E9dm9pZCAwPT09YT9udWxsOmE7bnVsbCE9PWEmJmMudGhlbihhKTt5aihudWxsLGIsbnVsbCxjLl9vbkNvbW1pdCk7cmV0dXJuIGN9O0VqLnByb3RvdHlwZS5jcmVhdGVCYXRjaD1mdW5jdGlvbigpe3ZhciBhPW5ldyBCaih0aGlzKSxiPWEuX2V4cGlyYXRpb25UaW1lLGM9dGhpcy5faW50ZXJuYWxSb290LGQ9Yy5maXJzdEJhdGNoO2lmKG51bGw9PT1kKWMuZmlyc3RCYXRjaD1hLGEuX25leHQ9bnVsbDtlbHNle2ZvcihjPW51bGw7bnVsbCE9PWQmJmQuX2V4cGlyYXRpb25UaW1lPj1iOyljPWQsZD1kLl9uZXh0O2EuX25leHQ9ZDtudWxsIT09YyYmKGMuX25leHQ9YSl9cmV0dXJuIGF9O1xuZnVuY3Rpb24gSGooYSl7cmV0dXJuISghYXx8MSE9PWEubm9kZVR5cGUmJjkhPT1hLm5vZGVUeXBlJiYxMSE9PWEubm9kZVR5cGUmJig4IT09YS5ub2RlVHlwZXx8XCIgcmVhY3QtbW91bnQtcG9pbnQtdW5zdGFibGUgXCIhPT1hLm5vZGVWYWx1ZSkpfUpiPWVqO0tiPWZqO0xiPWFqO01iPWZ1bmN0aW9uKGEsYil7dmFyIGM9VTtVfD0yO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e1U9YyxVPT09VCYmTygpfX07ZnVuY3Rpb24gSWooYSxiKXtifHwoYj1hPzk9PT1hLm5vZGVUeXBlP2EuZG9jdW1lbnRFbGVtZW50OmEuZmlyc3RDaGlsZDpudWxsLGI9ISghYnx8MSE9PWIubm9kZVR5cGV8fCFiLmhhc0F0dHJpYnV0ZShcImRhdGEtcmVhY3Ryb290XCIpKSk7aWYoIWIpZm9yKHZhciBjO2M9YS5sYXN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYyk7cmV0dXJuIG5ldyBEaihhLDAsYil9XG5mdW5jdGlvbiBKaihhLGIsYyxkLGUpe3ZhciBmPWMuX3JlYWN0Um9vdENvbnRhaW5lcixoPXZvaWQgMDtpZihmKXtoPWYuX2ludGVybmFsUm9vdDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGc9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9emooaCk7Zy5jYWxsKGEpfX15aihiLGgsYSxlKX1lbHNle2Y9Yy5fcmVhY3RSb290Q29udGFpbmVyPUlqKGMsZCk7aD1mLl9pbnRlcm5hbFJvb3Q7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBrPWU7ZT1mdW5jdGlvbigpe3ZhciBhPXpqKGgpO2suY2FsbChhKX19Z2ooZnVuY3Rpb24oKXt5aihiLGgsYSxlKX0pfXJldHVybiB6aihoKX1mdW5jdGlvbiBLaihhLGIpe3ZhciBjPTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpudWxsO2lmKCFIaihiKSl0aHJvdyB0KEVycm9yKDIwMCkpO3JldHVybiBBaihhLGIsbnVsbCxjKX1cbnZhciBOaj17Y3JlYXRlUG9ydGFsOktqLGZpbmRET01Ob2RlOmZ1bmN0aW9uKGEpe2lmKG51bGw9PWEpYT1udWxsO2Vsc2UgaWYoMSE9PWEubm9kZVR5cGUpe3ZhciBiPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjtpZih2b2lkIDA9PT1iKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5yZW5kZXIpdGhyb3cgdChFcnJvcigxODgpKTt0aHJvdyB0KEVycm9yKDI2OCksT2JqZWN0LmtleXMoYSkpO31hPXFkKGIpO2E9bnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZX1yZXR1cm4gYX0saHlkcmF0ZTpmdW5jdGlvbihhLGIsYyl7aWYoIUhqKGIpKXRocm93IHQoRXJyb3IoMjAwKSk7cmV0dXJuIEpqKG51bGwsYSxiLCEwLGMpfSxyZW5kZXI6ZnVuY3Rpb24oYSxiLGMpe2lmKCFIaihiKSl0aHJvdyB0KEVycm9yKDIwMCkpO3JldHVybiBKaihudWxsLGEsYiwhMSxjKX0sdW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI6ZnVuY3Rpb24oYSxiLGMsZCl7aWYoIUhqKGMpKXRocm93IHQoRXJyb3IoMjAwKSk7XG5pZihudWxsPT1hfHx2b2lkIDA9PT1hLl9yZWFjdEludGVybmFsRmliZXIpdGhyb3cgdChFcnJvcigzOCkpO3JldHVybiBKaihhLGIsYywhMSxkKX0sdW5tb3VudENvbXBvbmVudEF0Tm9kZTpmdW5jdGlvbihhKXtpZighSGooYSkpdGhyb3cgdChFcnJvcig0MCkpO3JldHVybiBhLl9yZWFjdFJvb3RDb250YWluZXI/KGdqKGZ1bmN0aW9uKCl7SmoobnVsbCxudWxsLGEsITEsZnVuY3Rpb24oKXthLl9yZWFjdFJvb3RDb250YWluZXI9bnVsbH0pfSksITApOiExfSx1bnN0YWJsZV9jcmVhdGVQb3J0YWw6ZnVuY3Rpb24oKXtyZXR1cm4gS2ouYXBwbHkodm9pZCAwLGFyZ3VtZW50cyl9LHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzOmVqLHVuc3RhYmxlX2ludGVyYWN0aXZlVXBkYXRlczpmdW5jdGlvbihhLGIsYyxkKXthaigpO3JldHVybiBmaihhLGIsYyxkKX0sdW5zdGFibGVfZGlzY3JldGVVcGRhdGVzOmZqLHVuc3RhYmxlX2ZsdXNoRGlzY3JldGVVcGRhdGVzOmFqLGZsdXNoU3luYzpmdW5jdGlvbihhLFxuYil7aWYoKFUmKENpfERpKSkhPT1UKXRocm93IHQoRXJyb3IoMTg3KSk7dmFyIGM9VTtVfD0xO3RyeXtyZXR1cm4gdmYoOTksYS5iaW5kKG51bGwsYikpfWZpbmFsbHl7VT1jLE8oKX19LHVuc3RhYmxlX2NyZWF0ZVJvb3Q6TGosdW5zdGFibGVfY3JlYXRlU3luY1Jvb3Q6TWosdW5zdGFibGVfZmx1c2hDb250cm9sbGVkOmZ1bmN0aW9uKGEpe3ZhciBiPVU7VXw9MTt0cnl7dmYoOTksYSl9ZmluYWxseXtVPWIsVT09PVQmJk8oKX19LF9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEOntFdmVudHM6W0lhLEphLEthLENhLmluamVjdEV2ZW50UGx1Z2luc0J5TmFtZSxmYSxRYSxmdW5jdGlvbihhKXt5YShhLFBhKX0sSGIsSWIsVWQsQmEsY2ose2N1cnJlbnQ6ITF9XX19O1xuZnVuY3Rpb24gTGooYSxiKXtpZighSGooYSkpdGhyb3cgdChFcnJvcigyOTkpLFwidW5zdGFibGVfY3JlYXRlUm9vdFwiKTtyZXR1cm4gbmV3IEVqKGEsbnVsbCE9YiYmITA9PT1iLmh5ZHJhdGUpfWZ1bmN0aW9uIE1qKGEsYil7aWYoIUhqKGEpKXRocm93IHQoRXJyb3IoMjk5KSxcInVuc3RhYmxlX2NyZWF0ZVJvb3RcIik7cmV0dXJuIG5ldyBEaihhLDEsbnVsbCE9YiYmITA9PT1iLmh5ZHJhdGUpfVxuKGZ1bmN0aW9uKGEpe3ZhciBiPWEuZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U7cmV0dXJuIHRqKG0oe30sYSx7b3ZlcnJpZGVIb29rU3RhdGU6bnVsbCxvdmVycmlkZVByb3BzOm51bGwsc2V0U3VzcGVuc2VIYW5kbGVyOm51bGwsc2NoZWR1bGVVcGRhdGU6bnVsbCxjdXJyZW50RGlzcGF0Y2hlclJlZjpYYi5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLGZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyOmZ1bmN0aW9uKGEpe2E9cWQoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOmZ1bmN0aW9uKGEpe3JldHVybiBiP2IoYSk6bnVsbH0sZmluZEhvc3RJbnN0YW5jZXNGb3JSZWZyZXNoOm51bGwsc2NoZWR1bGVSZWZyZXNoOm51bGwsc2NoZWR1bGVSb290Om51bGwsc2V0UmVmcmVzaEhhbmRsZXI6bnVsbCxnZXRDdXJyZW50RmliZXI6bnVsbH0pKX0pKHtmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTpIYSxidW5kbGVUeXBlOjAsdmVyc2lvbjpcIjE2LjkuMFwiLFxucmVuZGVyZXJQYWNrYWdlTmFtZTpcInJlYWN0LWRvbVwifSk7dmFyIE9qPXtkZWZhdWx0Ok5qfSxQaj1PaiYmTmp8fE9qO21vZHVsZS5leHBvcnRzPVBqLmRlZmF1bHR8fFBqO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MC4xNS4wXG4gKiBzY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIGQ9dm9pZCAwLGU9dm9pZCAwLGc9dm9pZCAwLG09dm9pZCAwLG49dm9pZCAwO2V4cG9ydHMudW5zdGFibGVfbm93PXZvaWQgMDtleHBvcnRzLnVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlPXZvaWQgMDtcbmlmKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgTWVzc2FnZUNoYW5uZWwpe3ZhciBwPW51bGwscT1udWxsLHI9ZnVuY3Rpb24oKXtpZihudWxsIT09cCl0cnl7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtwKCEwLGEpO3A9bnVsbH1jYXRjaChiKXt0aHJvdyBzZXRUaW1lb3V0KHIsMCksYjt9fTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBEYXRlLm5vdygpfTtkPWZ1bmN0aW9uKGEpe251bGwhPT1wP3NldFRpbWVvdXQoZCwwLGEpOihwPWEsc2V0VGltZW91dChyLDApKX07ZT1mdW5jdGlvbihhLGIpe3E9c2V0VGltZW91dChhLGIpfTtnPWZ1bmN0aW9uKCl7Y2xlYXJUaW1lb3V0KHEpfTttPWZ1bmN0aW9uKCl7cmV0dXJuITF9O249ZXhwb3J0cy51bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZT1mdW5jdGlvbigpe319ZWxzZXt2YXIgdD13aW5kb3cucGVyZm9ybWFuY2UsdT13aW5kb3cuRGF0ZSx2PXdpbmRvdy5zZXRUaW1lb3V0LFxudz13aW5kb3cuY2xlYXJUaW1lb3V0LHg9d2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSx5PXdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZTtcInVuZGVmaW5lZFwiIT09dHlwZW9mIGNvbnNvbGUmJihcImZ1bmN0aW9uXCIhPT10eXBlb2YgeCYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgcmVxdWVzdEFuaW1hdGlvbkZyYW1lLiBNYWtlIHN1cmUgdGhhdCB5b3UgbG9hZCBhIHBvbHlmaWxsIGluIG9sZGVyIGJyb3dzZXJzLiBodHRwczovL2ZiLm1lL3JlYWN0LXBvbHlmaWxsc1wiKSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgeSYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgY2FuY2VsQW5pbWF0aW9uRnJhbWUuIE1ha2Ugc3VyZSB0aGF0IHlvdSBsb2FkIGEgcG9seWZpbGwgaW4gb2xkZXIgYnJvd3NlcnMuIGh0dHBzOi8vZmIubWUvcmVhY3QtcG9seWZpbGxzXCIpKTtleHBvcnRzLnVuc3RhYmxlX25vdz1cIm9iamVjdFwiPT09dHlwZW9mIHQmJlxuXCJmdW5jdGlvblwiPT09dHlwZW9mIHQubm93P2Z1bmN0aW9uKCl7cmV0dXJuIHQubm93KCl9OmZ1bmN0aW9uKCl7cmV0dXJuIHUubm93KCl9O3ZhciB6PSExLEE9bnVsbCxCPS0xLEM9LTEsRD0zMy4zMyxFPS0xLEY9LTEsRz0wLEg9ITE7bT1mdW5jdGlvbigpe3JldHVybiBleHBvcnRzLnVuc3RhYmxlX25vdygpPj1HfTtuPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlPWZ1bmN0aW9uKGEpezA+YXx8MTI1PGE/Y29uc29sZS5lcnJvcihcImZvcmNlRnJhbWVSYXRlIHRha2VzIGEgcG9zaXRpdmUgaW50IGJldHdlZW4gMCBhbmQgMTI1LCBmb3JjaW5nIGZyYW1lcmF0ZXMgaGlnaGVyIHRoYW4gMTI1IGZwcyBpcyBub3QgdW5zdXBwb3J0ZWRcIik6MDxhPyhEPU1hdGguZmxvb3IoMUUzL2EpLEg9ITApOihEPTMzLjMzLEg9ITEpfTt2YXIgSj1mdW5jdGlvbigpe2lmKG51bGwhPT1BKXt2YXIgYT1leHBvcnRzLnVuc3RhYmxlX25vdygpLGI9MDxHLWE7dHJ5e0EoYixcbmEpfHwoQT1udWxsKX1jYXRjaChjKXt0aHJvdyBJLnBvc3RNZXNzYWdlKG51bGwpLGM7fX19LEs9bmV3IE1lc3NhZ2VDaGFubmVsLEk9Sy5wb3J0MjtLLnBvcnQxLm9ubWVzc2FnZT1KO3ZhciBMPWZ1bmN0aW9uKGEpe2lmKG51bGw9PT1BKUY9RT0tMSx6PSExO2Vsc2V7ej0hMDt4KGZ1bmN0aW9uKGEpe3coQik7TChhKX0pO3ZhciBiPWZ1bmN0aW9uKCl7Rz1leHBvcnRzLnVuc3RhYmxlX25vdygpK0QvMjtKKCk7Qj12KGIsMypEKX07Qj12KGIsMypEKTtpZigtMSE9PUUmJi4xPGEtRSl7dmFyIGM9YS1FOyFIJiYtMSE9PUYmJmM8RCYmRjxEJiYoRD1jPEY/RjpjLDguMzM+RCYmKEQ9OC4zMykpO0Y9Y31FPWE7Rz1hK0Q7SS5wb3N0TWVzc2FnZShudWxsKX19O2Q9ZnVuY3Rpb24oYSl7QT1hO3p8fCh6PSEwLHgoZnVuY3Rpb24oYSl7TChhKX0pKX07ZT1mdW5jdGlvbihhLGIpe0M9dihmdW5jdGlvbigpe2EoZXhwb3J0cy51bnN0YWJsZV9ub3coKSl9LGIpfTtnPWZ1bmN0aW9uKCl7dyhDKTtcbkM9LTF9fXZhciBNPW51bGwsTj1udWxsLE89bnVsbCxQPTMsUT0hMSxSPSExLFM9ITE7XG5mdW5jdGlvbiBUKGEsYil7dmFyIGM9YS5uZXh0O2lmKGM9PT1hKU09bnVsbDtlbHNle2E9PT1NJiYoTT1jKTt2YXIgZj1hLnByZXZpb3VzO2YubmV4dD1jO2MucHJldmlvdXM9Zn1hLm5leHQ9YS5wcmV2aW91cz1udWxsO2M9YS5jYWxsYmFjaztmPVA7dmFyIGw9TztQPWEucHJpb3JpdHlMZXZlbDtPPWE7dHJ5e3ZhciBoPWEuZXhwaXJhdGlvblRpbWU8PWI7c3dpdGNoKFApe2Nhc2UgMTp2YXIgaz1jKGgpO2JyZWFrO2Nhc2UgMjprPWMoaCk7YnJlYWs7Y2FzZSAzOms9YyhoKTticmVhaztjYXNlIDQ6az1jKGgpO2JyZWFrO2Nhc2UgNTprPWMoaCl9fWNhdGNoKFope3Rocm93IFo7fWZpbmFsbHl7UD1mLE89bH1pZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgaylpZihiPWEuZXhwaXJhdGlvblRpbWUsYS5jYWxsYmFjaz1rLG51bGw9PT1NKU09YS5uZXh0PWEucHJldmlvdXM9YTtlbHNle2s9bnVsbDtoPU07ZG97aWYoYjw9aC5leHBpcmF0aW9uVGltZSl7az1oO2JyZWFrfWg9aC5uZXh0fXdoaWxlKGghPT1cbk0pO251bGw9PT1rP2s9TTprPT09TSYmKE09YSk7Yj1rLnByZXZpb3VzO2IubmV4dD1rLnByZXZpb3VzPWE7YS5uZXh0PWs7YS5wcmV2aW91cz1ifX1mdW5jdGlvbiBVKGEpe2lmKG51bGwhPT1OJiZOLnN0YXJ0VGltZTw9YSl7ZG97dmFyIGI9TixjPWIubmV4dDtpZihiPT09YylOPW51bGw7ZWxzZXtOPWM7dmFyIGY9Yi5wcmV2aW91cztmLm5leHQ9YztjLnByZXZpb3VzPWZ9Yi5uZXh0PWIucHJldmlvdXM9bnVsbDtWKGIsYi5leHBpcmF0aW9uVGltZSl9d2hpbGUobnVsbCE9PU4mJk4uc3RhcnRUaW1lPD1hKX19ZnVuY3Rpb24gVyhhKXtTPSExO1UoYSk7Unx8KG51bGwhPT1NPyhSPSEwLGQoWCkpOm51bGwhPT1OJiZlKFcsTi5zdGFydFRpbWUtYSkpfVxuZnVuY3Rpb24gWChhLGIpe1I9ITE7UyYmKFM9ITEsZygpKTtVKGIpO1E9ITA7dHJ5e2lmKCFhKWZvcig7bnVsbCE9PU0mJk0uZXhwaXJhdGlvblRpbWU8PWI7KVQoTSxiKSxiPWV4cG9ydHMudW5zdGFibGVfbm93KCksVShiKTtlbHNlIGlmKG51bGwhPT1NKXtkbyBUKE0sYiksYj1leHBvcnRzLnVuc3RhYmxlX25vdygpLFUoYik7d2hpbGUobnVsbCE9PU0mJiFtKCkpfWlmKG51bGwhPT1NKXJldHVybiEwO251bGwhPT1OJiZlKFcsTi5zdGFydFRpbWUtYik7cmV0dXJuITF9ZmluYWxseXtRPSExfX1mdW5jdGlvbiBZKGEpe3N3aXRjaChhKXtjYXNlIDE6cmV0dXJuLTE7Y2FzZSAyOnJldHVybiAyNTA7Y2FzZSA1OnJldHVybiAxMDczNzQxODIzO2Nhc2UgNDpyZXR1cm4gMUU0O2RlZmF1bHQ6cmV0dXJuIDVFM319XG5mdW5jdGlvbiBWKGEsYil7aWYobnVsbD09PU0pTT1hLm5leHQ9YS5wcmV2aW91cz1hO2Vsc2V7dmFyIGM9bnVsbCxmPU07ZG97aWYoYjxmLmV4cGlyYXRpb25UaW1lKXtjPWY7YnJlYWt9Zj1mLm5leHR9d2hpbGUoZiE9PU0pO251bGw9PT1jP2M9TTpjPT09TSYmKE09YSk7Yj1jLnByZXZpb3VzO2IubmV4dD1jLnByZXZpb3VzPWE7YS5uZXh0PWM7YS5wcmV2aW91cz1ifX12YXIgYWE9bjtleHBvcnRzLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5PTE7ZXhwb3J0cy51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eT0yO2V4cG9ydHMudW5zdGFibGVfTm9ybWFsUHJpb3JpdHk9MztleHBvcnRzLnVuc3RhYmxlX0lkbGVQcmlvcml0eT01O2V4cG9ydHMudW5zdGFibGVfTG93UHJpb3JpdHk9NDtcbmV4cG9ydHMudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5PWZ1bmN0aW9uKGEsYil7c3dpdGNoKGEpe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOmNhc2UgNDpjYXNlIDU6YnJlYWs7ZGVmYXVsdDphPTN9dmFyIGM9UDtQPWE7dHJ5e3JldHVybiBiKCl9ZmluYWxseXtQPWN9fTtleHBvcnRzLnVuc3RhYmxlX25leHQ9ZnVuY3Rpb24oYSl7c3dpdGNoKFApe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOnZhciBiPTM7YnJlYWs7ZGVmYXVsdDpiPVB9dmFyIGM9UDtQPWI7dHJ5e3JldHVybiBhKCl9ZmluYWxseXtQPWN9fTtcbmV4cG9ydHMudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjaz1mdW5jdGlvbihhLGIsYyl7dmFyIGY9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jKXt2YXIgbD1jLmRlbGF5O2w9XCJudW1iZXJcIj09PXR5cGVvZiBsJiYwPGw/ZitsOmY7Yz1cIm51bWJlclwiPT09dHlwZW9mIGMudGltZW91dD9jLnRpbWVvdXQ6WShhKX1lbHNlIGM9WShhKSxsPWY7Yz1sK2M7YT17Y2FsbGJhY2s6Yixwcmlvcml0eUxldmVsOmEsc3RhcnRUaW1lOmwsZXhwaXJhdGlvblRpbWU6YyxuZXh0Om51bGwscHJldmlvdXM6bnVsbH07aWYobD5mKXtjPWw7aWYobnVsbD09PU4pTj1hLm5leHQ9YS5wcmV2aW91cz1hO2Vsc2V7Yj1udWxsO3ZhciBoPU47ZG97aWYoYzxoLnN0YXJ0VGltZSl7Yj1oO2JyZWFrfWg9aC5uZXh0fXdoaWxlKGghPT1OKTtudWxsPT09Yj9iPU46Yj09PU4mJihOPWEpO2M9Yi5wcmV2aW91cztjLm5leHQ9Yi5wcmV2aW91cz1hO2EubmV4dD1iO2EucHJldmlvdXM9XG5jfW51bGw9PT1NJiZOPT09YSYmKFM/ZygpOlM9ITAsZShXLGwtZikpfWVsc2UgVihhLGMpLFJ8fFF8fChSPSEwLGQoWCkpO3JldHVybiBhfTtleHBvcnRzLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrPWZ1bmN0aW9uKGEpe3ZhciBiPWEubmV4dDtpZihudWxsIT09Yil7aWYoYT09PWIpYT09PU0/TT1udWxsOmE9PT1OJiYoTj1udWxsKTtlbHNle2E9PT1NP009YjphPT09TiYmKE49Yik7dmFyIGM9YS5wcmV2aW91cztjLm5leHQ9YjtiLnByZXZpb3VzPWN9YS5uZXh0PWEucHJldmlvdXM9bnVsbH19O2V4cG9ydHMudW5zdGFibGVfd3JhcENhbGxiYWNrPWZ1bmN0aW9uKGEpe3ZhciBiPVA7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGM9UDtQPWI7dHJ5e3JldHVybiBhLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1maW5hbGx5e1A9Y319fTtleHBvcnRzLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsPWZ1bmN0aW9uKCl7cmV0dXJuIFB9O1xuZXhwb3J0cy51bnN0YWJsZV9zaG91bGRZaWVsZD1mdW5jdGlvbigpe3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7VShhKTtyZXR1cm4gbnVsbCE9PU8mJm51bGwhPT1NJiZNLnN0YXJ0VGltZTw9YSYmTS5leHBpcmF0aW9uVGltZTxPLmV4cGlyYXRpb25UaW1lfHxtKCl9O2V4cG9ydHMudW5zdGFibGVfcmVxdWVzdFBhaW50PWFhO2V4cG9ydHMudW5zdGFibGVfY29udGludWVFeGVjdXRpb249ZnVuY3Rpb24oKXtSfHxRfHwoUj0hMCxkKFgpKX07ZXhwb3J0cy51bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbj1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZT1mdW5jdGlvbigpe3JldHVybiBNfTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIFJlYWN0SXMgPSByZXF1aXJlKCdyZWFjdC1pcycpO1xuXG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IGRldmVsb3BtZW50IGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIHZhciB0aHJvd09uRGlyZWN0QWNjZXNzID0gdHJ1ZTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzJykoUmVhY3RJcy5pc0VsZW1lbnQsIHRocm93T25EaXJlY3RBY2Nlc3MpO1xufSBlbHNlIHtcbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgcHJvZHVjdGlvbiBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zJykoKTtcbn1cbiIsInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgbmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obW9kdWxlKSB7XG5cdGlmICghbW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xuXHRcdG1vZHVsZS5kZXByZWNhdGUgPSBmdW5jdGlvbigpIHt9O1xuXHRcdG1vZHVsZS5wYXRocyA9IFtdO1xuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxuXHRcdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcblx0fVxuXHRyZXR1cm4gbW9kdWxlO1xufTtcbiIsIlxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCAnLi9odG1sLWVkaXRvci5sZXNzJztcbmltcG9ydCBTcXVpcmUgZnJvbSAnc3F1aXJlLXJ0ZSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0ICogYXMgXyBmcm9tICdsb2Rhc2gnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBIdG1sRWRpdG9yIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgZWRpdG9yOlNxdWlyZSA9IG51bGw7XG5cbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBvbkJvdW5kOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBjb250ZW50OiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHBsYWNlaG9sZGVyOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBvbkJsdXI6IFByb3BUeXBlcy5mdW5jLFxuICAgIG9uRm9jdXM6IFByb3BUeXBlcy5mdW5jLFxuICAgIG9uQ3Vyc29yQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBpbml0aWFsRm9jdXM6IFByb3BUeXBlcy5ib29sXG4gIH07XG5cbiAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICBpbml0aWFsRm9jdXM6IHRydWVcbiAgfTtcblxuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgY29udGVudDogbnVsbCxcbiAgICAgIGlzRm9jdXM6IHByb3BzLmluaXRpYWxGb2N1c1xuICAgIH07XG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLmxvYWRFZGl0b3IoKTtcbiAgICBpZiAodGhpcy5wcm9wcy5vbkJvdW5kKSB7XG4gICAgICB0aGlzLnByb3BzLm9uQm91bmQodGhpcyk7XG4gICAgfVxuICB9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgaWYgKHRoaXMuZWRpdG9yKSB7XG4gICAgICB0aGlzLmVkaXRvci5kZXN0cm95KCk7XG4gICAgfVxuICB9XG5cbiAgVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV3UHJvcHMpIHtcbiAgICBpZiAobmV3UHJvcHMuY29udGVudCAhPT0gdGhpcy5wcm9wcy5jb250ZW50ICYmIG5ld1Byb3BzLmNvbnRlbnQgIT09IHRoaXMuc3RhdGUuY29udGVudCAmJiB0aGlzLmVkaXRvcikge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGNvbnRlbnQ6IG5ld1Byb3BzLmNvbnRlbnRcbiAgICAgIH0pO1xuICAgICAgdGhpcy5lZGl0b3Iuc2V0SFRNTChuZXdQcm9wcy5jb250ZW50KTtcbiAgICB9XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgdmFyIHBsYWNlaG9sZGVyID0gbnVsbDtcbiAgICBpZiAoXy5pc0VtcHR5KHRoaXMuc3RhdGUuY29udGVudCkgJiYgXy5pc0VtcHR5KHRoaXMucHJvcHMuY29udGVudCkgJiYgIXRoaXMuc3RhdGUuaXNGb2N1cyAmJiB0aGlzLnByb3BzLnBsYWNlaG9sZGVyKSB7XG4gICAgICBwbGFjZWhvbGRlciA9IDxkaXYgY2xhc3NOYW1lPVwicGxhY2Vob2xkZXJcIiBvbkNsaWNrPXt0aGlzLmhhbmRsZVBsYWNlaG9sZGVyQ2xpY2suYmluZCh0aGlzKX0+e3RoaXMucHJvcHMucGxhY2Vob2xkZXJ9PC9kaXY+O1xuICAgIH1cblxuICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cImh0bWwtZWRpdG9yXCI+XG4gICAgICB7cGxhY2Vob2xkZXJ9XG4gICAgICA8aWZyYW1lIHJlZj1cImlmcmFtZVwiLz5cbiAgICA8L2Rpdj47XG4gIH1cblxuICBsb2FkRWRpdG9yKCkge1xuICAgIGxldCBpZnJhbWVOb2RlID0gdGhpcy5yZWZzLmlmcmFtZTtcbiAgICBsZXQgZG9jID0gaWZyYW1lTm9kZS5jb250ZW50RG9jdW1lbnQ7XG4gICAgZG9jLm9wZW4oKTtcblxuICAgIC8vIHdpZHRoIGhhY2s6IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjMwODM0NjIvaG93LXRvLWdldC1hbi1pZnJhbWUtdG8tYmUtcmVzcG9uc2l2ZS1pbi1pb3Mtc2FmYXJpXG4gICAgZG9jLndyaXRlKCc8IURPQ1RZUEUgaHRtbD48aHRtbCBzdHlsZT1cImhlaWdodDogMTAwJVwiPjxtZXRhPjx0aXRsZT48L3RpdGxlPjwvbWV0YT4nICtcblxuICAgICAgICAvLyBUaGlzIGlzIGZvciBpT1MgZGFyayBtb2RlLiBJZiBjaGFuZ2VkLCBjaGFuZ2UgaW4gaU9TIEVtYWlsQm9keVdlYlZpZXdcbiAgICAgICAgJzxzdHlsZT5AbWVkaWEgKHByZWZlcnMtY29sb3Itc2NoZW1lOiBkYXJrKSB7IGJvZHkgeyBjb2xvcjogd2hpdGU7IGJhY2tncm91bmQtY29sb3I6IGJsYWNrIH0gYSB7IGNvbG9yOiAjNDI4NWY0OyB9IH08L3N0eWxlPicgK1xuXG4gICAgICAnPGJvZHkgc3R5bGU9XCJoZWlnaHQ6IDEwMCU7IG1hcmdpbjogMDsgLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yOiB0cmFuc3BhcmVudDsgd2lkdGg6IDFweDsgbWluLXdpZHRoOiAxMDAlO1wiPjwvYm9keT48L2h0bWw+Jyk7XG4gICAgZG9jLmNsb3NlKCk7XG5cbiAgICB0aGlzLmVkaXRvciA9IG5ldyBTcXVpcmUoZG9jLCB7XG4gICAgICAvLyBzdHVmZiBoZXJlXG4gICAgfSk7XG5cbiAgICB0aGlzLmVkaXRvci5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIChzLCBlKSA9PiB0aGlzLmhhbmRsZUNvbnRlbnRDaGFuZ2UoZSkpO1xuICAgIHRoaXMuZWRpdG9yLmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCAocywgZSkgPT4gdGhpcy5oYW5kbGVCbHVyKGUpKTtcbiAgICB0aGlzLmVkaXRvci5hZGRFdmVudExpc3RlbmVyKCdmb2N1cycsIChzLCBlKSA9PiB0aGlzLmhhbmRsZUZvY3VzKGUpKTtcbiAgICB0aGlzLmVkaXRvci5hZGRFdmVudExpc3RlbmVyKCdwYXRoQ2hhbmdlJywgKHMsIGUpID0+IHRoaXMuaGFuZGxlQ3Vyc29yQ2hhbmdlKGUpKTtcbiAgICB0aGlzLmVkaXRvci5zZXRLZXlIYW5kbGVyKCdtZXRhLVsnLCAocywgZSwgcikgPT4gdGhpcy5vdXRkZW50KGUsIHIpKTtcbiAgICB0aGlzLmVkaXRvci5zZXRLZXlIYW5kbGVyKCdtZXRhLV0nLCAocywgZSwgcikgPT4gdGhpcy5pbmRlbnQoZSwgcikpO1xuICAgIHRoaXMuZWRpdG9yLnNldEtleUhhbmRsZXIoJ21ldGEtc2hpZnQtbycsIChzLCBlLCByKSA9PiB0aGlzLm1ha2VPcmRlcmVkTGlzdChlLCByKSk7XG4gICAgdGhpcy5lZGl0b3Iuc2V0S2V5SGFuZGxlcignbWV0YS1zaGlmdC11JywgKHMsIGUsIHIpID0+IHRoaXMubWFrZVVub3JkZXJlZExpc3QoZSwgcikpO1xuICAgIHRoaXMuZWRpdG9yLnNldEhUTUwodGhpcy5zdGF0ZS5jb250ZW50IHx8IHRoaXMucHJvcHMuY29udGVudCB8fCAnJyk7XG5cbiAgICBpZiAodGhpcy5wcm9wcy5pbml0aWFsRm9jdXMpIHtcbiAgICAgIHRoaXMuZWRpdG9yLmZvY3VzKCk7XG4gICAgfVxuICB9XG5cbiAgaGFuZGxlUGxhY2Vob2xkZXJDbGljaygpIHtcbiAgICB0aGlzLmVkaXRvci5mb2N1cygpO1xuICB9XG5cbiAgaGFuZGxlQ29udGVudENoYW5nZSgpIHtcbiAgICBsZXQgY29udGVudCA9IHRoaXMuZ2V0Q29udGVudCgpO1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgY29udGVudDogY29udGVudFxuICAgIH0pO1xuICAgIGlmICh0aGlzLnByb3BzLm9uQ2hhbmdlKSB7XG4gICAgICB0aGlzLnByb3BzLm9uQ2hhbmdlKGNvbnRlbnQpO1xuICAgIH1cbiAgfVxuXG4gIGhhbmRsZUJsdXIoKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBpc0ZvY3VzOiBmYWxzZVxuICAgIH0pO1xuICAgIGlmICh0aGlzLnByb3BzLm9uQmx1cikge1xuICAgICAgdGhpcy5wcm9wcy5vbkJsdXIoKTtcbiAgICB9XG4gIH1cblxuICBoYW5kbGVGb2N1cygpIHtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGlzRm9jdXM6IHRydWVcbiAgICB9KTtcbiAgICBpZiAodGhpcy5wcm9wcy5vbkZvY3VzKSB7XG4gICAgICB0aGlzLnByb3BzLm9uRm9jdXMoKTtcbiAgICB9XG4gIH1cblxuICBoYW5kbGVDdXJzb3JDaGFuZ2UoZSkge1xuICAgIGlmICh0aGlzLnByb3BzLm9uQ3Vyc29yQ2hhbmdlKSB7XG4gICAgICB0aGlzLnByb3BzLm9uQ3Vyc29yQ2hhbmdlKCk7XG4gICAgfVxuICB9XG5cbiAgZ2V0Q29udGVudCgpIHtcbiAgICByZXR1cm4gKHRoaXMuZWRpdG9yKSA/IHRoaXMuZWRpdG9yLmdldEhUTUwoKSA6IG51bGw7XG4gIH1cblxuICB0b2dnbGVTZWxlY3Rpb25UYWcodGFnOlN0cmluZykge1xuICAgIGxldCByYW5nZSA9IHRoaXMuZWRpdG9yLmdldFNlbGVjdGlvbigpO1xuICAgIGlmICh0aGlzLmVkaXRvci5oYXNGb3JtYXQodGFnLCBudWxsLCByYW5nZSkpIHtcbiAgICAgIHRoaXMuZWRpdG9yLmNoYW5nZUZvcm1hdChudWxsLCB7IHRhZzogdGFnIH0sIHJhbmdlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5lZGl0b3IuY2hhbmdlRm9ybWF0KHsgdGFnOiB0YWcgfSwgbnVsbCwgcmFuZ2UpO1xuICAgIH1cbiAgfVxuXG4gIGluY3JlYXNlUXVvdGVMZXZlbChlKSAge1xuICAgIHRoaXMubWF5YmVQcmV2ZW50RGVmYXVsdChlKTtcbiAgICB0aGlzLmVkaXRvci5pbmNyZWFzZVF1b3RlTGV2ZWwoKTtcbiAgfVxuXG4gIGRlY3JlYXNlUXVvdGVMZXZlbChlKSAge1xuICAgIHRoaXMubWF5YmVQcmV2ZW50RGVmYXVsdChlKTtcbiAgICB0aGlzLmVkaXRvci5kZWNyZWFzZVF1b3RlTGV2ZWwoKTtcbiAgfVxuXG4gIG1ha2VVbm9yZGVyZWRMaXN0KGUpICB7XG4gICAgdGhpcy5tYXliZVByZXZlbnREZWZhdWx0KGUpO1xuICAgIHRoaXMuZWRpdG9yLm1ha2VVbm9yZGVyZWRMaXN0KCk7XG4gIH1cblxuICBtYWtlT3JkZXJlZExpc3QoZSkgIHtcbiAgICB0aGlzLm1heWJlUHJldmVudERlZmF1bHQoZSk7XG4gICAgdGhpcy5lZGl0b3IubWFrZU9yZGVyZWRMaXN0KCk7XG4gIH1cblxuICByZW1vdmVMaXN0KGUpICB7XG4gICAgdGhpcy5tYXliZVByZXZlbnREZWZhdWx0KGUpO1xuICAgIHRoaXMuZWRpdG9yLnJlbW92ZUxpc3QoKTtcbiAgfVxuXG4gIGluY3JlYXNlTGlzdExldmVsKGUpICB7XG4gICAgdGhpcy5tYXliZVByZXZlbnREZWZhdWx0KGUpO1xuICAgIHRoaXMuZWRpdG9yLmluY3JlYXNlTGlzdExldmVsKCk7XG4gIH1cblxuICBkZWNyZWFzZUxpc3RMZXZlbChlKSAge1xuICAgIHRoaXMubWF5YmVQcmV2ZW50RGVmYXVsdChlKTtcbiAgICB0aGlzLmVkaXRvci5kZWNyZWFzZUxpc3RMZXZlbCgpO1xuICB9XG5cbiAgaW5kZW50KGUsIHJhbmdlKSB7XG4gICAgdGhpcy5tYXliZVByZXZlbnREZWZhdWx0KGUpO1xuICAgIGlmICghcmFuZ2UpIHtcbiAgICAgIHJhbmdlID0gdGhpcy5lZGl0b3IuZ2V0U2VsZWN0aW9uKCk7XG4gICAgfVxuICAgIHZhciByb290ID0gcmFuZ2UuY29tbW9uQW5jZXN0b3JDb250YWluZXI7XG4gICAgaWYgKHRoaXMuaW5MaXN0KHJvb3QpKSB7XG4gICAgICB0aGlzLmluY3JlYXNlTGlzdExldmVsKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaW5jcmVhc2VRdW90ZUxldmVsKCk7XG4gICAgfVxuICB9XG5cbiAgb3V0ZGVudChlLCByYW5nZSkge1xuICAgIHRoaXMubWF5YmVQcmV2ZW50RGVmYXVsdChlKTtcbiAgICBpZiAoIXJhbmdlKSB7XG4gICAgICByYW5nZSA9IHRoaXMuZWRpdG9yLmdldFNlbGVjdGlvbigpO1xuICAgIH1cbiAgICB2YXIgcm9vdCA9IHJhbmdlLmNvbW1vbkFuY2VzdG9yQ29udGFpbmVyO1xuICAgIGlmICh0aGlzLmluTGlzdChyb290KSkge1xuICAgICAgdGhpcy5kZWNyZWFzZUxpc3RMZXZlbCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRlY3JlYXNlUXVvdGVMZXZlbCgpO1xuICAgIH1cbiAgfVxuXG4gIG1heWJlUHJldmVudERlZmF1bHQoZSkge1xuICAgIGlmIChlKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICB9XG5cbiAgZmluZFBhcmVudChub2RlLCBwcmVkaWNhdGUpIHtcbiAgICBkbyB7XG4gICAgICBpZiAocHJlZGljYXRlKG5vZGUpKSB7XG4gICAgICAgIHJldHVybiBub2RlO1xuICAgICAgfVxuICAgIH0gd2hpbGUgKG5vZGUgPSBub2RlLnBhcmVudE5vZGUpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaW5MaXN0KG5vZGUpIHtcbiAgICByZXR1cm4gISF0aGlzLmZpbmRQYXJlbnQobm9kZSwgbiA9PiBuLm5vZGVOYW1lID09PSAnTEknKTtcbiAgfVxuXG59XG5cblxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogTG9kYXNoIDxodHRwczovL2xvZGFzaC5jb20vPlxuICogQ29weXJpZ2h0IE9wZW5KUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnMgPGh0dHBzOi8vb3BlbmpzZi5vcmcvPlxuICogUmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UgPGh0dHBzOi8vbG9kYXNoLmNvbS9saWNlbnNlPlxuICogQmFzZWQgb24gVW5kZXJzY29yZS5qcyAxLjguMyA8aHR0cDovL3VuZGVyc2NvcmVqcy5vcmcvTElDRU5TRT5cbiAqIENvcHlyaWdodCBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgYW5kIEludmVzdGlnYXRpdmUgUmVwb3J0ZXJzICYgRWRpdG9yc1xuICovXG47KGZ1bmN0aW9uKCkge1xuXG4gIC8qKiBVc2VkIGFzIGEgc2FmZSByZWZlcmVuY2UgZm9yIGB1bmRlZmluZWRgIGluIHByZS1FUzUgZW52aXJvbm1lbnRzLiAqL1xuICB2YXIgdW5kZWZpbmVkO1xuXG4gIC8qKiBVc2VkIGFzIHRoZSBzZW1hbnRpYyB2ZXJzaW9uIG51bWJlci4gKi9cbiAgdmFyIFZFUlNJT04gPSAnNC4xNy4xNSc7XG5cbiAgLyoqIFVzZWQgYXMgdGhlIHNpemUgdG8gZW5hYmxlIGxhcmdlIGFycmF5IG9wdGltaXphdGlvbnMuICovXG4gIHZhciBMQVJHRV9BUlJBWV9TSVpFID0gMjAwO1xuXG4gIC8qKiBFcnJvciBtZXNzYWdlIGNvbnN0YW50cy4gKi9cbiAgdmFyIENPUkVfRVJST1JfVEVYVCA9ICdVbnN1cHBvcnRlZCBjb3JlLWpzIHVzZS4gVHJ5IGh0dHBzOi8vbnBtcy5pby9zZWFyY2g/cT1wb255ZmlsbC4nLFxuICAgICAgRlVOQ19FUlJPUl9URVhUID0gJ0V4cGVjdGVkIGEgZnVuY3Rpb24nO1xuXG4gIC8qKiBVc2VkIHRvIHN0YW5kLWluIGZvciBgdW5kZWZpbmVkYCBoYXNoIHZhbHVlcy4gKi9cbiAgdmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4gIC8qKiBVc2VkIGFzIHRoZSBtYXhpbXVtIG1lbW9pemUgY2FjaGUgc2l6ZS4gKi9cbiAgdmFyIE1BWF9NRU1PSVpFX1NJWkUgPSA1MDA7XG5cbiAgLyoqIFVzZWQgYXMgdGhlIGludGVybmFsIGFyZ3VtZW50IHBsYWNlaG9sZGVyLiAqL1xuICB2YXIgUExBQ0VIT0xERVIgPSAnX19sb2Rhc2hfcGxhY2Vob2xkZXJfXyc7XG5cbiAgLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgY2xvbmluZy4gKi9cbiAgdmFyIENMT05FX0RFRVBfRkxBRyA9IDEsXG4gICAgICBDTE9ORV9GTEFUX0ZMQUcgPSAyLFxuICAgICAgQ0xPTkVfU1lNQk9MU19GTEFHID0gNDtcblxuICAvKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbiAgdmFyIENPTVBBUkVfUEFSVElBTF9GTEFHID0gMSxcbiAgICAgIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcgPSAyO1xuXG4gIC8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIGZ1bmN0aW9uIG1ldGFkYXRhLiAqL1xuICB2YXIgV1JBUF9CSU5EX0ZMQUcgPSAxLFxuICAgICAgV1JBUF9CSU5EX0tFWV9GTEFHID0gMixcbiAgICAgIFdSQVBfQ1VSUllfQk9VTkRfRkxBRyA9IDQsXG4gICAgICBXUkFQX0NVUlJZX0ZMQUcgPSA4LFxuICAgICAgV1JBUF9DVVJSWV9SSUdIVF9GTEFHID0gMTYsXG4gICAgICBXUkFQX1BBUlRJQUxfRkxBRyA9IDMyLFxuICAgICAgV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcgPSA2NCxcbiAgICAgIFdSQVBfQVJZX0ZMQUcgPSAxMjgsXG4gICAgICBXUkFQX1JFQVJHX0ZMQUcgPSAyNTYsXG4gICAgICBXUkFQX0ZMSVBfRkxBRyA9IDUxMjtcblxuICAvKiogVXNlZCBhcyBkZWZhdWx0IG9wdGlvbnMgZm9yIGBfLnRydW5jYXRlYC4gKi9cbiAgdmFyIERFRkFVTFRfVFJVTkNfTEVOR1RIID0gMzAsXG4gICAgICBERUZBVUxUX1RSVU5DX09NSVNTSU9OID0gJy4uLic7XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IGhvdCBmdW5jdGlvbnMgYnkgbnVtYmVyIG9mIGNhbGxzIHdpdGhpbiBhIHNwYW4gb2YgbWlsbGlzZWNvbmRzLiAqL1xuICB2YXIgSE9UX0NPVU5UID0gODAwLFxuICAgICAgSE9UX1NQQU4gPSAxNjtcblxuICAvKiogVXNlZCB0byBpbmRpY2F0ZSB0aGUgdHlwZSBvZiBsYXp5IGl0ZXJhdGVlcy4gKi9cbiAgdmFyIExBWllfRklMVEVSX0ZMQUcgPSAxLFxuICAgICAgTEFaWV9NQVBfRkxBRyA9IDIsXG4gICAgICBMQVpZX1dISUxFX0ZMQUcgPSAzO1xuXG4gIC8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xuICB2YXIgSU5GSU5JVFkgPSAxIC8gMCxcbiAgICAgIE1BWF9TQUZFX0lOVEVHRVIgPSA5MDA3MTk5MjU0NzQwOTkxLFxuICAgICAgTUFYX0lOVEVHRVIgPSAxLjc5NzY5MzEzNDg2MjMxNTdlKzMwOCxcbiAgICAgIE5BTiA9IDAgLyAwO1xuXG4gIC8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHRoZSBtYXhpbXVtIGxlbmd0aCBhbmQgaW5kZXggb2YgYW4gYXJyYXkuICovXG4gIHZhciBNQVhfQVJSQVlfTEVOR1RIID0gNDI5NDk2NzI5NSxcbiAgICAgIE1BWF9BUlJBWV9JTkRFWCA9IE1BWF9BUlJBWV9MRU5HVEggLSAxLFxuICAgICAgSEFMRl9NQVhfQVJSQVlfTEVOR1RIID0gTUFYX0FSUkFZX0xFTkdUSCA+Pj4gMTtcblxuICAvKiogVXNlZCB0byBhc3NvY2lhdGUgd3JhcCBtZXRob2RzIHdpdGggdGhlaXIgYml0IGZsYWdzLiAqL1xuICB2YXIgd3JhcEZsYWdzID0gW1xuICAgIFsnYXJ5JywgV1JBUF9BUllfRkxBR10sXG4gICAgWydiaW5kJywgV1JBUF9CSU5EX0ZMQUddLFxuICAgIFsnYmluZEtleScsIFdSQVBfQklORF9LRVlfRkxBR10sXG4gICAgWydjdXJyeScsIFdSQVBfQ1VSUllfRkxBR10sXG4gICAgWydjdXJyeVJpZ2h0JywgV1JBUF9DVVJSWV9SSUdIVF9GTEFHXSxcbiAgICBbJ2ZsaXAnLCBXUkFQX0ZMSVBfRkxBR10sXG4gICAgWydwYXJ0aWFsJywgV1JBUF9QQVJUSUFMX0ZMQUddLFxuICAgIFsncGFydGlhbFJpZ2h0JywgV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUddLFxuICAgIFsncmVhcmcnLCBXUkFQX1JFQVJHX0ZMQUddXG4gIF07XG5cbiAgLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xuICB2YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nLFxuICAgICAgYXJyYXlUYWcgPSAnW29iamVjdCBBcnJheV0nLFxuICAgICAgYXN5bmNUYWcgPSAnW29iamVjdCBBc3luY0Z1bmN0aW9uXScsXG4gICAgICBib29sVGFnID0gJ1tvYmplY3QgQm9vbGVhbl0nLFxuICAgICAgZGF0ZVRhZyA9ICdbb2JqZWN0IERhdGVdJyxcbiAgICAgIGRvbUV4Y1RhZyA9ICdbb2JqZWN0IERPTUV4Y2VwdGlvbl0nLFxuICAgICAgZXJyb3JUYWcgPSAnW29iamVjdCBFcnJvcl0nLFxuICAgICAgZnVuY1RhZyA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsXG4gICAgICBnZW5UYWcgPSAnW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl0nLFxuICAgICAgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgICBudW1iZXJUYWcgPSAnW29iamVjdCBOdW1iZXJdJyxcbiAgICAgIG51bGxUYWcgPSAnW29iamVjdCBOdWxsXScsXG4gICAgICBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJyxcbiAgICAgIHByb21pc2VUYWcgPSAnW29iamVjdCBQcm9taXNlXScsXG4gICAgICBwcm94eVRhZyA9ICdbb2JqZWN0IFByb3h5XScsXG4gICAgICByZWdleHBUYWcgPSAnW29iamVjdCBSZWdFeHBdJyxcbiAgICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLFxuICAgICAgc3RyaW5nVGFnID0gJ1tvYmplY3QgU3RyaW5nXScsXG4gICAgICBzeW1ib2xUYWcgPSAnW29iamVjdCBTeW1ib2xdJyxcbiAgICAgIHVuZGVmaW5lZFRhZyA9ICdbb2JqZWN0IFVuZGVmaW5lZF0nLFxuICAgICAgd2Vha01hcFRhZyA9ICdbb2JqZWN0IFdlYWtNYXBdJyxcbiAgICAgIHdlYWtTZXRUYWcgPSAnW29iamVjdCBXZWFrU2V0XSc7XG5cbiAgdmFyIGFycmF5QnVmZmVyVGFnID0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJyxcbiAgICAgIGRhdGFWaWV3VGFnID0gJ1tvYmplY3QgRGF0YVZpZXddJyxcbiAgICAgIGZsb2F0MzJUYWcgPSAnW29iamVjdCBGbG9hdDMyQXJyYXldJyxcbiAgICAgIGZsb2F0NjRUYWcgPSAnW29iamVjdCBGbG9hdDY0QXJyYXldJyxcbiAgICAgIGludDhUYWcgPSAnW29iamVjdCBJbnQ4QXJyYXldJyxcbiAgICAgIGludDE2VGFnID0gJ1tvYmplY3QgSW50MTZBcnJheV0nLFxuICAgICAgaW50MzJUYWcgPSAnW29iamVjdCBJbnQzMkFycmF5XScsXG4gICAgICB1aW50OFRhZyA9ICdbb2JqZWN0IFVpbnQ4QXJyYXldJyxcbiAgICAgIHVpbnQ4Q2xhbXBlZFRhZyA9ICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XScsXG4gICAgICB1aW50MTZUYWcgPSAnW29iamVjdCBVaW50MTZBcnJheV0nLFxuICAgICAgdWludDMyVGFnID0gJ1tvYmplY3QgVWludDMyQXJyYXldJztcblxuICAvKiogVXNlZCB0byBtYXRjaCBlbXB0eSBzdHJpbmcgbGl0ZXJhbHMgaW4gY29tcGlsZWQgdGVtcGxhdGUgc291cmNlLiAqL1xuICB2YXIgcmVFbXB0eVN0cmluZ0xlYWRpbmcgPSAvXFxiX19wIFxcKz0gJyc7L2csXG4gICAgICByZUVtcHR5U3RyaW5nTWlkZGxlID0gL1xcYihfX3AgXFwrPSkgJycgXFwrL2csXG4gICAgICByZUVtcHR5U3RyaW5nVHJhaWxpbmcgPSAvKF9fZVxcKC4qP1xcKXxcXGJfX3RcXCkpIFxcK1xcbicnOy9nO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIEhUTUwgZW50aXRpZXMgYW5kIEhUTUwgY2hhcmFjdGVycy4gKi9cbiAgdmFyIHJlRXNjYXBlZEh0bWwgPSAvJig/OmFtcHxsdHxndHxxdW90fCMzOSk7L2csXG4gICAgICByZVVuZXNjYXBlZEh0bWwgPSAvWyY8PlwiJ10vZyxcbiAgICAgIHJlSGFzRXNjYXBlZEh0bWwgPSBSZWdFeHAocmVFc2NhcGVkSHRtbC5zb3VyY2UpLFxuICAgICAgcmVIYXNVbmVzY2FwZWRIdG1sID0gUmVnRXhwKHJlVW5lc2NhcGVkSHRtbC5zb3VyY2UpO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIHRlbXBsYXRlIGRlbGltaXRlcnMuICovXG4gIHZhciByZUVzY2FwZSA9IC88JS0oW1xcc1xcU10rPyklPi9nLFxuICAgICAgcmVFdmFsdWF0ZSA9IC88JShbXFxzXFxTXSs/KSU+L2csXG4gICAgICByZUludGVycG9sYXRlID0gLzwlPShbXFxzXFxTXSs/KSU+L2c7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggcHJvcGVydHkgbmFtZXMgd2l0aGluIHByb3BlcnR5IHBhdGhzLiAqL1xuICB2YXIgcmVJc0RlZXBQcm9wID0gL1xcLnxcXFsoPzpbXltcXF1dKnwoW1wiJ10pKD86KD8hXFwxKVteXFxcXF18XFxcXC4pKj9cXDEpXFxdLyxcbiAgICAgIHJlSXNQbGFpblByb3AgPSAvXlxcdyokLyxcbiAgICAgIHJlUHJvcE5hbWUgPSAvW14uW1xcXV0rfFxcWyg/OigtP1xcZCsoPzpcXC5cXGQrKT8pfChbXCInXSkoKD86KD8hXFwyKVteXFxcXF18XFxcXC4pKj8pXFwyKVxcXXwoPz0oPzpcXC58XFxbXFxdKSg/OlxcLnxcXFtcXF18JCkpL2c7XG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gbWF0Y2ggYFJlZ0V4cGBcbiAgICogW3N5bnRheCBjaGFyYWN0ZXJzXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1wYXR0ZXJucykuXG4gICAqL1xuICB2YXIgcmVSZWdFeHBDaGFyID0gL1tcXFxcXiQuKis/KClbXFxde318XS9nLFxuICAgICAgcmVIYXNSZWdFeHBDaGFyID0gUmVnRXhwKHJlUmVnRXhwQ2hhci5zb3VyY2UpO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIGxlYWRpbmcgYW5kIHRyYWlsaW5nIHdoaXRlc3BhY2UuICovXG4gIHZhciByZVRyaW0gPSAvXlxccyt8XFxzKyQvZyxcbiAgICAgIHJlVHJpbVN0YXJ0ID0gL15cXHMrLyxcbiAgICAgIHJlVHJpbUVuZCA9IC9cXHMrJC87XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggd3JhcCBkZXRhaWwgY29tbWVudHMuICovXG4gIHZhciByZVdyYXBDb21tZW50ID0gL1xceyg/OlxcblxcL1xcKiBcXFt3cmFwcGVkIHdpdGggLitcXF0gXFwqXFwvKT9cXG4/LyxcbiAgICAgIHJlV3JhcERldGFpbHMgPSAvXFx7XFxuXFwvXFwqIFxcW3dyYXBwZWQgd2l0aCAoLispXFxdIFxcKi8sXG4gICAgICByZVNwbGl0RGV0YWlscyA9IC8sPyAmIC87XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggd29yZHMgY29tcG9zZWQgb2YgYWxwaGFudW1lcmljIGNoYXJhY3RlcnMuICovXG4gIHZhciByZUFzY2lpV29yZCA9IC9bXlxceDAwLVxceDJmXFx4M2EtXFx4NDBcXHg1Yi1cXHg2MFxceDdiLVxceDdmXSsvZztcblxuICAvKiogVXNlZCB0byBtYXRjaCBiYWNrc2xhc2hlcyBpbiBwcm9wZXJ0eSBwYXRocy4gKi9cbiAgdmFyIHJlRXNjYXBlQ2hhciA9IC9cXFxcKFxcXFwpPy9nO1xuXG4gIC8qKlxuICAgKiBVc2VkIHRvIG1hdGNoXG4gICAqIFtFUyB0ZW1wbGF0ZSBkZWxpbWl0ZXJzXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10ZW1wbGF0ZS1saXRlcmFsLWxleGljYWwtY29tcG9uZW50cykuXG4gICAqL1xuICB2YXIgcmVFc1RlbXBsYXRlID0gL1xcJFxceyhbXlxcXFx9XSooPzpcXFxcLlteXFxcXH1dKikqKVxcfS9nO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIGBSZWdFeHBgIGZsYWdzIGZyb20gdGhlaXIgY29lcmNlZCBzdHJpbmcgdmFsdWVzLiAqL1xuICB2YXIgcmVGbGFncyA9IC9cXHcqJC87XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IGJhZCBzaWduZWQgaGV4YWRlY2ltYWwgc3RyaW5nIHZhbHVlcy4gKi9cbiAgdmFyIHJlSXNCYWRIZXggPSAvXlstK10weFswLTlhLWZdKyQvaTtcblxuICAvKiogVXNlZCB0byBkZXRlY3QgYmluYXJ5IHN0cmluZyB2YWx1ZXMuICovXG4gIHZhciByZUlzQmluYXJ5ID0gL14wYlswMV0rJC9pO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBob3N0IGNvbnN0cnVjdG9ycyAoU2FmYXJpKS4gKi9cbiAgdmFyIHJlSXNIb3N0Q3RvciA9IC9eXFxbb2JqZWN0IC4rP0NvbnN0cnVjdG9yXFxdJC87XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IG9jdGFsIHN0cmluZyB2YWx1ZXMuICovXG4gIHZhciByZUlzT2N0YWwgPSAvXjBvWzAtN10rJC9pO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCB1bnNpZ25lZCBpbnRlZ2VyIHZhbHVlcy4gKi9cbiAgdmFyIHJlSXNVaW50ID0gL14oPzowfFsxLTldXFxkKikkLztcblxuICAvKiogVXNlZCB0byBtYXRjaCBMYXRpbiBVbmljb2RlIGxldHRlcnMgKGV4Y2x1ZGluZyBtYXRoZW1hdGljYWwgb3BlcmF0b3JzKS4gKi9cbiAgdmFyIHJlTGF0aW4gPSAvW1xceGMwLVxceGQ2XFx4ZDgtXFx4ZjZcXHhmOC1cXHhmZlxcdTAxMDAtXFx1MDE3Zl0vZztcblxuICAvKiogVXNlZCB0byBlbnN1cmUgY2FwdHVyaW5nIG9yZGVyIG9mIHRlbXBsYXRlIGRlbGltaXRlcnMuICovXG4gIHZhciByZU5vTWF0Y2ggPSAvKCReKS87XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggdW5lc2NhcGVkIGNoYXJhY3RlcnMgaW4gY29tcGlsZWQgc3RyaW5nIGxpdGVyYWxzLiAqL1xuICB2YXIgcmVVbmVzY2FwZWRTdHJpbmcgPSAvWydcXG5cXHJcXHUyMDI4XFx1MjAyOVxcXFxdL2c7XG5cbiAgLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIGNoYXJhY3RlciBjbGFzc2VzLiAqL1xuICB2YXIgcnNBc3RyYWxSYW5nZSA9ICdcXFxcdWQ4MDAtXFxcXHVkZmZmJyxcbiAgICAgIHJzQ29tYm9NYXJrc1JhbmdlID0gJ1xcXFx1MDMwMC1cXFxcdTAzNmYnLFxuICAgICAgcmVDb21ib0hhbGZNYXJrc1JhbmdlID0gJ1xcXFx1ZmUyMC1cXFxcdWZlMmYnLFxuICAgICAgcnNDb21ib1N5bWJvbHNSYW5nZSA9ICdcXFxcdTIwZDAtXFxcXHUyMGZmJyxcbiAgICAgIHJzQ29tYm9SYW5nZSA9IHJzQ29tYm9NYXJrc1JhbmdlICsgcmVDb21ib0hhbGZNYXJrc1JhbmdlICsgcnNDb21ib1N5bWJvbHNSYW5nZSxcbiAgICAgIHJzRGluZ2JhdFJhbmdlID0gJ1xcXFx1MjcwMC1cXFxcdTI3YmYnLFxuICAgICAgcnNMb3dlclJhbmdlID0gJ2EtelxcXFx4ZGYtXFxcXHhmNlxcXFx4ZjgtXFxcXHhmZicsXG4gICAgICByc01hdGhPcFJhbmdlID0gJ1xcXFx4YWNcXFxceGIxXFxcXHhkN1xcXFx4ZjcnLFxuICAgICAgcnNOb25DaGFyUmFuZ2UgPSAnXFxcXHgwMC1cXFxceDJmXFxcXHgzYS1cXFxceDQwXFxcXHg1Yi1cXFxceDYwXFxcXHg3Yi1cXFxceGJmJyxcbiAgICAgIHJzUHVuY3R1YXRpb25SYW5nZSA9ICdcXFxcdTIwMDAtXFxcXHUyMDZmJyxcbiAgICAgIHJzU3BhY2VSYW5nZSA9ICcgXFxcXHRcXFxceDBiXFxcXGZcXFxceGEwXFxcXHVmZWZmXFxcXG5cXFxcclxcXFx1MjAyOFxcXFx1MjAyOVxcXFx1MTY4MFxcXFx1MTgwZVxcXFx1MjAwMFxcXFx1MjAwMVxcXFx1MjAwMlxcXFx1MjAwM1xcXFx1MjAwNFxcXFx1MjAwNVxcXFx1MjAwNlxcXFx1MjAwN1xcXFx1MjAwOFxcXFx1MjAwOVxcXFx1MjAwYVxcXFx1MjAyZlxcXFx1MjA1ZlxcXFx1MzAwMCcsXG4gICAgICByc1VwcGVyUmFuZ2UgPSAnQS1aXFxcXHhjMC1cXFxceGQ2XFxcXHhkOC1cXFxceGRlJyxcbiAgICAgIHJzVmFyUmFuZ2UgPSAnXFxcXHVmZTBlXFxcXHVmZTBmJyxcbiAgICAgIHJzQnJlYWtSYW5nZSA9IHJzTWF0aE9wUmFuZ2UgKyByc05vbkNoYXJSYW5nZSArIHJzUHVuY3R1YXRpb25SYW5nZSArIHJzU3BhY2VSYW5nZTtcblxuICAvKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgY2FwdHVyZSBncm91cHMuICovXG4gIHZhciByc0Fwb3MgPSBcIlsnXFx1MjAxOV1cIixcbiAgICAgIHJzQXN0cmFsID0gJ1snICsgcnNBc3RyYWxSYW5nZSArICddJyxcbiAgICAgIHJzQnJlYWsgPSAnWycgKyByc0JyZWFrUmFuZ2UgKyAnXScsXG4gICAgICByc0NvbWJvID0gJ1snICsgcnNDb21ib1JhbmdlICsgJ10nLFxuICAgICAgcnNEaWdpdHMgPSAnXFxcXGQrJyxcbiAgICAgIHJzRGluZ2JhdCA9ICdbJyArIHJzRGluZ2JhdFJhbmdlICsgJ10nLFxuICAgICAgcnNMb3dlciA9ICdbJyArIHJzTG93ZXJSYW5nZSArICddJyxcbiAgICAgIHJzTWlzYyA9ICdbXicgKyByc0FzdHJhbFJhbmdlICsgcnNCcmVha1JhbmdlICsgcnNEaWdpdHMgKyByc0RpbmdiYXRSYW5nZSArIHJzTG93ZXJSYW5nZSArIHJzVXBwZXJSYW5nZSArICddJyxcbiAgICAgIHJzRml0eiA9ICdcXFxcdWQ4M2NbXFxcXHVkZmZiLVxcXFx1ZGZmZl0nLFxuICAgICAgcnNNb2RpZmllciA9ICcoPzonICsgcnNDb21ibyArICd8JyArIHJzRml0eiArICcpJyxcbiAgICAgIHJzTm9uQXN0cmFsID0gJ1teJyArIHJzQXN0cmFsUmFuZ2UgKyAnXScsXG4gICAgICByc1JlZ2lvbmFsID0gJyg/OlxcXFx1ZDgzY1tcXFxcdWRkZTYtXFxcXHVkZGZmXSl7Mn0nLFxuICAgICAgcnNTdXJyUGFpciA9ICdbXFxcXHVkODAwLVxcXFx1ZGJmZl1bXFxcXHVkYzAwLVxcXFx1ZGZmZl0nLFxuICAgICAgcnNVcHBlciA9ICdbJyArIHJzVXBwZXJSYW5nZSArICddJyxcbiAgICAgIHJzWldKID0gJ1xcXFx1MjAwZCc7XG5cbiAgLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIHJlZ2V4ZXMuICovXG4gIHZhciByc01pc2NMb3dlciA9ICcoPzonICsgcnNMb3dlciArICd8JyArIHJzTWlzYyArICcpJyxcbiAgICAgIHJzTWlzY1VwcGVyID0gJyg/OicgKyByc1VwcGVyICsgJ3wnICsgcnNNaXNjICsgJyknLFxuICAgICAgcnNPcHRDb250ckxvd2VyID0gJyg/OicgKyByc0Fwb3MgKyAnKD86ZHxsbHxtfHJlfHN8dHx2ZSkpPycsXG4gICAgICByc09wdENvbnRyVXBwZXIgPSAnKD86JyArIHJzQXBvcyArICcoPzpEfExMfE18UkV8U3xUfFZFKSk/JyxcbiAgICAgIHJlT3B0TW9kID0gcnNNb2RpZmllciArICc/JyxcbiAgICAgIHJzT3B0VmFyID0gJ1snICsgcnNWYXJSYW5nZSArICddPycsXG4gICAgICByc09wdEpvaW4gPSAnKD86JyArIHJzWldKICsgJyg/OicgKyBbcnNOb25Bc3RyYWwsIHJzUmVnaW9uYWwsIHJzU3VyclBhaXJdLmpvaW4oJ3wnKSArICcpJyArIHJzT3B0VmFyICsgcmVPcHRNb2QgKyAnKSonLFxuICAgICAgcnNPcmRMb3dlciA9ICdcXFxcZCooPzoxc3R8Mm5kfDNyZHwoPyFbMTIzXSlcXFxcZHRoKSg/PVxcXFxifFtBLVpfXSknLFxuICAgICAgcnNPcmRVcHBlciA9ICdcXFxcZCooPzoxU1R8Mk5EfDNSRHwoPyFbMTIzXSlcXFxcZFRIKSg/PVxcXFxifFthLXpfXSknLFxuICAgICAgcnNTZXEgPSByc09wdFZhciArIHJlT3B0TW9kICsgcnNPcHRKb2luLFxuICAgICAgcnNFbW9qaSA9ICcoPzonICsgW3JzRGluZ2JhdCwgcnNSZWdpb25hbCwgcnNTdXJyUGFpcl0uam9pbignfCcpICsgJyknICsgcnNTZXEsXG4gICAgICByc1N5bWJvbCA9ICcoPzonICsgW3JzTm9uQXN0cmFsICsgcnNDb21ibyArICc/JywgcnNDb21ibywgcnNSZWdpb25hbCwgcnNTdXJyUGFpciwgcnNBc3RyYWxdLmpvaW4oJ3wnKSArICcpJztcblxuICAvKiogVXNlZCB0byBtYXRjaCBhcG9zdHJvcGhlcy4gKi9cbiAgdmFyIHJlQXBvcyA9IFJlZ0V4cChyc0Fwb3MsICdnJyk7XG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gbWF0Y2ggW2NvbWJpbmluZyBkaWFjcml0aWNhbCBtYXJrc10oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29tYmluaW5nX0RpYWNyaXRpY2FsX01hcmtzKSBhbmRcbiAgICogW2NvbWJpbmluZyBkaWFjcml0aWNhbCBtYXJrcyBmb3Igc3ltYm9sc10oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29tYmluaW5nX0RpYWNyaXRpY2FsX01hcmtzX2Zvcl9TeW1ib2xzKS5cbiAgICovXG4gIHZhciByZUNvbWJvTWFyayA9IFJlZ0V4cChyc0NvbWJvLCAnZycpO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIFtzdHJpbmcgc3ltYm9sc10oaHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2phdmFzY3JpcHQtdW5pY29kZSkuICovXG4gIHZhciByZVVuaWNvZGUgPSBSZWdFeHAocnNGaXR6ICsgJyg/PScgKyByc0ZpdHogKyAnKXwnICsgcnNTeW1ib2wgKyByc1NlcSwgJ2cnKTtcblxuICAvKiogVXNlZCB0byBtYXRjaCBjb21wbGV4IG9yIGNvbXBvdW5kIHdvcmRzLiAqL1xuICB2YXIgcmVVbmljb2RlV29yZCA9IFJlZ0V4cChbXG4gICAgcnNVcHBlciArICc/JyArIHJzTG93ZXIgKyAnKycgKyByc09wdENvbnRyTG93ZXIgKyAnKD89JyArIFtyc0JyZWFrLCByc1VwcGVyLCAnJCddLmpvaW4oJ3wnKSArICcpJyxcbiAgICByc01pc2NVcHBlciArICcrJyArIHJzT3B0Q29udHJVcHBlciArICcoPz0nICsgW3JzQnJlYWssIHJzVXBwZXIgKyByc01pc2NMb3dlciwgJyQnXS5qb2luKCd8JykgKyAnKScsXG4gICAgcnNVcHBlciArICc/JyArIHJzTWlzY0xvd2VyICsgJysnICsgcnNPcHRDb250ckxvd2VyLFxuICAgIHJzVXBwZXIgKyAnKycgKyByc09wdENvbnRyVXBwZXIsXG4gICAgcnNPcmRVcHBlcixcbiAgICByc09yZExvd2VyLFxuICAgIHJzRGlnaXRzLFxuICAgIHJzRW1vamlcbiAgXS5qb2luKCd8JyksICdnJyk7XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IHN0cmluZ3Mgd2l0aCBbemVyby13aWR0aCBqb2luZXJzIG9yIGNvZGUgcG9pbnRzIGZyb20gdGhlIGFzdHJhbCBwbGFuZXNdKGh0dHA6Ly9lZXYuZWUvYmxvZy8yMDE1LzA5LzEyL2RhcmstY29ybmVycy1vZi11bmljb2RlLykuICovXG4gIHZhciByZUhhc1VuaWNvZGUgPSBSZWdFeHAoJ1snICsgcnNaV0ogKyByc0FzdHJhbFJhbmdlICArIHJzQ29tYm9SYW5nZSArIHJzVmFyUmFuZ2UgKyAnXScpO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBzdHJpbmdzIHRoYXQgbmVlZCBhIG1vcmUgcm9idXN0IHJlZ2V4cCB0byBtYXRjaCB3b3Jkcy4gKi9cbiAgdmFyIHJlSGFzVW5pY29kZVdvcmQgPSAvW2Etel1bQS1aXXxbQS1aXXsyfVthLXpdfFswLTldW2EtekEtWl18W2EtekEtWl1bMC05XXxbXmEtekEtWjAtOSBdLztcblxuICAvKiogVXNlZCB0byBhc3NpZ24gZGVmYXVsdCBgY29udGV4dGAgb2JqZWN0IHByb3BlcnRpZXMuICovXG4gIHZhciBjb250ZXh0UHJvcHMgPSBbXG4gICAgJ0FycmF5JywgJ0J1ZmZlcicsICdEYXRhVmlldycsICdEYXRlJywgJ0Vycm9yJywgJ0Zsb2F0MzJBcnJheScsICdGbG9hdDY0QXJyYXknLFxuICAgICdGdW5jdGlvbicsICdJbnQ4QXJyYXknLCAnSW50MTZBcnJheScsICdJbnQzMkFycmF5JywgJ01hcCcsICdNYXRoJywgJ09iamVjdCcsXG4gICAgJ1Byb21pc2UnLCAnUmVnRXhwJywgJ1NldCcsICdTdHJpbmcnLCAnU3ltYm9sJywgJ1R5cGVFcnJvcicsICdVaW50OEFycmF5JyxcbiAgICAnVWludDhDbGFtcGVkQXJyYXknLCAnVWludDE2QXJyYXknLCAnVWludDMyQXJyYXknLCAnV2Vha01hcCcsXG4gICAgJ18nLCAnY2xlYXJUaW1lb3V0JywgJ2lzRmluaXRlJywgJ3BhcnNlSW50JywgJ3NldFRpbWVvdXQnXG4gIF07XG5cbiAgLyoqIFVzZWQgdG8gbWFrZSB0ZW1wbGF0ZSBzb3VyY2VVUkxzIGVhc2llciB0byBpZGVudGlmeS4gKi9cbiAgdmFyIHRlbXBsYXRlQ291bnRlciA9IC0xO1xuXG4gIC8qKiBVc2VkIHRvIGlkZW50aWZ5IGB0b1N0cmluZ1RhZ2AgdmFsdWVzIG9mIHR5cGVkIGFycmF5cy4gKi9cbiAgdmFyIHR5cGVkQXJyYXlUYWdzID0ge307XG4gIHR5cGVkQXJyYXlUYWdzW2Zsb2F0MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbZmxvYXQ2NFRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tpbnQ4VGFnXSA9IHR5cGVkQXJyYXlUYWdzW2ludDE2VGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW2ludDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW3VpbnQ4VGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50MTZUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbdWludDMyVGFnXSA9IHRydWU7XG4gIHR5cGVkQXJyYXlUYWdzW2FyZ3NUYWddID0gdHlwZWRBcnJheVRhZ3NbYXJyYXlUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbYXJyYXlCdWZmZXJUYWddID0gdHlwZWRBcnJheVRhZ3NbYm9vbFRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tkYXRhVmlld1RhZ10gPSB0eXBlZEFycmF5VGFnc1tkYXRlVGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW2Vycm9yVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Z1bmNUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbbWFwVGFnXSA9IHR5cGVkQXJyYXlUYWdzW251bWJlclRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tvYmplY3RUYWddID0gdHlwZWRBcnJheVRhZ3NbcmVnZXhwVGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW3NldFRhZ10gPSB0eXBlZEFycmF5VGFnc1tzdHJpbmdUYWddID1cbiAgdHlwZWRBcnJheVRhZ3Nbd2Vha01hcFRhZ10gPSBmYWxzZTtcblxuICAvKiogVXNlZCB0byBpZGVudGlmeSBgdG9TdHJpbmdUYWdgIHZhbHVlcyBzdXBwb3J0ZWQgYnkgYF8uY2xvbmVgLiAqL1xuICB2YXIgY2xvbmVhYmxlVGFncyA9IHt9O1xuICBjbG9uZWFibGVUYWdzW2FyZ3NUYWddID0gY2xvbmVhYmxlVGFnc1thcnJheVRhZ10gPVxuICBjbG9uZWFibGVUYWdzW2FycmF5QnVmZmVyVGFnXSA9IGNsb25lYWJsZVRhZ3NbZGF0YVZpZXdUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tib29sVGFnXSA9IGNsb25lYWJsZVRhZ3NbZGF0ZVRhZ10gPVxuICBjbG9uZWFibGVUYWdzW2Zsb2F0MzJUYWddID0gY2xvbmVhYmxlVGFnc1tmbG9hdDY0VGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbaW50OFRhZ10gPSBjbG9uZWFibGVUYWdzW2ludDE2VGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbaW50MzJUYWddID0gY2xvbmVhYmxlVGFnc1ttYXBUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tudW1iZXJUYWddID0gY2xvbmVhYmxlVGFnc1tvYmplY3RUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tyZWdleHBUYWddID0gY2xvbmVhYmxlVGFnc1tzZXRUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tzdHJpbmdUYWddID0gY2xvbmVhYmxlVGFnc1tzeW1ib2xUYWddID1cbiAgY2xvbmVhYmxlVGFnc1t1aW50OFRhZ10gPSBjbG9uZWFibGVUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPVxuICBjbG9uZWFibGVUYWdzW3VpbnQxNlRhZ10gPSBjbG9uZWFibGVUYWdzW3VpbnQzMlRhZ10gPSB0cnVlO1xuICBjbG9uZWFibGVUYWdzW2Vycm9yVGFnXSA9IGNsb25lYWJsZVRhZ3NbZnVuY1RhZ10gPVxuICBjbG9uZWFibGVUYWdzW3dlYWtNYXBUYWddID0gZmFsc2U7XG5cbiAgLyoqIFVzZWQgdG8gbWFwIExhdGluIFVuaWNvZGUgbGV0dGVycyB0byBiYXNpYyBMYXRpbiBsZXR0ZXJzLiAqL1xuICB2YXIgZGVidXJyZWRMZXR0ZXJzID0ge1xuICAgIC8vIExhdGluLTEgU3VwcGxlbWVudCBibG9jay5cbiAgICAnXFx4YzAnOiAnQScsICAnXFx4YzEnOiAnQScsICdcXHhjMic6ICdBJywgJ1xceGMzJzogJ0EnLCAnXFx4YzQnOiAnQScsICdcXHhjNSc6ICdBJyxcbiAgICAnXFx4ZTAnOiAnYScsICAnXFx4ZTEnOiAnYScsICdcXHhlMic6ICdhJywgJ1xceGUzJzogJ2EnLCAnXFx4ZTQnOiAnYScsICdcXHhlNSc6ICdhJyxcbiAgICAnXFx4YzcnOiAnQycsICAnXFx4ZTcnOiAnYycsXG4gICAgJ1xceGQwJzogJ0QnLCAgJ1xceGYwJzogJ2QnLFxuICAgICdcXHhjOCc6ICdFJywgICdcXHhjOSc6ICdFJywgJ1xceGNhJzogJ0UnLCAnXFx4Y2InOiAnRScsXG4gICAgJ1xceGU4JzogJ2UnLCAgJ1xceGU5JzogJ2UnLCAnXFx4ZWEnOiAnZScsICdcXHhlYic6ICdlJyxcbiAgICAnXFx4Y2MnOiAnSScsICAnXFx4Y2QnOiAnSScsICdcXHhjZSc6ICdJJywgJ1xceGNmJzogJ0knLFxuICAgICdcXHhlYyc6ICdpJywgICdcXHhlZCc6ICdpJywgJ1xceGVlJzogJ2knLCAnXFx4ZWYnOiAnaScsXG4gICAgJ1xceGQxJzogJ04nLCAgJ1xceGYxJzogJ24nLFxuICAgICdcXHhkMic6ICdPJywgICdcXHhkMyc6ICdPJywgJ1xceGQ0JzogJ08nLCAnXFx4ZDUnOiAnTycsICdcXHhkNic6ICdPJywgJ1xceGQ4JzogJ08nLFxuICAgICdcXHhmMic6ICdvJywgICdcXHhmMyc6ICdvJywgJ1xceGY0JzogJ28nLCAnXFx4ZjUnOiAnbycsICdcXHhmNic6ICdvJywgJ1xceGY4JzogJ28nLFxuICAgICdcXHhkOSc6ICdVJywgICdcXHhkYSc6ICdVJywgJ1xceGRiJzogJ1UnLCAnXFx4ZGMnOiAnVScsXG4gICAgJ1xceGY5JzogJ3UnLCAgJ1xceGZhJzogJ3UnLCAnXFx4ZmInOiAndScsICdcXHhmYyc6ICd1JyxcbiAgICAnXFx4ZGQnOiAnWScsICAnXFx4ZmQnOiAneScsICdcXHhmZic6ICd5JyxcbiAgICAnXFx4YzYnOiAnQWUnLCAnXFx4ZTYnOiAnYWUnLFxuICAgICdcXHhkZSc6ICdUaCcsICdcXHhmZSc6ICd0aCcsXG4gICAgJ1xceGRmJzogJ3NzJyxcbiAgICAvLyBMYXRpbiBFeHRlbmRlZC1BIGJsb2NrLlxuICAgICdcXHUwMTAwJzogJ0EnLCAgJ1xcdTAxMDInOiAnQScsICdcXHUwMTA0JzogJ0EnLFxuICAgICdcXHUwMTAxJzogJ2EnLCAgJ1xcdTAxMDMnOiAnYScsICdcXHUwMTA1JzogJ2EnLFxuICAgICdcXHUwMTA2JzogJ0MnLCAgJ1xcdTAxMDgnOiAnQycsICdcXHUwMTBhJzogJ0MnLCAnXFx1MDEwYyc6ICdDJyxcbiAgICAnXFx1MDEwNyc6ICdjJywgICdcXHUwMTA5JzogJ2MnLCAnXFx1MDEwYic6ICdjJywgJ1xcdTAxMGQnOiAnYycsXG4gICAgJ1xcdTAxMGUnOiAnRCcsICAnXFx1MDExMCc6ICdEJywgJ1xcdTAxMGYnOiAnZCcsICdcXHUwMTExJzogJ2QnLFxuICAgICdcXHUwMTEyJzogJ0UnLCAgJ1xcdTAxMTQnOiAnRScsICdcXHUwMTE2JzogJ0UnLCAnXFx1MDExOCc6ICdFJywgJ1xcdTAxMWEnOiAnRScsXG4gICAgJ1xcdTAxMTMnOiAnZScsICAnXFx1MDExNSc6ICdlJywgJ1xcdTAxMTcnOiAnZScsICdcXHUwMTE5JzogJ2UnLCAnXFx1MDExYic6ICdlJyxcbiAgICAnXFx1MDExYyc6ICdHJywgICdcXHUwMTFlJzogJ0cnLCAnXFx1MDEyMCc6ICdHJywgJ1xcdTAxMjInOiAnRycsXG4gICAgJ1xcdTAxMWQnOiAnZycsICAnXFx1MDExZic6ICdnJywgJ1xcdTAxMjEnOiAnZycsICdcXHUwMTIzJzogJ2cnLFxuICAgICdcXHUwMTI0JzogJ0gnLCAgJ1xcdTAxMjYnOiAnSCcsICdcXHUwMTI1JzogJ2gnLCAnXFx1MDEyNyc6ICdoJyxcbiAgICAnXFx1MDEyOCc6ICdJJywgICdcXHUwMTJhJzogJ0knLCAnXFx1MDEyYyc6ICdJJywgJ1xcdTAxMmUnOiAnSScsICdcXHUwMTMwJzogJ0knLFxuICAgICdcXHUwMTI5JzogJ2knLCAgJ1xcdTAxMmInOiAnaScsICdcXHUwMTJkJzogJ2knLCAnXFx1MDEyZic6ICdpJywgJ1xcdTAxMzEnOiAnaScsXG4gICAgJ1xcdTAxMzQnOiAnSicsICAnXFx1MDEzNSc6ICdqJyxcbiAgICAnXFx1MDEzNic6ICdLJywgICdcXHUwMTM3JzogJ2snLCAnXFx1MDEzOCc6ICdrJyxcbiAgICAnXFx1MDEzOSc6ICdMJywgICdcXHUwMTNiJzogJ0wnLCAnXFx1MDEzZCc6ICdMJywgJ1xcdTAxM2YnOiAnTCcsICdcXHUwMTQxJzogJ0wnLFxuICAgICdcXHUwMTNhJzogJ2wnLCAgJ1xcdTAxM2MnOiAnbCcsICdcXHUwMTNlJzogJ2wnLCAnXFx1MDE0MCc6ICdsJywgJ1xcdTAxNDInOiAnbCcsXG4gICAgJ1xcdTAxNDMnOiAnTicsICAnXFx1MDE0NSc6ICdOJywgJ1xcdTAxNDcnOiAnTicsICdcXHUwMTRhJzogJ04nLFxuICAgICdcXHUwMTQ0JzogJ24nLCAgJ1xcdTAxNDYnOiAnbicsICdcXHUwMTQ4JzogJ24nLCAnXFx1MDE0Yic6ICduJyxcbiAgICAnXFx1MDE0Yyc6ICdPJywgICdcXHUwMTRlJzogJ08nLCAnXFx1MDE1MCc6ICdPJyxcbiAgICAnXFx1MDE0ZCc6ICdvJywgICdcXHUwMTRmJzogJ28nLCAnXFx1MDE1MSc6ICdvJyxcbiAgICAnXFx1MDE1NCc6ICdSJywgICdcXHUwMTU2JzogJ1InLCAnXFx1MDE1OCc6ICdSJyxcbiAgICAnXFx1MDE1NSc6ICdyJywgICdcXHUwMTU3JzogJ3InLCAnXFx1MDE1OSc6ICdyJyxcbiAgICAnXFx1MDE1YSc6ICdTJywgICdcXHUwMTVjJzogJ1MnLCAnXFx1MDE1ZSc6ICdTJywgJ1xcdTAxNjAnOiAnUycsXG4gICAgJ1xcdTAxNWInOiAncycsICAnXFx1MDE1ZCc6ICdzJywgJ1xcdTAxNWYnOiAncycsICdcXHUwMTYxJzogJ3MnLFxuICAgICdcXHUwMTYyJzogJ1QnLCAgJ1xcdTAxNjQnOiAnVCcsICdcXHUwMTY2JzogJ1QnLFxuICAgICdcXHUwMTYzJzogJ3QnLCAgJ1xcdTAxNjUnOiAndCcsICdcXHUwMTY3JzogJ3QnLFxuICAgICdcXHUwMTY4JzogJ1UnLCAgJ1xcdTAxNmEnOiAnVScsICdcXHUwMTZjJzogJ1UnLCAnXFx1MDE2ZSc6ICdVJywgJ1xcdTAxNzAnOiAnVScsICdcXHUwMTcyJzogJ1UnLFxuICAgICdcXHUwMTY5JzogJ3UnLCAgJ1xcdTAxNmInOiAndScsICdcXHUwMTZkJzogJ3UnLCAnXFx1MDE2Zic6ICd1JywgJ1xcdTAxNzEnOiAndScsICdcXHUwMTczJzogJ3UnLFxuICAgICdcXHUwMTc0JzogJ1cnLCAgJ1xcdTAxNzUnOiAndycsXG4gICAgJ1xcdTAxNzYnOiAnWScsICAnXFx1MDE3Nyc6ICd5JywgJ1xcdTAxNzgnOiAnWScsXG4gICAgJ1xcdTAxNzknOiAnWicsICAnXFx1MDE3Yic6ICdaJywgJ1xcdTAxN2QnOiAnWicsXG4gICAgJ1xcdTAxN2EnOiAneicsICAnXFx1MDE3Yyc6ICd6JywgJ1xcdTAxN2UnOiAneicsXG4gICAgJ1xcdTAxMzInOiAnSUonLCAnXFx1MDEzMyc6ICdpaicsXG4gICAgJ1xcdTAxNTInOiAnT2UnLCAnXFx1MDE1Myc6ICdvZScsXG4gICAgJ1xcdTAxNDknOiBcIiduXCIsICdcXHUwMTdmJzogJ3MnXG4gIH07XG5cbiAgLyoqIFVzZWQgdG8gbWFwIGNoYXJhY3RlcnMgdG8gSFRNTCBlbnRpdGllcy4gKi9cbiAgdmFyIGh0bWxFc2NhcGVzID0ge1xuICAgICcmJzogJyZhbXA7JyxcbiAgICAnPCc6ICcmbHQ7JyxcbiAgICAnPic6ICcmZ3Q7JyxcbiAgICAnXCInOiAnJnF1b3Q7JyxcbiAgICBcIidcIjogJyYjMzk7J1xuICB9O1xuXG4gIC8qKiBVc2VkIHRvIG1hcCBIVE1MIGVudGl0aWVzIHRvIGNoYXJhY3RlcnMuICovXG4gIHZhciBodG1sVW5lc2NhcGVzID0ge1xuICAgICcmYW1wOyc6ICcmJyxcbiAgICAnJmx0Oyc6ICc8JyxcbiAgICAnJmd0Oyc6ICc+JyxcbiAgICAnJnF1b3Q7JzogJ1wiJyxcbiAgICAnJiMzOTsnOiBcIidcIlxuICB9O1xuXG4gIC8qKiBVc2VkIHRvIGVzY2FwZSBjaGFyYWN0ZXJzIGZvciBpbmNsdXNpb24gaW4gY29tcGlsZWQgc3RyaW5nIGxpdGVyYWxzLiAqL1xuICB2YXIgc3RyaW5nRXNjYXBlcyA9IHtcbiAgICAnXFxcXCc6ICdcXFxcJyxcbiAgICBcIidcIjogXCInXCIsXG4gICAgJ1xcbic6ICduJyxcbiAgICAnXFxyJzogJ3InLFxuICAgICdcXHUyMDI4JzogJ3UyMDI4JyxcbiAgICAnXFx1MjAyOSc6ICd1MjAyOSdcbiAgfTtcblxuICAvKiogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgd2l0aG91dCBhIGRlcGVuZGVuY3kgb24gYHJvb3RgLiAqL1xuICB2YXIgZnJlZVBhcnNlRmxvYXQgPSBwYXJzZUZsb2F0LFxuICAgICAgZnJlZVBhcnNlSW50ID0gcGFyc2VJbnQ7XG5cbiAgLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgIGZyb20gTm9kZS5qcy4gKi9cbiAgdmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCAmJiBnbG9iYWwuT2JqZWN0ID09PSBPYmplY3QgJiYgZ2xvYmFsO1xuXG4gIC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG4gIHZhciBmcmVlU2VsZiA9IHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYgJiYgc2VsZi5PYmplY3QgPT09IE9iamVjdCAmJiBzZWxmO1xuXG4gIC8qKiBVc2VkIGFzIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0LiAqL1xuICB2YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgZnJlZVNlbGYgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxuICAvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGV4cG9ydHNgLiAqL1xuICB2YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cbiAgLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xuICB2YXIgZnJlZU1vZHVsZSA9IGZyZWVFeHBvcnRzICYmIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmICFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuXG4gIC8qKiBEZXRlY3QgdGhlIHBvcHVsYXIgQ29tbW9uSlMgZXh0ZW5zaW9uIGBtb2R1bGUuZXhwb3J0c2AuICovXG4gIHZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuXG4gIC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgcHJvY2Vzc2AgZnJvbSBOb2RlLmpzLiAqL1xuICB2YXIgZnJlZVByb2Nlc3MgPSBtb2R1bGVFeHBvcnRzICYmIGZyZWVHbG9iYWwucHJvY2VzcztcblxuICAvKiogVXNlZCB0byBhY2Nlc3MgZmFzdGVyIE5vZGUuanMgaGVscGVycy4gKi9cbiAgdmFyIG5vZGVVdGlsID0gKGZ1bmN0aW9uKCkge1xuICAgIHRyeSB7XG4gICAgICAvLyBVc2UgYHV0aWwudHlwZXNgIGZvciBOb2RlLmpzIDEwKy5cbiAgICAgIHZhciB0eXBlcyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5yZXF1aXJlICYmIGZyZWVNb2R1bGUucmVxdWlyZSgndXRpbCcpLnR5cGVzO1xuXG4gICAgICBpZiAodHlwZXMpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVzO1xuICAgICAgfVxuXG4gICAgICAvLyBMZWdhY3kgYHByb2Nlc3MuYmluZGluZygndXRpbCcpYCBmb3IgTm9kZS5qcyA8IDEwLlxuICAgICAgcmV0dXJuIGZyZWVQcm9jZXNzICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcgJiYgZnJlZVByb2Nlc3MuYmluZGluZygndXRpbCcpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH0oKSk7XG5cbiAgLyogTm9kZS5qcyBoZWxwZXIgcmVmZXJlbmNlcy4gKi9cbiAgdmFyIG5vZGVJc0FycmF5QnVmZmVyID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNBcnJheUJ1ZmZlcixcbiAgICAgIG5vZGVJc0RhdGUgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc0RhdGUsXG4gICAgICBub2RlSXNNYXAgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc01hcCxcbiAgICAgIG5vZGVJc1JlZ0V4cCA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzUmVnRXhwLFxuICAgICAgbm9kZUlzU2V0ID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNTZXQsXG4gICAgICBub2RlSXNUeXBlZEFycmF5ID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNUeXBlZEFycmF5O1xuXG4gIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gIC8qKlxuICAgKiBBIGZhc3RlciBhbHRlcm5hdGl2ZSB0byBgRnVuY3Rpb24jYXBwbHlgLCB0aGlzIGZ1bmN0aW9uIGludm9rZXMgYGZ1bmNgXG4gICAqIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIGB0aGlzQXJnYCBhbmQgdGhlIGFyZ3VtZW50cyBvZiBgYXJnc2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGludm9rZS5cbiAgICogQHBhcmFtIHsqfSB0aGlzQXJnIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgYGZ1bmNgIHdpdGguXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXN1bHQgb2YgYGZ1bmNgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXBwbHkoZnVuYywgdGhpc0FyZywgYXJncykge1xuICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgIGNhc2UgMDogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnKTtcbiAgICAgIGNhc2UgMTogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdKTtcbiAgICAgIGNhc2UgMjogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgIGNhc2UgMzogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpc0FyZywgYXJncyk7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlQWdncmVnYXRvcmAgZm9yIGFycmF5cy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZXR0ZXIgVGhlIGZ1bmN0aW9uIHRvIHNldCBgYWNjdW11bGF0b3JgIHZhbHVlcy5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGl0ZXJhdGVlIHRvIHRyYW5zZm9ybSBrZXlzLlxuICAgKiBAcGFyYW0ge09iamVjdH0gYWNjdW11bGF0b3IgVGhlIGluaXRpYWwgYWdncmVnYXRlZCBvYmplY3QuXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgYWNjdW11bGF0b3JgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlBZ2dyZWdhdG9yKGFycmF5LCBzZXR0ZXIsIGl0ZXJhdGVlLCBhY2N1bXVsYXRvcikge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgICBzZXR0ZXIoYWNjdW11bGF0b3IsIHZhbHVlLCBpdGVyYXRlZSh2YWx1ZSksIGFycmF5KTtcbiAgICB9XG4gICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5mb3JFYWNoYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5RWFjaChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgaWYgKGl0ZXJhdGVlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uZm9yRWFjaFJpZ2h0YCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5RWFjaFJpZ2h0KGFycmF5LCBpdGVyYXRlZSkge1xuICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgaWYgKGl0ZXJhdGVlKGFycmF5W2xlbmd0aF0sIGxlbmd0aCwgYXJyYXkpID09PSBmYWxzZSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFycmF5O1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5ldmVyeWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbGwgZWxlbWVudHMgcGFzcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlFdmVyeShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmICghcHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5maWx0ZXJgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmaWx0ZXJlZCBhcnJheS5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5RmlsdGVyKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uaW5jbHVkZXNgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBzcGVjaWZ5aW5nIGFuIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHRhcmdldCBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB0YXJnZXRgIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheUluY2x1ZGVzKGFycmF5LCB2YWx1ZSkge1xuICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICByZXR1cm4gISFsZW5ndGggJiYgYmFzZUluZGV4T2YoYXJyYXksIHZhbHVlLCAwKSA+IC0xO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZSBgYXJyYXlJbmNsdWRlc2AgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBhIGNvbXBhcmF0b3IuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdGFyZ2V0IFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb21wYXJhdG9yIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdGFyZ2V0YCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlJbmNsdWRlc1dpdGgoYXJyYXksIHZhbHVlLCBjb21wYXJhdG9yKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChjb21wYXJhdG9yKHZhbHVlLCBhcnJheVtpbmRleF0pKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLm1hcGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gICAqIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIGFycmF5LlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlNYXAoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgICByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIHJlc3VsdFtpbmRleF0gPSBpdGVyYXRlZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQXBwZW5kcyB0aGUgZWxlbWVudHMgb2YgYHZhbHVlc2AgdG8gYGFycmF5YC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gYXBwZW5kLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5UHVzaChhcnJheSwgdmFsdWVzKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICAgIG9mZnNldCA9IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBhcnJheVtvZmZzZXQgKyBpbmRleF0gPSB2YWx1ZXNbaW5kZXhdO1xuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnJlZHVjZWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIFRoZSBpbml0aWFsIHZhbHVlLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpbml0QWNjdW1dIFNwZWNpZnkgdXNpbmcgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYGFycmF5YCBhc1xuICAgKiAgdGhlIGluaXRpYWwgdmFsdWUuXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5UmVkdWNlKGFycmF5LCBpdGVyYXRlZSwgYWNjdW11bGF0b3IsIGluaXRBY2N1bSkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIGlmIChpbml0QWNjdW0gJiYgbGVuZ3RoKSB7XG4gICAgICBhY2N1bXVsYXRvciA9IGFycmF5WysraW5kZXhdO1xuICAgIH1cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgYWNjdW11bGF0b3IgPSBpdGVyYXRlZShhY2N1bXVsYXRvciwgYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpO1xuICAgIH1cbiAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnJlZHVjZVJpZ2h0YCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcGFyYW0geyp9IFthY2N1bXVsYXRvcl0gVGhlIGluaXRpYWwgdmFsdWUuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2luaXRBY2N1bV0gU3BlY2lmeSB1c2luZyB0aGUgbGFzdCBlbGVtZW50IG9mIGBhcnJheWAgYXNcbiAgICogIHRoZSBpbml0aWFsIHZhbHVlLlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheVJlZHVjZVJpZ2h0KGFycmF5LCBpdGVyYXRlZSwgYWNjdW11bGF0b3IsIGluaXRBY2N1bSkge1xuICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICBpZiAoaW5pdEFjY3VtICYmIGxlbmd0aCkge1xuICAgICAgYWNjdW11bGF0b3IgPSBhcnJheVstLWxlbmd0aF07XG4gICAgfVxuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgYWNjdW11bGF0b3IgPSBpdGVyYXRlZShhY2N1bXVsYXRvciwgYXJyYXlbbGVuZ3RoXSwgbGVuZ3RoLCBhcnJheSk7XG4gICAgfVxuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uc29tZWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gICAqIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbnkgZWxlbWVudCBwYXNzZXMgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAgICogIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5U29tZShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgc2l6ZSBvZiBhbiBBU0NJSSBgc3RyaW5nYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN0cmluZyBzaXplLlxuICAgKi9cbiAgdmFyIGFzY2lpU2l6ZSA9IGJhc2VQcm9wZXJ0eSgnbGVuZ3RoJyk7XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGFuIEFTQ0lJIGBzdHJpbmdgIHRvIGFuIGFycmF5LlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgYXJyYXkuXG4gICAqL1xuICBmdW5jdGlvbiBhc2NpaVRvQXJyYXkoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZy5zcGxpdCgnJyk7XG4gIH1cblxuICAvKipcbiAgICogU3BsaXRzIGFuIEFTQ0lJIGBzdHJpbmdgIGludG8gYW4gYXJyYXkgb2YgaXRzIHdvcmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHdvcmRzIG9mIGBzdHJpbmdgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXNjaWlXb3JkcyhzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyaW5nLm1hdGNoKHJlQXNjaWlXb3JkKSB8fCBbXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBtZXRob2RzIGxpa2UgYF8uZmluZEtleWAgYW5kIGBfLmZpbmRMYXN0S2V5YCxcbiAgICogd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLCB3aGljaCBpdGVyYXRlcyBvdmVyIGBjb2xsZWN0aW9uYFxuICAgKiB1c2luZyBgZWFjaEZ1bmNgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZWFjaEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGl0ZXJhdGUgb3ZlciBgY29sbGVjdGlvbmAuXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBmb3VuZCBlbGVtZW50IG9yIGl0cyBrZXksIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlRmluZEtleShjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGVhY2hGdW5jKSB7XG4gICAgdmFyIHJlc3VsdDtcbiAgICBlYWNoRnVuYyhjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSB7XG4gICAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pKSB7XG4gICAgICAgIHJlc3VsdCA9IGtleTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZmluZEluZGV4YCBhbmQgYF8uZmluZExhc3RJbmRleGAgd2l0aG91dFxuICAgKiBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VGaW5kSW5kZXgoYXJyYXksIHByZWRpY2F0ZSwgZnJvbUluZGV4LCBmcm9tUmlnaHQpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICBpbmRleCA9IGZyb21JbmRleCArIChmcm9tUmlnaHQgPyAxIDogLTEpO1xuXG4gICAgd2hpbGUgKChmcm9tUmlnaHQgPyBpbmRleC0tIDogKytpbmRleCA8IGxlbmd0aCkpIHtcbiAgICAgIGlmIChwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmluZGV4T2ZgIHdpdGhvdXQgYGZyb21JbmRleGAgYm91bmRzIGNoZWNrcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZUluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IHZhbHVlXG4gICAgICA/IHN0cmljdEluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpXG4gICAgICA6IGJhc2VGaW5kSW5kZXgoYXJyYXksIGJhc2VJc05hTiwgZnJvbUluZGV4KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGJhc2VJbmRleE9mYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGEgY29tcGFyYXRvci5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb21wYXJhdG9yIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlSW5kZXhPZldpdGgoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgsIGNvbXBhcmF0b3IpIHtcbiAgICB2YXIgaW5kZXggPSBmcm9tSW5kZXggLSAxLFxuICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgaWYgKGNvbXBhcmF0b3IoYXJyYXlbaW5kZXhdLCB2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gLTE7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNOYU5gIHdpdGhvdXQgc3VwcG9ydCBmb3IgbnVtYmVyIG9iamVjdHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBgTmFOYCwgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZUlzTmFOKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICE9PSB2YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tZWFuYCBhbmQgYF8ubWVhbkJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG1lYW4uXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlTWVhbihhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgcmV0dXJuIGxlbmd0aCA/IChiYXNlU3VtKGFycmF5LCBpdGVyYXRlZSkgLyBsZW5ndGgpIDogTkFOO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnByb3BlcnR5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VQcm9wZXJ0eShrZXkpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3Rba2V5XTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnByb3BlcnR5T2ZgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVlcCBwYXRocy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VQcm9wZXJ0eU9mKG9iamVjdCkge1xuICAgIHJldHVybiBmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmVkdWNlYCBhbmQgYF8ucmVkdWNlUmlnaHRgLCB3aXRob3V0IHN1cHBvcnRcbiAgICogZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMsIHdoaWNoIGl0ZXJhdGVzIG92ZXIgYGNvbGxlY3Rpb25gIHVzaW5nIGBlYWNoRnVuY2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHBhcmFtIHsqfSBhY2N1bXVsYXRvciBUaGUgaW5pdGlhbCB2YWx1ZS5cbiAgICogQHBhcmFtIHtib29sZWFufSBpbml0QWNjdW0gU3BlY2lmeSB1c2luZyB0aGUgZmlyc3Qgb3IgbGFzdCBlbGVtZW50IG9mXG4gICAqICBgY29sbGVjdGlvbmAgYXMgdGhlIGluaXRpYWwgdmFsdWUuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGVhY2hGdW5jIFRoZSBmdW5jdGlvbiB0byBpdGVyYXRlIG92ZXIgYGNvbGxlY3Rpb25gLlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlUmVkdWNlKGNvbGxlY3Rpb24sIGl0ZXJhdGVlLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtLCBlYWNoRnVuYykge1xuICAgIGVhY2hGdW5jKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgICAgYWNjdW11bGF0b3IgPSBpbml0QWNjdW1cbiAgICAgICAgPyAoaW5pdEFjY3VtID0gZmFsc2UsIHZhbHVlKVxuICAgICAgICA6IGl0ZXJhdGVlKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pO1xuICAgIH0pO1xuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zb3J0QnlgIHdoaWNoIHVzZXMgYGNvbXBhcmVyYCB0byBkZWZpbmUgdGhlXG4gICAqIHNvcnQgb3JkZXIgb2YgYGFycmF5YCBhbmQgcmVwbGFjZXMgY3JpdGVyaWEgb2JqZWN0cyB3aXRoIHRoZWlyIGNvcnJlc3BvbmRpbmdcbiAgICogdmFsdWVzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc29ydC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY29tcGFyZXIgVGhlIGZ1bmN0aW9uIHRvIGRlZmluZSBzb3J0IG9yZGVyLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VTb3J0QnkoYXJyYXksIGNvbXBhcmVyKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgIGFycmF5LnNvcnQoY29tcGFyZXIpO1xuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgYXJyYXlbbGVuZ3RoXSA9IGFycmF5W2xlbmd0aF0udmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zdW1gIGFuZCBgXy5zdW1CeWAgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzdW0uXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlU3VtKGFycmF5LCBpdGVyYXRlZSkge1xuICAgIHZhciByZXN1bHQsXG4gICAgICAgIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICB2YXIgY3VycmVudCA9IGl0ZXJhdGVlKGFycmF5W2luZGV4XSk7XG4gICAgICBpZiAoY3VycmVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdCA9PT0gdW5kZWZpbmVkID8gY3VycmVudCA6IChyZXN1bHQgKyBjdXJyZW50KTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50aW1lc2Agd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzXG4gICAqIG9yIG1heCBhcnJheSBsZW5ndGggY2hlY2tzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIGludm9rZSBgaXRlcmF0ZWVgLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHJlc3VsdHMuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlVGltZXMobiwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgcmVzdWx0ID0gQXJyYXkobik7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IG4pIHtcbiAgICAgIHJlc3VsdFtpbmRleF0gPSBpdGVyYXRlZShpbmRleCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udG9QYWlyc2AgYW5kIGBfLnRvUGFpcnNJbmAgd2hpY2ggY3JlYXRlcyBhbiBhcnJheVxuICAgKiBvZiBrZXktdmFsdWUgcGFpcnMgZm9yIGBvYmplY3RgIGNvcnJlc3BvbmRpbmcgdG8gdGhlIHByb3BlcnR5IG5hbWVzIG9mIGBwcm9wc2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IG5hbWVzIHRvIGdldCB2YWx1ZXMgZm9yLlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBrZXktdmFsdWUgcGFpcnMuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlVG9QYWlycyhvYmplY3QsIHByb3BzKSB7XG4gICAgcmV0dXJuIGFycmF5TWFwKHByb3BzLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiBba2V5LCBvYmplY3Rba2V5XV07XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udW5hcnlgIHdpdGhvdXQgc3VwcG9ydCBmb3Igc3RvcmluZyBtZXRhZGF0YS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2FwIGFyZ3VtZW50cyBmb3IuXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNhcHBlZCBmdW5jdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VVbmFyeShmdW5jKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gZnVuYyh2YWx1ZSk7XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy52YWx1ZXNgIGFuZCBgXy52YWx1ZXNJbmAgd2hpY2ggY3JlYXRlcyBhblxuICAgKiBhcnJheSBvZiBgb2JqZWN0YCBwcm9wZXJ0eSB2YWx1ZXMgY29ycmVzcG9uZGluZyB0byB0aGUgcHJvcGVydHkgbmFtZXNcbiAgICogb2YgYHByb3BzYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgKiBAcGFyYW0ge0FycmF5fSBwcm9wcyBUaGUgcHJvcGVydHkgbmFtZXMgdG8gZ2V0IHZhbHVlcyBmb3IuXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IHZhbHVlcy5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VWYWx1ZXMob2JqZWN0LCBwcm9wcykge1xuICAgIHJldHVybiBhcnJheU1hcChwcm9wcywgZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gb2JqZWN0W2tleV07XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIGEgYGNhY2hlYCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gY2FjaGUgVGhlIGNhY2hlIHRvIHF1ZXJ5LlxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gY2FjaGVIYXMoY2FjaGUsIGtleSkge1xuICAgIHJldHVybiBjYWNoZS5oYXMoa2V5KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLnRyaW1gIGFuZCBgXy50cmltU3RhcnRgIHRvIGdldCB0aGUgaW5kZXggb2YgdGhlIGZpcnN0IHN0cmluZyBzeW1ib2xcbiAgICogdGhhdCBpcyBub3QgZm91bmQgaW4gdGhlIGNoYXJhY3RlciBzeW1ib2xzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBzdHJTeW1ib2xzIFRoZSBzdHJpbmcgc3ltYm9scyB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0ge0FycmF5fSBjaHJTeW1ib2xzIFRoZSBjaGFyYWN0ZXIgc3ltYm9scyB0byBmaW5kLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgZmlyc3QgdW5tYXRjaGVkIHN0cmluZyBzeW1ib2wuXG4gICAqL1xuICBmdW5jdGlvbiBjaGFyc1N0YXJ0SW5kZXgoc3RyU3ltYm9scywgY2hyU3ltYm9scykge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBzdHJTeW1ib2xzLmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoICYmIGJhc2VJbmRleE9mKGNoclN5bWJvbHMsIHN0clN5bWJvbHNbaW5kZXhdLCAwKSA+IC0xKSB7fVxuICAgIHJldHVybiBpbmRleDtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLnRyaW1gIGFuZCBgXy50cmltRW5kYCB0byBnZXQgdGhlIGluZGV4IG9mIHRoZSBsYXN0IHN0cmluZyBzeW1ib2xcbiAgICogdGhhdCBpcyBub3QgZm91bmQgaW4gdGhlIGNoYXJhY3RlciBzeW1ib2xzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBzdHJTeW1ib2xzIFRoZSBzdHJpbmcgc3ltYm9scyB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0ge0FycmF5fSBjaHJTeW1ib2xzIFRoZSBjaGFyYWN0ZXIgc3ltYm9scyB0byBmaW5kLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbGFzdCB1bm1hdGNoZWQgc3RyaW5nIHN5bWJvbC5cbiAgICovXG4gIGZ1bmN0aW9uIGNoYXJzRW5kSW5kZXgoc3RyU3ltYm9scywgY2hyU3ltYm9scykge1xuICAgIHZhciBpbmRleCA9IHN0clN5bWJvbHMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGluZGV4LS0gJiYgYmFzZUluZGV4T2YoY2hyU3ltYm9scywgc3RyU3ltYm9sc1tpbmRleF0sIDApID4gLTEpIHt9XG4gICAgcmV0dXJuIGluZGV4O1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIG51bWJlciBvZiBgcGxhY2Vob2xkZXJgIG9jY3VycmVuY2VzIGluIGBhcnJheWAuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHBsYWNlaG9sZGVyIFRoZSBwbGFjZWhvbGRlciB0byBzZWFyY2ggZm9yLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBwbGFjZWhvbGRlciBjb3VudC5cbiAgICovXG4gIGZ1bmN0aW9uIGNvdW50SG9sZGVycyhhcnJheSwgcGxhY2Vob2xkZXIpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICByZXN1bHQgPSAwO1xuXG4gICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICBpZiAoYXJyYXlbbGVuZ3RoXSA9PT0gcGxhY2Vob2xkZXIpIHtcbiAgICAgICAgKytyZXN1bHQ7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVXNlZCBieSBgXy5kZWJ1cnJgIHRvIGNvbnZlcnQgTGF0aW4tMSBTdXBwbGVtZW50IGFuZCBMYXRpbiBFeHRlbmRlZC1BXG4gICAqIGxldHRlcnMgdG8gYmFzaWMgTGF0aW4gbGV0dGVycy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGxldHRlciBUaGUgbWF0Y2hlZCBsZXR0ZXIgdG8gZGVidXJyLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBkZWJ1cnJlZCBsZXR0ZXIuXG4gICAqL1xuICB2YXIgZGVidXJyTGV0dGVyID0gYmFzZVByb3BlcnR5T2YoZGVidXJyZWRMZXR0ZXJzKTtcblxuICAvKipcbiAgICogVXNlZCBieSBgXy5lc2NhcGVgIHRvIGNvbnZlcnQgY2hhcmFjdGVycyB0byBIVE1MIGVudGl0aWVzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2hyIFRoZSBtYXRjaGVkIGNoYXJhY3RlciB0byBlc2NhcGUuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGVzY2FwZWQgY2hhcmFjdGVyLlxuICAgKi9cbiAgdmFyIGVzY2FwZUh0bWxDaGFyID0gYmFzZVByb3BlcnR5T2YoaHRtbEVzY2FwZXMpO1xuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLnRlbXBsYXRlYCB0byBlc2NhcGUgY2hhcmFjdGVycyBmb3IgaW5jbHVzaW9uIGluIGNvbXBpbGVkIHN0cmluZyBsaXRlcmFscy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNociBUaGUgbWF0Y2hlZCBjaGFyYWN0ZXIgdG8gZXNjYXBlLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBlc2NhcGVkIGNoYXJhY3Rlci5cbiAgICovXG4gIGZ1bmN0aW9uIGVzY2FwZVN0cmluZ0NoYXIoY2hyKSB7XG4gICAgcmV0dXJuICdcXFxcJyArIHN0cmluZ0VzY2FwZXNbY2hyXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSB2YWx1ZSBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUuXG4gICAqL1xuICBmdW5jdGlvbiBnZXRWYWx1ZShvYmplY3QsIGtleSkge1xuICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiBgc3RyaW5nYCBjb250YWlucyBVbmljb2RlIHN5bWJvbHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYSBzeW1ib2wgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGhhc1VuaWNvZGUoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHJlSGFzVW5pY29kZS50ZXN0KHN0cmluZyk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIGBzdHJpbmdgIGNvbnRhaW5zIGEgd29yZCBjb21wb3NlZCBvZiBVbmljb2RlIHN5bWJvbHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYSB3b3JkIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBoYXNVbmljb2RlV29yZChzdHJpbmcpIHtcbiAgICByZXR1cm4gcmVIYXNVbmljb2RlV29yZC50ZXN0KHN0cmluZyk7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYGl0ZXJhdG9yYCB0byBhbiBhcnJheS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IGl0ZXJhdG9yIFRoZSBpdGVyYXRvciB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBhcnJheS5cbiAgICovXG4gIGZ1bmN0aW9uIGl0ZXJhdG9yVG9BcnJheShpdGVyYXRvcikge1xuICAgIHZhciBkYXRhLFxuICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgIHdoaWxlICghKGRhdGEgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmUpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGRhdGEudmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGBtYXBgIHRvIGl0cyBrZXktdmFsdWUgcGFpcnMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBtYXAgVGhlIG1hcCB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGtleS12YWx1ZSBwYWlycy5cbiAgICovXG4gIGZ1bmN0aW9uIG1hcFRvQXJyYXkobWFwKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIHJlc3VsdCA9IEFycmF5KG1hcC5zaXplKTtcblxuICAgIG1hcC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgIHJlc3VsdFsrK2luZGV4XSA9IFtrZXksIHZhbHVlXTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSB1bmFyeSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggaXRzIGFyZ3VtZW50IHRyYW5zZm9ybWVkLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB0cmFuc2Zvcm0gVGhlIGFyZ3VtZW50IHRyYW5zZm9ybS5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAqL1xuICBmdW5jdGlvbiBvdmVyQXJnKGZ1bmMsIHRyYW5zZm9ybSkge1xuICAgIHJldHVybiBmdW5jdGlvbihhcmcpIHtcbiAgICAgIHJldHVybiBmdW5jKHRyYW5zZm9ybShhcmcpKTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFJlcGxhY2VzIGFsbCBgcGxhY2Vob2xkZXJgIGVsZW1lbnRzIGluIGBhcnJheWAgd2l0aCBhbiBpbnRlcm5hbCBwbGFjZWhvbGRlclxuICAgKiBhbmQgcmV0dXJucyBhbiBhcnJheSBvZiB0aGVpciBpbmRleGVzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgKiBAcGFyYW0geyp9IHBsYWNlaG9sZGVyIFRoZSBwbGFjZWhvbGRlciB0byByZXBsYWNlLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgKi9cbiAgZnVuY3Rpb24gcmVwbGFjZUhvbGRlcnMoYXJyYXksIHBsYWNlaG9sZGVyKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgICBpZiAodmFsdWUgPT09IHBsYWNlaG9sZGVyIHx8IHZhbHVlID09PSBQTEFDRUhPTERFUikge1xuICAgICAgICBhcnJheVtpbmRleF0gPSBQTEFDRUhPTERFUjtcbiAgICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYHNldGAgdG8gYW4gYXJyYXkgb2YgaXRzIHZhbHVlcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IHNldCBUaGUgc2V0IHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgdmFsdWVzLlxuICAgKi9cbiAgZnVuY3Rpb24gc2V0VG9BcnJheShzZXQpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgcmVzdWx0ID0gQXJyYXkoc2V0LnNpemUpO1xuXG4gICAgc2V0LmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJlc3VsdFsrK2luZGV4XSA9IHZhbHVlO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYHNldGAgdG8gaXRzIHZhbHVlLXZhbHVlIHBhaXJzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gc2V0IFRoZSBzZXQgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB2YWx1ZS12YWx1ZSBwYWlycy5cbiAgICovXG4gIGZ1bmN0aW9uIHNldFRvUGFpcnMoc2V0KSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIHJlc3VsdCA9IEFycmF5KHNldC5zaXplKTtcblxuICAgIHNldC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXN1bHRbKytpbmRleF0gPSBbdmFsdWUsIHZhbHVlXTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5pbmRleE9mYCB3aGljaCBwZXJmb3JtcyBzdHJpY3QgZXF1YWxpdHlcbiAgICogY29tcGFyaXNvbnMgb2YgdmFsdWVzLCBpLmUuIGA9PT1gLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAqL1xuICBmdW5jdGlvbiBzdHJpY3RJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7XG4gICAgdmFyIGluZGV4ID0gZnJvbUluZGV4IC0gMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChhcnJheVtpbmRleF0gPT09IHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5sYXN0SW5kZXhPZmAgd2hpY2ggcGVyZm9ybXMgc3RyaWN0IGVxdWFsaXR5XG4gICAqIGNvbXBhcmlzb25zIG9mIHZhbHVlcywgaS5lLiBgPT09YC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgKi9cbiAgZnVuY3Rpb24gc3RyaWN0TGFzdEluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgICB2YXIgaW5kZXggPSBmcm9tSW5kZXggKyAxO1xuICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICBpZiAoYXJyYXlbaW5kZXhdID09PSB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBpbmRleDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBudW1iZXIgb2Ygc3ltYm9scyBpbiBgc3RyaW5nYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN0cmluZyBzaXplLlxuICAgKi9cbiAgZnVuY3Rpb24gc3RyaW5nU2l6ZShzdHJpbmcpIHtcbiAgICByZXR1cm4gaGFzVW5pY29kZShzdHJpbmcpXG4gICAgICA/IHVuaWNvZGVTaXplKHN0cmluZylcbiAgICAgIDogYXNjaWlTaXplKHN0cmluZyk7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYHN0cmluZ2AgdG8gYW4gYXJyYXkuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBhcnJheS5cbiAgICovXG4gIGZ1bmN0aW9uIHN0cmluZ1RvQXJyYXkoc3RyaW5nKSB7XG4gICAgcmV0dXJuIGhhc1VuaWNvZGUoc3RyaW5nKVxuICAgICAgPyB1bmljb2RlVG9BcnJheShzdHJpbmcpXG4gICAgICA6IGFzY2lpVG9BcnJheShzdHJpbmcpO1xuICB9XG5cbiAgLyoqXG4gICAqIFVzZWQgYnkgYF8udW5lc2NhcGVgIHRvIGNvbnZlcnQgSFRNTCBlbnRpdGllcyB0byBjaGFyYWN0ZXJzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2hyIFRoZSBtYXRjaGVkIGNoYXJhY3RlciB0byB1bmVzY2FwZS5cbiAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdW5lc2NhcGVkIGNoYXJhY3Rlci5cbiAgICovXG4gIHZhciB1bmVzY2FwZUh0bWxDaGFyID0gYmFzZVByb3BlcnR5T2YoaHRtbFVuZXNjYXBlcyk7XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIHNpemUgb2YgYSBVbmljb2RlIGBzdHJpbmdgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgaW5zcGVjdC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc3RyaW5nIHNpemUuXG4gICAqL1xuICBmdW5jdGlvbiB1bmljb2RlU2l6ZShzdHJpbmcpIHtcbiAgICB2YXIgcmVzdWx0ID0gcmVVbmljb2RlLmxhc3RJbmRleCA9IDA7XG4gICAgd2hpbGUgKHJlVW5pY29kZS50ZXN0KHN0cmluZykpIHtcbiAgICAgICsrcmVzdWx0O1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGEgVW5pY29kZSBgc3RyaW5nYCB0byBhbiBhcnJheS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY29udmVydGVkIGFycmF5LlxuICAgKi9cbiAgZnVuY3Rpb24gdW5pY29kZVRvQXJyYXkoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZy5tYXRjaChyZVVuaWNvZGUpIHx8IFtdO1xuICB9XG5cbiAgLyoqXG4gICAqIFNwbGl0cyBhIFVuaWNvZGUgYHN0cmluZ2AgaW50byBhbiBhcnJheSBvZiBpdHMgd29yZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgd29yZHMgb2YgYHN0cmluZ2AuXG4gICAqL1xuICBmdW5jdGlvbiB1bmljb2RlV29yZHMoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZy5tYXRjaChyZVVuaWNvZGVXb3JkKSB8fCBbXTtcbiAgfVxuXG4gIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgcHJpc3RpbmUgYGxvZGFzaGAgZnVuY3Rpb24gdXNpbmcgdGhlIGBjb250ZXh0YCBvYmplY3QuXG4gICAqXG4gICAqIEBzdGF0aWNcbiAgICogQG1lbWJlck9mIF9cbiAgICogQHNpbmNlIDEuMS4wXG4gICAqIEBjYXRlZ29yeSBVdGlsXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbY29udGV4dD1yb290XSBUaGUgY29udGV4dCBvYmplY3QuXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBhIG5ldyBgbG9kYXNoYCBmdW5jdGlvbi5cbiAgICogQGV4YW1wbGVcbiAgICpcbiAgICogXy5taXhpbih7ICdmb28nOiBfLmNvbnN0YW50KCdmb28nKSB9KTtcbiAgICpcbiAgICogdmFyIGxvZGFzaCA9IF8ucnVuSW5Db250ZXh0KCk7XG4gICAqIGxvZGFzaC5taXhpbih7ICdiYXInOiBsb2Rhc2guY29uc3RhbnQoJ2JhcicpIH0pO1xuICAgKlxuICAgKiBfLmlzRnVuY3Rpb24oXy5mb28pO1xuICAgKiAvLyA9PiB0cnVlXG4gICAqIF8uaXNGdW5jdGlvbihfLmJhcik7XG4gICAqIC8vID0+IGZhbHNlXG4gICAqXG4gICAqIGxvZGFzaC5pc0Z1bmN0aW9uKGxvZGFzaC5mb28pO1xuICAgKiAvLyA9PiBmYWxzZVxuICAgKiBsb2Rhc2guaXNGdW5jdGlvbihsb2Rhc2guYmFyKTtcbiAgICogLy8gPT4gdHJ1ZVxuICAgKlxuICAgKiAvLyBDcmVhdGUgYSBzdXBlZC11cCBgZGVmZXJgIGluIE5vZGUuanMuXG4gICAqIHZhciBkZWZlciA9IF8ucnVuSW5Db250ZXh0KHsgJ3NldFRpbWVvdXQnOiBzZXRJbW1lZGlhdGUgfSkuZGVmZXI7XG4gICAqL1xuICB2YXIgcnVuSW5Db250ZXh0ID0gKGZ1bmN0aW9uIHJ1bkluQ29udGV4dChjb250ZXh0KSB7XG4gICAgY29udGV4dCA9IGNvbnRleHQgPT0gbnVsbCA/IHJvb3QgOiBfLmRlZmF1bHRzKHJvb3QuT2JqZWN0KCksIGNvbnRleHQsIF8ucGljayhyb290LCBjb250ZXh0UHJvcHMpKTtcblxuICAgIC8qKiBCdWlsdC1pbiBjb25zdHJ1Y3RvciByZWZlcmVuY2VzLiAqL1xuICAgIHZhciBBcnJheSA9IGNvbnRleHQuQXJyYXksXG4gICAgICAgIERhdGUgPSBjb250ZXh0LkRhdGUsXG4gICAgICAgIEVycm9yID0gY29udGV4dC5FcnJvcixcbiAgICAgICAgRnVuY3Rpb24gPSBjb250ZXh0LkZ1bmN0aW9uLFxuICAgICAgICBNYXRoID0gY29udGV4dC5NYXRoLFxuICAgICAgICBPYmplY3QgPSBjb250ZXh0Lk9iamVjdCxcbiAgICAgICAgUmVnRXhwID0gY29udGV4dC5SZWdFeHAsXG4gICAgICAgIFN0cmluZyA9IGNvbnRleHQuU3RyaW5nLFxuICAgICAgICBUeXBlRXJyb3IgPSBjb250ZXh0LlR5cGVFcnJvcjtcblxuICAgIC8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbiAgICB2YXIgYXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZSxcbiAgICAgICAgZnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlLFxuICAgICAgICBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbiAgICAvKiogVXNlZCB0byBkZXRlY3Qgb3ZlcnJlYWNoaW5nIGNvcmUtanMgc2hpbXMuICovXG4gICAgdmFyIGNvcmVKc0RhdGEgPSBjb250ZXh0WydfX2NvcmUtanNfc2hhcmVkX18nXTtcblxuICAgIC8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbiAgICB2YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4gICAgLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG4gICAgdmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbiAgICAvKiogVXNlZCB0byBnZW5lcmF0ZSB1bmlxdWUgSURzLiAqL1xuICAgIHZhciBpZENvdW50ZXIgPSAwO1xuXG4gICAgLyoqIFVzZWQgdG8gZGV0ZWN0IG1ldGhvZHMgbWFzcXVlcmFkaW5nIGFzIG5hdGl2ZS4gKi9cbiAgICB2YXIgbWFza1NyY0tleSA9IChmdW5jdGlvbigpIHtcbiAgICAgIHZhciB1aWQgPSAvW14uXSskLy5leGVjKGNvcmVKc0RhdGEgJiYgY29yZUpzRGF0YS5rZXlzICYmIGNvcmVKc0RhdGEua2V5cy5JRV9QUk9UTyB8fCAnJyk7XG4gICAgICByZXR1cm4gdWlkID8gKCdTeW1ib2woc3JjKV8xLicgKyB1aWQpIDogJyc7XG4gICAgfSgpKTtcblxuICAgIC8qKlxuICAgICAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAgICAgKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAgICAgKiBvZiB2YWx1ZXMuXG4gICAgICovXG4gICAgdmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbiAgICAvKiogVXNlZCB0byBpbmZlciB0aGUgYE9iamVjdGAgY29uc3RydWN0b3IuICovXG4gICAgdmFyIG9iamVjdEN0b3JTdHJpbmcgPSBmdW5jVG9TdHJpbmcuY2FsbChPYmplY3QpO1xuXG4gICAgLyoqIFVzZWQgdG8gcmVzdG9yZSB0aGUgb3JpZ2luYWwgYF9gIHJlZmVyZW5jZSBpbiBgXy5ub0NvbmZsaWN0YC4gKi9cbiAgICB2YXIgb2xkRGFzaCA9IHJvb3QuXztcblxuICAgIC8qKiBVc2VkIHRvIGRldGVjdCBpZiBhIG1ldGhvZCBpcyBuYXRpdmUuICovXG4gICAgdmFyIHJlSXNOYXRpdmUgPSBSZWdFeHAoJ14nICtcbiAgICAgIGZ1bmNUb1N0cmluZy5jYWxsKGhhc093blByb3BlcnR5KS5yZXBsYWNlKHJlUmVnRXhwQ2hhciwgJ1xcXFwkJicpXG4gICAgICAucmVwbGFjZSgvaGFzT3duUHJvcGVydHl8KGZ1bmN0aW9uKS4qPyg/PVxcXFxcXCgpfCBmb3IgLis/KD89XFxcXFxcXSkvZywgJyQxLio/JykgKyAnJCdcbiAgICApO1xuXG4gICAgLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG4gICAgdmFyIEJ1ZmZlciA9IG1vZHVsZUV4cG9ydHMgPyBjb250ZXh0LkJ1ZmZlciA6IHVuZGVmaW5lZCxcbiAgICAgICAgU3ltYm9sID0gY29udGV4dC5TeW1ib2wsXG4gICAgICAgIFVpbnQ4QXJyYXkgPSBjb250ZXh0LlVpbnQ4QXJyYXksXG4gICAgICAgIGFsbG9jVW5zYWZlID0gQnVmZmVyID8gQnVmZmVyLmFsbG9jVW5zYWZlIDogdW5kZWZpbmVkLFxuICAgICAgICBnZXRQcm90b3R5cGUgPSBvdmVyQXJnKE9iamVjdC5nZXRQcm90b3R5cGVPZiwgT2JqZWN0KSxcbiAgICAgICAgb2JqZWN0Q3JlYXRlID0gT2JqZWN0LmNyZWF0ZSxcbiAgICAgICAgcHJvcGVydHlJc0VudW1lcmFibGUgPSBvYmplY3RQcm90by5wcm9wZXJ0eUlzRW51bWVyYWJsZSxcbiAgICAgICAgc3BsaWNlID0gYXJyYXlQcm90by5zcGxpY2UsXG4gICAgICAgIHNwcmVhZGFibGVTeW1ib2wgPSBTeW1ib2wgPyBTeW1ib2wuaXNDb25jYXRTcHJlYWRhYmxlIDogdW5kZWZpbmVkLFxuICAgICAgICBzeW1JdGVyYXRvciA9IFN5bWJvbCA/IFN5bWJvbC5pdGVyYXRvciA6IHVuZGVmaW5lZCxcbiAgICAgICAgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbiAgICB2YXIgZGVmaW5lUHJvcGVydHkgPSAoZnVuY3Rpb24oKSB7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgZnVuYyA9IGdldE5hdGl2ZShPYmplY3QsICdkZWZpbmVQcm9wZXJ0eScpO1xuICAgICAgICBmdW5jKHt9LCAnJywge30pO1xuICAgICAgICByZXR1cm4gZnVuYztcbiAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgfSgpKTtcblxuICAgIC8qKiBNb2NrZWQgYnVpbHQtaW5zLiAqL1xuICAgIHZhciBjdHhDbGVhclRpbWVvdXQgPSBjb250ZXh0LmNsZWFyVGltZW91dCAhPT0gcm9vdC5jbGVhclRpbWVvdXQgJiYgY29udGV4dC5jbGVhclRpbWVvdXQsXG4gICAgICAgIGN0eE5vdyA9IERhdGUgJiYgRGF0ZS5ub3cgIT09IHJvb3QuRGF0ZS5ub3cgJiYgRGF0ZS5ub3csXG4gICAgICAgIGN0eFNldFRpbWVvdXQgPSBjb250ZXh0LnNldFRpbWVvdXQgIT09IHJvb3Quc2V0VGltZW91dCAmJiBjb250ZXh0LnNldFRpbWVvdXQ7XG5cbiAgICAvKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG4gICAgdmFyIG5hdGl2ZUNlaWwgPSBNYXRoLmNlaWwsXG4gICAgICAgIG5hdGl2ZUZsb29yID0gTWF0aC5mbG9vcixcbiAgICAgICAgbmF0aXZlR2V0U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMsXG4gICAgICAgIG5hdGl2ZUlzQnVmZmVyID0gQnVmZmVyID8gQnVmZmVyLmlzQnVmZmVyIDogdW5kZWZpbmVkLFxuICAgICAgICBuYXRpdmVJc0Zpbml0ZSA9IGNvbnRleHQuaXNGaW5pdGUsXG4gICAgICAgIG5hdGl2ZUpvaW4gPSBhcnJheVByb3RvLmpvaW4sXG4gICAgICAgIG5hdGl2ZUtleXMgPSBvdmVyQXJnKE9iamVjdC5rZXlzLCBPYmplY3QpLFxuICAgICAgICBuYXRpdmVNYXggPSBNYXRoLm1heCxcbiAgICAgICAgbmF0aXZlTWluID0gTWF0aC5taW4sXG4gICAgICAgIG5hdGl2ZU5vdyA9IERhdGUubm93LFxuICAgICAgICBuYXRpdmVQYXJzZUludCA9IGNvbnRleHQucGFyc2VJbnQsXG4gICAgICAgIG5hdGl2ZVJhbmRvbSA9IE1hdGgucmFuZG9tLFxuICAgICAgICBuYXRpdmVSZXZlcnNlID0gYXJyYXlQcm90by5yZXZlcnNlO1xuXG4gICAgLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xuICAgIHZhciBEYXRhVmlldyA9IGdldE5hdGl2ZShjb250ZXh0LCAnRGF0YVZpZXcnKSxcbiAgICAgICAgTWFwID0gZ2V0TmF0aXZlKGNvbnRleHQsICdNYXAnKSxcbiAgICAgICAgUHJvbWlzZSA9IGdldE5hdGl2ZShjb250ZXh0LCAnUHJvbWlzZScpLFxuICAgICAgICBTZXQgPSBnZXROYXRpdmUoY29udGV4dCwgJ1NldCcpLFxuICAgICAgICBXZWFrTWFwID0gZ2V0TmF0aXZlKGNvbnRleHQsICdXZWFrTWFwJyksXG4gICAgICAgIG5hdGl2ZUNyZWF0ZSA9IGdldE5hdGl2ZShPYmplY3QsICdjcmVhdGUnKTtcblxuICAgIC8qKiBVc2VkIHRvIHN0b3JlIGZ1bmN0aW9uIG1ldGFkYXRhLiAqL1xuICAgIHZhciBtZXRhTWFwID0gV2Vha01hcCAmJiBuZXcgV2Vha01hcDtcblxuICAgIC8qKiBVc2VkIHRvIGxvb2t1cCB1bm1pbmlmaWVkIGZ1bmN0aW9uIG5hbWVzLiAqL1xuICAgIHZhciByZWFsTmFtZXMgPSB7fTtcblxuICAgIC8qKiBVc2VkIHRvIGRldGVjdCBtYXBzLCBzZXRzLCBhbmQgd2Vha21hcHMuICovXG4gICAgdmFyIGRhdGFWaWV3Q3RvclN0cmluZyA9IHRvU291cmNlKERhdGFWaWV3KSxcbiAgICAgICAgbWFwQ3RvclN0cmluZyA9IHRvU291cmNlKE1hcCksXG4gICAgICAgIHByb21pc2VDdG9yU3RyaW5nID0gdG9Tb3VyY2UoUHJvbWlzZSksXG4gICAgICAgIHNldEN0b3JTdHJpbmcgPSB0b1NvdXJjZShTZXQpLFxuICAgICAgICB3ZWFrTWFwQ3RvclN0cmluZyA9IHRvU291cmNlKFdlYWtNYXApO1xuXG4gICAgLyoqIFVzZWQgdG8gY29udmVydCBzeW1ib2xzIHRvIHByaW1pdGl2ZXMgYW5kIHN0cmluZ3MuICovXG4gICAgdmFyIHN5bWJvbFByb3RvID0gU3ltYm9sID8gU3ltYm9sLnByb3RvdHlwZSA6IHVuZGVmaW5lZCxcbiAgICAgICAgc3ltYm9sVmFsdWVPZiA9IHN5bWJvbFByb3RvID8gc3ltYm9sUHJvdG8udmFsdWVPZiA6IHVuZGVmaW5lZCxcbiAgICAgICAgc3ltYm9sVG9TdHJpbmcgPSBzeW1ib2xQcm90byA/IHN5bWJvbFByb3RvLnRvU3RyaW5nIDogdW5kZWZpbmVkO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBsb2Rhc2hgIG9iamVjdCB3aGljaCB3cmFwcyBgdmFsdWVgIHRvIGVuYWJsZSBpbXBsaWNpdCBtZXRob2RcbiAgICAgKiBjaGFpbiBzZXF1ZW5jZXMuIE1ldGhvZHMgdGhhdCBvcGVyYXRlIG9uIGFuZCByZXR1cm4gYXJyYXlzLCBjb2xsZWN0aW9ucyxcbiAgICAgKiBhbmQgZnVuY3Rpb25zIGNhbiBiZSBjaGFpbmVkIHRvZ2V0aGVyLiBNZXRob2RzIHRoYXQgcmV0cmlldmUgYSBzaW5nbGUgdmFsdWVcbiAgICAgKiBvciBtYXkgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlIHdpbGwgYXV0b21hdGljYWxseSBlbmQgdGhlIGNoYWluIHNlcXVlbmNlXG4gICAgICogYW5kIHJldHVybiB0aGUgdW53cmFwcGVkIHZhbHVlLiBPdGhlcndpc2UsIHRoZSB2YWx1ZSBtdXN0IGJlIHVud3JhcHBlZFxuICAgICAqIHdpdGggYF8jdmFsdWVgLlxuICAgICAqXG4gICAgICogRXhwbGljaXQgY2hhaW4gc2VxdWVuY2VzLCB3aGljaCBtdXN0IGJlIHVud3JhcHBlZCB3aXRoIGBfI3ZhbHVlYCwgbWF5IGJlXG4gICAgICogZW5hYmxlZCB1c2luZyBgXy5jaGFpbmAuXG4gICAgICpcbiAgICAgKiBUaGUgZXhlY3V0aW9uIG9mIGNoYWluZWQgbWV0aG9kcyBpcyBsYXp5LCB0aGF0IGlzLCBpdCdzIGRlZmVycmVkIHVudGlsXG4gICAgICogYF8jdmFsdWVgIGlzIGltcGxpY2l0bHkgb3IgZXhwbGljaXRseSBjYWxsZWQuXG4gICAgICpcbiAgICAgKiBMYXp5IGV2YWx1YXRpb24gYWxsb3dzIHNldmVyYWwgbWV0aG9kcyB0byBzdXBwb3J0IHNob3J0Y3V0IGZ1c2lvbi5cbiAgICAgKiBTaG9ydGN1dCBmdXNpb24gaXMgYW4gb3B0aW1pemF0aW9uIHRvIG1lcmdlIGl0ZXJhdGVlIGNhbGxzOyB0aGlzIGF2b2lkc1xuICAgICAqIHRoZSBjcmVhdGlvbiBvZiBpbnRlcm1lZGlhdGUgYXJyYXlzIGFuZCBjYW4gZ3JlYXRseSByZWR1Y2UgdGhlIG51bWJlciBvZlxuICAgICAqIGl0ZXJhdGVlIGV4ZWN1dGlvbnMuIFNlY3Rpb25zIG9mIGEgY2hhaW4gc2VxdWVuY2UgcXVhbGlmeSBmb3Igc2hvcnRjdXRcbiAgICAgKiBmdXNpb24gaWYgdGhlIHNlY3Rpb24gaXMgYXBwbGllZCB0byBhbiBhcnJheSBhbmQgaXRlcmF0ZWVzIGFjY2VwdCBvbmx5XG4gICAgICogb25lIGFyZ3VtZW50LiBUaGUgaGV1cmlzdGljIGZvciB3aGV0aGVyIGEgc2VjdGlvbiBxdWFsaWZpZXMgZm9yIHNob3J0Y3V0XG4gICAgICogZnVzaW9uIGlzIHN1YmplY3QgdG8gY2hhbmdlLlxuICAgICAqXG4gICAgICogQ2hhaW5pbmcgaXMgc3VwcG9ydGVkIGluIGN1c3RvbSBidWlsZHMgYXMgbG9uZyBhcyB0aGUgYF8jdmFsdWVgIG1ldGhvZCBpc1xuICAgICAqIGRpcmVjdGx5IG9yIGluZGlyZWN0bHkgaW5jbHVkZWQgaW4gdGhlIGJ1aWxkLlxuICAgICAqXG4gICAgICogSW4gYWRkaXRpb24gdG8gbG9kYXNoIG1ldGhvZHMsIHdyYXBwZXJzIGhhdmUgYEFycmF5YCBhbmQgYFN0cmluZ2AgbWV0aG9kcy5cbiAgICAgKlxuICAgICAqIFRoZSB3cmFwcGVyIGBBcnJheWAgbWV0aG9kcyBhcmU6XG4gICAgICogYGNvbmNhdGAsIGBqb2luYCwgYHBvcGAsIGBwdXNoYCwgYHNoaWZ0YCwgYHNvcnRgLCBgc3BsaWNlYCwgYW5kIGB1bnNoaWZ0YFxuICAgICAqXG4gICAgICogVGhlIHdyYXBwZXIgYFN0cmluZ2AgbWV0aG9kcyBhcmU6XG4gICAgICogYHJlcGxhY2VgIGFuZCBgc3BsaXRgXG4gICAgICpcbiAgICAgKiBUaGUgd3JhcHBlciBtZXRob2RzIHRoYXQgc3VwcG9ydCBzaG9ydGN1dCBmdXNpb24gYXJlOlxuICAgICAqIGBhdGAsIGBjb21wYWN0YCwgYGRyb3BgLCBgZHJvcFJpZ2h0YCwgYGRyb3BXaGlsZWAsIGBmaWx0ZXJgLCBgZmluZGAsXG4gICAgICogYGZpbmRMYXN0YCwgYGhlYWRgLCBgaW5pdGlhbGAsIGBsYXN0YCwgYG1hcGAsIGByZWplY3RgLCBgcmV2ZXJzZWAsIGBzbGljZWAsXG4gICAgICogYHRhaWxgLCBgdGFrZWAsIGB0YWtlUmlnaHRgLCBgdGFrZVJpZ2h0V2hpbGVgLCBgdGFrZVdoaWxlYCwgYW5kIGB0b0FycmF5YFxuICAgICAqXG4gICAgICogVGhlIGNoYWluYWJsZSB3cmFwcGVyIG1ldGhvZHMgYXJlOlxuICAgICAqIGBhZnRlcmAsIGBhcnlgLCBgYXNzaWduYCwgYGFzc2lnbkluYCwgYGFzc2lnbkluV2l0aGAsIGBhc3NpZ25XaXRoYCwgYGF0YCxcbiAgICAgKiBgYmVmb3JlYCwgYGJpbmRgLCBgYmluZEFsbGAsIGBiaW5kS2V5YCwgYGNhc3RBcnJheWAsIGBjaGFpbmAsIGBjaHVua2AsXG4gICAgICogYGNvbW1pdGAsIGBjb21wYWN0YCwgYGNvbmNhdGAsIGBjb25mb3Jtc2AsIGBjb25zdGFudGAsIGBjb3VudEJ5YCwgYGNyZWF0ZWAsXG4gICAgICogYGN1cnJ5YCwgYGRlYm91bmNlYCwgYGRlZmF1bHRzYCwgYGRlZmF1bHRzRGVlcGAsIGBkZWZlcmAsIGBkZWxheWAsXG4gICAgICogYGRpZmZlcmVuY2VgLCBgZGlmZmVyZW5jZUJ5YCwgYGRpZmZlcmVuY2VXaXRoYCwgYGRyb3BgLCBgZHJvcFJpZ2h0YCxcbiAgICAgKiBgZHJvcFJpZ2h0V2hpbGVgLCBgZHJvcFdoaWxlYCwgYGV4dGVuZGAsIGBleHRlbmRXaXRoYCwgYGZpbGxgLCBgZmlsdGVyYCxcbiAgICAgKiBgZmxhdE1hcGAsIGBmbGF0TWFwRGVlcGAsIGBmbGF0TWFwRGVwdGhgLCBgZmxhdHRlbmAsIGBmbGF0dGVuRGVlcGAsXG4gICAgICogYGZsYXR0ZW5EZXB0aGAsIGBmbGlwYCwgYGZsb3dgLCBgZmxvd1JpZ2h0YCwgYGZyb21QYWlyc2AsIGBmdW5jdGlvbnNgLFxuICAgICAqIGBmdW5jdGlvbnNJbmAsIGBncm91cEJ5YCwgYGluaXRpYWxgLCBgaW50ZXJzZWN0aW9uYCwgYGludGVyc2VjdGlvbkJ5YCxcbiAgICAgKiBgaW50ZXJzZWN0aW9uV2l0aGAsIGBpbnZlcnRgLCBgaW52ZXJ0QnlgLCBgaW52b2tlTWFwYCwgYGl0ZXJhdGVlYCwgYGtleUJ5YCxcbiAgICAgKiBga2V5c2AsIGBrZXlzSW5gLCBgbWFwYCwgYG1hcEtleXNgLCBgbWFwVmFsdWVzYCwgYG1hdGNoZXNgLCBgbWF0Y2hlc1Byb3BlcnR5YCxcbiAgICAgKiBgbWVtb2l6ZWAsIGBtZXJnZWAsIGBtZXJnZVdpdGhgLCBgbWV0aG9kYCwgYG1ldGhvZE9mYCwgYG1peGluYCwgYG5lZ2F0ZWAsXG4gICAgICogYG50aEFyZ2AsIGBvbWl0YCwgYG9taXRCeWAsIGBvbmNlYCwgYG9yZGVyQnlgLCBgb3ZlcmAsIGBvdmVyQXJnc2AsXG4gICAgICogYG92ZXJFdmVyeWAsIGBvdmVyU29tZWAsIGBwYXJ0aWFsYCwgYHBhcnRpYWxSaWdodGAsIGBwYXJ0aXRpb25gLCBgcGlja2AsXG4gICAgICogYHBpY2tCeWAsIGBwbGFudGAsIGBwcm9wZXJ0eWAsIGBwcm9wZXJ0eU9mYCwgYHB1bGxgLCBgcHVsbEFsbGAsIGBwdWxsQWxsQnlgLFxuICAgICAqIGBwdWxsQWxsV2l0aGAsIGBwdWxsQXRgLCBgcHVzaGAsIGByYW5nZWAsIGByYW5nZVJpZ2h0YCwgYHJlYXJnYCwgYHJlamVjdGAsXG4gICAgICogYHJlbW92ZWAsIGByZXN0YCwgYHJldmVyc2VgLCBgc2FtcGxlU2l6ZWAsIGBzZXRgLCBgc2V0V2l0aGAsIGBzaHVmZmxlYCxcbiAgICAgKiBgc2xpY2VgLCBgc29ydGAsIGBzb3J0QnlgLCBgc3BsaWNlYCwgYHNwcmVhZGAsIGB0YWlsYCwgYHRha2VgLCBgdGFrZVJpZ2h0YCxcbiAgICAgKiBgdGFrZVJpZ2h0V2hpbGVgLCBgdGFrZVdoaWxlYCwgYHRhcGAsIGB0aHJvdHRsZWAsIGB0aHJ1YCwgYHRvQXJyYXlgLFxuICAgICAqIGB0b1BhaXJzYCwgYHRvUGFpcnNJbmAsIGB0b1BhdGhgLCBgdG9QbGFpbk9iamVjdGAsIGB0cmFuc2Zvcm1gLCBgdW5hcnlgLFxuICAgICAqIGB1bmlvbmAsIGB1bmlvbkJ5YCwgYHVuaW9uV2l0aGAsIGB1bmlxYCwgYHVuaXFCeWAsIGB1bmlxV2l0aGAsIGB1bnNldGAsXG4gICAgICogYHVuc2hpZnRgLCBgdW56aXBgLCBgdW56aXBXaXRoYCwgYHVwZGF0ZWAsIGB1cGRhdGVXaXRoYCwgYHZhbHVlc2AsXG4gICAgICogYHZhbHVlc0luYCwgYHdpdGhvdXRgLCBgd3JhcGAsIGB4b3JgLCBgeG9yQnlgLCBgeG9yV2l0aGAsIGB6aXBgLFxuICAgICAqIGB6aXBPYmplY3RgLCBgemlwT2JqZWN0RGVlcGAsIGFuZCBgemlwV2l0aGBcbiAgICAgKlxuICAgICAqIFRoZSB3cmFwcGVyIG1ldGhvZHMgdGhhdCBhcmUgKipub3QqKiBjaGFpbmFibGUgYnkgZGVmYXVsdCBhcmU6XG4gICAgICogYGFkZGAsIGBhdHRlbXB0YCwgYGNhbWVsQ2FzZWAsIGBjYXBpdGFsaXplYCwgYGNlaWxgLCBgY2xhbXBgLCBgY2xvbmVgLFxuICAgICAqIGBjbG9uZURlZXBgLCBgY2xvbmVEZWVwV2l0aGAsIGBjbG9uZVdpdGhgLCBgY29uZm9ybXNUb2AsIGBkZWJ1cnJgLFxuICAgICAqIGBkZWZhdWx0VG9gLCBgZGl2aWRlYCwgYGVhY2hgLCBgZWFjaFJpZ2h0YCwgYGVuZHNXaXRoYCwgYGVxYCwgYGVzY2FwZWAsXG4gICAgICogYGVzY2FwZVJlZ0V4cGAsIGBldmVyeWAsIGBmaW5kYCwgYGZpbmRJbmRleGAsIGBmaW5kS2V5YCwgYGZpbmRMYXN0YCxcbiAgICAgKiBgZmluZExhc3RJbmRleGAsIGBmaW5kTGFzdEtleWAsIGBmaXJzdGAsIGBmbG9vcmAsIGBmb3JFYWNoYCwgYGZvckVhY2hSaWdodGAsXG4gICAgICogYGZvckluYCwgYGZvckluUmlnaHRgLCBgZm9yT3duYCwgYGZvck93blJpZ2h0YCwgYGdldGAsIGBndGAsIGBndGVgLCBgaGFzYCxcbiAgICAgKiBgaGFzSW5gLCBgaGVhZGAsIGBpZGVudGl0eWAsIGBpbmNsdWRlc2AsIGBpbmRleE9mYCwgYGluUmFuZ2VgLCBgaW52b2tlYCxcbiAgICAgKiBgaXNBcmd1bWVudHNgLCBgaXNBcnJheWAsIGBpc0FycmF5QnVmZmVyYCwgYGlzQXJyYXlMaWtlYCwgYGlzQXJyYXlMaWtlT2JqZWN0YCxcbiAgICAgKiBgaXNCb29sZWFuYCwgYGlzQnVmZmVyYCwgYGlzRGF0ZWAsIGBpc0VsZW1lbnRgLCBgaXNFbXB0eWAsIGBpc0VxdWFsYCxcbiAgICAgKiBgaXNFcXVhbFdpdGhgLCBgaXNFcnJvcmAsIGBpc0Zpbml0ZWAsIGBpc0Z1bmN0aW9uYCwgYGlzSW50ZWdlcmAsIGBpc0xlbmd0aGAsXG4gICAgICogYGlzTWFwYCwgYGlzTWF0Y2hgLCBgaXNNYXRjaFdpdGhgLCBgaXNOYU5gLCBgaXNOYXRpdmVgLCBgaXNOaWxgLCBgaXNOdWxsYCxcbiAgICAgKiBgaXNOdW1iZXJgLCBgaXNPYmplY3RgLCBgaXNPYmplY3RMaWtlYCwgYGlzUGxhaW5PYmplY3RgLCBgaXNSZWdFeHBgLFxuICAgICAqIGBpc1NhZmVJbnRlZ2VyYCwgYGlzU2V0YCwgYGlzU3RyaW5nYCwgYGlzVW5kZWZpbmVkYCwgYGlzVHlwZWRBcnJheWAsXG4gICAgICogYGlzV2Vha01hcGAsIGBpc1dlYWtTZXRgLCBgam9pbmAsIGBrZWJhYkNhc2VgLCBgbGFzdGAsIGBsYXN0SW5kZXhPZmAsXG4gICAgICogYGxvd2VyQ2FzZWAsIGBsb3dlckZpcnN0YCwgYGx0YCwgYGx0ZWAsIGBtYXhgLCBgbWF4QnlgLCBgbWVhbmAsIGBtZWFuQnlgLFxuICAgICAqIGBtaW5gLCBgbWluQnlgLCBgbXVsdGlwbHlgLCBgbm9Db25mbGljdGAsIGBub29wYCwgYG5vd2AsIGBudGhgLCBgcGFkYCxcbiAgICAgKiBgcGFkRW5kYCwgYHBhZFN0YXJ0YCwgYHBhcnNlSW50YCwgYHBvcGAsIGByYW5kb21gLCBgcmVkdWNlYCwgYHJlZHVjZVJpZ2h0YCxcbiAgICAgKiBgcmVwZWF0YCwgYHJlc3VsdGAsIGByb3VuZGAsIGBydW5JbkNvbnRleHRgLCBgc2FtcGxlYCwgYHNoaWZ0YCwgYHNpemVgLFxuICAgICAqIGBzbmFrZUNhc2VgLCBgc29tZWAsIGBzb3J0ZWRJbmRleGAsIGBzb3J0ZWRJbmRleEJ5YCwgYHNvcnRlZExhc3RJbmRleGAsXG4gICAgICogYHNvcnRlZExhc3RJbmRleEJ5YCwgYHN0YXJ0Q2FzZWAsIGBzdGFydHNXaXRoYCwgYHN0dWJBcnJheWAsIGBzdHViRmFsc2VgLFxuICAgICAqIGBzdHViT2JqZWN0YCwgYHN0dWJTdHJpbmdgLCBgc3R1YlRydWVgLCBgc3VidHJhY3RgLCBgc3VtYCwgYHN1bUJ5YCxcbiAgICAgKiBgdGVtcGxhdGVgLCBgdGltZXNgLCBgdG9GaW5pdGVgLCBgdG9JbnRlZ2VyYCwgYHRvSlNPTmAsIGB0b0xlbmd0aGAsXG4gICAgICogYHRvTG93ZXJgLCBgdG9OdW1iZXJgLCBgdG9TYWZlSW50ZWdlcmAsIGB0b1N0cmluZ2AsIGB0b1VwcGVyYCwgYHRyaW1gLFxuICAgICAqIGB0cmltRW5kYCwgYHRyaW1TdGFydGAsIGB0cnVuY2F0ZWAsIGB1bmVzY2FwZWAsIGB1bmlxdWVJZGAsIGB1cHBlckNhc2VgLFxuICAgICAqIGB1cHBlckZpcnN0YCwgYHZhbHVlYCwgYW5kIGB3b3Jkc2BcbiAgICAgKlxuICAgICAqIEBuYW1lIF9cbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gd3JhcCBpbiBhIGBsb2Rhc2hgIGluc3RhbmNlLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICAgICAqICAgcmV0dXJuIG4gKiBuO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciB3cmFwcGVkID0gXyhbMSwgMiwgM10pO1xuICAgICAqXG4gICAgICogLy8gUmV0dXJucyBhbiB1bndyYXBwZWQgdmFsdWUuXG4gICAgICogd3JhcHBlZC5yZWR1Y2UoXy5hZGQpO1xuICAgICAqIC8vID0+IDZcbiAgICAgKlxuICAgICAqIC8vIFJldHVybnMgYSB3cmFwcGVkIHZhbHVlLlxuICAgICAqIHZhciBzcXVhcmVzID0gd3JhcHBlZC5tYXAoc3F1YXJlKTtcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheShzcXVhcmVzKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5KHNxdWFyZXMudmFsdWUoKSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxvZGFzaCh2YWx1ZSkge1xuICAgICAgaWYgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgIWlzQXJyYXkodmFsdWUpICYmICEodmFsdWUgaW5zdGFuY2VvZiBMYXp5V3JhcHBlcikpIHtcbiAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgTG9kYXNoV3JhcHBlcikge1xuICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgJ19fd3JhcHBlZF9fJykpIHtcbiAgICAgICAgICByZXR1cm4gd3JhcHBlckNsb25lKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG5ldyBMb2Rhc2hXcmFwcGVyKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jcmVhdGVgIHdpdGhvdXQgc3VwcG9ydCBmb3IgYXNzaWduaW5nXG4gICAgICogcHJvcGVydGllcyB0byB0aGUgY3JlYXRlZCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwcm90byBUaGUgb2JqZWN0IHRvIGluaGVyaXQgZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqL1xuICAgIHZhciBiYXNlQ3JlYXRlID0gKGZ1bmN0aW9uKCkge1xuICAgICAgZnVuY3Rpb24gb2JqZWN0KCkge31cbiAgICAgIHJldHVybiBmdW5jdGlvbihwcm90bykge1xuICAgICAgICBpZiAoIWlzT2JqZWN0KHByb3RvKSkge1xuICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob2JqZWN0Q3JlYXRlKSB7XG4gICAgICAgICAgcmV0dXJuIG9iamVjdENyZWF0ZShwcm90byk7XG4gICAgICAgIH1cbiAgICAgICAgb2JqZWN0LnByb3RvdHlwZSA9IHByb3RvO1xuICAgICAgICB2YXIgcmVzdWx0ID0gbmV3IG9iamVjdDtcbiAgICAgICAgb2JqZWN0LnByb3RvdHlwZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgfSgpKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBmdW5jdGlvbiB3aG9zZSBwcm90b3R5cGUgY2hhaW4gc2VxdWVuY2Ugd3JhcHBlcnMgaW5oZXJpdCBmcm9tLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTG9kYXNoKCkge1xuICAgICAgLy8gTm8gb3BlcmF0aW9uIHBlcmZvcm1lZC5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBjb25zdHJ1Y3RvciBmb3IgY3JlYXRpbmcgYGxvZGFzaGAgd3JhcHBlciBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2NoYWluQWxsXSBFbmFibGUgZXhwbGljaXQgbWV0aG9kIGNoYWluIHNlcXVlbmNlcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBMb2Rhc2hXcmFwcGVyKHZhbHVlLCBjaGFpbkFsbCkge1xuICAgICAgdGhpcy5fX3dyYXBwZWRfXyA9IHZhbHVlO1xuICAgICAgdGhpcy5fX2FjdGlvbnNfXyA9IFtdO1xuICAgICAgdGhpcy5fX2NoYWluX18gPSAhIWNoYWluQWxsO1xuICAgICAgdGhpcy5fX2luZGV4X18gPSAwO1xuICAgICAgdGhpcy5fX3ZhbHVlc19fID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEJ5IGRlZmF1bHQsIHRoZSB0ZW1wbGF0ZSBkZWxpbWl0ZXJzIHVzZWQgYnkgbG9kYXNoIGFyZSBsaWtlIHRob3NlIGluXG4gICAgICogZW1iZWRkZWQgUnVieSAoRVJCKSBhcyB3ZWxsIGFzIEVTMjAxNSB0ZW1wbGF0ZSBzdHJpbmdzLiBDaGFuZ2UgdGhlXG4gICAgICogZm9sbG93aW5nIHRlbXBsYXRlIHNldHRpbmdzIHRvIHVzZSBhbHRlcm5hdGl2ZSBkZWxpbWl0ZXJzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKi9cbiAgICBsb2Rhc2gudGVtcGxhdGVTZXR0aW5ncyA9IHtcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2VkIHRvIGRldGVjdCBgZGF0YWAgcHJvcGVydHkgdmFsdWVzIHRvIGJlIEhUTUwtZXNjYXBlZC5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzXG4gICAgICAgKiBAdHlwZSB7UmVnRXhwfVxuICAgICAgICovXG4gICAgICAnZXNjYXBlJzogcmVFc2NhcGUsXG5cbiAgICAgIC8qKlxuICAgICAgICogVXNlZCB0byBkZXRlY3QgY29kZSB0byBiZSBldmFsdWF0ZWQuXG4gICAgICAgKlxuICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5nc1xuICAgICAgICogQHR5cGUge1JlZ0V4cH1cbiAgICAgICAqL1xuICAgICAgJ2V2YWx1YXRlJzogcmVFdmFsdWF0ZSxcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2VkIHRvIGRldGVjdCBgZGF0YWAgcHJvcGVydHkgdmFsdWVzIHRvIGluamVjdC5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzXG4gICAgICAgKiBAdHlwZSB7UmVnRXhwfVxuICAgICAgICovXG4gICAgICAnaW50ZXJwb2xhdGUnOiByZUludGVycG9sYXRlLFxuXG4gICAgICAvKipcbiAgICAgICAqIFVzZWQgdG8gcmVmZXJlbmNlIHRoZSBkYXRhIG9iamVjdCBpbiB0aGUgdGVtcGxhdGUgdGV4dC5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzXG4gICAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAgICovXG4gICAgICAndmFyaWFibGUnOiAnJyxcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2VkIHRvIGltcG9ydCB2YXJpYWJsZXMgaW50byB0aGUgY29tcGlsZWQgdGVtcGxhdGUuXG4gICAgICAgKlxuICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5nc1xuICAgICAgICogQHR5cGUge09iamVjdH1cbiAgICAgICAqL1xuICAgICAgJ2ltcG9ydHMnOiB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgcmVmZXJlbmNlIHRvIHRoZSBgbG9kYXNoYCBmdW5jdGlvbi5cbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5ncy5pbXBvcnRzXG4gICAgICAgICAqIEB0eXBlIHtGdW5jdGlvbn1cbiAgICAgICAgICovXG4gICAgICAgICdfJzogbG9kYXNoXG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIEVuc3VyZSB3cmFwcGVycyBhcmUgaW5zdGFuY2VzIG9mIGBiYXNlTG9kYXNoYC5cbiAgICBsb2Rhc2gucHJvdG90eXBlID0gYmFzZUxvZGFzaC5wcm90b3R5cGU7XG4gICAgbG9kYXNoLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGxvZGFzaDtcblxuICAgIExvZGFzaFdyYXBwZXIucHJvdG90eXBlID0gYmFzZUNyZWF0ZShiYXNlTG9kYXNoLnByb3RvdHlwZSk7XG4gICAgTG9kYXNoV3JhcHBlci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBMb2Rhc2hXcmFwcGVyO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGxhenkgd3JhcHBlciBvYmplY3Qgd2hpY2ggd3JhcHMgYHZhbHVlYCB0byBlbmFibGUgbGF6eSBldmFsdWF0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB3cmFwLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIExhenlXcmFwcGVyKHZhbHVlKSB7XG4gICAgICB0aGlzLl9fd3JhcHBlZF9fID0gdmFsdWU7XG4gICAgICB0aGlzLl9fYWN0aW9uc19fID0gW107XG4gICAgICB0aGlzLl9fZGlyX18gPSAxO1xuICAgICAgdGhpcy5fX2ZpbHRlcmVkX18gPSBmYWxzZTtcbiAgICAgIHRoaXMuX19pdGVyYXRlZXNfXyA9IFtdO1xuICAgICAgdGhpcy5fX3Rha2VDb3VudF9fID0gTUFYX0FSUkFZX0xFTkdUSDtcbiAgICAgIHRoaXMuX192aWV3c19fID0gW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIHRoZSBsYXp5IHdyYXBwZXIgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBjbG9uZVxuICAgICAqIEBtZW1iZXJPZiBMYXp5V3JhcHBlclxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCBgTGF6eVdyYXBwZXJgIG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsYXp5Q2xvbmUoKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbmV3IExhenlXcmFwcGVyKHRoaXMuX193cmFwcGVkX18pO1xuICAgICAgcmVzdWx0Ll9fYWN0aW9uc19fID0gY29weUFycmF5KHRoaXMuX19hY3Rpb25zX18pO1xuICAgICAgcmVzdWx0Ll9fZGlyX18gPSB0aGlzLl9fZGlyX187XG4gICAgICByZXN1bHQuX19maWx0ZXJlZF9fID0gdGhpcy5fX2ZpbHRlcmVkX187XG4gICAgICByZXN1bHQuX19pdGVyYXRlZXNfXyA9IGNvcHlBcnJheSh0aGlzLl9faXRlcmF0ZWVzX18pO1xuICAgICAgcmVzdWx0Ll9fdGFrZUNvdW50X18gPSB0aGlzLl9fdGFrZUNvdW50X187XG4gICAgICByZXN1bHQuX192aWV3c19fID0gY29weUFycmF5KHRoaXMuX192aWV3c19fKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV2ZXJzZXMgdGhlIGRpcmVjdGlvbiBvZiBsYXp5IGl0ZXJhdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgcmV2ZXJzZVxuICAgICAqIEBtZW1iZXJPZiBMYXp5V3JhcHBlclxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyByZXZlcnNlZCBgTGF6eVdyYXBwZXJgIG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsYXp5UmV2ZXJzZSgpIHtcbiAgICAgIGlmICh0aGlzLl9fZmlsdGVyZWRfXykge1xuICAgICAgICB2YXIgcmVzdWx0ID0gbmV3IExhenlXcmFwcGVyKHRoaXMpO1xuICAgICAgICByZXN1bHQuX19kaXJfXyA9IC0xO1xuICAgICAgICByZXN1bHQuX19maWx0ZXJlZF9fID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdCA9IHRoaXMuY2xvbmUoKTtcbiAgICAgICAgcmVzdWx0Ll9fZGlyX18gKj0gLTE7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEV4dHJhY3RzIHRoZSB1bndyYXBwZWQgdmFsdWUgZnJvbSBpdHMgbGF6eSB3cmFwcGVyLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSB2YWx1ZVxuICAgICAqIEBtZW1iZXJPZiBMYXp5V3JhcHBlclxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSB1bndyYXBwZWQgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGF6eVZhbHVlKCkge1xuICAgICAgdmFyIGFycmF5ID0gdGhpcy5fX3dyYXBwZWRfXy52YWx1ZSgpLFxuICAgICAgICAgIGRpciA9IHRoaXMuX19kaXJfXyxcbiAgICAgICAgICBpc0FyciA9IGlzQXJyYXkoYXJyYXkpLFxuICAgICAgICAgIGlzUmlnaHQgPSBkaXIgPCAwLFxuICAgICAgICAgIGFyckxlbmd0aCA9IGlzQXJyID8gYXJyYXkubGVuZ3RoIDogMCxcbiAgICAgICAgICB2aWV3ID0gZ2V0VmlldygwLCBhcnJMZW5ndGgsIHRoaXMuX192aWV3c19fKSxcbiAgICAgICAgICBzdGFydCA9IHZpZXcuc3RhcnQsXG4gICAgICAgICAgZW5kID0gdmlldy5lbmQsXG4gICAgICAgICAgbGVuZ3RoID0gZW5kIC0gc3RhcnQsXG4gICAgICAgICAgaW5kZXggPSBpc1JpZ2h0ID8gZW5kIDogKHN0YXJ0IC0gMSksXG4gICAgICAgICAgaXRlcmF0ZWVzID0gdGhpcy5fX2l0ZXJhdGVlc19fLFxuICAgICAgICAgIGl0ZXJMZW5ndGggPSBpdGVyYXRlZXMubGVuZ3RoLFxuICAgICAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgICAgICB0YWtlQ291bnQgPSBuYXRpdmVNaW4obGVuZ3RoLCB0aGlzLl9fdGFrZUNvdW50X18pO1xuXG4gICAgICBpZiAoIWlzQXJyIHx8ICghaXNSaWdodCAmJiBhcnJMZW5ndGggPT0gbGVuZ3RoICYmIHRha2VDb3VudCA9PSBsZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBiYXNlV3JhcHBlclZhbHVlKGFycmF5LCB0aGlzLl9fYWN0aW9uc19fKTtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSBbXTtcblxuICAgICAgb3V0ZXI6XG4gICAgICB3aGlsZSAobGVuZ3RoLS0gJiYgcmVzSW5kZXggPCB0YWtlQ291bnQpIHtcbiAgICAgICAgaW5kZXggKz0gZGlyO1xuXG4gICAgICAgIHZhciBpdGVySW5kZXggPSAtMSxcbiAgICAgICAgICAgIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuXG4gICAgICAgIHdoaWxlICgrK2l0ZXJJbmRleCA8IGl0ZXJMZW5ndGgpIHtcbiAgICAgICAgICB2YXIgZGF0YSA9IGl0ZXJhdGVlc1tpdGVySW5kZXhdLFxuICAgICAgICAgICAgICBpdGVyYXRlZSA9IGRhdGEuaXRlcmF0ZWUsXG4gICAgICAgICAgICAgIHR5cGUgPSBkYXRhLnR5cGUsXG4gICAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUodmFsdWUpO1xuXG4gICAgICAgICAgaWYgKHR5cGUgPT0gTEFaWV9NQVBfRkxBRykge1xuICAgICAgICAgICAgdmFsdWUgPSBjb21wdXRlZDtcbiAgICAgICAgICB9IGVsc2UgaWYgKCFjb21wdXRlZCkge1xuICAgICAgICAgICAgaWYgKHR5cGUgPT0gTEFaWV9GSUxURVJfRkxBRykge1xuICAgICAgICAgICAgICBjb250aW51ZSBvdXRlcjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGJyZWFrIG91dGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLy8gRW5zdXJlIGBMYXp5V3JhcHBlcmAgaXMgYW4gaW5zdGFuY2Ugb2YgYGJhc2VMb2Rhc2hgLlxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZSA9IGJhc2VDcmVhdGUoYmFzZUxvZGFzaC5wcm90b3R5cGUpO1xuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IExhenlXcmFwcGVyO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGhhc2ggb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBIYXNoKGVudHJpZXMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgaGFzaC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgY2xlYXJcbiAgICAgKiBAbWVtYmVyT2YgSGFzaFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc2hDbGVhcigpIHtcbiAgICAgIHRoaXMuX19kYXRhX18gPSBuYXRpdmVDcmVhdGUgPyBuYXRpdmVDcmVhdGUobnVsbCkgOiB7fTtcbiAgICAgIHRoaXMuc2l6ZSA9IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGhhc2guXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGRlbGV0ZVxuICAgICAqIEBtZW1iZXJPZiBIYXNoXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGhhc2ggVGhlIGhhc2ggdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNoRGVsZXRlKGtleSkge1xuICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuaGFzKGtleSkgJiYgZGVsZXRlIHRoaXMuX19kYXRhX19ba2V5XTtcbiAgICAgIHRoaXMuc2l6ZSAtPSByZXN1bHQgPyAxIDogMDtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgaGFzaCB2YWx1ZSBmb3IgYGtleWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGdldFxuICAgICAqIEBtZW1iZXJPZiBIYXNoXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc2hHZXQoa2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gICAgICBpZiAobmF0aXZlQ3JlYXRlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBkYXRhW2tleV07XG4gICAgICAgIHJldHVybiByZXN1bHQgPT09IEhBU0hfVU5ERUZJTkVEID8gdW5kZWZpbmVkIDogcmVzdWx0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KSA/IGRhdGFba2V5XSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYSBoYXNoIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGhhc1xuICAgICAqIEBtZW1iZXJPZiBIYXNoXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc2hIYXMoa2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gICAgICByZXR1cm4gbmF0aXZlQ3JlYXRlID8gKGRhdGFba2V5XSAhPT0gdW5kZWZpbmVkKSA6IGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBoYXNoIGBrZXlgIHRvIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIHNldFxuICAgICAqIEBtZW1iZXJPZiBIYXNoXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGhhc2ggaW5zdGFuY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzaFNldChrZXksIHZhbHVlKSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gICAgICB0aGlzLnNpemUgKz0gdGhpcy5oYXMoa2V5KSA/IDAgOiAxO1xuICAgICAgZGF0YVtrZXldID0gKG5hdGl2ZUNyZWF0ZSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkKSA/IEhBU0hfVU5ERUZJTkVEIDogdmFsdWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0byBgSGFzaGAuXG4gICAgSGFzaC5wcm90b3R5cGUuY2xlYXIgPSBoYXNoQ2xlYXI7XG4gICAgSGFzaC5wcm90b3R5cGVbJ2RlbGV0ZSddID0gaGFzaERlbGV0ZTtcbiAgICBIYXNoLnByb3RvdHlwZS5nZXQgPSBoYXNoR2V0O1xuICAgIEhhc2gucHJvdG90eXBlLmhhcyA9IGhhc2hIYXM7XG4gICAgSGFzaC5wcm90b3R5cGUuc2V0ID0gaGFzaFNldDtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gbGlzdCBjYWNoZSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIExpc3RDYWNoZShlbnRyaWVzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgICAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGNsZWFyXG4gICAgICogQG1lbWJlck9mIExpc3RDYWNoZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxpc3RDYWNoZUNsZWFyKCkge1xuICAgICAgdGhpcy5fX2RhdGFfXyA9IFtdO1xuICAgICAgdGhpcy5zaXplID0gMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZGVsZXRlXG4gICAgICogQG1lbWJlck9mIExpc3RDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsaXN0Q2FjaGVEZWxldGUoa2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgbGFzdEluZGV4ID0gZGF0YS5sZW5ndGggLSAxO1xuICAgICAgaWYgKGluZGV4ID09IGxhc3RJbmRleCkge1xuICAgICAgICBkYXRhLnBvcCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3BsaWNlLmNhbGwoZGF0YSwgaW5kZXgsIDEpO1xuICAgICAgfVxuICAgICAgLS10aGlzLnNpemU7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBsaXN0IGNhY2hlIHZhbHVlIGZvciBga2V5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZ2V0XG4gICAgICogQG1lbWJlck9mIExpc3RDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsaXN0Q2FjaGVHZXQoa2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICAgICAgcmV0dXJuIGluZGV4IDwgMCA/IHVuZGVmaW5lZCA6IGRhdGFbaW5kZXhdWzFdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBhIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgaGFzXG4gICAgICogQG1lbWJlck9mIExpc3RDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsaXN0Q2FjaGVIYXMoa2V5KSB7XG4gICAgICByZXR1cm4gYXNzb2NJbmRleE9mKHRoaXMuX19kYXRhX18sIGtleSkgPiAtMTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBsaXN0IGNhY2hlIGBrZXlgIHRvIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIHNldFxuICAgICAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbGlzdCBjYWNoZSBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsaXN0Q2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgKyt0aGlzLnNpemU7XG4gICAgICAgIGRhdGEucHVzaChba2V5LCB2YWx1ZV0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGF0YVtpbmRleF1bMV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBMaXN0Q2FjaGVgLlxuICAgIExpc3RDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBsaXN0Q2FjaGVDbGVhcjtcbiAgICBMaXN0Q2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IGxpc3RDYWNoZURlbGV0ZTtcbiAgICBMaXN0Q2FjaGUucHJvdG90eXBlLmdldCA9IGxpc3RDYWNoZUdldDtcbiAgICBMaXN0Q2FjaGUucHJvdG90eXBlLmhhcyA9IGxpc3RDYWNoZUhhcztcbiAgICBMaXN0Q2FjaGUucHJvdG90eXBlLnNldCA9IGxpc3RDYWNoZVNldDtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBtYXAgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gTWFwQ2FjaGUoZW50cmllcykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICAgICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBtYXAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGNsZWFyXG4gICAgICogQG1lbWJlck9mIE1hcENhY2hlXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwQ2FjaGVDbGVhcigpIHtcbiAgICAgIHRoaXMuc2l6ZSA9IDA7XG4gICAgICB0aGlzLl9fZGF0YV9fID0ge1xuICAgICAgICAnaGFzaCc6IG5ldyBIYXNoLFxuICAgICAgICAnbWFwJzogbmV3IChNYXAgfHwgTGlzdENhY2hlKSxcbiAgICAgICAgJ3N0cmluZyc6IG5ldyBIYXNoXG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBtYXAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGRlbGV0ZVxuICAgICAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBDYWNoZURlbGV0ZShrZXkpIHtcbiAgICAgIHZhciByZXN1bHQgPSBnZXRNYXBEYXRhKHRoaXMsIGtleSlbJ2RlbGV0ZSddKGtleSk7XG4gICAgICB0aGlzLnNpemUgLT0gcmVzdWx0ID8gMSA6IDA7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIG1hcCB2YWx1ZSBmb3IgYGtleWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGdldFxuICAgICAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBDYWNoZUdldChrZXkpIHtcbiAgICAgIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuZ2V0KGtleSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGEgbWFwIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGhhc1xuICAgICAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBDYWNoZUhhcyhrZXkpIHtcbiAgICAgIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuaGFzKGtleSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgbWFwIGBrZXlgIHRvIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIHNldFxuICAgICAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBtYXAgY2FjaGUgaW5zdGFuY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwQ2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIGRhdGEgPSBnZXRNYXBEYXRhKHRoaXMsIGtleSksXG4gICAgICAgICAgc2l6ZSA9IGRhdGEuc2l6ZTtcblxuICAgICAgZGF0YS5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICB0aGlzLnNpemUgKz0gZGF0YS5zaXplID09IHNpemUgPyAwIDogMTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBNYXBDYWNoZWAuXG4gICAgTWFwQ2FjaGUucHJvdG90eXBlLmNsZWFyID0gbWFwQ2FjaGVDbGVhcjtcbiAgICBNYXBDYWNoZS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gbWFwQ2FjaGVEZWxldGU7XG4gICAgTWFwQ2FjaGUucHJvdG90eXBlLmdldCA9IG1hcENhY2hlR2V0O1xuICAgIE1hcENhY2hlLnByb3RvdHlwZS5oYXMgPSBtYXBDYWNoZUhhcztcbiAgICBNYXBDYWNoZS5wcm90b3R5cGUuc2V0ID0gbWFwQ2FjaGVTZXQ7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIHVuaXF1ZSB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gY2FjaGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gU2V0Q2FjaGUodmFsdWVzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSB2YWx1ZXMgPT0gbnVsbCA/IDAgOiB2YWx1ZXMubGVuZ3RoO1xuXG4gICAgICB0aGlzLl9fZGF0YV9fID0gbmV3IE1hcENhY2hlO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdGhpcy5hZGQodmFsdWVzW2luZGV4XSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkcyBgdmFsdWVgIHRvIHRoZSBhcnJheSBjYWNoZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgYWRkXG4gICAgICogQG1lbWJlck9mIFNldENhY2hlXG4gICAgICogQGFsaWFzIHB1c2hcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjYWNoZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjYWNoZSBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXRDYWNoZUFkZCh2YWx1ZSkge1xuICAgICAgdGhpcy5fX2RhdGFfXy5zZXQodmFsdWUsIEhBU0hfVU5ERUZJTkVEKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGluIHRoZSBhcnJheSBjYWNoZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgaGFzXG4gICAgICogQG1lbWJlck9mIFNldENhY2hlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2V0Q2FjaGVIYXModmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fZGF0YV9fLmhhcyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLy8gQWRkIG1ldGhvZHMgdG8gYFNldENhY2hlYC5cbiAgICBTZXRDYWNoZS5wcm90b3R5cGUuYWRkID0gU2V0Q2FjaGUucHJvdG90eXBlLnB1c2ggPSBzZXRDYWNoZUFkZDtcbiAgICBTZXRDYWNoZS5wcm90b3R5cGUuaGFzID0gc2V0Q2FjaGVIYXM7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc3RhY2sgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gU3RhY2soZW50cmllcykge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fID0gbmV3IExpc3RDYWNoZShlbnRyaWVzKTtcbiAgICAgIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBzdGFjay5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgY2xlYXJcbiAgICAgKiBAbWVtYmVyT2YgU3RhY2tcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdGFja0NsZWFyKCkge1xuICAgICAgdGhpcy5fX2RhdGFfXyA9IG5ldyBMaXN0Q2FjaGU7XG4gICAgICB0aGlzLnNpemUgPSAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBzdGFjay5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZGVsZXRlXG4gICAgICogQG1lbWJlck9mIFN0YWNrXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0YWNrRGVsZXRlKGtleSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgICAgIHJlc3VsdCA9IGRhdGFbJ2RlbGV0ZSddKGtleSk7XG5cbiAgICAgIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgc3RhY2sgdmFsdWUgZm9yIGBrZXlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBnZXRcbiAgICAgKiBAbWVtYmVyT2YgU3RhY2tcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RhY2tHZXQoa2V5KSB7XG4gICAgICByZXR1cm4gdGhpcy5fX2RhdGFfXy5nZXQoa2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYSBzdGFjayB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBoYXNcbiAgICAgKiBAbWVtYmVyT2YgU3RhY2tcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RhY2tIYXMoa2V5KSB7XG4gICAgICByZXR1cm4gdGhpcy5fX2RhdGFfXy5oYXMoa2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBzdGFjayBga2V5YCB0byBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBzZXRcbiAgICAgKiBAbWVtYmVyT2YgU3RhY2tcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgc3RhY2sgY2FjaGUgaW5zdGFuY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RhY2tTZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICAgICAgaWYgKGRhdGEgaW5zdGFuY2VvZiBMaXN0Q2FjaGUpIHtcbiAgICAgICAgdmFyIHBhaXJzID0gZGF0YS5fX2RhdGFfXztcbiAgICAgICAgaWYgKCFNYXAgfHwgKHBhaXJzLmxlbmd0aCA8IExBUkdFX0FSUkFZX1NJWkUgLSAxKSkge1xuICAgICAgICAgIHBhaXJzLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgICAgICAgICB0aGlzLnNpemUgPSArK2RhdGEuc2l6ZTtcbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICBkYXRhID0gdGhpcy5fX2RhdGFfXyA9IG5ldyBNYXBDYWNoZShwYWlycyk7XG4gICAgICB9XG4gICAgICBkYXRhLnNldChrZXksIHZhbHVlKTtcbiAgICAgIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBTdGFja2AuXG4gICAgU3RhY2sucHJvdG90eXBlLmNsZWFyID0gc3RhY2tDbGVhcjtcbiAgICBTdGFjay5wcm90b3R5cGVbJ2RlbGV0ZSddID0gc3RhY2tEZWxldGU7XG4gICAgU3RhY2sucHJvdG90eXBlLmdldCA9IHN0YWNrR2V0O1xuICAgIFN0YWNrLnByb3RvdHlwZS5oYXMgPSBzdGFja0hhcztcbiAgICBTdGFjay5wcm90b3R5cGUuc2V0ID0gc3RhY2tTZXQ7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIHRoZSBhcnJheS1saWtlIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gaW5oZXJpdGVkIFNwZWNpZnkgcmV0dXJuaW5nIGluaGVyaXRlZCBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFycmF5TGlrZUtleXModmFsdWUsIGluaGVyaXRlZCkge1xuICAgICAgdmFyIGlzQXJyID0gaXNBcnJheSh2YWx1ZSksXG4gICAgICAgICAgaXNBcmcgPSAhaXNBcnIgJiYgaXNBcmd1bWVudHModmFsdWUpLFxuICAgICAgICAgIGlzQnVmZiA9ICFpc0FyciAmJiAhaXNBcmcgJiYgaXNCdWZmZXIodmFsdWUpLFxuICAgICAgICAgIGlzVHlwZSA9ICFpc0FyciAmJiAhaXNBcmcgJiYgIWlzQnVmZiAmJiBpc1R5cGVkQXJyYXkodmFsdWUpLFxuICAgICAgICAgIHNraXBJbmRleGVzID0gaXNBcnIgfHwgaXNBcmcgfHwgaXNCdWZmIHx8IGlzVHlwZSxcbiAgICAgICAgICByZXN1bHQgPSBza2lwSW5kZXhlcyA/IGJhc2VUaW1lcyh2YWx1ZS5sZW5ndGgsIFN0cmluZykgOiBbXSxcbiAgICAgICAgICBsZW5ndGggPSByZXN1bHQubGVuZ3RoO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICAgICAgaWYgKChpbmhlcml0ZWQgfHwgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwga2V5KSkgJiZcbiAgICAgICAgICAgICEoc2tpcEluZGV4ZXMgJiYgKFxuICAgICAgICAgICAgICAgLy8gU2FmYXJpIDkgaGFzIGVudW1lcmFibGUgYGFyZ3VtZW50cy5sZW5ndGhgIGluIHN0cmljdCBtb2RlLlxuICAgICAgICAgICAgICAga2V5ID09ICdsZW5ndGgnIHx8XG4gICAgICAgICAgICAgICAvLyBOb2RlLmpzIDAuMTAgaGFzIGVudW1lcmFibGUgbm9uLWluZGV4IHByb3BlcnRpZXMgb24gYnVmZmVycy5cbiAgICAgICAgICAgICAgIChpc0J1ZmYgJiYgKGtleSA9PSAnb2Zmc2V0JyB8fCBrZXkgPT0gJ3BhcmVudCcpKSB8fFxuICAgICAgICAgICAgICAgLy8gUGhhbnRvbUpTIDIgaGFzIGVudW1lcmFibGUgbm9uLWluZGV4IHByb3BlcnRpZXMgb24gdHlwZWQgYXJyYXlzLlxuICAgICAgICAgICAgICAgKGlzVHlwZSAmJiAoa2V5ID09ICdidWZmZXInIHx8IGtleSA9PSAnYnl0ZUxlbmd0aCcgfHwga2V5ID09ICdieXRlT2Zmc2V0JykpIHx8XG4gICAgICAgICAgICAgICAvLyBTa2lwIGluZGV4IHByb3BlcnRpZXMuXG4gICAgICAgICAgICAgICBpc0luZGV4KGtleSwgbGVuZ3RoKVxuICAgICAgICAgICAgKSkpIHtcbiAgICAgICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5zYW1wbGVgIGZvciBhcnJheXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzYW1wbGUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJhbmRvbSBlbGVtZW50LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFycmF5U2FtcGxlKGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICAgICAgcmV0dXJuIGxlbmd0aCA/IGFycmF5W2Jhc2VSYW5kb20oMCwgbGVuZ3RoIC0gMSldIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5zYW1wbGVTaXplYCBmb3IgYXJyYXlzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2FtcGxlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gc2FtcGxlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZG9tIGVsZW1lbnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFycmF5U2FtcGxlU2l6ZShhcnJheSwgbikge1xuICAgICAgcmV0dXJuIHNodWZmbGVTZWxmKGNvcHlBcnJheShhcnJheSksIGJhc2VDbGFtcChuLCAwLCBhcnJheS5sZW5ndGgpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uc2h1ZmZsZWAgZm9yIGFycmF5cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNodWZmbGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc2h1ZmZsZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXJyYXlTaHVmZmxlKGFycmF5KSB7XG4gICAgICByZXR1cm4gc2h1ZmZsZVNlbGYoY29weUFycmF5KGFycmF5KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlIGBhc3NpZ25WYWx1ZWAgZXhjZXB0IHRoYXQgaXQgZG9lc24ndCBhc3NpZ25cbiAgICAgKiBgdW5kZWZpbmVkYCB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYXNzaWduLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gICAgICBpZiAoKHZhbHVlICE9PSB1bmRlZmluZWQgJiYgIWVxKG9iamVjdFtrZXldLCB2YWx1ZSkpIHx8XG4gICAgICAgICAgKHZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkpIHtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQXNzaWducyBgdmFsdWVgIHRvIGBrZXlgIG9mIGBvYmplY3RgIGlmIHRoZSBleGlzdGluZyB2YWx1ZSBpcyBub3QgZXF1aXZhbGVudFxuICAgICAqIHVzaW5nIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgICAgIHZhciBvYmpWYWx1ZSA9IG9iamVjdFtrZXldO1xuICAgICAgaWYgKCEoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkgJiYgZXEob2JqVmFsdWUsIHZhbHVlKSkgfHxcbiAgICAgICAgICAodmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSkge1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBpbmRleCBhdCB3aGljaCB0aGUgYGtleWAgaXMgZm91bmQgaW4gYGFycmF5YCBvZiBrZXktdmFsdWUgcGFpcnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0ga2V5IFRoZSBrZXkgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFzc29jSW5kZXhPZihhcnJheSwga2V5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIGlmIChlcShhcnJheVtsZW5ndGhdWzBdLCBrZXkpKSB7XG4gICAgICAgICAgcmV0dXJuIGxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFnZ3JlZ2F0ZXMgZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gIG9uIGBhY2N1bXVsYXRvcmAgd2l0aCBrZXlzIHRyYW5zZm9ybWVkXG4gICAgICogYnkgYGl0ZXJhdGVlYCBhbmQgdmFsdWVzIHNldCBieSBgc2V0dGVyYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHNldHRlciBUaGUgZnVuY3Rpb24gdG8gc2V0IGBhY2N1bXVsYXRvcmAgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBpdGVyYXRlZSB0byB0cmFuc2Zvcm0ga2V5cy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gYWNjdW11bGF0b3IgVGhlIGluaXRpYWwgYWdncmVnYXRlZCBvYmplY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBhY2N1bXVsYXRvcmAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUFnZ3JlZ2F0b3IoY29sbGVjdGlvbiwgc2V0dGVyLCBpdGVyYXRlZSwgYWNjdW11bGF0b3IpIHtcbiAgICAgIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgc2V0dGVyKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaXRlcmF0ZWUodmFsdWUpLCBjb2xsZWN0aW9uKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmFzc2lnbmAgd2l0aG91dCBzdXBwb3J0IGZvciBtdWx0aXBsZSBzb3VyY2VzXG4gICAgICogb3IgYGN1c3RvbWl6ZXJgIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQXNzaWduKG9iamVjdCwgc291cmNlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICYmIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzKHNvdXJjZSksIG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uYXNzaWduSW5gIHdpdGhvdXQgc3VwcG9ydCBmb3IgbXVsdGlwbGUgc291cmNlc1xuICAgICAqIG9yIGBjdXN0b21pemVyYCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUFzc2lnbkluKG9iamVjdCwgc291cmNlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICYmIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzSW4oc291cmNlKSwgb2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgYXNzaWduVmFsdWVgIGFuZCBgYXNzaWduTWVyZ2VWYWx1ZWAgd2l0aG91dFxuICAgICAqIHZhbHVlIGNoZWNrcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbi5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICAgICAgaWYgKGtleSA9PSAnX19wcm90b19fJyAmJiBkZWZpbmVQcm9wZXJ0eSkge1xuICAgICAgICBkZWZpbmVQcm9wZXJ0eShvYmplY3QsIGtleSwge1xuICAgICAgICAgICdjb25maWd1cmFibGUnOiB0cnVlLFxuICAgICAgICAgICdlbnVtZXJhYmxlJzogdHJ1ZSxcbiAgICAgICAgICAndmFsdWUnOiB2YWx1ZSxcbiAgICAgICAgICAnd3JpdGFibGUnOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5hdGAgd2l0aG91dCBzdXBwb3J0IGZvciBpbmRpdmlkdWFsIHBhdGhzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IHBhdGhzIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBwaWNrLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcGlja2VkIGVsZW1lbnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VBdChvYmplY3QsIHBhdGhzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwYXRocy5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKSxcbiAgICAgICAgICBza2lwID0gb2JqZWN0ID09IG51bGw7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFtpbmRleF0gPSBza2lwID8gdW5kZWZpbmVkIDogZ2V0KG9iamVjdCwgcGF0aHNbaW5kZXhdKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uY2xhbXBgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIGNsYW1wLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbG93ZXJdIFRoZSBsb3dlciBib3VuZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdXBwZXIgVGhlIHVwcGVyIGJvdW5kLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNsYW1wZWQgbnVtYmVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VDbGFtcChudW1iZXIsIGxvd2VyLCB1cHBlcikge1xuICAgICAgaWYgKG51bWJlciA9PT0gbnVtYmVyKSB7XG4gICAgICAgIGlmICh1cHBlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgbnVtYmVyID0gbnVtYmVyIDw9IHVwcGVyID8gbnVtYmVyIDogdXBwZXI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxvd2VyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBudW1iZXIgPSBudW1iZXIgPj0gbG93ZXIgPyBudW1iZXIgOiBsb3dlcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jbG9uZWAgYW5kIGBfLmNsb25lRGVlcGAgd2hpY2ggdHJhY2tzXG4gICAgICogdHJhdmVyc2VkIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy5cbiAgICAgKiAgMSAtIERlZXAgY2xvbmVcbiAgICAgKiAgMiAtIEZsYXR0ZW4gaW5oZXJpdGVkIHByb3BlcnRpZXNcbiAgICAgKiAgNCAtIENsb25lIHN5bWJvbHNcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjbG9uaW5nLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBba2V5XSBUaGUga2V5IG9mIGB2YWx1ZWAuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBwYXJlbnQgb2JqZWN0IG9mIGB2YWx1ZWAuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzIGFuZCB0aGVpciBjbG9uZSBjb3VudGVycGFydHMuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGNsb25lZCB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQ2xvbmUodmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGtleSwgb2JqZWN0LCBzdGFjaykge1xuICAgICAgdmFyIHJlc3VsdCxcbiAgICAgICAgICBpc0RlZXAgPSBiaXRtYXNrICYgQ0xPTkVfREVFUF9GTEFHLFxuICAgICAgICAgIGlzRmxhdCA9IGJpdG1hc2sgJiBDTE9ORV9GTEFUX0ZMQUcsXG4gICAgICAgICAgaXNGdWxsID0gYml0bWFzayAmIENMT05FX1NZTUJPTFNfRkxBRztcblxuICAgICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgICAgcmVzdWx0ID0gb2JqZWN0ID8gY3VzdG9taXplcih2YWx1ZSwga2V5LCBvYmplY3QsIHN0YWNrKSA6IGN1c3RvbWl6ZXIodmFsdWUpO1xuICAgICAgfVxuICAgICAgaWYgKHJlc3VsdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICB2YXIgaXNBcnIgPSBpc0FycmF5KHZhbHVlKTtcbiAgICAgIGlmIChpc0Fycikge1xuICAgICAgICByZXN1bHQgPSBpbml0Q2xvbmVBcnJheSh2YWx1ZSk7XG4gICAgICAgIGlmICghaXNEZWVwKSB7XG4gICAgICAgICAgcmV0dXJuIGNvcHlBcnJheSh2YWx1ZSwgcmVzdWx0KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHRhZyA9IGdldFRhZyh2YWx1ZSksXG4gICAgICAgICAgICBpc0Z1bmMgPSB0YWcgPT0gZnVuY1RhZyB8fCB0YWcgPT0gZ2VuVGFnO1xuXG4gICAgICAgIGlmIChpc0J1ZmZlcih2YWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gY2xvbmVCdWZmZXIodmFsdWUsIGlzRGVlcCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRhZyA9PSBvYmplY3RUYWcgfHwgdGFnID09IGFyZ3NUYWcgfHwgKGlzRnVuYyAmJiAhb2JqZWN0KSkge1xuICAgICAgICAgIHJlc3VsdCA9IChpc0ZsYXQgfHwgaXNGdW5jKSA/IHt9IDogaW5pdENsb25lT2JqZWN0KHZhbHVlKTtcbiAgICAgICAgICBpZiAoIWlzRGVlcCkge1xuICAgICAgICAgICAgcmV0dXJuIGlzRmxhdFxuICAgICAgICAgICAgICA/IGNvcHlTeW1ib2xzSW4odmFsdWUsIGJhc2VBc3NpZ25JbihyZXN1bHQsIHZhbHVlKSlcbiAgICAgICAgICAgICAgOiBjb3B5U3ltYm9scyh2YWx1ZSwgYmFzZUFzc2lnbihyZXN1bHQsIHZhbHVlKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICghY2xvbmVhYmxlVGFnc1t0YWddKSB7XG4gICAgICAgICAgICByZXR1cm4gb2JqZWN0ID8gdmFsdWUgOiB7fTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0ID0gaW5pdENsb25lQnlUYWcodmFsdWUsIHRhZywgaXNEZWVwKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gQ2hlY2sgZm9yIGNpcmN1bGFyIHJlZmVyZW5jZXMgYW5kIHJldHVybiBpdHMgY29ycmVzcG9uZGluZyBjbG9uZS5cbiAgICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldCh2YWx1ZSk7XG4gICAgICBpZiAoc3RhY2tlZCkge1xuICAgICAgICByZXR1cm4gc3RhY2tlZDtcbiAgICAgIH1cbiAgICAgIHN0YWNrLnNldCh2YWx1ZSwgcmVzdWx0KTtcblxuICAgICAgaWYgKGlzU2V0KHZhbHVlKSkge1xuICAgICAgICB2YWx1ZS5mb3JFYWNoKGZ1bmN0aW9uKHN1YlZhbHVlKSB7XG4gICAgICAgICAgcmVzdWx0LmFkZChiYXNlQ2xvbmUoc3ViVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN1YlZhbHVlLCB2YWx1ZSwgc3RhY2spKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKGlzTWFwKHZhbHVlKSkge1xuICAgICAgICB2YWx1ZS5mb3JFYWNoKGZ1bmN0aW9uKHN1YlZhbHVlLCBrZXkpIHtcbiAgICAgICAgICByZXN1bHQuc2V0KGtleSwgYmFzZUNsb25lKHN1YlZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBrZXksIHZhbHVlLCBzdGFjaykpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgdmFyIGtleXNGdW5jID0gaXNGdWxsXG4gICAgICAgID8gKGlzRmxhdCA/IGdldEFsbEtleXNJbiA6IGdldEFsbEtleXMpXG4gICAgICAgIDogKGlzRmxhdCA/IGtleXNJbiA6IGtleXMpO1xuXG4gICAgICB2YXIgcHJvcHMgPSBpc0FyciA/IHVuZGVmaW5lZCA6IGtleXNGdW5jKHZhbHVlKTtcbiAgICAgIGFycmF5RWFjaChwcm9wcyB8fCB2YWx1ZSwgZnVuY3Rpb24oc3ViVmFsdWUsIGtleSkge1xuICAgICAgICBpZiAocHJvcHMpIHtcbiAgICAgICAgICBrZXkgPSBzdWJWYWx1ZTtcbiAgICAgICAgICBzdWJWYWx1ZSA9IHZhbHVlW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgcG9wdWxhdGUgY2xvbmUgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgYXNzaWduVmFsdWUocmVzdWx0LCBrZXksIGJhc2VDbG9uZShzdWJWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwga2V5LCB2YWx1ZSwgc3RhY2spKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jb25mb3Jtc2Agd2hpY2ggZG9lc24ndCBjbG9uZSBgc291cmNlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHByZWRpY2F0ZXMgdG8gY29uZm9ybSB0by5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VDb25mb3Jtcyhzb3VyY2UpIHtcbiAgICAgIHZhciBwcm9wcyA9IGtleXMoc291cmNlKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VDb25mb3Jtc1RvKG9iamVjdCwgc291cmNlLCBwcm9wcyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNvbmZvcm1zVG9gIHdoaWNoIGFjY2VwdHMgYHByb3BzYCB0byBjaGVjay5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHByZWRpY2F0ZXMgdG8gY29uZm9ybSB0by5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgY29uZm9ybXMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQ29uZm9ybXNUbyhvYmplY3QsIHNvdXJjZSwgcHJvcHMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG4gICAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuICFsZW5ndGg7XG4gICAgICB9XG4gICAgICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICB2YXIga2V5ID0gcHJvcHNbbGVuZ3RoXSxcbiAgICAgICAgICAgIHByZWRpY2F0ZSA9IHNvdXJjZVtrZXldLFxuICAgICAgICAgICAgdmFsdWUgPSBvYmplY3Rba2V5XTtcblxuICAgICAgICBpZiAoKHZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkgfHwgIXByZWRpY2F0ZSh2YWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmRlbGF5YCBhbmQgYF8uZGVmZXJgIHdoaWNoIGFjY2VwdHMgYGFyZ3NgXG4gICAgICogdG8gcHJvdmlkZSB0byBgZnVuY2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRlbGF5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB3YWl0IFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIGRlbGF5IGludm9jYXRpb24uXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJncyBUaGUgYXJndW1lbnRzIHRvIHByb3ZpZGUgdG8gYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ8T2JqZWN0fSBSZXR1cm5zIHRoZSB0aW1lciBpZCBvciB0aW1lb3V0IG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRGVsYXkoZnVuYywgd2FpdCwgYXJncykge1xuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IGZ1bmMuYXBwbHkodW5kZWZpbmVkLCBhcmdzKTsgfSwgd2FpdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgbWV0aG9kcyBsaWtlIGBfLmRpZmZlcmVuY2VgIHdpdGhvdXQgc3VwcG9ydFxuICAgICAqIGZvciBleGNsdWRpbmcgbXVsdGlwbGUgYXJyYXlzIG9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIGV4Y2x1ZGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlXSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZURpZmZlcmVuY2UoYXJyYXksIHZhbHVlcywgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGluY2x1ZGVzID0gYXJyYXlJbmNsdWRlcyxcbiAgICAgICAgICBpc0NvbW1vbiA9IHRydWUsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IFtdLFxuICAgICAgICAgIHZhbHVlc0xlbmd0aCA9IHZhbHVlcy5sZW5ndGg7XG5cbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBpZiAoaXRlcmF0ZWUpIHtcbiAgICAgICAgdmFsdWVzID0gYXJyYXlNYXAodmFsdWVzLCBiYXNlVW5hcnkoaXRlcmF0ZWUpKTtcbiAgICAgIH1cbiAgICAgIGlmIChjb21wYXJhdG9yKSB7XG4gICAgICAgIGluY2x1ZGVzID0gYXJyYXlJbmNsdWRlc1dpdGg7XG4gICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBlbHNlIGlmICh2YWx1ZXMubGVuZ3RoID49IExBUkdFX0FSUkFZX1NJWkUpIHtcbiAgICAgICAgaW5jbHVkZXMgPSBjYWNoZUhhcztcbiAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgdmFsdWVzID0gbmV3IFNldENhY2hlKHZhbHVlcyk7XG4gICAgICB9XG4gICAgICBvdXRlcjpcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUgPT0gbnVsbCA/IHZhbHVlIDogaXRlcmF0ZWUodmFsdWUpO1xuXG4gICAgICAgIHZhbHVlID0gKGNvbXBhcmF0b3IgfHwgdmFsdWUgIT09IDApID8gdmFsdWUgOiAwO1xuICAgICAgICBpZiAoaXNDb21tb24gJiYgY29tcHV0ZWQgPT09IGNvbXB1dGVkKSB7XG4gICAgICAgICAgdmFyIHZhbHVlc0luZGV4ID0gdmFsdWVzTGVuZ3RoO1xuICAgICAgICAgIHdoaWxlICh2YWx1ZXNJbmRleC0tKSB7XG4gICAgICAgICAgICBpZiAodmFsdWVzW3ZhbHVlc0luZGV4XSA9PT0gY29tcHV0ZWQpIHtcbiAgICAgICAgICAgICAgY29udGludWUgb3V0ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghaW5jbHVkZXModmFsdWVzLCBjb21wdXRlZCwgY29tcGFyYXRvcikpIHtcbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZm9yRWFjaGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fSBSZXR1cm5zIGBjb2xsZWN0aW9uYC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZUVhY2ggPSBjcmVhdGVCYXNlRWFjaChiYXNlRm9yT3duKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZvckVhY2hSaWdodGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fSBSZXR1cm5zIGBjb2xsZWN0aW9uYC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZUVhY2hSaWdodCA9IGNyZWF0ZUJhc2VFYWNoKGJhc2VGb3JPd25SaWdodCwgdHJ1ZSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5ldmVyeWAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFsbCBlbGVtZW50cyBwYXNzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gICAgICogIGVsc2UgYGZhbHNlYFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VFdmVyeShjb2xsZWN0aW9uLCBwcmVkaWNhdGUpIHtcbiAgICAgIHZhciByZXN1bHQgPSB0cnVlO1xuICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIHJlc3VsdCA9ICEhcHJlZGljYXRlKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbik7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgbWV0aG9kcyBsaWtlIGBfLm1heGAgYW5kIGBfLm1pbmAgd2hpY2ggYWNjZXB0cyBhXG4gICAgICogYGNvbXBhcmF0b3JgIHRvIGRldGVybWluZSB0aGUgZXh0cmVtdW0gdmFsdWUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb21wYXJhdG9yIFRoZSBjb21wYXJhdG9yIHVzZWQgdG8gY29tcGFyZSB2YWx1ZXMuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGV4dHJlbXVtIHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VFeHRyZW11bShhcnJheSwgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICAgICAgY3VycmVudCA9IGl0ZXJhdGVlKHZhbHVlKTtcblxuICAgICAgICBpZiAoY3VycmVudCAhPSBudWxsICYmIChjb21wdXRlZCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgID8gKGN1cnJlbnQgPT09IGN1cnJlbnQgJiYgIWlzU3ltYm9sKGN1cnJlbnQpKVxuICAgICAgICAgICAgICA6IGNvbXBhcmF0b3IoY3VycmVudCwgY29tcHV0ZWQpXG4gICAgICAgICAgICApKSB7XG4gICAgICAgICAgdmFyIGNvbXB1dGVkID0gY3VycmVudCxcbiAgICAgICAgICAgICAgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZmlsbGAgd2l0aG91dCBhbiBpdGVyYXRlZSBjYWxsIGd1YXJkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmlsbC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBmaWxsIGBhcnJheWAgd2l0aC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBwb3NpdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2VuZD1hcnJheS5sZW5ndGhdIFRoZSBlbmQgcG9zaXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUZpbGwoYXJyYXksIHZhbHVlLCBzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgICBzdGFydCA9IHRvSW50ZWdlcihzdGFydCk7XG4gICAgICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgICAgIHN0YXJ0ID0gLXN0YXJ0ID4gbGVuZ3RoID8gMCA6IChsZW5ndGggKyBzdGFydCk7XG4gICAgICB9XG4gICAgICBlbmQgPSAoZW5kID09PSB1bmRlZmluZWQgfHwgZW5kID4gbGVuZ3RoKSA/IGxlbmd0aCA6IHRvSW50ZWdlcihlbmQpO1xuICAgICAgaWYgKGVuZCA8IDApIHtcbiAgICAgICAgZW5kICs9IGxlbmd0aDtcbiAgICAgIH1cbiAgICAgIGVuZCA9IHN0YXJ0ID4gZW5kID8gMCA6IHRvTGVuZ3RoKGVuZCk7XG4gICAgICB3aGlsZSAoc3RhcnQgPCBlbmQpIHtcbiAgICAgICAgYXJyYXlbc3RhcnQrK10gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5maWx0ZXJgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZpbHRlcmVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGaWx0ZXIoY29sbGVjdGlvbiwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZmxhdHRlbmAgd2l0aCBzdXBwb3J0IGZvciByZXN0cmljdGluZyBmbGF0dGVuaW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmxhdHRlbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZGVwdGggVGhlIG1heGltdW0gcmVjdXJzaW9uIGRlcHRoLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3ByZWRpY2F0ZT1pc0ZsYXR0ZW5hYmxlXSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzU3RyaWN0XSBSZXN0cmljdCB0byB2YWx1ZXMgdGhhdCBwYXNzIGBwcmVkaWNhdGVgIGNoZWNrcy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcmVzdWx0PVtdXSBUaGUgaW5pdGlhbCByZXN1bHQgdmFsdWUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGbGF0dGVuKGFycmF5LCBkZXB0aCwgcHJlZGljYXRlLCBpc1N0cmljdCwgcmVzdWx0KSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICAgIHByZWRpY2F0ZSB8fCAocHJlZGljYXRlID0gaXNGbGF0dGVuYWJsZSk7XG4gICAgICByZXN1bHQgfHwgKHJlc3VsdCA9IFtdKTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgICBpZiAoZGVwdGggPiAwICYmIHByZWRpY2F0ZSh2YWx1ZSkpIHtcbiAgICAgICAgICBpZiAoZGVwdGggPiAxKSB7XG4gICAgICAgICAgICAvLyBSZWN1cnNpdmVseSBmbGF0dGVuIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICAgICAgYmFzZUZsYXR0ZW4odmFsdWUsIGRlcHRoIC0gMSwgcHJlZGljYXRlLCBpc1N0cmljdCwgcmVzdWx0KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYXJyYXlQdXNoKHJlc3VsdCwgdmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICghaXNTdHJpY3QpIHtcbiAgICAgICAgICByZXN1bHRbcmVzdWx0Lmxlbmd0aF0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgYmFzZUZvck93bmAgd2hpY2ggaXRlcmF0ZXMgb3ZlciBgb2JqZWN0YFxuICAgICAqIHByb3BlcnRpZXMgcmV0dXJuZWQgYnkgYGtleXNGdW5jYCBhbmQgaW52b2tlcyBgaXRlcmF0ZWVgIGZvciBlYWNoIHByb3BlcnR5LlxuICAgICAqIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdCBpdGVyYXRpb24gZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYG9iamVjdGAuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZUZvciA9IGNyZWF0ZUJhc2VGb3IoKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZSBgYmFzZUZvcmAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBwcm9wZXJ0aWVzXG4gICAgICogaW4gdGhlIG9wcG9zaXRlIG9yZGVyLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0ga2V5c0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUga2V5cyBvZiBgb2JqZWN0YC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIHZhciBiYXNlRm9yUmlnaHQgPSBjcmVhdGVCYXNlRm9yKHRydWUpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZm9yT3duYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGb3JPd24ob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAmJiBiYXNlRm9yKG9iamVjdCwgaXRlcmF0ZWUsIGtleXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZvck93blJpZ2h0YCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGb3JPd25SaWdodChvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICYmIGJhc2VGb3JSaWdodChvYmplY3QsIGl0ZXJhdGVlLCBrZXlzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mdW5jdGlvbnNgIHdoaWNoIGNyZWF0ZXMgYW4gYXJyYXkgb2ZcbiAgICAgKiBgb2JqZWN0YCBmdW5jdGlvbiBwcm9wZXJ0eSBuYW1lcyBmaWx0ZXJlZCBmcm9tIGBwcm9wc2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHByb3BzIFRoZSBwcm9wZXJ0eSBuYW1lcyB0byBmaWx0ZXIuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBuYW1lcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRnVuY3Rpb25zKG9iamVjdCwgcHJvcHMpIHtcbiAgICAgIHJldHVybiBhcnJheUZpbHRlcihwcm9wcywgZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgIHJldHVybiBpc0Z1bmN0aW9uKG9iamVjdFtrZXldKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmdldGAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWZhdWx0IHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VHZXQob2JqZWN0LCBwYXRoKSB7XG4gICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcblxuICAgICAgdmFyIGluZGV4ID0gMCxcbiAgICAgICAgICBsZW5ndGggPSBwYXRoLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKG9iamVjdCAhPSBudWxsICYmIGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIG9iamVjdCA9IG9iamVjdFt0b0tleShwYXRoW2luZGV4KytdKV07XG4gICAgICB9XG4gICAgICByZXR1cm4gKGluZGV4ICYmIGluZGV4ID09IGxlbmd0aCkgPyBvYmplY3QgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldEFsbEtleXNgIGFuZCBgZ2V0QWxsS2V5c0luYCB3aGljaCB1c2VzXG4gICAgICogYGtleXNGdW5jYCBhbmQgYHN5bWJvbHNGdW5jYCB0byBnZXQgdGhlIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kXG4gICAgICogc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYG9iamVjdGAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc3ltYm9sc0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5c0Z1bmMsIHN5bWJvbHNGdW5jKSB7XG4gICAgICB2YXIgcmVzdWx0ID0ga2V5c0Z1bmMob2JqZWN0KTtcbiAgICAgIHJldHVybiBpc0FycmF5KG9iamVjdCkgPyByZXN1bHQgOiBhcnJheVB1c2gocmVzdWx0LCBzeW1ib2xzRnVuYyhvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0VGFnYCB3aXRob3V0IGZhbGxiYWNrcyBmb3IgYnVnZ3kgZW52aXJvbm1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VHZXRUYWcodmFsdWUpIHtcbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkVGFnIDogbnVsbFRhZztcbiAgICAgIH1cbiAgICAgIHJldHVybiAoc3ltVG9TdHJpbmdUYWcgJiYgc3ltVG9TdHJpbmdUYWcgaW4gT2JqZWN0KHZhbHVlKSlcbiAgICAgICAgPyBnZXRSYXdUYWcodmFsdWUpXG4gICAgICAgIDogb2JqZWN0VG9TdHJpbmcodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmd0YCB3aGljaCBkb2Vzbid0IGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBncmVhdGVyIHRoYW4gYG90aGVyYCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VHdCh2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA+IG90aGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmhhc2Agd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30ga2V5IFRoZSBrZXkgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VIYXMob2JqZWN0LCBrZXkpIHtcbiAgICAgIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5oYXNJbmAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30ga2V5IFRoZSBrZXkgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VIYXNJbihvYmplY3QsIGtleSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAhPSBudWxsICYmIGtleSBpbiBPYmplY3Qob2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pblJhbmdlYCB3aGljaCBkb2Vzbid0IGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byBjaGVjay5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgVGhlIHN0YXJ0IG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSBlbmQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgbnVtYmVyYCBpcyBpbiB0aGUgcmFuZ2UsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSW5SYW5nZShudW1iZXIsIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHJldHVybiBudW1iZXIgPj0gbmF0aXZlTWluKHN0YXJ0LCBlbmQpICYmIG51bWJlciA8IG5hdGl2ZU1heChzdGFydCwgZW5kKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBtZXRob2RzIGxpa2UgYF8uaW50ZXJzZWN0aW9uYCwgd2l0aG91dCBzdXBwb3J0XG4gICAgICogZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMsIHRoYXQgYWNjZXB0cyBhbiBhcnJheSBvZiBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXlzIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHNoYXJlZCB2YWx1ZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUludGVyc2VjdGlvbihhcnJheXMsIGl0ZXJhdGVlLCBjb21wYXJhdG9yKSB7XG4gICAgICB2YXIgaW5jbHVkZXMgPSBjb21wYXJhdG9yID8gYXJyYXlJbmNsdWRlc1dpdGggOiBhcnJheUluY2x1ZGVzLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5c1swXS5sZW5ndGgsXG4gICAgICAgICAgb3RoTGVuZ3RoID0gYXJyYXlzLmxlbmd0aCxcbiAgICAgICAgICBvdGhJbmRleCA9IG90aExlbmd0aCxcbiAgICAgICAgICBjYWNoZXMgPSBBcnJheShvdGhMZW5ndGgpLFxuICAgICAgICAgIG1heExlbmd0aCA9IEluZmluaXR5LFxuICAgICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgICB3aGlsZSAob3RoSW5kZXgtLSkge1xuICAgICAgICB2YXIgYXJyYXkgPSBhcnJheXNbb3RoSW5kZXhdO1xuICAgICAgICBpZiAob3RoSW5kZXggJiYgaXRlcmF0ZWUpIHtcbiAgICAgICAgICBhcnJheSA9IGFycmF5TWFwKGFycmF5LCBiYXNlVW5hcnkoaXRlcmF0ZWUpKTtcbiAgICAgICAgfVxuICAgICAgICBtYXhMZW5ndGggPSBuYXRpdmVNaW4oYXJyYXkubGVuZ3RoLCBtYXhMZW5ndGgpO1xuICAgICAgICBjYWNoZXNbb3RoSW5kZXhdID0gIWNvbXBhcmF0b3IgJiYgKGl0ZXJhdGVlIHx8IChsZW5ndGggPj0gMTIwICYmIGFycmF5Lmxlbmd0aCA+PSAxMjApKVxuICAgICAgICAgID8gbmV3IFNldENhY2hlKG90aEluZGV4ICYmIGFycmF5KVxuICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgYXJyYXkgPSBhcnJheXNbMF07XG5cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIHNlZW4gPSBjYWNoZXNbMF07XG5cbiAgICAgIG91dGVyOlxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGggJiYgcmVzdWx0Lmxlbmd0aCA8IG1heExlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlID8gaXRlcmF0ZWUodmFsdWUpIDogdmFsdWU7XG5cbiAgICAgICAgdmFsdWUgPSAoY29tcGFyYXRvciB8fCB2YWx1ZSAhPT0gMCkgPyB2YWx1ZSA6IDA7XG4gICAgICAgIGlmICghKHNlZW5cbiAgICAgICAgICAgICAgPyBjYWNoZUhhcyhzZWVuLCBjb21wdXRlZClcbiAgICAgICAgICAgICAgOiBpbmNsdWRlcyhyZXN1bHQsIGNvbXB1dGVkLCBjb21wYXJhdG9yKVxuICAgICAgICAgICAgKSkge1xuICAgICAgICAgIG90aEluZGV4ID0gb3RoTGVuZ3RoO1xuICAgICAgICAgIHdoaWxlICgtLW90aEluZGV4KSB7XG4gICAgICAgICAgICB2YXIgY2FjaGUgPSBjYWNoZXNbb3RoSW5kZXhdO1xuICAgICAgICAgICAgaWYgKCEoY2FjaGVcbiAgICAgICAgICAgICAgICAgID8gY2FjaGVIYXMoY2FjaGUsIGNvbXB1dGVkKVxuICAgICAgICAgICAgICAgICAgOiBpbmNsdWRlcyhhcnJheXNbb3RoSW5kZXhdLCBjb21wdXRlZCwgY29tcGFyYXRvcikpXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlIG91dGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc2Vlbikge1xuICAgICAgICAgICAgc2Vlbi5wdXNoKGNvbXB1dGVkKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmludmVydGAgYW5kIGBfLmludmVydEJ5YCB3aGljaCBpbnZlcnRzXG4gICAgICogYG9iamVjdGAgd2l0aCB2YWx1ZXMgdHJhbnNmb3JtZWQgYnkgYGl0ZXJhdGVlYCBhbmQgc2V0IGJ5IGBzZXR0ZXJgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHNldHRlciBUaGUgZnVuY3Rpb24gdG8gc2V0IGBhY2N1bXVsYXRvcmAgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBpdGVyYXRlZSB0byB0cmFuc2Zvcm0gdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBhY2N1bXVsYXRvciBUaGUgaW5pdGlhbCBpbnZlcnRlZCBvYmplY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBhY2N1bXVsYXRvcmAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUludmVydGVyKG9iamVjdCwgc2V0dGVyLCBpdGVyYXRlZSwgYWNjdW11bGF0b3IpIHtcbiAgICAgIGJhc2VGb3JPd24ob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSwga2V5LCBvYmplY3QpIHtcbiAgICAgICAgc2V0dGVyKGFjY3VtdWxhdG9yLCBpdGVyYXRlZSh2YWx1ZSksIGtleSwgb2JqZWN0KTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmludm9rZWAgd2l0aG91dCBzdXBwb3J0IGZvciBpbmRpdmlkdWFsXG4gICAgICogbWV0aG9kIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBtZXRob2QgdG8gaW52b2tlLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgdGhlIG1ldGhvZCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXN1bHQgb2YgdGhlIGludm9rZWQgbWV0aG9kLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJbnZva2Uob2JqZWN0LCBwYXRoLCBhcmdzKSB7XG4gICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcbiAgICAgIG9iamVjdCA9IHBhcmVudChvYmplY3QsIHBhdGgpO1xuICAgICAgdmFyIGZ1bmMgPSBvYmplY3QgPT0gbnVsbCA/IG9iamVjdCA6IG9iamVjdFt0b0tleShsYXN0KHBhdGgpKV07XG4gICAgICByZXR1cm4gZnVuYyA9PSBudWxsID8gdW5kZWZpbmVkIDogYXBwbHkoZnVuYywgb2JqZWN0LCBhcmdzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0FyZ3VtZW50c2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNBcmd1bWVudHModmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IGFyZ3NUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNBcnJheUJ1ZmZlcmAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5IGJ1ZmZlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc0FycmF5QnVmZmVyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBhcnJheUJ1ZmZlclRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0RhdGVgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGRhdGUgb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzRGF0ZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gZGF0ZVRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0VxdWFsYCB3aGljaCBzdXBwb3J0cyBwYXJ0aWFsIGNvbXBhcmlzb25zXG4gICAgICogYW5kIHRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy5cbiAgICAgKiAgMSAtIFVub3JkZXJlZCBjb21wYXJpc29uXG4gICAgICogIDIgLSBQYXJ0aWFsIGNvbXBhcmlzb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIGB2YWx1ZWAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc0VxdWFsKHZhbHVlLCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spIHtcbiAgICAgIGlmICh2YWx1ZSA9PT0gb3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCB8fCBvdGhlciA9PSBudWxsIHx8ICghaXNPYmplY3RMaWtlKHZhbHVlKSAmJiAhaXNPYmplY3RMaWtlKG90aGVyKSkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXI7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUlzRXF1YWxEZWVwKHZhbHVlLCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgYmFzZUlzRXF1YWwsIHN0YWNrKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsYCBmb3IgYXJyYXlzIGFuZCBvYmplY3RzIHdoaWNoIHBlcmZvcm1zXG4gICAgICogZGVlcCBjb21wYXJpc29ucyBhbmQgdHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzIGVuYWJsaW5nIG9iamVjdHMgd2l0aCBjaXJjdWxhclxuICAgICAqIHJlZmVyZW5jZXMgdG8gYmUgY29tcGFyZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIGBvYmplY3RgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzRXF1YWxEZWVwKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgICAgIHZhciBvYmpJc0FyciA9IGlzQXJyYXkob2JqZWN0KSxcbiAgICAgICAgICBvdGhJc0FyciA9IGlzQXJyYXkob3RoZXIpLFxuICAgICAgICAgIG9ialRhZyA9IG9iaklzQXJyID8gYXJyYXlUYWcgOiBnZXRUYWcob2JqZWN0KSxcbiAgICAgICAgICBvdGhUYWcgPSBvdGhJc0FyciA/IGFycmF5VGFnIDogZ2V0VGFnKG90aGVyKTtcblxuICAgICAgb2JqVGFnID0gb2JqVGFnID09IGFyZ3NUYWcgPyBvYmplY3RUYWcgOiBvYmpUYWc7XG4gICAgICBvdGhUYWcgPSBvdGhUYWcgPT0gYXJnc1RhZyA/IG9iamVjdFRhZyA6IG90aFRhZztcblxuICAgICAgdmFyIG9iaklzT2JqID0gb2JqVGFnID09IG9iamVjdFRhZyxcbiAgICAgICAgICBvdGhJc09iaiA9IG90aFRhZyA9PSBvYmplY3RUYWcsXG4gICAgICAgICAgaXNTYW1lVGFnID0gb2JqVGFnID09IG90aFRhZztcblxuICAgICAgaWYgKGlzU2FtZVRhZyAmJiBpc0J1ZmZlcihvYmplY3QpKSB7XG4gICAgICAgIGlmICghaXNCdWZmZXIob3RoZXIpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIG9iaklzQXJyID0gdHJ1ZTtcbiAgICAgICAgb2JqSXNPYmogPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1NhbWVUYWcgJiYgIW9iaklzT2JqKSB7XG4gICAgICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgICAgIHJldHVybiAob2JqSXNBcnIgfHwgaXNUeXBlZEFycmF5KG9iamVjdCkpXG4gICAgICAgICAgPyBlcXVhbEFycmF5cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKVxuICAgICAgICAgIDogZXF1YWxCeVRhZyhvYmplY3QsIG90aGVyLCBvYmpUYWcsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spO1xuICAgICAgfVxuICAgICAgaWYgKCEoYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHKSkge1xuICAgICAgICB2YXIgb2JqSXNXcmFwcGVkID0gb2JqSXNPYmogJiYgaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsICdfX3dyYXBwZWRfXycpLFxuICAgICAgICAgICAgb3RoSXNXcmFwcGVkID0gb3RoSXNPYmogJiYgaGFzT3duUHJvcGVydHkuY2FsbChvdGhlciwgJ19fd3JhcHBlZF9fJyk7XG5cbiAgICAgICAgaWYgKG9iaklzV3JhcHBlZCB8fCBvdGhJc1dyYXBwZWQpIHtcbiAgICAgICAgICB2YXIgb2JqVW53cmFwcGVkID0gb2JqSXNXcmFwcGVkID8gb2JqZWN0LnZhbHVlKCkgOiBvYmplY3QsXG4gICAgICAgICAgICAgIG90aFVud3JhcHBlZCA9IG90aElzV3JhcHBlZCA/IG90aGVyLnZhbHVlKCkgOiBvdGhlcjtcblxuICAgICAgICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgICAgICAgcmV0dXJuIGVxdWFsRnVuYyhvYmpVbndyYXBwZWQsIG90aFVud3JhcHBlZCwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoIWlzU2FtZVRhZykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgICAgcmV0dXJuIGVxdWFsT2JqZWN0cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc01hcGAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbWFwLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzTWFwKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBnZXRUYWcodmFsdWUpID09IG1hcFRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc01hdGNoYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gICAgICogQHBhcmFtIHtBcnJheX0gbWF0Y2hEYXRhIFRoZSBwcm9wZXJ0eSBuYW1lcywgdmFsdWVzLCBhbmQgY29tcGFyZSBmbGFncyB0byBtYXRjaC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgaXMgYSBtYXRjaCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc01hdGNoKG9iamVjdCwgc291cmNlLCBtYXRjaERhdGEsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIHZhciBpbmRleCA9IG1hdGNoRGF0YS5sZW5ndGgsXG4gICAgICAgICAgbGVuZ3RoID0gaW5kZXgsXG4gICAgICAgICAgbm9DdXN0b21pemVyID0gIWN1c3RvbWl6ZXI7XG5cbiAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gIWxlbmd0aDtcbiAgICAgIH1cbiAgICAgIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgdmFyIGRhdGEgPSBtYXRjaERhdGFbaW5kZXhdO1xuICAgICAgICBpZiAoKG5vQ3VzdG9taXplciAmJiBkYXRhWzJdKVxuICAgICAgICAgICAgICA/IGRhdGFbMV0gIT09IG9iamVjdFtkYXRhWzBdXVxuICAgICAgICAgICAgICA6ICEoZGF0YVswXSBpbiBvYmplY3QpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIGRhdGEgPSBtYXRjaERhdGFbaW5kZXhdO1xuICAgICAgICB2YXIga2V5ID0gZGF0YVswXSxcbiAgICAgICAgICAgIG9ialZhbHVlID0gb2JqZWN0W2tleV0sXG4gICAgICAgICAgICBzcmNWYWx1ZSA9IGRhdGFbMV07XG5cbiAgICAgICAgaWYgKG5vQ3VzdG9taXplciAmJiBkYXRhWzJdKSB7XG4gICAgICAgICAgaWYgKG9ialZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgc3RhY2sgPSBuZXcgU3RhY2s7XG4gICAgICAgICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QsIHNvdXJjZSwgc3RhY2spO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIShyZXN1bHQgPT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgID8gYmFzZUlzRXF1YWwoc3JjVmFsdWUsIG9ialZhbHVlLCBDT01QQVJFX1BBUlRJQUxfRkxBRyB8IENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcsIGN1c3RvbWl6ZXIsIHN0YWNrKVxuICAgICAgICAgICAgICAgIDogcmVzdWx0XG4gICAgICAgICAgICAgICkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTmF0aXZlYCB3aXRob3V0IGJhZCBzaGltIGNoZWNrcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBuYXRpdmUgZnVuY3Rpb24sXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNOYXRpdmUodmFsdWUpIHtcbiAgICAgIGlmICghaXNPYmplY3QodmFsdWUpIHx8IGlzTWFza2VkKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgcGF0dGVybiA9IGlzRnVuY3Rpb24odmFsdWUpID8gcmVJc05hdGl2ZSA6IHJlSXNIb3N0Q3RvcjtcbiAgICAgIHJldHVybiBwYXR0ZXJuLnRlc3QodG9Tb3VyY2UodmFsdWUpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc1JlZ0V4cGAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcmVnZXhwLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzUmVnRXhwKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSByZWdleHBUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNTZXRgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHNldCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc1NldCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgZ2V0VGFnKHZhbHVlKSA9PSBzZXRUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNUeXBlZEFycmF5YCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB0eXBlZCBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc1R5cGVkQXJyYXkodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmXG4gICAgICAgIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgISF0eXBlZEFycmF5VGFnc1tiYXNlR2V0VGFnKHZhbHVlKV07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXRlcmF0ZWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IFt2YWx1ZT1fLmlkZW50aXR5XSBUaGUgdmFsdWUgdG8gY29udmVydCB0byBhbiBpdGVyYXRlZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGl0ZXJhdGVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJdGVyYXRlZSh2YWx1ZSkge1xuICAgICAgLy8gRG9uJ3Qgc3RvcmUgdGhlIGB0eXBlb2ZgIHJlc3VsdCBpbiBhIHZhcmlhYmxlIHRvIGF2b2lkIGEgSklUIGJ1ZyBpbiBTYWZhcmkgOS5cbiAgICAgIC8vIFNlZSBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTU2MDM0IGZvciBtb3JlIGRldGFpbHMuXG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGlkZW50aXR5O1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gaXNBcnJheSh2YWx1ZSlcbiAgICAgICAgICA/IGJhc2VNYXRjaGVzUHJvcGVydHkodmFsdWVbMF0sIHZhbHVlWzFdKVxuICAgICAgICAgIDogYmFzZU1hdGNoZXModmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHByb3BlcnR5KHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5rZXlzYCB3aGljaCBkb2Vzbid0IHRyZWF0IHNwYXJzZSBhcnJheXMgYXMgZGVuc2UuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VLZXlzKG9iamVjdCkge1xuICAgICAgaWYgKCFpc1Byb3RvdHlwZShvYmplY3QpKSB7XG4gICAgICAgIHJldHVybiBuYXRpdmVLZXlzKG9iamVjdCk7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICBmb3IgKHZhciBrZXkgaW4gT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpICYmIGtleSAhPSAnY29uc3RydWN0b3InKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5rZXlzSW5gIHdoaWNoIGRvZXNuJ3QgdHJlYXQgc3BhcnNlIGFycmF5cyBhcyBkZW5zZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUtleXNJbihvYmplY3QpIHtcbiAgICAgIGlmICghaXNPYmplY3Qob2JqZWN0KSkge1xuICAgICAgICByZXR1cm4gbmF0aXZlS2V5c0luKG9iamVjdCk7XG4gICAgICB9XG4gICAgICB2YXIgaXNQcm90byA9IGlzUHJvdG90eXBlKG9iamVjdCksXG4gICAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgaWYgKCEoa2V5ID09ICdjb25zdHJ1Y3RvcicgJiYgKGlzUHJvdG8gfHwgIWhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpKSkpIHtcbiAgICAgICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmx0YCB3aGljaCBkb2Vzbid0IGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBsZXNzIHRoYW4gYG90aGVyYCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VMdCh2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA8IG90aGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1hcGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU1hcChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgcmVzdWx0ID0gaXNBcnJheUxpa2UoY29sbGVjdGlvbikgPyBBcnJheShjb2xsZWN0aW9uLmxlbmd0aCkgOiBbXTtcblxuICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGtleSwgY29sbGVjdGlvbikge1xuICAgICAgICByZXN1bHRbKytpbmRleF0gPSBpdGVyYXRlZSh2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tYXRjaGVzYCB3aGljaCBkb2Vzbid0IGNsb25lIGBzb3VyY2VgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgdmFsdWVzIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU1hdGNoZXMoc291cmNlKSB7XG4gICAgICB2YXIgbWF0Y2hEYXRhID0gZ2V0TWF0Y2hEYXRhKHNvdXJjZSk7XG4gICAgICBpZiAobWF0Y2hEYXRhLmxlbmd0aCA9PSAxICYmIG1hdGNoRGF0YVswXVsyXSkge1xuICAgICAgICByZXR1cm4gbWF0Y2hlc1N0cmljdENvbXBhcmFibGUobWF0Y2hEYXRhWzBdWzBdLCBtYXRjaERhdGFbMF1bMV0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICByZXR1cm4gb2JqZWN0ID09PSBzb3VyY2UgfHwgYmFzZUlzTWF0Y2gob2JqZWN0LCBzb3VyY2UsIG1hdGNoRGF0YSk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1hdGNoZXNQcm9wZXJ0eWAgd2hpY2ggZG9lc24ndCBjbG9uZSBgc3JjVmFsdWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHZhbHVlIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU1hdGNoZXNQcm9wZXJ0eShwYXRoLCBzcmNWYWx1ZSkge1xuICAgICAgaWYgKGlzS2V5KHBhdGgpICYmIGlzU3RyaWN0Q29tcGFyYWJsZShzcmNWYWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlKHRvS2V5KHBhdGgpLCBzcmNWYWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIHZhciBvYmpWYWx1ZSA9IGdldChvYmplY3QsIHBhdGgpO1xuICAgICAgICByZXR1cm4gKG9ialZhbHVlID09PSB1bmRlZmluZWQgJiYgb2JqVmFsdWUgPT09IHNyY1ZhbHVlKVxuICAgICAgICAgID8gaGFzSW4ob2JqZWN0LCBwYXRoKVxuICAgICAgICAgIDogYmFzZUlzRXF1YWwoc3JjVmFsdWUsIG9ialZhbHVlLCBDT01QQVJFX1BBUlRJQUxfRkxBRyB8IENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tZXJnZWAgd2l0aG91dCBzdXBwb3J0IGZvciBtdWx0aXBsZSBzb3VyY2VzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3JjSW5kZXggVGhlIGluZGV4IG9mIGBzb3VyY2VgLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIG1lcmdlZCB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBzb3VyY2UgdmFsdWVzIGFuZCB0aGVpciBtZXJnZWRcbiAgICAgKiAgY291bnRlcnBhcnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VNZXJnZShvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIsIHN0YWNrKSB7XG4gICAgICBpZiAob2JqZWN0ID09PSBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYmFzZUZvcihzb3VyY2UsIGZ1bmN0aW9uKHNyY1ZhbHVlLCBrZXkpIHtcbiAgICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgICAgaWYgKGlzT2JqZWN0KHNyY1ZhbHVlKSkge1xuICAgICAgICAgIGJhc2VNZXJnZURlZXAob2JqZWN0LCBzb3VyY2UsIGtleSwgc3JjSW5kZXgsIGJhc2VNZXJnZSwgY3VzdG9taXplciwgc3RhY2spO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHZhciBuZXdWYWx1ZSA9IGN1c3RvbWl6ZXJcbiAgICAgICAgICAgID8gY3VzdG9taXplcihzYWZlR2V0KG9iamVjdCwga2V5KSwgc3JjVmFsdWUsIChrZXkgKyAnJyksIG9iamVjdCwgc291cmNlLCBzdGFjaylcbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgICAgICAgaWYgKG5ld1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gc3JjVmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSwga2V5c0luKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VNZXJnZWAgZm9yIGFycmF5cyBhbmQgb2JqZWN0cyB3aGljaCBwZXJmb3Jtc1xuICAgICAqIGRlZXAgbWVyZ2VzIGFuZCB0cmFja3MgdHJhdmVyc2VkIG9iamVjdHMgZW5hYmxpbmcgb2JqZWN0cyB3aXRoIGNpcmN1bGFyXG4gICAgICogcmVmZXJlbmNlcyB0byBiZSBtZXJnZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gbWVyZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHNyY0luZGV4IFRoZSBpbmRleCBvZiBgc291cmNlYC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBtZXJnZUZ1bmMgVGhlIGZ1bmN0aW9uIHRvIG1lcmdlIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBzb3VyY2UgdmFsdWVzIGFuZCB0aGVpciBtZXJnZWRcbiAgICAgKiAgY291bnRlcnBhcnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VNZXJnZURlZXAob2JqZWN0LCBzb3VyY2UsIGtleSwgc3JjSW5kZXgsIG1lcmdlRnVuYywgY3VzdG9taXplciwgc3RhY2spIHtcbiAgICAgIHZhciBvYmpWYWx1ZSA9IHNhZmVHZXQob2JqZWN0LCBrZXkpLFxuICAgICAgICAgIHNyY1ZhbHVlID0gc2FmZUdldChzb3VyY2UsIGtleSksXG4gICAgICAgICAgc3RhY2tlZCA9IHN0YWNrLmdldChzcmNWYWx1ZSk7XG5cbiAgICAgIGlmIChzdGFja2VkKSB7XG4gICAgICAgIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIHN0YWNrZWQpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgbmV3VmFsdWUgPSBjdXN0b21pemVyXG4gICAgICAgID8gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUsIChrZXkgKyAnJyksIG9iamVjdCwgc291cmNlLCBzdGFjaylcbiAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgIHZhciBpc0NvbW1vbiA9IG5ld1ZhbHVlID09PSB1bmRlZmluZWQ7XG5cbiAgICAgIGlmIChpc0NvbW1vbikge1xuICAgICAgICB2YXIgaXNBcnIgPSBpc0FycmF5KHNyY1ZhbHVlKSxcbiAgICAgICAgICAgIGlzQnVmZiA9ICFpc0FyciAmJiBpc0J1ZmZlcihzcmNWYWx1ZSksXG4gICAgICAgICAgICBpc1R5cGVkID0gIWlzQXJyICYmICFpc0J1ZmYgJiYgaXNUeXBlZEFycmF5KHNyY1ZhbHVlKTtcblxuICAgICAgICBuZXdWYWx1ZSA9IHNyY1ZhbHVlO1xuICAgICAgICBpZiAoaXNBcnIgfHwgaXNCdWZmIHx8IGlzVHlwZWQpIHtcbiAgICAgICAgICBpZiAoaXNBcnJheShvYmpWYWx1ZSkpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gb2JqVmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KG9ialZhbHVlKSkge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBjb3B5QXJyYXkob2JqVmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmIChpc0J1ZmYpIHtcbiAgICAgICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IGNsb25lQnVmZmVyKHNyY1ZhbHVlLCB0cnVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAoaXNUeXBlZCkge1xuICAgICAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gY2xvbmVUeXBlZEFycmF5KHNyY1ZhbHVlLCB0cnVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IFtdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHNyY1ZhbHVlKSB8fCBpc0FyZ3VtZW50cyhzcmNWYWx1ZSkpIHtcbiAgICAgICAgICBuZXdWYWx1ZSA9IG9ialZhbHVlO1xuICAgICAgICAgIGlmIChpc0FyZ3VtZW50cyhvYmpWYWx1ZSkpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gdG9QbGFpbk9iamVjdChvYmpWYWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYgKCFpc09iamVjdChvYmpWYWx1ZSkgfHwgaXNGdW5jdGlvbihvYmpWYWx1ZSkpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gaW5pdENsb25lT2JqZWN0KHNyY1ZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGlzQ29tbW9uKSB7XG4gICAgICAgIC8vIFJlY3Vyc2l2ZWx5IG1lcmdlIG9iamVjdHMgYW5kIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICBzdGFjay5zZXQoc3JjVmFsdWUsIG5ld1ZhbHVlKTtcbiAgICAgICAgbWVyZ2VGdW5jKG5ld1ZhbHVlLCBzcmNWYWx1ZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIsIHN0YWNrKTtcbiAgICAgICAgc3RhY2tbJ2RlbGV0ZSddKHNyY1ZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5udGhgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBpbmRleCBvZiB0aGUgZWxlbWVudCB0byByZXR1cm4uXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG50aCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU50aChhcnJheSwgbikge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIG4gKz0gbiA8IDAgPyBsZW5ndGggOiAwO1xuICAgICAgcmV0dXJuIGlzSW5kZXgobiwgbGVuZ3RoKSA/IGFycmF5W25dIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm9yZGVyQnlgIHdpdGhvdXQgcGFyYW0gZ3VhcmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbltdfE9iamVjdFtdfHN0cmluZ1tdfSBpdGVyYXRlZXMgVGhlIGl0ZXJhdGVlcyB0byBzb3J0IGJ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IG9yZGVycyBUaGUgc29ydCBvcmRlcnMgb2YgYGl0ZXJhdGVlc2AuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc29ydGVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VPcmRlckJ5KGNvbGxlY3Rpb24sIGl0ZXJhdGVlcywgb3JkZXJzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMTtcbiAgICAgIGl0ZXJhdGVlcyA9IGFycmF5TWFwKGl0ZXJhdGVlcy5sZW5ndGggPyBpdGVyYXRlZXMgOiBbaWRlbnRpdHldLCBiYXNlVW5hcnkoZ2V0SXRlcmF0ZWUoKSkpO1xuXG4gICAgICB2YXIgcmVzdWx0ID0gYmFzZU1hcChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIHZhciBjcml0ZXJpYSA9IGFycmF5TWFwKGl0ZXJhdGVlcywgZnVuY3Rpb24oaXRlcmF0ZWUpIHtcbiAgICAgICAgICByZXR1cm4gaXRlcmF0ZWUodmFsdWUpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHsgJ2NyaXRlcmlhJzogY3JpdGVyaWEsICdpbmRleCc6ICsraW5kZXgsICd2YWx1ZSc6IHZhbHVlIH07XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGJhc2VTb3J0QnkocmVzdWx0LCBmdW5jdGlvbihvYmplY3QsIG90aGVyKSB7XG4gICAgICAgIHJldHVybiBjb21wYXJlTXVsdGlwbGUob2JqZWN0LCBvdGhlciwgb3JkZXJzKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnBpY2tgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaW5kaXZpZHVhbFxuICAgICAqIHByb3BlcnR5IGlkZW50aWZpZXJzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IHBhdGhzIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBwaWNrLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVBpY2sob2JqZWN0LCBwYXRocykge1xuICAgICAgcmV0dXJuIGJhc2VQaWNrQnkob2JqZWN0LCBwYXRocywgZnVuY3Rpb24odmFsdWUsIHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIGhhc0luKG9iamVjdCwgcGF0aCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiAgYF8ucGlja0J5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gcGF0aHMgVGhlIHByb3BlcnR5IHBhdGhzIHRvIHBpY2suXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBwcm9wZXJ0eS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VQaWNrQnkob2JqZWN0LCBwYXRocywgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwYXRocy5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0ge307XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBwYXRoID0gcGF0aHNbaW5kZXhdLFxuICAgICAgICAgICAgdmFsdWUgPSBiYXNlR2V0KG9iamVjdCwgcGF0aCk7XG5cbiAgICAgICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgcGF0aCkpIHtcbiAgICAgICAgICBiYXNlU2V0KHJlc3VsdCwgY2FzdFBhdGgocGF0aCwgb2JqZWN0KSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZVByb3BlcnR5YCB3aGljaCBzdXBwb3J0cyBkZWVwIHBhdGhzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VQcm9wZXJ0eURlZXAocGF0aCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICByZXR1cm4gYmFzZUdldChvYmplY3QsIHBhdGgpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5wdWxsQWxsQnlgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWVcbiAgICAgKiBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIHJlbW92ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VQdWxsQWxsKGFycmF5LCB2YWx1ZXMsIGl0ZXJhdGVlLCBjb21wYXJhdG9yKSB7XG4gICAgICB2YXIgaW5kZXhPZiA9IGNvbXBhcmF0b3IgPyBiYXNlSW5kZXhPZldpdGggOiBiYXNlSW5kZXhPZixcbiAgICAgICAgICBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICAgICAgc2VlbiA9IGFycmF5O1xuXG4gICAgICBpZiAoYXJyYXkgPT09IHZhbHVlcykge1xuICAgICAgICB2YWx1ZXMgPSBjb3B5QXJyYXkodmFsdWVzKTtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVyYXRlZSkge1xuICAgICAgICBzZWVuID0gYXJyYXlNYXAoYXJyYXksIGJhc2VVbmFyeShpdGVyYXRlZSkpO1xuICAgICAgfVxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGZyb21JbmRleCA9IDAsXG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlc1tpbmRleF0sXG4gICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlID8gaXRlcmF0ZWUodmFsdWUpIDogdmFsdWU7XG5cbiAgICAgICAgd2hpbGUgKChmcm9tSW5kZXggPSBpbmRleE9mKHNlZW4sIGNvbXB1dGVkLCBmcm9tSW5kZXgsIGNvbXBhcmF0b3IpKSA+IC0xKSB7XG4gICAgICAgICAgaWYgKHNlZW4gIT09IGFycmF5KSB7XG4gICAgICAgICAgICBzcGxpY2UuY2FsbChzZWVuLCBmcm9tSW5kZXgsIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzcGxpY2UuY2FsbChhcnJheSwgZnJvbUluZGV4LCAxKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnB1bGxBdGAgd2l0aG91dCBzdXBwb3J0IGZvciBpbmRpdmlkdWFsXG4gICAgICogaW5kZXhlcyBvciBjYXB0dXJpbmcgdGhlIHJlbW92ZWQgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJbXX0gaW5kZXhlcyBUaGUgaW5kZXhlcyBvZiBlbGVtZW50cyB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVB1bGxBdChhcnJheSwgaW5kZXhlcykge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID8gaW5kZXhlcy5sZW5ndGggOiAwLFxuICAgICAgICAgIGxhc3RJbmRleCA9IGxlbmd0aCAtIDE7XG5cbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICB2YXIgaW5kZXggPSBpbmRleGVzW2xlbmd0aF07XG4gICAgICAgIGlmIChsZW5ndGggPT0gbGFzdEluZGV4IHx8IGluZGV4ICE9PSBwcmV2aW91cykge1xuICAgICAgICAgIHZhciBwcmV2aW91cyA9IGluZGV4O1xuICAgICAgICAgIGlmIChpc0luZGV4KGluZGV4KSkge1xuICAgICAgICAgICAgc3BsaWNlLmNhbGwoYXJyYXksIGluZGV4LCAxKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYmFzZVVuc2V0KGFycmF5LCBpbmRleCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmFuZG9tYCB3aXRob3V0IHN1cHBvcnQgZm9yIHJldHVybmluZ1xuICAgICAqIGZsb2F0aW5nLXBvaW50IG51bWJlcnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBsb3dlciBUaGUgbG93ZXIgYm91bmQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHVwcGVyIFRoZSB1cHBlciBib3VuZC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSByYW5kb20gbnVtYmVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VSYW5kb20obG93ZXIsIHVwcGVyKSB7XG4gICAgICByZXR1cm4gbG93ZXIgKyBuYXRpdmVGbG9vcihuYXRpdmVSYW5kb20oKSAqICh1cHBlciAtIGxvd2VyICsgMSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnJhbmdlYCBhbmQgYF8ucmFuZ2VSaWdodGAgd2hpY2ggZG9lc24ndFxuICAgICAqIGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBUaGUgc3RhcnQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN0ZXAgVGhlIHZhbHVlIHRvIGluY3JlbWVudCBvciBkZWNyZW1lbnQgYnkuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSByYW5nZSBvZiBudW1iZXJzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VSYW5nZShzdGFydCwgZW5kLCBzdGVwLCBmcm9tUmlnaHQpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1heChuYXRpdmVDZWlsKChlbmQgLSBzdGFydCkgLyAoc3RlcCB8fCAxKSksIDApLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG5cbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICByZXN1bHRbZnJvbVJpZ2h0ID8gbGVuZ3RoIDogKytpbmRleF0gPSBzdGFydDtcbiAgICAgICAgc3RhcnQgKz0gc3RlcDtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmVwZWF0YCB3aGljaCBkb2Vzbid0IGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byByZXBlYXQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiB0aW1lcyB0byByZXBlYXQgdGhlIHN0cmluZy5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSByZXBlYXRlZCBzdHJpbmcuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVJlcGVhdChzdHJpbmcsIG4pIHtcbiAgICAgIHZhciByZXN1bHQgPSAnJztcbiAgICAgIGlmICghc3RyaW5nIHx8IG4gPCAxIHx8IG4gPiBNQVhfU0FGRV9JTlRFR0VSKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICAvLyBMZXZlcmFnZSB0aGUgZXhwb25lbnRpYXRpb24gYnkgc3F1YXJpbmcgYWxnb3JpdGhtIGZvciBhIGZhc3RlciByZXBlYXQuXG4gICAgICAvLyBTZWUgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRXhwb25lbnRpYXRpb25fYnlfc3F1YXJpbmcgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgIGRvIHtcbiAgICAgICAgaWYgKG4gJSAyKSB7XG4gICAgICAgICAgcmVzdWx0ICs9IHN0cmluZztcbiAgICAgICAgfVxuICAgICAgICBuID0gbmF0aXZlRmxvb3IobiAvIDIpO1xuICAgICAgICBpZiAobikge1xuICAgICAgICAgIHN0cmluZyArPSBzdHJpbmc7XG4gICAgICAgIH1cbiAgICAgIH0gd2hpbGUgKG4pO1xuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnJlc3RgIHdoaWNoIGRvZXNuJ3QgdmFsaWRhdGUgb3IgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgYSByZXN0IHBhcmFtZXRlciB0by5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PWZ1bmMubGVuZ3RoLTFdIFRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgcmVzdCBwYXJhbWV0ZXIuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVJlc3QoZnVuYywgc3RhcnQpIHtcbiAgICAgIHJldHVybiBzZXRUb1N0cmluZyhvdmVyUmVzdChmdW5jLCBzdGFydCwgaWRlbnRpdHkpLCBmdW5jICsgJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNhbXBsZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNhbXBsZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmFuZG9tIGVsZW1lbnQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNhbXBsZShjb2xsZWN0aW9uKSB7XG4gICAgICByZXR1cm4gYXJyYXlTYW1wbGUodmFsdWVzKGNvbGxlY3Rpb24pKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zYW1wbGVTaXplYCB3aXRob3V0IHBhcmFtIGd1YXJkcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2FtcGxlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gc2FtcGxlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZG9tIGVsZW1lbnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTYW1wbGVTaXplKGNvbGxlY3Rpb24sIG4pIHtcbiAgICAgIHZhciBhcnJheSA9IHZhbHVlcyhjb2xsZWN0aW9uKTtcbiAgICAgIHJldHVybiBzaHVmZmxlU2VsZihhcnJheSwgYmFzZUNsYW1wKG4sIDAsIGFycmF5Lmxlbmd0aCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNldGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgcGF0aCBjcmVhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTZXQob2JqZWN0LCBwYXRoLCB2YWx1ZSwgY3VzdG9taXplcikge1xuICAgICAgaWYgKCFpc09iamVjdChvYmplY3QpKSB7XG4gICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICB9XG4gICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcblxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcGF0aC5sZW5ndGgsXG4gICAgICAgICAgbGFzdEluZGV4ID0gbGVuZ3RoIC0gMSxcbiAgICAgICAgICBuZXN0ZWQgPSBvYmplY3Q7XG5cbiAgICAgIHdoaWxlIChuZXN0ZWQgIT0gbnVsbCAmJiArK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSB0b0tleShwYXRoW2luZGV4XSksXG4gICAgICAgICAgICBuZXdWYWx1ZSA9IHZhbHVlO1xuXG4gICAgICAgIGlmIChpbmRleCAhPSBsYXN0SW5kZXgpIHtcbiAgICAgICAgICB2YXIgb2JqVmFsdWUgPSBuZXN0ZWRba2V5XTtcbiAgICAgICAgICBuZXdWYWx1ZSA9IGN1c3RvbWl6ZXIgPyBjdXN0b21pemVyKG9ialZhbHVlLCBrZXksIG5lc3RlZCkgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgaWYgKG5ld1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gaXNPYmplY3Qob2JqVmFsdWUpXG4gICAgICAgICAgICAgID8gb2JqVmFsdWVcbiAgICAgICAgICAgICAgOiAoaXNJbmRleChwYXRoW2luZGV4ICsgMV0pID8gW10gOiB7fSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGFzc2lnblZhbHVlKG5lc3RlZCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgICAgIG5lc3RlZCA9IG5lc3RlZFtrZXldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgc2V0RGF0YWAgd2l0aG91dCBzdXBwb3J0IGZvciBob3QgbG9vcCBzaG9ydGluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXNzb2NpYXRlIG1ldGFkYXRhIHdpdGguXG4gICAgICogQHBhcmFtIHsqfSBkYXRhIFRoZSBtZXRhZGF0YS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGZ1bmNgLlxuICAgICAqL1xuICAgIHZhciBiYXNlU2V0RGF0YSA9ICFtZXRhTWFwID8gaWRlbnRpdHkgOiBmdW5jdGlvbihmdW5jLCBkYXRhKSB7XG4gICAgICBtZXRhTWFwLnNldChmdW5jLCBkYXRhKTtcbiAgICAgIHJldHVybiBmdW5jO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgc2V0VG9TdHJpbmdgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaG90IGxvb3Agc2hvcnRpbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzdHJpbmcgVGhlIGB0b1N0cmluZ2AgcmVzdWx0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgZnVuY2AuXG4gICAgICovXG4gICAgdmFyIGJhc2VTZXRUb1N0cmluZyA9ICFkZWZpbmVQcm9wZXJ0eSA/IGlkZW50aXR5IDogZnVuY3Rpb24oZnVuYywgc3RyaW5nKSB7XG4gICAgICByZXR1cm4gZGVmaW5lUHJvcGVydHkoZnVuYywgJ3RvU3RyaW5nJywge1xuICAgICAgICAnY29uZmlndXJhYmxlJzogdHJ1ZSxcbiAgICAgICAgJ2VudW1lcmFibGUnOiBmYWxzZSxcbiAgICAgICAgJ3ZhbHVlJzogY29uc3RhbnQoc3RyaW5nKSxcbiAgICAgICAgJ3dyaXRhYmxlJzogdHJ1ZVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNodWZmbGVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBzaHVmZmxlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IHNodWZmbGVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTaHVmZmxlKGNvbGxlY3Rpb24pIHtcbiAgICAgIHJldHVybiBzaHVmZmxlU2VsZih2YWx1ZXMoY29sbGVjdGlvbikpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNsaWNlYCB3aXRob3V0IGFuIGl0ZXJhdGVlIGNhbGwgZ3VhcmQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzbGljZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBwb3NpdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2VuZD1hcnJheS5sZW5ndGhdIFRoZSBlbmQgcG9zaXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTbGljZShhcnJheSwgc3RhcnQsIGVuZCkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgICAgIHN0YXJ0ID0gLXN0YXJ0ID4gbGVuZ3RoID8gMCA6IChsZW5ndGggKyBzdGFydCk7XG4gICAgICB9XG4gICAgICBlbmQgPSBlbmQgPiBsZW5ndGggPyBsZW5ndGggOiBlbmQ7XG4gICAgICBpZiAoZW5kIDwgMCkge1xuICAgICAgICBlbmQgKz0gbGVuZ3RoO1xuICAgICAgfVxuICAgICAgbGVuZ3RoID0gc3RhcnQgPiBlbmQgPyAwIDogKChlbmQgLSBzdGFydCkgPj4+IDApO1xuICAgICAgc3RhcnQgPj4+PSAwO1xuXG4gICAgICB2YXIgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFtpbmRleF0gPSBhcnJheVtpbmRleCArIHN0YXJ0XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc29tZWAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFueSBlbGVtZW50IHBhc3NlcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNvbWUoY29sbGVjdGlvbiwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgcmVzdWx0O1xuXG4gICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgcmVzdWx0ID0gcHJlZGljYXRlKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbik7XG4gICAgICAgIHJldHVybiAhcmVzdWx0O1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gISFyZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc29ydGVkSW5kZXhgIGFuZCBgXy5zb3J0ZWRMYXN0SW5kZXhgIHdoaWNoXG4gICAgICogcGVyZm9ybXMgYSBiaW5hcnkgc2VhcmNoIG9mIGBhcnJheWAgdG8gZGV0ZXJtaW5lIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgXG4gICAgICogc2hvdWxkIGJlIGluc2VydGVkIGludG8gYGFycmF5YCBpbiBvcmRlciB0byBtYWludGFpbiBpdHMgc29ydCBvcmRlci5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvcnRlZCBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGV2YWx1YXRlLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3JldEhpZ2hlc3RdIFNwZWNpZnkgcmV0dXJuaW5nIHRoZSBoaWdoZXN0IHF1YWxpZmllZCBpbmRleC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZFxuICAgICAqICBpbnRvIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSwgcmV0SGlnaGVzdCkge1xuICAgICAgdmFyIGxvdyA9IDAsXG4gICAgICAgICAgaGlnaCA9IGFycmF5ID09IG51bGwgPyBsb3cgOiBhcnJheS5sZW5ndGg7XG5cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgJiYgdmFsdWUgPT09IHZhbHVlICYmIGhpZ2ggPD0gSEFMRl9NQVhfQVJSQVlfTEVOR1RIKSB7XG4gICAgICAgIHdoaWxlIChsb3cgPCBoaWdoKSB7XG4gICAgICAgICAgdmFyIG1pZCA9IChsb3cgKyBoaWdoKSA+Pj4gMSxcbiAgICAgICAgICAgICAgY29tcHV0ZWQgPSBhcnJheVttaWRdO1xuXG4gICAgICAgICAgaWYgKGNvbXB1dGVkICE9PSBudWxsICYmICFpc1N5bWJvbChjb21wdXRlZCkgJiZcbiAgICAgICAgICAgICAgKHJldEhpZ2hlc3QgPyAoY29tcHV0ZWQgPD0gdmFsdWUpIDogKGNvbXB1dGVkIDwgdmFsdWUpKSkge1xuICAgICAgICAgICAgbG93ID0gbWlkICsgMTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaGlnaCA9IG1pZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGhpZ2g7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVNvcnRlZEluZGV4QnkoYXJyYXksIHZhbHVlLCBpZGVudGl0eSwgcmV0SGlnaGVzdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc29ydGVkSW5kZXhCeWAgYW5kIGBfLnNvcnRlZExhc3RJbmRleEJ5YFxuICAgICAqIHdoaWNoIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgYHZhbHVlYCBhbmQgZWFjaCBlbGVtZW50IG9mIGBhcnJheWAgdG8gY29tcHV0ZVxuICAgICAqIHRoZWlyIHNvcnQgcmFua2luZy4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ7ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBzb3J0ZWQgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBldmFsdWF0ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtyZXRIaWdoZXN0XSBTcGVjaWZ5IHJldHVybmluZyB0aGUgaGlnaGVzdCBxdWFsaWZpZWQgaW5kZXguXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAgICAgKiAgaW50byBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTb3J0ZWRJbmRleEJ5KGFycmF5LCB2YWx1ZSwgaXRlcmF0ZWUsIHJldEhpZ2hlc3QpIHtcbiAgICAgIHZhbHVlID0gaXRlcmF0ZWUodmFsdWUpO1xuXG4gICAgICB2YXIgbG93ID0gMCxcbiAgICAgICAgICBoaWdoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgdmFsSXNOYU4gPSB2YWx1ZSAhPT0gdmFsdWUsXG4gICAgICAgICAgdmFsSXNOdWxsID0gdmFsdWUgPT09IG51bGwsXG4gICAgICAgICAgdmFsSXNTeW1ib2wgPSBpc1N5bWJvbCh2YWx1ZSksXG4gICAgICAgICAgdmFsSXNVbmRlZmluZWQgPSB2YWx1ZSA9PT0gdW5kZWZpbmVkO1xuXG4gICAgICB3aGlsZSAobG93IDwgaGlnaCkge1xuICAgICAgICB2YXIgbWlkID0gbmF0aXZlRmxvb3IoKGxvdyArIGhpZ2gpIC8gMiksXG4gICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlKGFycmF5W21pZF0pLFxuICAgICAgICAgICAgb3RoSXNEZWZpbmVkID0gY29tcHV0ZWQgIT09IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIG90aElzTnVsbCA9IGNvbXB1dGVkID09PSBudWxsLFxuICAgICAgICAgICAgb3RoSXNSZWZsZXhpdmUgPSBjb21wdXRlZCA9PT0gY29tcHV0ZWQsXG4gICAgICAgICAgICBvdGhJc1N5bWJvbCA9IGlzU3ltYm9sKGNvbXB1dGVkKTtcblxuICAgICAgICBpZiAodmFsSXNOYU4pIHtcbiAgICAgICAgICB2YXIgc2V0TG93ID0gcmV0SGlnaGVzdCB8fCBvdGhJc1JlZmxleGl2ZTtcbiAgICAgICAgfSBlbHNlIGlmICh2YWxJc1VuZGVmaW5lZCkge1xuICAgICAgICAgIHNldExvdyA9IG90aElzUmVmbGV4aXZlICYmIChyZXRIaWdoZXN0IHx8IG90aElzRGVmaW5lZCk7XG4gICAgICAgIH0gZWxzZSBpZiAodmFsSXNOdWxsKSB7XG4gICAgICAgICAgc2V0TG93ID0gb3RoSXNSZWZsZXhpdmUgJiYgb3RoSXNEZWZpbmVkICYmIChyZXRIaWdoZXN0IHx8ICFvdGhJc051bGwpO1xuICAgICAgICB9IGVsc2UgaWYgKHZhbElzU3ltYm9sKSB7XG4gICAgICAgICAgc2V0TG93ID0gb3RoSXNSZWZsZXhpdmUgJiYgb3RoSXNEZWZpbmVkICYmICFvdGhJc051bGwgJiYgKHJldEhpZ2hlc3QgfHwgIW90aElzU3ltYm9sKTtcbiAgICAgICAgfSBlbHNlIGlmIChvdGhJc051bGwgfHwgb3RoSXNTeW1ib2wpIHtcbiAgICAgICAgICBzZXRMb3cgPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZXRMb3cgPSByZXRIaWdoZXN0ID8gKGNvbXB1dGVkIDw9IHZhbHVlKSA6IChjb21wdXRlZCA8IHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2V0TG93KSB7XG4gICAgICAgICAgbG93ID0gbWlkICsgMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBoaWdoID0gbWlkO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbmF0aXZlTWluKGhpZ2gsIE1BWF9BUlJBWV9JTkRFWCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc29ydGVkVW5pcWAgYW5kIGBfLnNvcnRlZFVuaXFCeWAgd2l0aG91dFxuICAgICAqIHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNvcnRlZFVuaXEoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlID8gaXRlcmF0ZWUodmFsdWUpIDogdmFsdWU7XG5cbiAgICAgICAgaWYgKCFpbmRleCB8fCAhZXEoY29tcHV0ZWQsIHNlZW4pKSB7XG4gICAgICAgICAgdmFyIHNlZW4gPSBjb21wdXRlZDtcbiAgICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZSA9PT0gMCA/IDAgOiB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50b051bWJlcmAgd2hpY2ggZG9lc24ndCBlbnN1cmUgY29ycmVjdFxuICAgICAqIGNvbnZlcnNpb25zIG9mIGJpbmFyeSwgaGV4YWRlY2ltYWwsIG9yIG9jdGFsIHN0cmluZyB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbnVtYmVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VUb051bWJlcih2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJykge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBOQU47XG4gICAgICB9XG4gICAgICByZXR1cm4gK3ZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRvU3RyaW5nYCB3aGljaCBkb2Vzbid0IGNvbnZlcnQgbnVsbGlzaFxuICAgICAqIHZhbHVlcyB0byBlbXB0eSBzdHJpbmdzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHN0cmluZy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlVG9TdHJpbmcodmFsdWUpIHtcbiAgICAgIC8vIEV4aXQgZWFybHkgZm9yIHN0cmluZ3MgdG8gYXZvaWQgYSBwZXJmb3JtYW5jZSBoaXQgaW4gc29tZSBlbnZpcm9ubWVudHMuXG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAvLyBSZWN1cnNpdmVseSBjb252ZXJ0IHZhbHVlcyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICByZXR1cm4gYXJyYXlNYXAodmFsdWUsIGJhc2VUb1N0cmluZykgKyAnJztcbiAgICAgIH1cbiAgICAgIGlmIChpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHN5bWJvbFRvU3RyaW5nID8gc3ltYm9sVG9TdHJpbmcuY2FsbCh2YWx1ZSkgOiAnJztcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSAodmFsdWUgKyAnJyk7XG4gICAgICByZXR1cm4gKHJlc3VsdCA9PSAnMCcgJiYgKDEgLyB2YWx1ZSkgPT0gLUlORklOSVRZKSA/ICctMCcgOiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udW5pcUJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVVuaXEoYXJyYXksIGl0ZXJhdGVlLCBjb21wYXJhdG9yKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBpbmNsdWRlcyA9IGFycmF5SW5jbHVkZXMsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIGlzQ29tbW9uID0gdHJ1ZSxcbiAgICAgICAgICByZXN1bHQgPSBbXSxcbiAgICAgICAgICBzZWVuID0gcmVzdWx0O1xuXG4gICAgICBpZiAoY29tcGFyYXRvcikge1xuICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgICBpbmNsdWRlcyA9IGFycmF5SW5jbHVkZXNXaXRoO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAobGVuZ3RoID49IExBUkdFX0FSUkFZX1NJWkUpIHtcbiAgICAgICAgdmFyIHNldCA9IGl0ZXJhdGVlID8gbnVsbCA6IGNyZWF0ZVNldChhcnJheSk7XG4gICAgICAgIGlmIChzZXQpIHtcbiAgICAgICAgICByZXR1cm4gc2V0VG9BcnJheShzZXQpO1xuICAgICAgICB9XG4gICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgIGluY2x1ZGVzID0gY2FjaGVIYXM7XG4gICAgICAgIHNlZW4gPSBuZXcgU2V0Q2FjaGU7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgc2VlbiA9IGl0ZXJhdGVlID8gW10gOiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBvdXRlcjpcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUgPyBpdGVyYXRlZSh2YWx1ZSkgOiB2YWx1ZTtcblxuICAgICAgICB2YWx1ZSA9IChjb21wYXJhdG9yIHx8IHZhbHVlICE9PSAwKSA/IHZhbHVlIDogMDtcbiAgICAgICAgaWYgKGlzQ29tbW9uICYmIGNvbXB1dGVkID09PSBjb21wdXRlZCkge1xuICAgICAgICAgIHZhciBzZWVuSW5kZXggPSBzZWVuLmxlbmd0aDtcbiAgICAgICAgICB3aGlsZSAoc2VlbkluZGV4LS0pIHtcbiAgICAgICAgICAgIGlmIChzZWVuW3NlZW5JbmRleF0gPT09IGNvbXB1dGVkKSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlIG91dGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaXRlcmF0ZWUpIHtcbiAgICAgICAgICAgIHNlZW4ucHVzaChjb21wdXRlZCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghaW5jbHVkZXMoc2VlbiwgY29tcHV0ZWQsIGNvbXBhcmF0b3IpKSB7XG4gICAgICAgICAgaWYgKHNlZW4gIT09IHJlc3VsdCkge1xuICAgICAgICAgICAgc2Vlbi5wdXNoKGNvbXB1dGVkKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVuc2V0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcHJvcGVydHkgcGF0aCB0byB1bnNldC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHByb3BlcnR5IGlzIGRlbGV0ZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlVW5zZXQob2JqZWN0LCBwYXRoKSB7XG4gICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcbiAgICAgIG9iamVjdCA9IHBhcmVudChvYmplY3QsIHBhdGgpO1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsIHx8IGRlbGV0ZSBvYmplY3RbdG9LZXkobGFzdChwYXRoKSldO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVwZGF0ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHVwZGF0ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB1cGRhdGVyIFRoZSBmdW5jdGlvbiB0byBwcm9kdWNlIHRoZSB1cGRhdGVkIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIHBhdGggY3JlYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlVXBkYXRlKG9iamVjdCwgcGF0aCwgdXBkYXRlciwgY3VzdG9taXplcikge1xuICAgICAgcmV0dXJuIGJhc2VTZXQob2JqZWN0LCBwYXRoLCB1cGRhdGVyKGJhc2VHZXQob2JqZWN0LCBwYXRoKSksIGN1c3RvbWl6ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIG1ldGhvZHMgbGlrZSBgXy5kcm9wV2hpbGVgIGFuZCBgXy50YWtlV2hpbGVgXG4gICAgICogd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNEcm9wXSBTcGVjaWZ5IGRyb3BwaW5nIGVsZW1lbnRzIGluc3RlYWQgb2YgdGFraW5nIHRoZW0uXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VXaGlsZShhcnJheSwgcHJlZGljYXRlLCBpc0Ryb3AsIGZyb21SaWdodCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICBpbmRleCA9IGZyb21SaWdodCA/IGxlbmd0aCA6IC0xO1xuXG4gICAgICB3aGlsZSAoKGZyb21SaWdodCA/IGluZGV4LS0gOiArK2luZGV4IDwgbGVuZ3RoKSAmJlxuICAgICAgICBwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7fVxuXG4gICAgICByZXR1cm4gaXNEcm9wXG4gICAgICAgID8gYmFzZVNsaWNlKGFycmF5LCAoZnJvbVJpZ2h0ID8gMCA6IGluZGV4KSwgKGZyb21SaWdodCA/IGluZGV4ICsgMSA6IGxlbmd0aCkpXG4gICAgICAgIDogYmFzZVNsaWNlKGFycmF5LCAoZnJvbVJpZ2h0ID8gaW5kZXggKyAxIDogMCksIChmcm9tUmlnaHQgPyBsZW5ndGggOiBpbmRleCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGB3cmFwcGVyVmFsdWVgIHdoaWNoIHJldHVybnMgdGhlIHJlc3VsdCBvZlxuICAgICAqIHBlcmZvcm1pbmcgYSBzZXF1ZW5jZSBvZiBhY3Rpb25zIG9uIHRoZSB1bndyYXBwZWQgYHZhbHVlYCwgd2hlcmUgZWFjaFxuICAgICAqIHN1Y2Nlc3NpdmUgYWN0aW9uIGlzIHN1cHBsaWVkIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIHByZXZpb3VzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB1bndyYXBwZWQgdmFsdWUuXG4gICAgICogQHBhcmFtIHtBcnJheX0gYWN0aW9ucyBBY3Rpb25zIHRvIHBlcmZvcm0gdG8gcmVzb2x2ZSB0aGUgdW53cmFwcGVkIHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlV3JhcHBlclZhbHVlKHZhbHVlLCBhY3Rpb25zKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdmFsdWU7XG4gICAgICBpZiAocmVzdWx0IGluc3RhbmNlb2YgTGF6eVdyYXBwZXIpIHtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0LnZhbHVlKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXlSZWR1Y2UoYWN0aW9ucywgZnVuY3Rpb24ocmVzdWx0LCBhY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIGFjdGlvbi5mdW5jLmFwcGx5KGFjdGlvbi50aGlzQXJnLCBhcnJheVB1c2goW3Jlc3VsdF0sIGFjdGlvbi5hcmdzKSk7XG4gICAgICB9LCByZXN1bHQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIG1ldGhvZHMgbGlrZSBgXy54b3JgLCB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcywgdGhhdCBhY2NlcHRzIGFuIGFycmF5IG9mIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheXMgVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgdmFsdWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VYb3IoYXJyYXlzLCBpdGVyYXRlZSwgY29tcGFyYXRvcikge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5cy5sZW5ndGg7XG4gICAgICBpZiAobGVuZ3RoIDwgMikge1xuICAgICAgICByZXR1cm4gbGVuZ3RoID8gYmFzZVVuaXEoYXJyYXlzWzBdKSA6IFtdO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGFycmF5ID0gYXJyYXlzW2luZGV4XSxcbiAgICAgICAgICAgIG90aEluZGV4ID0gLTE7XG5cbiAgICAgICAgd2hpbGUgKCsrb3RoSW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICBpZiAob3RoSW5kZXggIT0gaW5kZXgpIHtcbiAgICAgICAgICAgIHJlc3VsdFtpbmRleF0gPSBiYXNlRGlmZmVyZW5jZShyZXN1bHRbaW5kZXhdIHx8IGFycmF5LCBhcnJheXNbb3RoSW5kZXhdLCBpdGVyYXRlZSwgY29tcGFyYXRvcik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVVuaXEoYmFzZUZsYXR0ZW4ocmVzdWx0LCAxKSwgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy56aXBPYmplY3RgIHdoaWNoIGFzc2lnbnMgdmFsdWVzIHVzaW5nIGBhc3NpZ25GdW5jYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IGlkZW50aWZpZXJzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGFzc2lnbkZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFzc2lnbiB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlWmlwT2JqZWN0KHByb3BzLCB2YWx1ZXMsIGFzc2lnbkZ1bmMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aCxcbiAgICAgICAgICB2YWxzTGVuZ3RoID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSB7fTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gaW5kZXggPCB2YWxzTGVuZ3RoID8gdmFsdWVzW2luZGV4XSA6IHVuZGVmaW5lZDtcbiAgICAgICAgYXNzaWduRnVuYyhyZXN1bHQsIHByb3BzW2luZGV4XSwgdmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYXN0cyBgdmFsdWVgIHRvIGFuIGVtcHR5IGFycmF5IGlmIGl0J3Mgbm90IGFuIGFycmF5IGxpa2Ugb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgdGhlIGNhc3QgYXJyYXktbGlrZSBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FzdEFycmF5TGlrZU9iamVjdCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlT2JqZWN0KHZhbHVlKSA/IHZhbHVlIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FzdHMgYHZhbHVlYCB0byBgaWRlbnRpdHlgIGlmIGl0J3Mgbm90IGEgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGNhc3QgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FzdEZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdmdW5jdGlvbicgPyB2YWx1ZSA6IGlkZW50aXR5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhc3RzIGB2YWx1ZWAgdG8gYSBwYXRoIGFycmF5IGlmIGl0J3Mgbm90IG9uZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeSBrZXlzIG9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY2FzdCBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNhc3RQYXRoKHZhbHVlLCBvYmplY3QpIHtcbiAgICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNLZXkodmFsdWUsIG9iamVjdCkgPyBbdmFsdWVdIDogc3RyaW5nVG9QYXRoKHRvU3RyaW5nKHZhbHVlKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBgYmFzZVJlc3RgIGFsaWFzIHdoaWNoIGNhbiBiZSByZXBsYWNlZCB3aXRoIGBpZGVudGl0eWAgYnkgbW9kdWxlXG4gICAgICogcmVwbGFjZW1lbnQgcGx1Z2lucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHR5cGUge0Z1bmN0aW9ufVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICovXG4gICAgdmFyIGNhc3RSZXN0ID0gYmFzZVJlc3Q7XG5cbiAgICAvKipcbiAgICAgKiBDYXN0cyBgYXJyYXlgIHRvIGEgc2xpY2UgaWYgaXQncyBuZWVkZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBUaGUgc3RhcnQgcG9zaXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtlbmQ9YXJyYXkubGVuZ3RoXSBUaGUgZW5kIHBvc2l0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY2FzdCBzbGljZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYXN0U2xpY2UoYXJyYXksIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gICAgICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IGVuZDtcbiAgICAgIHJldHVybiAoIXN0YXJ0ICYmIGVuZCA+PSBsZW5ndGgpID8gYXJyYXkgOiBiYXNlU2xpY2UoYXJyYXksIHN0YXJ0LCBlbmQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc2ltcGxlIHdyYXBwZXIgYXJvdW5kIHRoZSBnbG9iYWwgW2BjbGVhclRpbWVvdXRgXShodHRwczovL21kbi5pby9jbGVhclRpbWVvdXQpLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcnxPYmplY3R9IGlkIFRoZSB0aW1lciBpZCBvciB0aW1lb3V0IG9iamVjdCBvZiB0aGUgdGltZXIgdG8gY2xlYXIuXG4gICAgICovXG4gICAgdmFyIGNsZWFyVGltZW91dCA9IGN0eENsZWFyVGltZW91dCB8fCBmdW5jdGlvbihpZCkge1xuICAgICAgcmV0dXJuIHJvb3QuY2xlYXJUaW1lb3V0KGlkKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mICBgYnVmZmVyYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtCdWZmZXJ9IGJ1ZmZlciBUaGUgYnVmZmVyIHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gICAgICogQHJldHVybnMge0J1ZmZlcn0gUmV0dXJucyB0aGUgY2xvbmVkIGJ1ZmZlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZUJ1ZmZlcihidWZmZXIsIGlzRGVlcCkge1xuICAgICAgaWYgKGlzRGVlcCkge1xuICAgICAgICByZXR1cm4gYnVmZmVyLnNsaWNlKCk7XG4gICAgICB9XG4gICAgICB2YXIgbGVuZ3RoID0gYnVmZmVyLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSBhbGxvY1Vuc2FmZSA/IGFsbG9jVW5zYWZlKGxlbmd0aCkgOiBuZXcgYnVmZmVyLmNvbnN0cnVjdG9yKGxlbmd0aCk7XG5cbiAgICAgIGJ1ZmZlci5jb3B5KHJlc3VsdCk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgYXJyYXlCdWZmZXJgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5QnVmZmVyfSBhcnJheUJ1ZmZlciBUaGUgYXJyYXkgYnVmZmVyIHRvIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtBcnJheUJ1ZmZlcn0gUmV0dXJucyB0aGUgY2xvbmVkIGFycmF5IGJ1ZmZlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZUFycmF5QnVmZmVyKGFycmF5QnVmZmVyKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbmV3IGFycmF5QnVmZmVyLmNvbnN0cnVjdG9yKGFycmF5QnVmZmVyLmJ5dGVMZW5ndGgpO1xuICAgICAgbmV3IFVpbnQ4QXJyYXkocmVzdWx0KS5zZXQobmV3IFVpbnQ4QXJyYXkoYXJyYXlCdWZmZXIpKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIGBkYXRhVmlld2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhVmlldyBUaGUgZGF0YSB2aWV3IHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIGRhdGEgdmlldy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZURhdGFWaWV3KGRhdGFWaWV3LCBpc0RlZXApIHtcbiAgICAgIHZhciBidWZmZXIgPSBpc0RlZXAgPyBjbG9uZUFycmF5QnVmZmVyKGRhdGFWaWV3LmJ1ZmZlcikgOiBkYXRhVmlldy5idWZmZXI7XG4gICAgICByZXR1cm4gbmV3IGRhdGFWaWV3LmNvbnN0cnVjdG9yKGJ1ZmZlciwgZGF0YVZpZXcuYnl0ZU9mZnNldCwgZGF0YVZpZXcuYnl0ZUxlbmd0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIGByZWdleHBgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcmVnZXhwIFRoZSByZWdleHAgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIHJlZ2V4cC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZVJlZ0V4cChyZWdleHApIHtcbiAgICAgIHZhciByZXN1bHQgPSBuZXcgcmVnZXhwLmNvbnN0cnVjdG9yKHJlZ2V4cC5zb3VyY2UsIHJlRmxhZ3MuZXhlYyhyZWdleHApKTtcbiAgICAgIHJlc3VsdC5sYXN0SW5kZXggPSByZWdleHAubGFzdEluZGV4O1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgdGhlIGBzeW1ib2xgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHN5bWJvbCBUaGUgc3ltYm9sIG9iamVjdCB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgc3ltYm9sIG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZVN5bWJvbChzeW1ib2wpIHtcbiAgICAgIHJldHVybiBzeW1ib2xWYWx1ZU9mID8gT2JqZWN0KHN5bWJvbFZhbHVlT2YuY2FsbChzeW1ib2wpKSA6IHt9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgdHlwZWRBcnJheWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB0eXBlZEFycmF5IFRoZSB0eXBlZCBhcnJheSB0byBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCB0eXBlZCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZVR5cGVkQXJyYXkodHlwZWRBcnJheSwgaXNEZWVwKSB7XG4gICAgICB2YXIgYnVmZmVyID0gaXNEZWVwID8gY2xvbmVBcnJheUJ1ZmZlcih0eXBlZEFycmF5LmJ1ZmZlcikgOiB0eXBlZEFycmF5LmJ1ZmZlcjtcbiAgICAgIHJldHVybiBuZXcgdHlwZWRBcnJheS5jb25zdHJ1Y3RvcihidWZmZXIsIHR5cGVkQXJyYXkuYnl0ZU9mZnNldCwgdHlwZWRBcnJheS5sZW5ndGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbXBhcmVzIHZhbHVlcyB0byBzb3J0IHRoZW0gaW4gYXNjZW5kaW5nIG9yZGVyLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc29ydCBvcmRlciBpbmRpY2F0b3IgZm9yIGB2YWx1ZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29tcGFyZUFzY2VuZGluZyh2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIGlmICh2YWx1ZSAhPT0gb3RoZXIpIHtcbiAgICAgICAgdmFyIHZhbElzRGVmaW5lZCA9IHZhbHVlICE9PSB1bmRlZmluZWQsXG4gICAgICAgICAgICB2YWxJc051bGwgPSB2YWx1ZSA9PT0gbnVsbCxcbiAgICAgICAgICAgIHZhbElzUmVmbGV4aXZlID0gdmFsdWUgPT09IHZhbHVlLFxuICAgICAgICAgICAgdmFsSXNTeW1ib2wgPSBpc1N5bWJvbCh2YWx1ZSk7XG5cbiAgICAgICAgdmFyIG90aElzRGVmaW5lZCA9IG90aGVyICE9PSB1bmRlZmluZWQsXG4gICAgICAgICAgICBvdGhJc051bGwgPSBvdGhlciA9PT0gbnVsbCxcbiAgICAgICAgICAgIG90aElzUmVmbGV4aXZlID0gb3RoZXIgPT09IG90aGVyLFxuICAgICAgICAgICAgb3RoSXNTeW1ib2wgPSBpc1N5bWJvbChvdGhlcik7XG5cbiAgICAgICAgaWYgKCghb3RoSXNOdWxsICYmICFvdGhJc1N5bWJvbCAmJiAhdmFsSXNTeW1ib2wgJiYgdmFsdWUgPiBvdGhlcikgfHxcbiAgICAgICAgICAgICh2YWxJc1N5bWJvbCAmJiBvdGhJc0RlZmluZWQgJiYgb3RoSXNSZWZsZXhpdmUgJiYgIW90aElzTnVsbCAmJiAhb3RoSXNTeW1ib2wpIHx8XG4gICAgICAgICAgICAodmFsSXNOdWxsICYmIG90aElzRGVmaW5lZCAmJiBvdGhJc1JlZmxleGl2ZSkgfHxcbiAgICAgICAgICAgICghdmFsSXNEZWZpbmVkICYmIG90aElzUmVmbGV4aXZlKSB8fFxuICAgICAgICAgICAgIXZhbElzUmVmbGV4aXZlKSB7XG4gICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCghdmFsSXNOdWxsICYmICF2YWxJc1N5bWJvbCAmJiAhb3RoSXNTeW1ib2wgJiYgdmFsdWUgPCBvdGhlcikgfHxcbiAgICAgICAgICAgIChvdGhJc1N5bWJvbCAmJiB2YWxJc0RlZmluZWQgJiYgdmFsSXNSZWZsZXhpdmUgJiYgIXZhbElzTnVsbCAmJiAhdmFsSXNTeW1ib2wpIHx8XG4gICAgICAgICAgICAob3RoSXNOdWxsICYmIHZhbElzRGVmaW5lZCAmJiB2YWxJc1JlZmxleGl2ZSkgfHxcbiAgICAgICAgICAgICghb3RoSXNEZWZpbmVkICYmIHZhbElzUmVmbGV4aXZlKSB8fFxuICAgICAgICAgICAgIW90aElzUmVmbGV4aXZlKSB7XG4gICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIGJ5IGBfLm9yZGVyQnlgIHRvIGNvbXBhcmUgbXVsdGlwbGUgcHJvcGVydGllcyBvZiBhIHZhbHVlIHRvIGFub3RoZXJcbiAgICAgKiBhbmQgc3RhYmxlIHNvcnQgdGhlbS5cbiAgICAgKlxuICAgICAqIElmIGBvcmRlcnNgIGlzIHVuc3BlY2lmaWVkLCBhbGwgdmFsdWVzIGFyZSBzb3J0ZWQgaW4gYXNjZW5kaW5nIG9yZGVyLiBPdGhlcndpc2UsXG4gICAgICogc3BlY2lmeSBhbiBvcmRlciBvZiBcImRlc2NcIiBmb3IgZGVzY2VuZGluZyBvciBcImFzY1wiIGZvciBhc2NlbmRpbmcgc29ydCBvcmRlclxuICAgICAqIG9mIGNvcnJlc3BvbmRpbmcgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbltdfHN0cmluZ1tdfSBvcmRlcnMgVGhlIG9yZGVyIHRvIHNvcnQgYnkgZm9yIGVhY2ggcHJvcGVydHkuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc29ydCBvcmRlciBpbmRpY2F0b3IgZm9yIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBhcmVNdWx0aXBsZShvYmplY3QsIG90aGVyLCBvcmRlcnMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIG9iakNyaXRlcmlhID0gb2JqZWN0LmNyaXRlcmlhLFxuICAgICAgICAgIG90aENyaXRlcmlhID0gb3RoZXIuY3JpdGVyaWEsXG4gICAgICAgICAgbGVuZ3RoID0gb2JqQ3JpdGVyaWEubGVuZ3RoLFxuICAgICAgICAgIG9yZGVyc0xlbmd0aCA9IG9yZGVycy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBjb21wYXJlQXNjZW5kaW5nKG9iakNyaXRlcmlhW2luZGV4XSwgb3RoQ3JpdGVyaWFbaW5kZXhdKTtcbiAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgIGlmIChpbmRleCA+PSBvcmRlcnNMZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBvcmRlciA9IG9yZGVyc1tpbmRleF07XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdCAqIChvcmRlciA9PSAnZGVzYycgPyAtMSA6IDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBGaXhlcyBhbiBgQXJyYXkjc29ydGAgYnVnIGluIHRoZSBKUyBlbmdpbmUgZW1iZWRkZWQgaW4gQWRvYmUgYXBwbGljYXRpb25zXG4gICAgICAvLyB0aGF0IGNhdXNlcyBpdCwgdW5kZXIgY2VydGFpbiBjaXJjdW1zdGFuY2VzLCB0byBwcm92aWRlIHRoZSBzYW1lIHZhbHVlIGZvclxuICAgICAgLy8gYG9iamVjdGAgYW5kIGBvdGhlcmAuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vamFzaGtlbmFzL3VuZGVyc2NvcmUvcHVsbC8xMjQ3XG4gICAgICAvLyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgLy9cbiAgICAgIC8vIFRoaXMgYWxzbyBlbnN1cmVzIGEgc3RhYmxlIHNvcnQgaW4gVjggYW5kIG90aGVyIGVuZ2luZXMuXG4gICAgICAvLyBTZWUgaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9OTAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgIHJldHVybiBvYmplY3QuaW5kZXggLSBvdGhlci5pbmRleDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IHRoYXQgaXMgdGhlIGNvbXBvc2l0aW9uIG9mIHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50cyxcbiAgICAgKiBwbGFjZWhvbGRlcnMsIGFuZCBwcm92aWRlZCBhcmd1bWVudHMgaW50byBhIHNpbmdsZSBhcnJheSBvZiBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIHByb3ZpZGVkIGFyZ3VtZW50cy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYXJ0aWFscyBUaGUgYXJndW1lbnRzIHRvIHByZXBlbmQgdG8gdGhvc2UgcHJvdmlkZWQuXG4gICAgICogQHBhcmFtIHtBcnJheX0gaG9sZGVycyBUaGUgYHBhcnRpYWxzYCBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgICAqIEBwYXJhbXMge2Jvb2xlYW59IFtpc0N1cnJpZWRdIFNwZWNpZnkgY29tcG9zaW5nIGZvciBhIGN1cnJpZWQgZnVuY3Rpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgY29tcG9zZWQgYXJndW1lbnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBvc2VBcmdzKGFyZ3MsIHBhcnRpYWxzLCBob2xkZXJzLCBpc0N1cnJpZWQpIHtcbiAgICAgIHZhciBhcmdzSW5kZXggPSAtMSxcbiAgICAgICAgICBhcmdzTGVuZ3RoID0gYXJncy5sZW5ndGgsXG4gICAgICAgICAgaG9sZGVyc0xlbmd0aCA9IGhvbGRlcnMubGVuZ3RoLFxuICAgICAgICAgIGxlZnRJbmRleCA9IC0xLFxuICAgICAgICAgIGxlZnRMZW5ndGggPSBwYXJ0aWFscy5sZW5ndGgsXG4gICAgICAgICAgcmFuZ2VMZW5ndGggPSBuYXRpdmVNYXgoYXJnc0xlbmd0aCAtIGhvbGRlcnNMZW5ndGgsIDApLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KGxlZnRMZW5ndGggKyByYW5nZUxlbmd0aCksXG4gICAgICAgICAgaXNVbmN1cnJpZWQgPSAhaXNDdXJyaWVkO1xuXG4gICAgICB3aGlsZSAoKytsZWZ0SW5kZXggPCBsZWZ0TGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFtsZWZ0SW5kZXhdID0gcGFydGlhbHNbbGVmdEluZGV4XTtcbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2FyZ3NJbmRleCA8IGhvbGRlcnNMZW5ndGgpIHtcbiAgICAgICAgaWYgKGlzVW5jdXJyaWVkIHx8IGFyZ3NJbmRleCA8IGFyZ3NMZW5ndGgpIHtcbiAgICAgICAgICByZXN1bHRbaG9sZGVyc1thcmdzSW5kZXhdXSA9IGFyZ3NbYXJnc0luZGV4XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgd2hpbGUgKHJhbmdlTGVuZ3RoLS0pIHtcbiAgICAgICAgcmVzdWx0W2xlZnRJbmRleCsrXSA9IGFyZ3NbYXJnc0luZGV4KytdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGNvbXBvc2VBcmdzYCBleGNlcHQgdGhhdCB0aGUgYXJndW1lbnRzIGNvbXBvc2l0aW9uXG4gICAgICogaXMgdGFpbG9yZWQgZm9yIGBfLnBhcnRpYWxSaWdodGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIHByb3ZpZGVkIGFyZ3VtZW50cy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYXJ0aWFscyBUaGUgYXJndW1lbnRzIHRvIGFwcGVuZCB0byB0aG9zZSBwcm92aWRlZC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBob2xkZXJzIFRoZSBgcGFydGlhbHNgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAgICogQHBhcmFtcyB7Ym9vbGVhbn0gW2lzQ3VycmllZF0gU3BlY2lmeSBjb21wb3NpbmcgZm9yIGEgY3VycmllZCBmdW5jdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjb21wb3NlZCBhcmd1bWVudHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29tcG9zZUFyZ3NSaWdodChhcmdzLCBwYXJ0aWFscywgaG9sZGVycywgaXNDdXJyaWVkKSB7XG4gICAgICB2YXIgYXJnc0luZGV4ID0gLTEsXG4gICAgICAgICAgYXJnc0xlbmd0aCA9IGFyZ3MubGVuZ3RoLFxuICAgICAgICAgIGhvbGRlcnNJbmRleCA9IC0xLFxuICAgICAgICAgIGhvbGRlcnNMZW5ndGggPSBob2xkZXJzLmxlbmd0aCxcbiAgICAgICAgICByaWdodEluZGV4ID0gLTEsXG4gICAgICAgICAgcmlnaHRMZW5ndGggPSBwYXJ0aWFscy5sZW5ndGgsXG4gICAgICAgICAgcmFuZ2VMZW5ndGggPSBuYXRpdmVNYXgoYXJnc0xlbmd0aCAtIGhvbGRlcnNMZW5ndGgsIDApLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KHJhbmdlTGVuZ3RoICsgcmlnaHRMZW5ndGgpLFxuICAgICAgICAgIGlzVW5jdXJyaWVkID0gIWlzQ3VycmllZDtcblxuICAgICAgd2hpbGUgKCsrYXJnc0luZGV4IDwgcmFuZ2VMZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0W2FyZ3NJbmRleF0gPSBhcmdzW2FyZ3NJbmRleF07XG4gICAgICB9XG4gICAgICB2YXIgb2Zmc2V0ID0gYXJnc0luZGV4O1xuICAgICAgd2hpbGUgKCsrcmlnaHRJbmRleCA8IHJpZ2h0TGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFtvZmZzZXQgKyByaWdodEluZGV4XSA9IHBhcnRpYWxzW3JpZ2h0SW5kZXhdO1xuICAgICAgfVxuICAgICAgd2hpbGUgKCsraG9sZGVyc0luZGV4IDwgaG9sZGVyc0xlbmd0aCkge1xuICAgICAgICBpZiAoaXNVbmN1cnJpZWQgfHwgYXJnc0luZGV4IDwgYXJnc0xlbmd0aCkge1xuICAgICAgICAgIHJlc3VsdFtvZmZzZXQgKyBob2xkZXJzW2hvbGRlcnNJbmRleF1dID0gYXJnc1thcmdzSW5kZXgrK107XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29waWVzIHRoZSB2YWx1ZXMgb2YgYHNvdXJjZWAgdG8gYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gc291cmNlIFRoZSBhcnJheSB0byBjb3B5IHZhbHVlcyBmcm9tLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheT1bXV0gVGhlIGFycmF5IHRvIGNvcHkgdmFsdWVzIHRvLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvcHlBcnJheShzb3VyY2UsIGFycmF5KSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBzb3VyY2UubGVuZ3RoO1xuXG4gICAgICBhcnJheSB8fCAoYXJyYXkgPSBBcnJheShsZW5ndGgpKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIGFycmF5W2luZGV4XSA9IHNvdXJjZVtpbmRleF07XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29waWVzIHByb3BlcnRpZXMgb2YgYHNvdXJjZWAgdG8gYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgZnJvbS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwcm9wcyBUaGUgcHJvcGVydHkgaWRlbnRpZmllcnMgdG8gY29weS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdD17fV0gVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgdG8uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29waWVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvcHlPYmplY3Qoc291cmNlLCBwcm9wcywgb2JqZWN0LCBjdXN0b21pemVyKSB7XG4gICAgICB2YXIgaXNOZXcgPSAhb2JqZWN0O1xuICAgICAgb2JqZWN0IHx8IChvYmplY3QgPSB7fSk7XG5cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IHByb3BzW2luZGV4XTtcblxuICAgICAgICB2YXIgbmV3VmFsdWUgPSBjdXN0b21pemVyXG4gICAgICAgICAgPyBjdXN0b21pemVyKG9iamVjdFtrZXldLCBzb3VyY2Vba2V5XSwga2V5LCBvYmplY3QsIHNvdXJjZSlcbiAgICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgICBpZiAobmV3VmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIG5ld1ZhbHVlID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzTmV3KSB7XG4gICAgICAgICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYXNzaWduVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb3BpZXMgb3duIHN5bWJvbHMgb2YgYHNvdXJjZWAgdG8gYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgZnJvbS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdD17fV0gVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgdG8uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb3B5U3ltYm9scyhzb3VyY2UsIG9iamVjdCkge1xuICAgICAgcmV0dXJuIGNvcHlPYmplY3Qoc291cmNlLCBnZXRTeW1ib2xzKHNvdXJjZSksIG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29waWVzIG93biBhbmQgaW5oZXJpdGVkIHN5bWJvbHMgb2YgYHNvdXJjZWAgdG8gYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgZnJvbS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdD17fV0gVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgdG8uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb3B5U3ltYm9sc0luKHNvdXJjZSwgb2JqZWN0KSB7XG4gICAgICByZXR1cm4gY29weU9iamVjdChzb3VyY2UsIGdldFN5bWJvbHNJbihzb3VyY2UpLCBvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmdyb3VwQnlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZXR0ZXIgVGhlIGZ1bmN0aW9uIHRvIHNldCBhY2N1bXVsYXRvciB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2luaXRpYWxpemVyXSBUaGUgYWNjdW11bGF0b3Igb2JqZWN0IGluaXRpYWxpemVyLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFnZ3JlZ2F0b3IgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQWdncmVnYXRvcihzZXR0ZXIsIGluaXRpYWxpemVyKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlBZ2dyZWdhdG9yIDogYmFzZUFnZ3JlZ2F0b3IsXG4gICAgICAgICAgICBhY2N1bXVsYXRvciA9IGluaXRpYWxpemVyID8gaW5pdGlhbGl6ZXIoKSA6IHt9O1xuXG4gICAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIHNldHRlciwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpLCBhY2N1bXVsYXRvcik7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmFzc2lnbmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGFzc2lnbmVyIFRoZSBmdW5jdGlvbiB0byBhc3NpZ24gdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFzc2lnbmVyIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUFzc2lnbmVyKGFzc2lnbmVyKSB7XG4gICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2VzKSB7XG4gICAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgICAgbGVuZ3RoID0gc291cmNlcy5sZW5ndGgsXG4gICAgICAgICAgICBjdXN0b21pemVyID0gbGVuZ3RoID4gMSA/IHNvdXJjZXNbbGVuZ3RoIC0gMV0gOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBndWFyZCA9IGxlbmd0aCA+IDIgPyBzb3VyY2VzWzJdIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIGN1c3RvbWl6ZXIgPSAoYXNzaWduZXIubGVuZ3RoID4gMyAmJiB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nKVxuICAgICAgICAgID8gKGxlbmd0aC0tLCBjdXN0b21pemVyKVxuICAgICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIGlmIChndWFyZCAmJiBpc0l0ZXJhdGVlQ2FsbChzb3VyY2VzWzBdLCBzb3VyY2VzWzFdLCBndWFyZCkpIHtcbiAgICAgICAgICBjdXN0b21pemVyID0gbGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IGN1c3RvbWl6ZXI7XG4gICAgICAgICAgbGVuZ3RoID0gMTtcbiAgICAgICAgfVxuICAgICAgICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICB2YXIgc291cmNlID0gc291cmNlc1tpbmRleF07XG4gICAgICAgICAgaWYgKHNvdXJjZSkge1xuICAgICAgICAgICAgYXNzaWduZXIob2JqZWN0LCBzb3VyY2UsIGluZGV4LCBjdXN0b21pemVyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgYmFzZUVhY2hgIG9yIGBiYXNlRWFjaFJpZ2h0YCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZWFjaEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGl0ZXJhdGUgb3ZlciBhIGNvbGxlY3Rpb24uXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYmFzZSBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVCYXNlRWFjaChlYWNoRnVuYywgZnJvbVJpZ2h0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgICAgaWYgKGNvbGxlY3Rpb24gPT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBjb2xsZWN0aW9uO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNBcnJheUxpa2UoY29sbGVjdGlvbikpIHtcbiAgICAgICAgICByZXR1cm4gZWFjaEZ1bmMoY29sbGVjdGlvbiwgaXRlcmF0ZWUpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aCxcbiAgICAgICAgICAgIGluZGV4ID0gZnJvbVJpZ2h0ID8gbGVuZ3RoIDogLTEsXG4gICAgICAgICAgICBpdGVyYWJsZSA9IE9iamVjdChjb2xsZWN0aW9uKTtcblxuICAgICAgICB3aGlsZSAoKGZyb21SaWdodCA/IGluZGV4LS0gOiArK2luZGV4IDwgbGVuZ3RoKSkge1xuICAgICAgICAgIGlmIChpdGVyYXRlZShpdGVyYWJsZVtpbmRleF0sIGluZGV4LCBpdGVyYWJsZSkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb247XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBiYXNlIGZ1bmN0aW9uIGZvciBtZXRob2RzIGxpa2UgYF8uZm9ySW5gIGFuZCBgXy5mb3JPd25gLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBiYXNlIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUJhc2VGb3IoZnJvbVJpZ2h0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0LCBpdGVyYXRlZSwga2V5c0Z1bmMpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgICBpdGVyYWJsZSA9IE9iamVjdChvYmplY3QpLFxuICAgICAgICAgICAgcHJvcHMgPSBrZXlzRnVuYyhvYmplY3QpLFxuICAgICAgICAgICAgbGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG4gICAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICAgIHZhciBrZXkgPSBwcm9wc1tmcm9tUmlnaHQgPyBsZW5ndGggOiArK2luZGV4XTtcbiAgICAgICAgICBpZiAoaXRlcmF0ZWUoaXRlcmFibGVba2V5XSwga2V5LCBpdGVyYWJsZSkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd3JhcHMgYGZ1bmNgIHRvIGludm9rZSBpdCB3aXRoIHRoZSBvcHRpb25hbCBgdGhpc2BcbiAgICAgKiBiaW5kaW5nIG9mIGB0aGlzQXJnYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVCaW5kKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcpIHtcbiAgICAgIHZhciBpc0JpbmQgPSBiaXRtYXNrICYgV1JBUF9CSU5EX0ZMQUcsXG4gICAgICAgICAgQ3RvciA9IGNyZWF0ZUN0b3IoZnVuYyk7XG5cbiAgICAgIGZ1bmN0aW9uIHdyYXBwZXIoKSB7XG4gICAgICAgIHZhciBmbiA9ICh0aGlzICYmIHRoaXMgIT09IHJvb3QgJiYgdGhpcyBpbnN0YW5jZW9mIHdyYXBwZXIpID8gQ3RvciA6IGZ1bmM7XG4gICAgICAgIHJldHVybiBmbi5hcHBseShpc0JpbmQgPyB0aGlzQXJnIDogdGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB3cmFwcGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmxvd2VyRmlyc3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kTmFtZSBUaGUgbmFtZSBvZiB0aGUgYFN0cmluZ2AgY2FzZSBtZXRob2QgdG8gdXNlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNhc2UgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQ2FzZUZpcnN0KG1ldGhvZE5hbWUpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcblxuICAgICAgICB2YXIgc3RyU3ltYm9scyA9IGhhc1VuaWNvZGUoc3RyaW5nKVxuICAgICAgICAgID8gc3RyaW5nVG9BcnJheShzdHJpbmcpXG4gICAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgdmFyIGNociA9IHN0clN5bWJvbHNcbiAgICAgICAgICA/IHN0clN5bWJvbHNbMF1cbiAgICAgICAgICA6IHN0cmluZy5jaGFyQXQoMCk7XG5cbiAgICAgICAgdmFyIHRyYWlsaW5nID0gc3RyU3ltYm9sc1xuICAgICAgICAgID8gY2FzdFNsaWNlKHN0clN5bWJvbHMsIDEpLmpvaW4oJycpXG4gICAgICAgICAgOiBzdHJpbmcuc2xpY2UoMSk7XG5cbiAgICAgICAgcmV0dXJuIGNoclttZXRob2ROYW1lXSgpICsgdHJhaWxpbmc7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmNhbWVsQ2FzZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIFRoZSBmdW5jdGlvbiB0byBjb21iaW5lIGVhY2ggd29yZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb21wb3VuZGVyIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUNvbXBvdW5kZXIoY2FsbGJhY2spIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIGFycmF5UmVkdWNlKHdvcmRzKGRlYnVycihzdHJpbmcpLnJlcGxhY2UocmVBcG9zLCAnJykpLCBjYWxsYmFjaywgJycpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwcm9kdWNlcyBhbiBpbnN0YW5jZSBvZiBgQ3RvcmAgcmVnYXJkbGVzcyBvZlxuICAgICAqIHdoZXRoZXIgaXQgd2FzIGludm9rZWQgYXMgcGFydCBvZiBhIGBuZXdgIGV4cHJlc3Npb24gb3IgYnkgYGNhbGxgIG9yIGBhcHBseWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IEN0b3IgVGhlIGNvbnN0cnVjdG9yIHRvIHdyYXAuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVDdG9yKEN0b3IpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gVXNlIGEgYHN3aXRjaGAgc3RhdGVtZW50IHRvIHdvcmsgd2l0aCBjbGFzcyBjb25zdHJ1Y3RvcnMuIFNlZVxuICAgICAgICAvLyBodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1lY21hc2NyaXB0LWZ1bmN0aW9uLW9iamVjdHMtY2FsbC10aGlzYXJndW1lbnQtYXJndW1lbnRzbGlzdFxuICAgICAgICAvLyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgICAgICAgIGNhc2UgMDogcmV0dXJuIG5ldyBDdG9yO1xuICAgICAgICAgIGNhc2UgMTogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0pO1xuICAgICAgICAgIGNhc2UgMjogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgICAgIGNhc2UgMzogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgICAgICAgIGNhc2UgNDogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pO1xuICAgICAgICAgIGNhc2UgNTogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10sIGFyZ3NbNF0pO1xuICAgICAgICAgIGNhc2UgNjogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10sIGFyZ3NbNF0sIGFyZ3NbNV0pO1xuICAgICAgICAgIGNhc2UgNzogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10sIGFyZ3NbNF0sIGFyZ3NbNV0sIGFyZ3NbNl0pO1xuICAgICAgICB9XG4gICAgICAgIHZhciB0aGlzQmluZGluZyA9IGJhc2VDcmVhdGUoQ3Rvci5wcm90b3R5cGUpLFxuICAgICAgICAgICAgcmVzdWx0ID0gQ3Rvci5hcHBseSh0aGlzQmluZGluZywgYXJncyk7XG5cbiAgICAgICAgLy8gTWltaWMgdGhlIGNvbnN0cnVjdG9yJ3MgYHJldHVybmAgYmVoYXZpb3IuXG4gICAgICAgIC8vIFNlZSBodHRwczovL2VzNS5naXRodWIuaW8vI3gxMy4yLjIgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgICAgcmV0dXJuIGlzT2JqZWN0KHJlc3VsdCkgPyByZXN1bHQgOiB0aGlzQmluZGluZztcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd3JhcHMgYGZ1bmNgIHRvIGVuYWJsZSBjdXJyeWluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBhcml0eSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQ3VycnkoZnVuYywgYml0bWFzaywgYXJpdHkpIHtcbiAgICAgIHZhciBDdG9yID0gY3JlYXRlQ3RvcihmdW5jKTtcblxuICAgICAgZnVuY3Rpb24gd3JhcHBlcigpIHtcbiAgICAgICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXG4gICAgICAgICAgICBhcmdzID0gQXJyYXkobGVuZ3RoKSxcbiAgICAgICAgICAgIGluZGV4ID0gbGVuZ3RoLFxuICAgICAgICAgICAgcGxhY2Vob2xkZXIgPSBnZXRIb2xkZXIod3JhcHBlcik7XG5cbiAgICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgICBhcmdzW2luZGV4XSA9IGFyZ3VtZW50c1tpbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGhvbGRlcnMgPSAobGVuZ3RoIDwgMyAmJiBhcmdzWzBdICE9PSBwbGFjZWhvbGRlciAmJiBhcmdzW2xlbmd0aCAtIDFdICE9PSBwbGFjZWhvbGRlcilcbiAgICAgICAgICA/IFtdXG4gICAgICAgICAgOiByZXBsYWNlSG9sZGVycyhhcmdzLCBwbGFjZWhvbGRlcik7XG5cbiAgICAgICAgbGVuZ3RoIC09IGhvbGRlcnMubGVuZ3RoO1xuICAgICAgICBpZiAobGVuZ3RoIDwgYXJpdHkpIHtcbiAgICAgICAgICByZXR1cm4gY3JlYXRlUmVjdXJyeShcbiAgICAgICAgICAgIGZ1bmMsIGJpdG1hc2ssIGNyZWF0ZUh5YnJpZCwgd3JhcHBlci5wbGFjZWhvbGRlciwgdW5kZWZpbmVkLFxuICAgICAgICAgICAgYXJncywgaG9sZGVycywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGFyaXR5IC0gbGVuZ3RoKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZm4gPSAodGhpcyAmJiB0aGlzICE9PSByb290ICYmIHRoaXMgaW5zdGFuY2VvZiB3cmFwcGVyKSA/IEN0b3IgOiBmdW5jO1xuICAgICAgICByZXR1cm4gYXBwbHkoZm4sIHRoaXMsIGFyZ3MpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdyYXBwZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBfLmZpbmRgIG9yIGBfLmZpbmRMYXN0YCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZmluZEluZGV4RnVuYyBUaGUgZnVuY3Rpb24gdG8gZmluZCB0aGUgY29sbGVjdGlvbiBpbmRleC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmaW5kIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUZpbmQoZmluZEluZGV4RnVuYykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZnJvbUluZGV4KSB7XG4gICAgICAgIHZhciBpdGVyYWJsZSA9IE9iamVjdChjb2xsZWN0aW9uKTtcbiAgICAgICAgaWYgKCFpc0FycmF5TGlrZShjb2xsZWN0aW9uKSkge1xuICAgICAgICAgIHZhciBpdGVyYXRlZSA9IGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyk7XG4gICAgICAgICAgY29sbGVjdGlvbiA9IGtleXMoY29sbGVjdGlvbik7XG4gICAgICAgICAgcHJlZGljYXRlID0gZnVuY3Rpb24oa2V5KSB7IHJldHVybiBpdGVyYXRlZShpdGVyYWJsZVtrZXldLCBrZXksIGl0ZXJhYmxlKTsgfTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaW5kZXggPSBmaW5kSW5kZXhGdW5jKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZnJvbUluZGV4KTtcbiAgICAgICAgcmV0dXJuIGluZGV4ID4gLTEgPyBpdGVyYWJsZVtpdGVyYXRlZSA/IGNvbGxlY3Rpb25baW5kZXhdIDogaW5kZXhdIDogdW5kZWZpbmVkO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYF8uZmxvd2Agb3IgYF8uZmxvd1JpZ2h0YCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZmxvdyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVGbG93KGZyb21SaWdodCkge1xuICAgICAgcmV0dXJuIGZsYXRSZXN0KGZ1bmN0aW9uKGZ1bmNzKSB7XG4gICAgICAgIHZhciBsZW5ndGggPSBmdW5jcy5sZW5ndGgsXG4gICAgICAgICAgICBpbmRleCA9IGxlbmd0aCxcbiAgICAgICAgICAgIHByZXJlcSA9IExvZGFzaFdyYXBwZXIucHJvdG90eXBlLnRocnU7XG5cbiAgICAgICAgaWYgKGZyb21SaWdodCkge1xuICAgICAgICAgIGZ1bmNzLnJldmVyc2UoKTtcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICAgIHZhciBmdW5jID0gZnVuY3NbaW5kZXhdO1xuICAgICAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChwcmVyZXEgJiYgIXdyYXBwZXIgJiYgZ2V0RnVuY05hbWUoZnVuYykgPT0gJ3dyYXBwZXInKSB7XG4gICAgICAgICAgICB2YXIgd3JhcHBlciA9IG5ldyBMb2Rhc2hXcmFwcGVyKFtdLCB0cnVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaW5kZXggPSB3cmFwcGVyID8gaW5kZXggOiBsZW5ndGg7XG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgZnVuYyA9IGZ1bmNzW2luZGV4XTtcblxuICAgICAgICAgIHZhciBmdW5jTmFtZSA9IGdldEZ1bmNOYW1lKGZ1bmMpLFxuICAgICAgICAgICAgICBkYXRhID0gZnVuY05hbWUgPT0gJ3dyYXBwZXInID8gZ2V0RGF0YShmdW5jKSA6IHVuZGVmaW5lZDtcblxuICAgICAgICAgIGlmIChkYXRhICYmIGlzTGF6aWFibGUoZGF0YVswXSkgJiZcbiAgICAgICAgICAgICAgICBkYXRhWzFdID09IChXUkFQX0FSWV9GTEFHIHwgV1JBUF9DVVJSWV9GTEFHIHwgV1JBUF9QQVJUSUFMX0ZMQUcgfCBXUkFQX1JFQVJHX0ZMQUcpICYmXG4gICAgICAgICAgICAgICAgIWRhdGFbNF0ubGVuZ3RoICYmIGRhdGFbOV0gPT0gMVxuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgIHdyYXBwZXIgPSB3cmFwcGVyW2dldEZ1bmNOYW1lKGRhdGFbMF0pXS5hcHBseSh3cmFwcGVyLCBkYXRhWzNdKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd3JhcHBlciA9IChmdW5jLmxlbmd0aCA9PSAxICYmIGlzTGF6aWFibGUoZnVuYykpXG4gICAgICAgICAgICAgID8gd3JhcHBlcltmdW5jTmFtZV0oKVxuICAgICAgICAgICAgICA6IHdyYXBwZXIudGhydShmdW5jKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICAgICAgICB2YWx1ZSA9IGFyZ3NbMF07XG5cbiAgICAgICAgICBpZiAod3JhcHBlciAmJiBhcmdzLmxlbmd0aCA9PSAxICYmIGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gd3JhcHBlci5wbGFudCh2YWx1ZSkudmFsdWUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIGluZGV4ID0gMCxcbiAgICAgICAgICAgICAgcmVzdWx0ID0gbGVuZ3RoID8gZnVuY3NbaW5kZXhdLmFwcGx5KHRoaXMsIGFyZ3MpIDogdmFsdWU7XG5cbiAgICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgICAgcmVzdWx0ID0gZnVuY3NbaW5kZXhdLmNhbGwodGhpcywgcmVzdWx0KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHdyYXBzIGBmdW5jYCB0byBpbnZva2UgaXQgd2l0aCBvcHRpb25hbCBgdGhpc2BcbiAgICAgKiBiaW5kaW5nIG9mIGB0aGlzQXJnYCwgcGFydGlhbCBhcHBsaWNhdGlvbiwgYW5kIGN1cnJ5aW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufHN0cmluZ30gZnVuYyBUaGUgZnVuY3Rpb24gb3IgbWV0aG9kIG5hbWUgdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIHByZXBlbmQgdG8gdGhvc2UgcHJvdmlkZWQgdG9cbiAgICAgKiAgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbaG9sZGVyc10gVGhlIGBwYXJ0aWFsc2AgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcGFydGlhbHNSaWdodF0gVGhlIGFyZ3VtZW50cyB0byBhcHBlbmQgdG8gdGhvc2UgcHJvdmlkZWRcbiAgICAgKiAgdG8gdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbaG9sZGVyc1JpZ2h0XSBUaGUgYHBhcnRpYWxzUmlnaHRgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2FyZ1Bvc10gVGhlIGFyZ3VtZW50IHBvc2l0aW9ucyBvZiB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJ5XSBUaGUgYXJpdHkgY2FwIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5XSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlSHlicmlkKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzLCBob2xkZXJzLCBwYXJ0aWFsc1JpZ2h0LCBob2xkZXJzUmlnaHQsIGFyZ1BvcywgYXJ5LCBhcml0eSkge1xuICAgICAgdmFyIGlzQXJ5ID0gYml0bWFzayAmIFdSQVBfQVJZX0ZMQUcsXG4gICAgICAgICAgaXNCaW5kID0gYml0bWFzayAmIFdSQVBfQklORF9GTEFHLFxuICAgICAgICAgIGlzQmluZEtleSA9IGJpdG1hc2sgJiBXUkFQX0JJTkRfS0VZX0ZMQUcsXG4gICAgICAgICAgaXNDdXJyaWVkID0gYml0bWFzayAmIChXUkFQX0NVUlJZX0ZMQUcgfCBXUkFQX0NVUlJZX1JJR0hUX0ZMQUcpLFxuICAgICAgICAgIGlzRmxpcCA9IGJpdG1hc2sgJiBXUkFQX0ZMSVBfRkxBRyxcbiAgICAgICAgICBDdG9yID0gaXNCaW5kS2V5ID8gdW5kZWZpbmVkIDogY3JlYXRlQ3RvcihmdW5jKTtcblxuICAgICAgZnVuY3Rpb24gd3JhcHBlcigpIHtcbiAgICAgICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXG4gICAgICAgICAgICBhcmdzID0gQXJyYXkobGVuZ3RoKSxcbiAgICAgICAgICAgIGluZGV4ID0gbGVuZ3RoO1xuXG4gICAgICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICAgICAgYXJnc1tpbmRleF0gPSBhcmd1bWVudHNbaW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0N1cnJpZWQpIHtcbiAgICAgICAgICB2YXIgcGxhY2Vob2xkZXIgPSBnZXRIb2xkZXIod3JhcHBlciksXG4gICAgICAgICAgICAgIGhvbGRlcnNDb3VudCA9IGNvdW50SG9sZGVycyhhcmdzLCBwbGFjZWhvbGRlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcnRpYWxzKSB7XG4gICAgICAgICAgYXJncyA9IGNvbXBvc2VBcmdzKGFyZ3MsIHBhcnRpYWxzLCBob2xkZXJzLCBpc0N1cnJpZWQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJ0aWFsc1JpZ2h0KSB7XG4gICAgICAgICAgYXJncyA9IGNvbXBvc2VBcmdzUmlnaHQoYXJncywgcGFydGlhbHNSaWdodCwgaG9sZGVyc1JpZ2h0LCBpc0N1cnJpZWQpO1xuICAgICAgICB9XG4gICAgICAgIGxlbmd0aCAtPSBob2xkZXJzQ291bnQ7XG4gICAgICAgIGlmIChpc0N1cnJpZWQgJiYgbGVuZ3RoIDwgYXJpdHkpIHtcbiAgICAgICAgICB2YXIgbmV3SG9sZGVycyA9IHJlcGxhY2VIb2xkZXJzKGFyZ3MsIHBsYWNlaG9sZGVyKTtcbiAgICAgICAgICByZXR1cm4gY3JlYXRlUmVjdXJyeShcbiAgICAgICAgICAgIGZ1bmMsIGJpdG1hc2ssIGNyZWF0ZUh5YnJpZCwgd3JhcHBlci5wbGFjZWhvbGRlciwgdGhpc0FyZyxcbiAgICAgICAgICAgIGFyZ3MsIG5ld0hvbGRlcnMsIGFyZ1BvcywgYXJ5LCBhcml0eSAtIGxlbmd0aFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHRoaXNCaW5kaW5nID0gaXNCaW5kID8gdGhpc0FyZyA6IHRoaXMsXG4gICAgICAgICAgICBmbiA9IGlzQmluZEtleSA/IHRoaXNCaW5kaW5nW2Z1bmNdIDogZnVuYztcblxuICAgICAgICBsZW5ndGggPSBhcmdzLmxlbmd0aDtcbiAgICAgICAgaWYgKGFyZ1Bvcykge1xuICAgICAgICAgIGFyZ3MgPSByZW9yZGVyKGFyZ3MsIGFyZ1Bvcyk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNGbGlwICYmIGxlbmd0aCA+IDEpIHtcbiAgICAgICAgICBhcmdzLnJldmVyc2UoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNBcnkgJiYgYXJ5IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgYXJncy5sZW5ndGggPSBhcnk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMgJiYgdGhpcyAhPT0gcm9vdCAmJiB0aGlzIGluc3RhbmNlb2Ygd3JhcHBlcikge1xuICAgICAgICAgIGZuID0gQ3RvciB8fCBjcmVhdGVDdG9yKGZuKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZm4uYXBwbHkodGhpc0JpbmRpbmcsIGFyZ3MpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdyYXBwZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8uaW52ZXJ0QnlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZXR0ZXIgVGhlIGZ1bmN0aW9uIHRvIHNldCBhY2N1bXVsYXRvciB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gdG9JdGVyYXRlZSBUaGUgZnVuY3Rpb24gdG8gcmVzb2x2ZSBpdGVyYXRlZXMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgaW52ZXJ0ZXIgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlSW52ZXJ0ZXIoc2V0dGVyLCB0b0l0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgICByZXR1cm4gYmFzZUludmVydGVyKG9iamVjdCwgc2V0dGVyLCB0b0l0ZXJhdGVlKGl0ZXJhdGVlKSwge30pO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwZXJmb3JtcyBhIG1hdGhlbWF0aWNhbCBvcGVyYXRpb24gb24gdHdvIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gb3BlcmF0b3IgVGhlIGZ1bmN0aW9uIHRvIHBlcmZvcm0gdGhlIG9wZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2RlZmF1bHRWYWx1ZV0gVGhlIHZhbHVlIHVzZWQgZm9yIGB1bmRlZmluZWRgIGFyZ3VtZW50cy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBtYXRoZW1hdGljYWwgb3BlcmF0aW9uIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZU1hdGhPcGVyYXRpb24ob3BlcmF0b3IsIGRlZmF1bHRWYWx1ZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlLCBvdGhlcikge1xuICAgICAgICB2YXIgcmVzdWx0O1xuICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCAmJiBvdGhlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvdGhlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaWYgKHJlc3VsdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gb3RoZXI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgfHwgdHlwZW9mIG90aGVyID09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGJhc2VUb1N0cmluZyh2YWx1ZSk7XG4gICAgICAgICAgICBvdGhlciA9IGJhc2VUb1N0cmluZyhvdGhlcik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhbHVlID0gYmFzZVRvTnVtYmVyKHZhbHVlKTtcbiAgICAgICAgICAgIG90aGVyID0gYmFzZVRvTnVtYmVyKG90aGVyKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0ID0gb3BlcmF0b3IodmFsdWUsIG90aGVyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5vdmVyYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gYXJyYXlGdW5jIFRoZSBmdW5jdGlvbiB0byBpdGVyYXRlIG92ZXIgaXRlcmF0ZWVzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG92ZXIgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlT3ZlcihhcnJheUZ1bmMpIHtcbiAgICAgIHJldHVybiBmbGF0UmVzdChmdW5jdGlvbihpdGVyYXRlZXMpIHtcbiAgICAgICAgaXRlcmF0ZWVzID0gYXJyYXlNYXAoaXRlcmF0ZWVzLCBiYXNlVW5hcnkoZ2V0SXRlcmF0ZWUoKSkpO1xuICAgICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICAgICAgICAgIHZhciB0aGlzQXJnID0gdGhpcztcbiAgICAgICAgICByZXR1cm4gYXJyYXlGdW5jKGl0ZXJhdGVlcywgZnVuY3Rpb24oaXRlcmF0ZWUpIHtcbiAgICAgICAgICAgIHJldHVybiBhcHBseShpdGVyYXRlZSwgdGhpc0FyZywgYXJncyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyB0aGUgcGFkZGluZyBmb3IgYHN0cmluZ2AgYmFzZWQgb24gYGxlbmd0aGAuIFRoZSBgY2hhcnNgIHN0cmluZ1xuICAgICAqIGlzIHRydW5jYXRlZCBpZiB0aGUgbnVtYmVyIG9mIGNoYXJhY3RlcnMgZXhjZWVkcyBgbGVuZ3RoYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aCBUaGUgcGFkZGluZyBsZW5ndGguXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz0nICddIFRoZSBzdHJpbmcgdXNlZCBhcyBwYWRkaW5nLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHBhZGRpbmcgZm9yIGBzdHJpbmdgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVBhZGRpbmcobGVuZ3RoLCBjaGFycykge1xuICAgICAgY2hhcnMgPSBjaGFycyA9PT0gdW5kZWZpbmVkID8gJyAnIDogYmFzZVRvU3RyaW5nKGNoYXJzKTtcblxuICAgICAgdmFyIGNoYXJzTGVuZ3RoID0gY2hhcnMubGVuZ3RoO1xuICAgICAgaWYgKGNoYXJzTGVuZ3RoIDwgMikge1xuICAgICAgICByZXR1cm4gY2hhcnNMZW5ndGggPyBiYXNlUmVwZWF0KGNoYXJzLCBsZW5ndGgpIDogY2hhcnM7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gYmFzZVJlcGVhdChjaGFycywgbmF0aXZlQ2VpbChsZW5ndGggLyBzdHJpbmdTaXplKGNoYXJzKSkpO1xuICAgICAgcmV0dXJuIGhhc1VuaWNvZGUoY2hhcnMpXG4gICAgICAgID8gY2FzdFNsaWNlKHN0cmluZ1RvQXJyYXkocmVzdWx0KSwgMCwgbGVuZ3RoKS5qb2luKCcnKVxuICAgICAgICA6IHJlc3VsdC5zbGljZSgwLCBsZW5ndGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHdyYXBzIGBmdW5jYCB0byBpbnZva2UgaXQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmdcbiAgICAgKiBvZiBgdGhpc0FyZ2AgYW5kIGBwYXJ0aWFsc2AgcHJlcGVuZGVkIHRvIHRoZSBhcmd1bWVudHMgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0geyp9IHRoaXNBcmcgVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYXJ0aWFscyBUaGUgYXJndW1lbnRzIHRvIHByZXBlbmQgdG8gdGhvc2UgcHJvdmlkZWQgdG9cbiAgICAgKiAgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVBhcnRpYWwoZnVuYywgYml0bWFzaywgdGhpc0FyZywgcGFydGlhbHMpIHtcbiAgICAgIHZhciBpc0JpbmQgPSBiaXRtYXNrICYgV1JBUF9CSU5EX0ZMQUcsXG4gICAgICAgICAgQ3RvciA9IGNyZWF0ZUN0b3IoZnVuYyk7XG5cbiAgICAgIGZ1bmN0aW9uIHdyYXBwZXIoKSB7XG4gICAgICAgIHZhciBhcmdzSW5kZXggPSAtMSxcbiAgICAgICAgICAgIGFyZ3NMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxuICAgICAgICAgICAgbGVmdEluZGV4ID0gLTEsXG4gICAgICAgICAgICBsZWZ0TGVuZ3RoID0gcGFydGlhbHMubGVuZ3RoLFxuICAgICAgICAgICAgYXJncyA9IEFycmF5KGxlZnRMZW5ndGggKyBhcmdzTGVuZ3RoKSxcbiAgICAgICAgICAgIGZuID0gKHRoaXMgJiYgdGhpcyAhPT0gcm9vdCAmJiB0aGlzIGluc3RhbmNlb2Ygd3JhcHBlcikgPyBDdG9yIDogZnVuYztcblxuICAgICAgICB3aGlsZSAoKytsZWZ0SW5kZXggPCBsZWZ0TGVuZ3RoKSB7XG4gICAgICAgICAgYXJnc1tsZWZ0SW5kZXhdID0gcGFydGlhbHNbbGVmdEluZGV4XTtcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAoYXJnc0xlbmd0aC0tKSB7XG4gICAgICAgICAgYXJnc1tsZWZ0SW5kZXgrK10gPSBhcmd1bWVudHNbKythcmdzSW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcHBseShmbiwgaXNCaW5kID8gdGhpc0FyZyA6IHRoaXMsIGFyZ3MpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdyYXBwZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBfLnJhbmdlYCBvciBgXy5yYW5nZVJpZ2h0YCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcmFuZ2UgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlUmFuZ2UoZnJvbVJpZ2h0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oc3RhcnQsIGVuZCwgc3RlcCkge1xuICAgICAgICBpZiAoc3RlcCAmJiB0eXBlb2Ygc3RlcCAhPSAnbnVtYmVyJyAmJiBpc0l0ZXJhdGVlQ2FsbChzdGFydCwgZW5kLCBzdGVwKSkge1xuICAgICAgICAgIGVuZCA9IHN0ZXAgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gRW5zdXJlIHRoZSBzaWduIG9mIGAtMGAgaXMgcHJlc2VydmVkLlxuICAgICAgICBzdGFydCA9IHRvRmluaXRlKHN0YXJ0KTtcbiAgICAgICAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgZW5kID0gc3RhcnQ7XG4gICAgICAgICAgc3RhcnQgPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVuZCA9IHRvRmluaXRlKGVuZCk7XG4gICAgICAgIH1cbiAgICAgICAgc3RlcCA9IHN0ZXAgPT09IHVuZGVmaW5lZCA/IChzdGFydCA8IGVuZCA/IDEgOiAtMSkgOiB0b0Zpbml0ZShzdGVwKTtcbiAgICAgICAgcmV0dXJuIGJhc2VSYW5nZShzdGFydCwgZW5kLCBzdGVwLCBmcm9tUmlnaHQpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwZXJmb3JtcyBhIHJlbGF0aW9uYWwgb3BlcmF0aW9uIG9uIHR3byB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IG9wZXJhdG9yIFRoZSBmdW5jdGlvbiB0byBwZXJmb3JtIHRoZSBvcGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcmVsYXRpb25hbCBvcGVyYXRpb24gZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlUmVsYXRpb25hbE9wZXJhdGlvbihvcGVyYXRvcikge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlLCBvdGhlcikge1xuICAgICAgICBpZiAoISh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgJiYgdHlwZW9mIG90aGVyID09ICdzdHJpbmcnKSkge1xuICAgICAgICAgIHZhbHVlID0gdG9OdW1iZXIodmFsdWUpO1xuICAgICAgICAgIG90aGVyID0gdG9OdW1iZXIob3RoZXIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvcGVyYXRvcih2YWx1ZSwgb3RoZXIpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCB3cmFwcyBgZnVuY2AgdG8gY29udGludWUgY3VycnlpbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB3cmFwRnVuYyBUaGUgZnVuY3Rpb24gdG8gY3JlYXRlIHRoZSBgZnVuY2Agd3JhcHBlci5cbiAgICAgKiBAcGFyYW0geyp9IHBsYWNlaG9sZGVyIFRoZSBwbGFjZWhvbGRlciB2YWx1ZS5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBwcmVwZW5kIHRvIHRob3NlIHByb3ZpZGVkIHRvXG4gICAgICogIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2hvbGRlcnNdIFRoZSBgcGFydGlhbHNgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2FyZ1Bvc10gVGhlIGFyZ3VtZW50IHBvc2l0aW9ucyBvZiB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJ5XSBUaGUgYXJpdHkgY2FwIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5XSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlUmVjdXJyeShmdW5jLCBiaXRtYXNrLCB3cmFwRnVuYywgcGxhY2Vob2xkZXIsIHRoaXNBcmcsIHBhcnRpYWxzLCBob2xkZXJzLCBhcmdQb3MsIGFyeSwgYXJpdHkpIHtcbiAgICAgIHZhciBpc0N1cnJ5ID0gYml0bWFzayAmIFdSQVBfQ1VSUllfRkxBRyxcbiAgICAgICAgICBuZXdIb2xkZXJzID0gaXNDdXJyeSA/IGhvbGRlcnMgOiB1bmRlZmluZWQsXG4gICAgICAgICAgbmV3SG9sZGVyc1JpZ2h0ID0gaXNDdXJyeSA/IHVuZGVmaW5lZCA6IGhvbGRlcnMsXG4gICAgICAgICAgbmV3UGFydGlhbHMgPSBpc0N1cnJ5ID8gcGFydGlhbHMgOiB1bmRlZmluZWQsXG4gICAgICAgICAgbmV3UGFydGlhbHNSaWdodCA9IGlzQ3VycnkgPyB1bmRlZmluZWQgOiBwYXJ0aWFscztcblxuICAgICAgYml0bWFzayB8PSAoaXNDdXJyeSA/IFdSQVBfUEFSVElBTF9GTEFHIDogV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcpO1xuICAgICAgYml0bWFzayAmPSB+KGlzQ3VycnkgPyBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRyA6IFdSQVBfUEFSVElBTF9GTEFHKTtcblxuICAgICAgaWYgKCEoYml0bWFzayAmIFdSQVBfQ1VSUllfQk9VTkRfRkxBRykpIHtcbiAgICAgICAgYml0bWFzayAmPSB+KFdSQVBfQklORF9GTEFHIHwgV1JBUF9CSU5EX0tFWV9GTEFHKTtcbiAgICAgIH1cbiAgICAgIHZhciBuZXdEYXRhID0gW1xuICAgICAgICBmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBuZXdQYXJ0aWFscywgbmV3SG9sZGVycywgbmV3UGFydGlhbHNSaWdodCxcbiAgICAgICAgbmV3SG9sZGVyc1JpZ2h0LCBhcmdQb3MsIGFyeSwgYXJpdHlcbiAgICAgIF07XG5cbiAgICAgIHZhciByZXN1bHQgPSB3cmFwRnVuYy5hcHBseSh1bmRlZmluZWQsIG5ld0RhdGEpO1xuICAgICAgaWYgKGlzTGF6aWFibGUoZnVuYykpIHtcbiAgICAgICAgc2V0RGF0YShyZXN1bHQsIG5ld0RhdGEpO1xuICAgICAgfVxuICAgICAgcmVzdWx0LnBsYWNlaG9sZGVyID0gcGxhY2Vob2xkZXI7XG4gICAgICByZXR1cm4gc2V0V3JhcFRvU3RyaW5nKHJlc3VsdCwgZnVuYywgYml0bWFzayk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8ucm91bmRgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kTmFtZSBUaGUgbmFtZSBvZiB0aGUgYE1hdGhgIG1ldGhvZCB0byB1c2Ugd2hlbiByb3VuZGluZy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyByb3VuZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVSb3VuZChtZXRob2ROYW1lKSB7XG4gICAgICB2YXIgZnVuYyA9IE1hdGhbbWV0aG9kTmFtZV07XG4gICAgICByZXR1cm4gZnVuY3Rpb24obnVtYmVyLCBwcmVjaXNpb24pIHtcbiAgICAgICAgbnVtYmVyID0gdG9OdW1iZXIobnVtYmVyKTtcbiAgICAgICAgcHJlY2lzaW9uID0gcHJlY2lzaW9uID09IG51bGwgPyAwIDogbmF0aXZlTWluKHRvSW50ZWdlcihwcmVjaXNpb24pLCAyOTIpO1xuICAgICAgICBpZiAocHJlY2lzaW9uICYmIG5hdGl2ZUlzRmluaXRlKG51bWJlcikpIHtcbiAgICAgICAgICAvLyBTaGlmdCB3aXRoIGV4cG9uZW50aWFsIG5vdGF0aW9uIHRvIGF2b2lkIGZsb2F0aW5nLXBvaW50IGlzc3Vlcy5cbiAgICAgICAgICAvLyBTZWUgW01ETl0oaHR0cHM6Ly9tZG4uaW8vcm91bmQjRXhhbXBsZXMpIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICAgICAgdmFyIHBhaXIgPSAodG9TdHJpbmcobnVtYmVyKSArICdlJykuc3BsaXQoJ2UnKSxcbiAgICAgICAgICAgICAgdmFsdWUgPSBmdW5jKHBhaXJbMF0gKyAnZScgKyAoK3BhaXJbMV0gKyBwcmVjaXNpb24pKTtcblxuICAgICAgICAgIHBhaXIgPSAodG9TdHJpbmcodmFsdWUpICsgJ2UnKS5zcGxpdCgnZScpO1xuICAgICAgICAgIHJldHVybiArKHBhaXJbMF0gKyAnZScgKyAoK3BhaXJbMV0gLSBwcmVjaXNpb24pKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuYyhudW1iZXIpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2V0IG9iamVjdCBvZiBgdmFsdWVzYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gYWRkIHRvIHRoZSBzZXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IHNldC5cbiAgICAgKi9cbiAgICB2YXIgY3JlYXRlU2V0ID0gIShTZXQgJiYgKDEgLyBzZXRUb0FycmF5KG5ldyBTZXQoWywtMF0pKVsxXSkgPT0gSU5GSU5JVFkpID8gbm9vcCA6IGZ1bmN0aW9uKHZhbHVlcykge1xuICAgICAgcmV0dXJuIG5ldyBTZXQodmFsdWVzKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBfLnRvUGFpcnNgIG9yIGBfLnRvUGFpcnNJbmAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYSBnaXZlbiBvYmplY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcGFpcnMgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlVG9QYWlycyhrZXlzRnVuYykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICB2YXIgdGFnID0gZ2V0VGFnKG9iamVjdCk7XG4gICAgICAgIGlmICh0YWcgPT0gbWFwVGFnKSB7XG4gICAgICAgICAgcmV0dXJuIG1hcFRvQXJyYXkob2JqZWN0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGFnID09IHNldFRhZykge1xuICAgICAgICAgIHJldHVybiBzZXRUb1BhaXJzKG9iamVjdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJhc2VUb1BhaXJzKG9iamVjdCwga2V5c0Z1bmMob2JqZWN0KSk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGVpdGhlciBjdXJyaWVzIG9yIGludm9rZXMgYGZ1bmNgIHdpdGggb3B0aW9uYWxcbiAgICAgKiBgdGhpc2AgYmluZGluZyBhbmQgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufHN0cmluZ30gZnVuYyBUaGUgZnVuY3Rpb24gb3IgbWV0aG9kIG5hbWUgdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy5cbiAgICAgKiAgICAxIC0gYF8uYmluZGBcbiAgICAgKiAgICAyIC0gYF8uYmluZEtleWBcbiAgICAgKiAgICA0IC0gYF8uY3VycnlgIG9yIGBfLmN1cnJ5UmlnaHRgIG9mIGEgYm91bmQgZnVuY3Rpb25cbiAgICAgKiAgICA4IC0gYF8uY3VycnlgXG4gICAgICogICAxNiAtIGBfLmN1cnJ5UmlnaHRgXG4gICAgICogICAzMiAtIGBfLnBhcnRpYWxgXG4gICAgICogICA2NCAtIGBfLnBhcnRpYWxSaWdodGBcbiAgICAgKiAgMTI4IC0gYF8ucmVhcmdgXG4gICAgICogIDI1NiAtIGBfLmFyeWBcbiAgICAgKiAgNTEyIC0gYF8uZmxpcGBcbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBiZSBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbaG9sZGVyc10gVGhlIGBwYXJ0aWFsc2AgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbYXJnUG9zXSBUaGUgYXJndW1lbnQgcG9zaXRpb25zIG9mIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcnldIFRoZSBhcml0eSBjYXAgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJpdHldIFRoZSBhcml0eSBvZiBgZnVuY2AuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVXcmFwKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzLCBob2xkZXJzLCBhcmdQb3MsIGFyeSwgYXJpdHkpIHtcbiAgICAgIHZhciBpc0JpbmRLZXkgPSBiaXRtYXNrICYgV1JBUF9CSU5EX0tFWV9GTEFHO1xuICAgICAgaWYgKCFpc0JpbmRLZXkgJiYgdHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICB2YXIgbGVuZ3RoID0gcGFydGlhbHMgPyBwYXJ0aWFscy5sZW5ndGggOiAwO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgYml0bWFzayAmPSB+KFdSQVBfUEFSVElBTF9GTEFHIHwgV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcpO1xuICAgICAgICBwYXJ0aWFscyA9IGhvbGRlcnMgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBhcnkgPSBhcnkgPT09IHVuZGVmaW5lZCA/IGFyeSA6IG5hdGl2ZU1heCh0b0ludGVnZXIoYXJ5KSwgMCk7XG4gICAgICBhcml0eSA9IGFyaXR5ID09PSB1bmRlZmluZWQgPyBhcml0eSA6IHRvSW50ZWdlcihhcml0eSk7XG4gICAgICBsZW5ndGggLT0gaG9sZGVycyA/IGhvbGRlcnMubGVuZ3RoIDogMDtcblxuICAgICAgaWYgKGJpdG1hc2sgJiBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRykge1xuICAgICAgICB2YXIgcGFydGlhbHNSaWdodCA9IHBhcnRpYWxzLFxuICAgICAgICAgICAgaG9sZGVyc1JpZ2h0ID0gaG9sZGVycztcblxuICAgICAgICBwYXJ0aWFscyA9IGhvbGRlcnMgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICB2YXIgZGF0YSA9IGlzQmluZEtleSA/IHVuZGVmaW5lZCA6IGdldERhdGEoZnVuYyk7XG5cbiAgICAgIHZhciBuZXdEYXRhID0gW1xuICAgICAgICBmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBwYXJ0aWFscywgaG9sZGVycywgcGFydGlhbHNSaWdodCwgaG9sZGVyc1JpZ2h0LFxuICAgICAgICBhcmdQb3MsIGFyeSwgYXJpdHlcbiAgICAgIF07XG5cbiAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgIG1lcmdlRGF0YShuZXdEYXRhLCBkYXRhKTtcbiAgICAgIH1cbiAgICAgIGZ1bmMgPSBuZXdEYXRhWzBdO1xuICAgICAgYml0bWFzayA9IG5ld0RhdGFbMV07XG4gICAgICB0aGlzQXJnID0gbmV3RGF0YVsyXTtcbiAgICAgIHBhcnRpYWxzID0gbmV3RGF0YVszXTtcbiAgICAgIGhvbGRlcnMgPSBuZXdEYXRhWzRdO1xuICAgICAgYXJpdHkgPSBuZXdEYXRhWzldID0gbmV3RGF0YVs5XSA9PT0gdW5kZWZpbmVkXG4gICAgICAgID8gKGlzQmluZEtleSA/IDAgOiBmdW5jLmxlbmd0aClcbiAgICAgICAgOiBuYXRpdmVNYXgobmV3RGF0YVs5XSAtIGxlbmd0aCwgMCk7XG5cbiAgICAgIGlmICghYXJpdHkgJiYgYml0bWFzayAmIChXUkFQX0NVUlJZX0ZMQUcgfCBXUkFQX0NVUlJZX1JJR0hUX0ZMQUcpKSB7XG4gICAgICAgIGJpdG1hc2sgJj0gfihXUkFQX0NVUlJZX0ZMQUcgfCBXUkFQX0NVUlJZX1JJR0hUX0ZMQUcpO1xuICAgICAgfVxuICAgICAgaWYgKCFiaXRtYXNrIHx8IGJpdG1hc2sgPT0gV1JBUF9CSU5EX0ZMQUcpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGNyZWF0ZUJpbmQoZnVuYywgYml0bWFzaywgdGhpc0FyZyk7XG4gICAgICB9IGVsc2UgaWYgKGJpdG1hc2sgPT0gV1JBUF9DVVJSWV9GTEFHIHx8IGJpdG1hc2sgPT0gV1JBUF9DVVJSWV9SSUdIVF9GTEFHKSB7XG4gICAgICAgIHJlc3VsdCA9IGNyZWF0ZUN1cnJ5KGZ1bmMsIGJpdG1hc2ssIGFyaXR5KTtcbiAgICAgIH0gZWxzZSBpZiAoKGJpdG1hc2sgPT0gV1JBUF9QQVJUSUFMX0ZMQUcgfHwgYml0bWFzayA9PSAoV1JBUF9CSU5EX0ZMQUcgfCBXUkFQX1BBUlRJQUxfRkxBRykpICYmICFob2xkZXJzLmxlbmd0aCkge1xuICAgICAgICByZXN1bHQgPSBjcmVhdGVQYXJ0aWFsKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdCA9IGNyZWF0ZUh5YnJpZC5hcHBseSh1bmRlZmluZWQsIG5ld0RhdGEpO1xuICAgICAgfVxuICAgICAgdmFyIHNldHRlciA9IGRhdGEgPyBiYXNlU2V0RGF0YSA6IHNldERhdGE7XG4gICAgICByZXR1cm4gc2V0V3JhcFRvU3RyaW5nKHNldHRlcihyZXN1bHQsIG5ld0RhdGEpLCBmdW5jLCBiaXRtYXNrKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIGJ5IGBfLmRlZmF1bHRzYCB0byBjdXN0b21pemUgaXRzIGBfLmFzc2lnbkluYCB1c2UgdG8gYXNzaWduIHByb3BlcnRpZXNcbiAgICAgKiBvZiBzb3VyY2Ugb2JqZWN0cyB0byB0aGUgZGVzdGluYXRpb24gb2JqZWN0IGZvciBhbGwgZGVzdGluYXRpb24gcHJvcGVydGllc1xuICAgICAqIHRoYXQgcmVzb2x2ZSB0byBgdW5kZWZpbmVkYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSBvYmpWYWx1ZSBUaGUgZGVzdGluYXRpb24gdmFsdWUuXG4gICAgICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgc291cmNlIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHBhcmVudCBvYmplY3Qgb2YgYG9ialZhbHVlYC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgdmFsdWUgdG8gYXNzaWduLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGN1c3RvbURlZmF1bHRzQXNzaWduSW4ob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCkge1xuICAgICAgaWYgKG9ialZhbHVlID09PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAoZXEob2JqVmFsdWUsIG9iamVjdFByb3RvW2tleV0pICYmICFoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSkpIHtcbiAgICAgICAgcmV0dXJuIHNyY1ZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9ialZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVzZWQgYnkgYF8uZGVmYXVsdHNEZWVwYCB0byBjdXN0b21pemUgaXRzIGBfLm1lcmdlYCB1c2UgdG8gbWVyZ2Ugc291cmNlXG4gICAgICogb2JqZWN0cyBpbnRvIGRlc3RpbmF0aW9uIG9iamVjdHMgdGhhdCBhcmUgcGFzc2VkIHRocnUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gb2JqVmFsdWUgVGhlIGRlc3RpbmF0aW9uIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHNvdXJjZSB2YWx1ZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIG1lcmdlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHBhcmVudCBvYmplY3Qgb2YgYG9ialZhbHVlYC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBwYXJlbnQgb2JqZWN0IG9mIGBzcmNWYWx1ZWAuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBzb3VyY2UgdmFsdWVzIGFuZCB0aGVpciBtZXJnZWRcbiAgICAgKiAgY291bnRlcnBhcnRzLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3VzdG9tRGVmYXVsdHNNZXJnZShvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKSB7XG4gICAgICBpZiAoaXNPYmplY3Qob2JqVmFsdWUpICYmIGlzT2JqZWN0KHNyY1ZhbHVlKSkge1xuICAgICAgICAvLyBSZWN1cnNpdmVseSBtZXJnZSBvYmplY3RzIGFuZCBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgc3RhY2suc2V0KHNyY1ZhbHVlLCBvYmpWYWx1ZSk7XG4gICAgICAgIGJhc2VNZXJnZShvYmpWYWx1ZSwgc3JjVmFsdWUsIHVuZGVmaW5lZCwgY3VzdG9tRGVmYXVsdHNNZXJnZSwgc3RhY2spO1xuICAgICAgICBzdGFja1snZGVsZXRlJ10oc3JjVmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9ialZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVzZWQgYnkgYF8ub21pdGAgdG8gY3VzdG9taXplIGl0cyBgXy5jbG9uZURlZXBgIHVzZSB0byBvbmx5IGNsb25lIHBsYWluXG4gICAgICogb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHVuY2xvbmVkIHZhbHVlIG9yIGB1bmRlZmluZWRgIHRvIGRlZmVyIGNsb25pbmcgdG8gYF8uY2xvbmVEZWVwYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjdXN0b21PbWl0Q2xvbmUodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc1BsYWluT2JqZWN0KHZhbHVlKSA/IHVuZGVmaW5lZCA6IHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3IgYXJyYXlzIHdpdGggc3VwcG9ydCBmb3JcbiAgICAgKiBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IG90aGVyIFRoZSBvdGhlciBhcnJheSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYGFycmF5YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYXJyYXlzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXF1YWxBcnJheXMoYXJyYXksIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gICAgICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHLFxuICAgICAgICAgIGFyckxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICBvdGhMZW5ndGggPSBvdGhlci5sZW5ndGg7XG5cbiAgICAgIGlmIChhcnJMZW5ndGggIT0gb3RoTGVuZ3RoICYmICEoaXNQYXJ0aWFsICYmIG90aExlbmd0aCA+IGFyckxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgLy8gQXNzdW1lIGN5Y2xpYyB2YWx1ZXMgYXJlIGVxdWFsLlxuICAgICAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQoYXJyYXkpO1xuICAgICAgaWYgKHN0YWNrZWQgJiYgc3RhY2suZ2V0KG90aGVyKSkge1xuICAgICAgICByZXR1cm4gc3RhY2tlZCA9PSBvdGhlcjtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIHJlc3VsdCA9IHRydWUsXG4gICAgICAgICAgc2VlbiA9IChiaXRtYXNrICYgQ09NUEFSRV9VTk9SREVSRURfRkxBRykgPyBuZXcgU2V0Q2FjaGUgOiB1bmRlZmluZWQ7XG5cbiAgICAgIHN0YWNrLnNldChhcnJheSwgb3RoZXIpO1xuICAgICAgc3RhY2suc2V0KG90aGVyLCBhcnJheSk7XG5cbiAgICAgIC8vIElnbm9yZSBub24taW5kZXggcHJvcGVydGllcy5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgYXJyTGVuZ3RoKSB7XG4gICAgICAgIHZhciBhcnJWYWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICAgIG90aFZhbHVlID0gb3RoZXJbaW5kZXhdO1xuXG4gICAgICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICAgICAgdmFyIGNvbXBhcmVkID0gaXNQYXJ0aWFsXG4gICAgICAgICAgICA/IGN1c3RvbWl6ZXIob3RoVmFsdWUsIGFyclZhbHVlLCBpbmRleCwgb3RoZXIsIGFycmF5LCBzdGFjaylcbiAgICAgICAgICAgIDogY3VzdG9taXplcihhcnJWYWx1ZSwgb3RoVmFsdWUsIGluZGV4LCBhcnJheSwgb3RoZXIsIHN0YWNrKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29tcGFyZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGlmIChjb21wYXJlZCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgYXJyYXlzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgIGlmIChzZWVuKSB7XG4gICAgICAgICAgaWYgKCFhcnJheVNvbWUob3RoZXIsIGZ1bmN0aW9uKG90aFZhbHVlLCBvdGhJbmRleCkge1xuICAgICAgICAgICAgICAgIGlmICghY2FjaGVIYXMoc2Vlbiwgb3RoSW5kZXgpICYmXG4gICAgICAgICAgICAgICAgICAgIChhcnJWYWx1ZSA9PT0gb3RoVmFsdWUgfHwgZXF1YWxGdW5jKGFyclZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spKSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlZW4ucHVzaChvdGhJbmRleCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KSkge1xuICAgICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoIShcbiAgICAgICAgICAgICAgYXJyVmFsdWUgPT09IG90aFZhbHVlIHx8XG4gICAgICAgICAgICAgICAgZXF1YWxGdW5jKGFyclZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spXG4gICAgICAgICAgICApKSB7XG4gICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHN0YWNrWydkZWxldGUnXShhcnJheSk7XG4gICAgICBzdGFja1snZGVsZXRlJ10ob3RoZXIpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIGNvbXBhcmluZyBvYmplY3RzIG9mXG4gICAgICogdGhlIHNhbWUgYHRvU3RyaW5nVGFnYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIGZ1bmN0aW9uIG9ubHkgc3VwcG9ydHMgY29tcGFyaW5nIHZhbHVlcyB3aXRoIHRhZ3Mgb2ZcbiAgICAgKiBgQm9vbGVhbmAsIGBEYXRlYCwgYEVycm9yYCwgYE51bWJlcmAsIGBSZWdFeHBgLCBvciBgU3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFnIFRoZSBgdG9TdHJpbmdUYWdgIG9mIHRoZSBvYmplY3RzIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVxdWFsQnlUYWcob2JqZWN0LCBvdGhlciwgdGFnLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gICAgICBzd2l0Y2ggKHRhZykge1xuICAgICAgICBjYXNlIGRhdGFWaWV3VGFnOlxuICAgICAgICAgIGlmICgob2JqZWN0LmJ5dGVMZW5ndGggIT0gb3RoZXIuYnl0ZUxlbmd0aCkgfHxcbiAgICAgICAgICAgICAgKG9iamVjdC5ieXRlT2Zmc2V0ICE9IG90aGVyLmJ5dGVPZmZzZXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIG9iamVjdCA9IG9iamVjdC5idWZmZXI7XG4gICAgICAgICAgb3RoZXIgPSBvdGhlci5idWZmZXI7XG5cbiAgICAgICAgY2FzZSBhcnJheUJ1ZmZlclRhZzpcbiAgICAgICAgICBpZiAoKG9iamVjdC5ieXRlTGVuZ3RoICE9IG90aGVyLmJ5dGVMZW5ndGgpIHx8XG4gICAgICAgICAgICAgICFlcXVhbEZ1bmMobmV3IFVpbnQ4QXJyYXkob2JqZWN0KSwgbmV3IFVpbnQ4QXJyYXkob3RoZXIpKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcblxuICAgICAgICBjYXNlIGJvb2xUYWc6XG4gICAgICAgIGNhc2UgZGF0ZVRhZzpcbiAgICAgICAgY2FzZSBudW1iZXJUYWc6XG4gICAgICAgICAgLy8gQ29lcmNlIGJvb2xlYW5zIHRvIGAxYCBvciBgMGAgYW5kIGRhdGVzIHRvIG1pbGxpc2Vjb25kcy5cbiAgICAgICAgICAvLyBJbnZhbGlkIGRhdGVzIGFyZSBjb2VyY2VkIHRvIGBOYU5gLlxuICAgICAgICAgIHJldHVybiBlcSgrb2JqZWN0LCArb3RoZXIpO1xuXG4gICAgICAgIGNhc2UgZXJyb3JUYWc6XG4gICAgICAgICAgcmV0dXJuIG9iamVjdC5uYW1lID09IG90aGVyLm5hbWUgJiYgb2JqZWN0Lm1lc3NhZ2UgPT0gb3RoZXIubWVzc2FnZTtcblxuICAgICAgICBjYXNlIHJlZ2V4cFRhZzpcbiAgICAgICAgY2FzZSBzdHJpbmdUYWc6XG4gICAgICAgICAgLy8gQ29lcmNlIHJlZ2V4ZXMgdG8gc3RyaW5ncyBhbmQgdHJlYXQgc3RyaW5ncywgcHJpbWl0aXZlcyBhbmQgb2JqZWN0cyxcbiAgICAgICAgICAvLyBhcyBlcXVhbC4gU2VlIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1yZWdleHAucHJvdG90eXBlLnRvc3RyaW5nXG4gICAgICAgICAgLy8gZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgICAgICByZXR1cm4gb2JqZWN0ID09IChvdGhlciArICcnKTtcblxuICAgICAgICBjYXNlIG1hcFRhZzpcbiAgICAgICAgICB2YXIgY29udmVydCA9IG1hcFRvQXJyYXk7XG5cbiAgICAgICAgY2FzZSBzZXRUYWc6XG4gICAgICAgICAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRztcbiAgICAgICAgICBjb252ZXJ0IHx8IChjb252ZXJ0ID0gc2V0VG9BcnJheSk7XG5cbiAgICAgICAgICBpZiAob2JqZWN0LnNpemUgIT0gb3RoZXIuc2l6ZSAmJiAhaXNQYXJ0aWFsKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIEFzc3VtZSBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgICAgICAgICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldChvYmplY3QpO1xuICAgICAgICAgIGlmIChzdGFja2VkKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RhY2tlZCA9PSBvdGhlcjtcbiAgICAgICAgICB9XG4gICAgICAgICAgYml0bWFzayB8PSBDT01QQVJFX1VOT1JERVJFRF9GTEFHO1xuXG4gICAgICAgICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBvYmplY3RzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgICAgc3RhY2suc2V0KG9iamVjdCwgb3RoZXIpO1xuICAgICAgICAgIHZhciByZXN1bHQgPSBlcXVhbEFycmF5cyhjb252ZXJ0KG9iamVjdCksIGNvbnZlcnQob3RoZXIpLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbiAgICAgICAgICBzdGFja1snZGVsZXRlJ10ob2JqZWN0KTtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuXG4gICAgICAgIGNhc2Ugc3ltYm9sVGFnOlxuICAgICAgICAgIGlmIChzeW1ib2xWYWx1ZU9mKSB7XG4gICAgICAgICAgICByZXR1cm4gc3ltYm9sVmFsdWVPZi5jYWxsKG9iamVjdCkgPT0gc3ltYm9sVmFsdWVPZi5jYWxsKG90aGVyKTtcbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBvYmplY3RzIHdpdGggc3VwcG9ydCBmb3JcbiAgICAgKiBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVxdWFsT2JqZWN0cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gICAgICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHLFxuICAgICAgICAgIG9ialByb3BzID0gZ2V0QWxsS2V5cyhvYmplY3QpLFxuICAgICAgICAgIG9iakxlbmd0aCA9IG9ialByb3BzLmxlbmd0aCxcbiAgICAgICAgICBvdGhQcm9wcyA9IGdldEFsbEtleXMob3RoZXIpLFxuICAgICAgICAgIG90aExlbmd0aCA9IG90aFByb3BzLmxlbmd0aDtcblxuICAgICAgaWYgKG9iakxlbmd0aCAhPSBvdGhMZW5ndGggJiYgIWlzUGFydGlhbCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSBvYmpMZW5ndGg7XG4gICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICB2YXIga2V5ID0gb2JqUHJvcHNbaW5kZXhdO1xuICAgICAgICBpZiAoIShpc1BhcnRpYWwgPyBrZXkgaW4gb3RoZXIgOiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG90aGVyLCBrZXkpKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gQXNzdW1lIGN5Y2xpYyB2YWx1ZXMgYXJlIGVxdWFsLlxuICAgICAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQob2JqZWN0KTtcbiAgICAgIGlmIChzdGFja2VkICYmIHN0YWNrLmdldChvdGhlcikpIHtcbiAgICAgICAgcmV0dXJuIHN0YWNrZWQgPT0gb3RoZXI7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gdHJ1ZTtcbiAgICAgIHN0YWNrLnNldChvYmplY3QsIG90aGVyKTtcbiAgICAgIHN0YWNrLnNldChvdGhlciwgb2JqZWN0KTtcblxuICAgICAgdmFyIHNraXBDdG9yID0gaXNQYXJ0aWFsO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBvYmpMZW5ndGgpIHtcbiAgICAgICAga2V5ID0gb2JqUHJvcHNbaW5kZXhdO1xuICAgICAgICB2YXIgb2JqVmFsdWUgPSBvYmplY3Rba2V5XSxcbiAgICAgICAgICAgIG90aFZhbHVlID0gb3RoZXJba2V5XTtcblxuICAgICAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgICAgIHZhciBjb21wYXJlZCA9IGlzUGFydGlhbFxuICAgICAgICAgICAgPyBjdXN0b21pemVyKG90aFZhbHVlLCBvYmpWYWx1ZSwga2V5LCBvdGhlciwgb2JqZWN0LCBzdGFjaylcbiAgICAgICAgICAgIDogY3VzdG9taXplcihvYmpWYWx1ZSwgb3RoVmFsdWUsIGtleSwgb2JqZWN0LCBvdGhlciwgc3RhY2spO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgb2JqZWN0cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICBpZiAoIShjb21wYXJlZCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgID8gKG9ialZhbHVlID09PSBvdGhWYWx1ZSB8fCBlcXVhbEZ1bmMob2JqVmFsdWUsIG90aFZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaykpXG4gICAgICAgICAgICAgIDogY29tcGFyZWRcbiAgICAgICAgICAgICkpIHtcbiAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBza2lwQ3RvciB8fCAoc2tpcEN0b3IgPSBrZXkgPT0gJ2NvbnN0cnVjdG9yJyk7XG4gICAgICB9XG4gICAgICBpZiAocmVzdWx0ICYmICFza2lwQ3Rvcikge1xuICAgICAgICB2YXIgb2JqQ3RvciA9IG9iamVjdC5jb25zdHJ1Y3RvcixcbiAgICAgICAgICAgIG90aEN0b3IgPSBvdGhlci5jb25zdHJ1Y3RvcjtcblxuICAgICAgICAvLyBOb24gYE9iamVjdGAgb2JqZWN0IGluc3RhbmNlcyB3aXRoIGRpZmZlcmVudCBjb25zdHJ1Y3RvcnMgYXJlIG5vdCBlcXVhbC5cbiAgICAgICAgaWYgKG9iakN0b3IgIT0gb3RoQ3RvciAmJlxuICAgICAgICAgICAgKCdjb25zdHJ1Y3RvcicgaW4gb2JqZWN0ICYmICdjb25zdHJ1Y3RvcicgaW4gb3RoZXIpICYmXG4gICAgICAgICAgICAhKHR5cGVvZiBvYmpDdG9yID09ICdmdW5jdGlvbicgJiYgb2JqQ3RvciBpbnN0YW5jZW9mIG9iakN0b3IgJiZcbiAgICAgICAgICAgICAgdHlwZW9mIG90aEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBvdGhDdG9yIGluc3RhbmNlb2Ygb3RoQ3RvcikpIHtcbiAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgc3RhY2tbJ2RlbGV0ZSddKG9iamVjdCk7XG4gICAgICBzdGFja1snZGVsZXRlJ10ob3RoZXIpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VSZXN0YCB3aGljaCBmbGF0dGVucyB0aGUgcmVzdCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgYSByZXN0IHBhcmFtZXRlciB0by5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0UmVzdChmdW5jKSB7XG4gICAgICByZXR1cm4gc2V0VG9TdHJpbmcob3ZlclJlc3QoZnVuYywgdW5kZWZpbmVkLCBmbGF0dGVuKSwgZnVuYyArICcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRBbGxLZXlzKG9iamVjdCkge1xuICAgICAgcmV0dXJuIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5cywgZ2V0U3ltYm9scyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZFxuICAgICAqIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldEFsbEtleXNJbihvYmplY3QpIHtcbiAgICAgIHJldHVybiBiYXNlR2V0QWxsS2V5cyhvYmplY3QsIGtleXNJbiwgZ2V0U3ltYm9sc0luKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIG1ldGFkYXRhIGZvciBgZnVuY2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtZXRhZGF0YSBmb3IgYGZ1bmNgLlxuICAgICAqL1xuICAgIHZhciBnZXREYXRhID0gIW1ldGFNYXAgPyBub29wIDogZnVuY3Rpb24oZnVuYykge1xuICAgICAgcmV0dXJuIG1ldGFNYXAuZ2V0KGZ1bmMpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBuYW1lIG9mIGBmdW5jYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZnVuY3Rpb24gbmFtZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRGdW5jTmFtZShmdW5jKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gKGZ1bmMubmFtZSArICcnKSxcbiAgICAgICAgICBhcnJheSA9IHJlYWxOYW1lc1tyZXN1bHRdLFxuICAgICAgICAgIGxlbmd0aCA9IGhhc093blByb3BlcnR5LmNhbGwocmVhbE5hbWVzLCByZXN1bHQpID8gYXJyYXkubGVuZ3RoIDogMDtcblxuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHZhciBkYXRhID0gYXJyYXlbbGVuZ3RoXSxcbiAgICAgICAgICAgIG90aGVyRnVuYyA9IGRhdGEuZnVuYztcbiAgICAgICAgaWYgKG90aGVyRnVuYyA9PSBudWxsIHx8IG90aGVyRnVuYyA9PSBmdW5jKSB7XG4gICAgICAgICAgcmV0dXJuIGRhdGEubmFtZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBhcmd1bWVudCBwbGFjZWhvbGRlciB2YWx1ZSBmb3IgYGZ1bmNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwbGFjZWhvbGRlciB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRIb2xkZXIoZnVuYykge1xuICAgICAgdmFyIG9iamVjdCA9IGhhc093blByb3BlcnR5LmNhbGwobG9kYXNoLCAncGxhY2Vob2xkZXInKSA/IGxvZGFzaCA6IGZ1bmM7XG4gICAgICByZXR1cm4gb2JqZWN0LnBsYWNlaG9sZGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGFwcHJvcHJpYXRlIFwiaXRlcmF0ZWVcIiBmdW5jdGlvbi4gSWYgYF8uaXRlcmF0ZWVgIGlzIGN1c3RvbWl6ZWQsXG4gICAgICogdGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSBjdXN0b20gbWV0aG9kLCBvdGhlcndpc2UgaXQgcmV0dXJucyBgYmFzZUl0ZXJhdGVlYC5cbiAgICAgKiBJZiBhcmd1bWVudHMgYXJlIHByb3ZpZGVkLCB0aGUgY2hvc2VuIGZ1bmN0aW9uIGlzIGludm9rZWQgd2l0aCB0aGVtIGFuZFxuICAgICAqIGl0cyByZXN1bHQgaXMgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gW3ZhbHVlXSBUaGUgdmFsdWUgdG8gY29udmVydCB0byBhbiBpdGVyYXRlZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5XSBUaGUgYXJpdHkgb2YgdGhlIGNyZWF0ZWQgaXRlcmF0ZWUuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBjaG9zZW4gZnVuY3Rpb24gb3IgaXRzIHJlc3VsdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRJdGVyYXRlZSgpIHtcbiAgICAgIHZhciByZXN1bHQgPSBsb2Rhc2guaXRlcmF0ZWUgfHwgaXRlcmF0ZWU7XG4gICAgICByZXN1bHQgPSByZXN1bHQgPT09IGl0ZXJhdGVlID8gYmFzZUl0ZXJhdGVlIDogcmVzdWx0O1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyByZXN1bHQoYXJndW1lbnRzWzBdLCBhcmd1bWVudHNbMV0pIDogcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGRhdGEgZm9yIGBtYXBgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gbWFwIFRoZSBtYXAgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUgcmVmZXJlbmNlIGtleS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWFwIGRhdGEuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0TWFwRGF0YShtYXAsIGtleSkge1xuICAgICAgdmFyIGRhdGEgPSBtYXAuX19kYXRhX187XG4gICAgICByZXR1cm4gaXNLZXlhYmxlKGtleSlcbiAgICAgICAgPyBkYXRhW3R5cGVvZiBrZXkgPT0gJ3N0cmluZycgPyAnc3RyaW5nJyA6ICdoYXNoJ11cbiAgICAgICAgOiBkYXRhLm1hcDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBwcm9wZXJ0eSBuYW1lcywgdmFsdWVzLCBhbmQgY29tcGFyZSBmbGFncyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbWF0Y2ggZGF0YSBvZiBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRNYXRjaERhdGEob2JqZWN0KSB7XG4gICAgICB2YXIgcmVzdWx0ID0ga2V5cyhvYmplY3QpLFxuICAgICAgICAgIGxlbmd0aCA9IHJlc3VsdC5sZW5ndGg7XG5cbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICB2YXIga2V5ID0gcmVzdWx0W2xlbmd0aF0sXG4gICAgICAgICAgICB2YWx1ZSA9IG9iamVjdFtrZXldO1xuXG4gICAgICAgIHJlc3VsdFtsZW5ndGhdID0gW2tleSwgdmFsdWUsIGlzU3RyaWN0Q29tcGFyYWJsZSh2YWx1ZSldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBuYXRpdmUgZnVuY3Rpb24gYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIG1ldGhvZCB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGZ1bmN0aW9uIGlmIGl0J3MgbmF0aXZlLCBlbHNlIGB1bmRlZmluZWRgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldE5hdGl2ZShvYmplY3QsIGtleSkge1xuICAgICAgdmFyIHZhbHVlID0gZ2V0VmFsdWUob2JqZWN0LCBrZXkpO1xuICAgICAgcmV0dXJuIGJhc2VJc05hdGl2ZSh2YWx1ZSkgPyB2YWx1ZSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VHZXRUYWdgIHdoaWNoIGlnbm9yZXMgYFN5bWJvbC50b1N0cmluZ1RhZ2AgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSByYXcgYHRvU3RyaW5nVGFnYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRSYXdUYWcodmFsdWUpIHtcbiAgICAgIHZhciBpc093biA9IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIHN5bVRvU3RyaW5nVGFnKSxcbiAgICAgICAgICB0YWcgPSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdmFyIHVubWFza2VkID0gdHJ1ZTtcbiAgICAgIH0gY2F0Y2ggKGUpIHt9XG5cbiAgICAgIHZhciByZXN1bHQgPSBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgICAgIGlmICh1bm1hc2tlZCkge1xuICAgICAgICBpZiAoaXNPd24pIHtcbiAgICAgICAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB0YWc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGVsZXRlIHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBzeW1ib2xzLlxuICAgICAqL1xuICAgIHZhciBnZXRTeW1ib2xzID0gIW5hdGl2ZUdldFN5bWJvbHMgPyBzdHViQXJyYXkgOiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcbiAgICAgIHJldHVybiBhcnJheUZpbHRlcihuYXRpdmVHZXRTeW1ib2xzKG9iamVjdCksIGZ1bmN0aW9uKHN5bWJvbCkge1xuICAgICAgICByZXR1cm4gcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChvYmplY3QsIHN5bWJvbCk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBzeW1ib2xzLlxuICAgICAqL1xuICAgIHZhciBnZXRTeW1ib2xzSW4gPSAhbmF0aXZlR2V0U3ltYm9scyA/IHN0dWJBcnJheSA6IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgd2hpbGUgKG9iamVjdCkge1xuICAgICAgICBhcnJheVB1c2gocmVzdWx0LCBnZXRTeW1ib2xzKG9iamVjdCkpO1xuICAgICAgICBvYmplY3QgPSBnZXRQcm90b3R5cGUob2JqZWN0KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGB0b1N0cmluZ1RhZ2Agb2YgYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAgICAgKi9cbiAgICB2YXIgZ2V0VGFnID0gYmFzZUdldFRhZztcblxuICAgIC8vIEZhbGxiYWNrIGZvciBkYXRhIHZpZXdzLCBtYXBzLCBzZXRzLCBhbmQgd2VhayBtYXBzIGluIElFIDExIGFuZCBwcm9taXNlcyBpbiBOb2RlLmpzIDwgNi5cbiAgICBpZiAoKERhdGFWaWV3ICYmIGdldFRhZyhuZXcgRGF0YVZpZXcobmV3IEFycmF5QnVmZmVyKDEpKSkgIT0gZGF0YVZpZXdUYWcpIHx8XG4gICAgICAgIChNYXAgJiYgZ2V0VGFnKG5ldyBNYXApICE9IG1hcFRhZykgfHxcbiAgICAgICAgKFByb21pc2UgJiYgZ2V0VGFnKFByb21pc2UucmVzb2x2ZSgpKSAhPSBwcm9taXNlVGFnKSB8fFxuICAgICAgICAoU2V0ICYmIGdldFRhZyhuZXcgU2V0KSAhPSBzZXRUYWcpIHx8XG4gICAgICAgIChXZWFrTWFwICYmIGdldFRhZyhuZXcgV2Vha01hcCkgIT0gd2Vha01hcFRhZykpIHtcbiAgICAgIGdldFRhZyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBiYXNlR2V0VGFnKHZhbHVlKSxcbiAgICAgICAgICAgIEN0b3IgPSByZXN1bHQgPT0gb2JqZWN0VGFnID8gdmFsdWUuY29uc3RydWN0b3IgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBjdG9yU3RyaW5nID0gQ3RvciA/IHRvU291cmNlKEN0b3IpIDogJyc7XG5cbiAgICAgICAgaWYgKGN0b3JTdHJpbmcpIHtcbiAgICAgICAgICBzd2l0Y2ggKGN0b3JTdHJpbmcpIHtcbiAgICAgICAgICAgIGNhc2UgZGF0YVZpZXdDdG9yU3RyaW5nOiByZXR1cm4gZGF0YVZpZXdUYWc7XG4gICAgICAgICAgICBjYXNlIG1hcEN0b3JTdHJpbmc6IHJldHVybiBtYXBUYWc7XG4gICAgICAgICAgICBjYXNlIHByb21pc2VDdG9yU3RyaW5nOiByZXR1cm4gcHJvbWlzZVRhZztcbiAgICAgICAgICAgIGNhc2Ugc2V0Q3RvclN0cmluZzogcmV0dXJuIHNldFRhZztcbiAgICAgICAgICAgIGNhc2Ugd2Vha01hcEN0b3JTdHJpbmc6IHJldHVybiB3ZWFrTWFwVGFnO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSB2aWV3LCBhcHBseWluZyBhbnkgYHRyYW5zZm9ybXNgIHRvIHRoZSBgc3RhcnRgIGFuZCBgZW5kYCBwb3NpdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBUaGUgc3RhcnQgb2YgdGhlIHZpZXcuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSB2aWV3LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHRyYW5zZm9ybXMgVGhlIHRyYW5zZm9ybWF0aW9ucyB0byBhcHBseSB0byB0aGUgdmlldy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGFuIG9iamVjdCBjb250YWluaW5nIHRoZSBgc3RhcnRgIGFuZCBgZW5kYFxuICAgICAqICBwb3NpdGlvbnMgb2YgdGhlIHZpZXcuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0VmlldyhzdGFydCwgZW5kLCB0cmFuc2Zvcm1zKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSB0cmFuc2Zvcm1zLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGRhdGEgPSB0cmFuc2Zvcm1zW2luZGV4XSxcbiAgICAgICAgICAgIHNpemUgPSBkYXRhLnNpemU7XG5cbiAgICAgICAgc3dpdGNoIChkYXRhLnR5cGUpIHtcbiAgICAgICAgICBjYXNlICdkcm9wJzogICAgICBzdGFydCArPSBzaXplOyBicmVhaztcbiAgICAgICAgICBjYXNlICdkcm9wUmlnaHQnOiBlbmQgLT0gc2l6ZTsgYnJlYWs7XG4gICAgICAgICAgY2FzZSAndGFrZSc6ICAgICAgZW5kID0gbmF0aXZlTWluKGVuZCwgc3RhcnQgKyBzaXplKTsgYnJlYWs7XG4gICAgICAgICAgY2FzZSAndGFrZVJpZ2h0Jzogc3RhcnQgPSBuYXRpdmVNYXgoc3RhcnQsIGVuZCAtIHNpemUpOyBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHsgJ3N0YXJ0Jzogc3RhcnQsICdlbmQnOiBlbmQgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFeHRyYWN0cyB3cmFwcGVyIGRldGFpbHMgZnJvbSB0aGUgYHNvdXJjZWAgYm9keSBjb21tZW50LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc291cmNlIFRoZSBzb3VyY2UgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHdyYXBwZXIgZGV0YWlscy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRXcmFwRGV0YWlscyhzb3VyY2UpIHtcbiAgICAgIHZhciBtYXRjaCA9IHNvdXJjZS5tYXRjaChyZVdyYXBEZXRhaWxzKTtcbiAgICAgIHJldHVybiBtYXRjaCA/IG1hdGNoWzFdLnNwbGl0KHJlU3BsaXREZXRhaWxzKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgcGF0aGAgZXhpc3RzIG9uIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaGFzRnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hlY2sgcHJvcGVydGllcy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHBhdGhgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc1BhdGgob2JqZWN0LCBwYXRoLCBoYXNGdW5jKSB7XG4gICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcblxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcGF0aC5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSB0b0tleShwYXRoW2luZGV4XSk7XG4gICAgICAgIGlmICghKHJlc3VsdCA9IG9iamVjdCAhPSBudWxsICYmIGhhc0Z1bmMob2JqZWN0LCBrZXkpKSkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIG9iamVjdCA9IG9iamVjdFtrZXldO1xuICAgICAgfVxuICAgICAgaWYgKHJlc3VsdCB8fCArK2luZGV4ICE9IGxlbmd0aCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgbGVuZ3RoID0gb2JqZWN0ID09IG51bGwgPyAwIDogb2JqZWN0Lmxlbmd0aDtcbiAgICAgIHJldHVybiAhIWxlbmd0aCAmJiBpc0xlbmd0aChsZW5ndGgpICYmIGlzSW5kZXgoa2V5LCBsZW5ndGgpICYmXG4gICAgICAgIChpc0FycmF5KG9iamVjdCkgfHwgaXNBcmd1bWVudHMob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgYW4gYXJyYXkgY2xvbmUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGluaXRpYWxpemVkIGNsb25lLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluaXRDbG9uZUFycmF5KGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IG5ldyBhcnJheS5jb25zdHJ1Y3RvcihsZW5ndGgpO1xuXG4gICAgICAvLyBBZGQgcHJvcGVydGllcyBhc3NpZ25lZCBieSBgUmVnRXhwI2V4ZWNgLlxuICAgICAgaWYgKGxlbmd0aCAmJiB0eXBlb2YgYXJyYXlbMF0gPT0gJ3N0cmluZycgJiYgaGFzT3duUHJvcGVydHkuY2FsbChhcnJheSwgJ2luZGV4JykpIHtcbiAgICAgICAgcmVzdWx0LmluZGV4ID0gYXJyYXkuaW5kZXg7XG4gICAgICAgIHJlc3VsdC5pbnB1dCA9IGFycmF5LmlucHV0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyBhbiBvYmplY3QgY2xvbmUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBpbml0aWFsaXplZCBjbG9uZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbml0Q2xvbmVPYmplY3Qob2JqZWN0KSB7XG4gICAgICByZXR1cm4gKHR5cGVvZiBvYmplY3QuY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNQcm90b3R5cGUob2JqZWN0KSlcbiAgICAgICAgPyBiYXNlQ3JlYXRlKGdldFByb3RvdHlwZShvYmplY3QpKVxuICAgICAgICA6IHt9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIGFuIG9iamVjdCBjbG9uZSBiYXNlZCBvbiBpdHMgYHRvU3RyaW5nVGFnYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIGZ1bmN0aW9uIG9ubHkgc3VwcG9ydHMgY2xvbmluZyB2YWx1ZXMgd2l0aCB0YWdzIG9mXG4gICAgICogYEJvb2xlYW5gLCBgRGF0ZWAsIGBFcnJvcmAsIGBNYXBgLCBgTnVtYmVyYCwgYFJlZ0V4cGAsIGBTZXRgLCBvciBgU3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0YWcgVGhlIGB0b1N0cmluZ1RhZ2Agb2YgdGhlIG9iamVjdCB0byBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGluaXRpYWxpemVkIGNsb25lLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluaXRDbG9uZUJ5VGFnKG9iamVjdCwgdGFnLCBpc0RlZXApIHtcbiAgICAgIHZhciBDdG9yID0gb2JqZWN0LmNvbnN0cnVjdG9yO1xuICAgICAgc3dpdGNoICh0YWcpIHtcbiAgICAgICAgY2FzZSBhcnJheUJ1ZmZlclRhZzpcbiAgICAgICAgICByZXR1cm4gY2xvbmVBcnJheUJ1ZmZlcihvYmplY3QpO1xuXG4gICAgICAgIGNhc2UgYm9vbFRhZzpcbiAgICAgICAgY2FzZSBkYXRlVGFnOlxuICAgICAgICAgIHJldHVybiBuZXcgQ3Rvcigrb2JqZWN0KTtcblxuICAgICAgICBjYXNlIGRhdGFWaWV3VGFnOlxuICAgICAgICAgIHJldHVybiBjbG9uZURhdGFWaWV3KG9iamVjdCwgaXNEZWVwKTtcblxuICAgICAgICBjYXNlIGZsb2F0MzJUYWc6IGNhc2UgZmxvYXQ2NFRhZzpcbiAgICAgICAgY2FzZSBpbnQ4VGFnOiBjYXNlIGludDE2VGFnOiBjYXNlIGludDMyVGFnOlxuICAgICAgICBjYXNlIHVpbnQ4VGFnOiBjYXNlIHVpbnQ4Q2xhbXBlZFRhZzogY2FzZSB1aW50MTZUYWc6IGNhc2UgdWludDMyVGFnOlxuICAgICAgICAgIHJldHVybiBjbG9uZVR5cGVkQXJyYXkob2JqZWN0LCBpc0RlZXApO1xuXG4gICAgICAgIGNhc2UgbWFwVGFnOlxuICAgICAgICAgIHJldHVybiBuZXcgQ3RvcjtcblxuICAgICAgICBjYXNlIG51bWJlclRhZzpcbiAgICAgICAgY2FzZSBzdHJpbmdUYWc6XG4gICAgICAgICAgcmV0dXJuIG5ldyBDdG9yKG9iamVjdCk7XG5cbiAgICAgICAgY2FzZSByZWdleHBUYWc6XG4gICAgICAgICAgcmV0dXJuIGNsb25lUmVnRXhwKG9iamVjdCk7XG5cbiAgICAgICAgY2FzZSBzZXRUYWc6XG4gICAgICAgICAgcmV0dXJuIG5ldyBDdG9yO1xuXG4gICAgICAgIGNhc2Ugc3ltYm9sVGFnOlxuICAgICAgICAgIHJldHVybiBjbG9uZVN5bWJvbChvYmplY3QpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluc2VydHMgd3JhcHBlciBgZGV0YWlsc2AgaW4gYSBjb21tZW50IGF0IHRoZSB0b3Agb2YgdGhlIGBzb3VyY2VgIGJvZHkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzb3VyY2UgVGhlIHNvdXJjZSB0byBtb2RpZnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBkZXRhaWxzIFRoZSBkZXRhaWxzIHRvIGluc2VydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBtb2RpZmllZCBzb3VyY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5zZXJ0V3JhcERldGFpbHMoc291cmNlLCBkZXRhaWxzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gZGV0YWlscy5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gc291cmNlO1xuICAgICAgfVxuICAgICAgdmFyIGxhc3RJbmRleCA9IGxlbmd0aCAtIDE7XG4gICAgICBkZXRhaWxzW2xhc3RJbmRleF0gPSAobGVuZ3RoID4gMSA/ICcmICcgOiAnJykgKyBkZXRhaWxzW2xhc3RJbmRleF07XG4gICAgICBkZXRhaWxzID0gZGV0YWlscy5qb2luKGxlbmd0aCA+IDIgPyAnLCAnIDogJyAnKTtcbiAgICAgIHJldHVybiBzb3VyY2UucmVwbGFjZShyZVdyYXBDb21tZW50LCAne1xcbi8qIFt3cmFwcGVkIHdpdGggJyArIGRldGFpbHMgKyAnXSAqL1xcbicpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgZmxhdHRlbmFibGUgYGFyZ3VtZW50c2Agb2JqZWN0IG9yIGFycmF5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBmbGF0dGVuYWJsZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRmxhdHRlbmFibGUodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc0FycmF5KHZhbHVlKSB8fCBpc0FyZ3VtZW50cyh2YWx1ZSkgfHxcbiAgICAgICAgISEoc3ByZWFkYWJsZVN5bWJvbCAmJiB2YWx1ZSAmJiB2YWx1ZVtzcHJlYWRhYmxlU3ltYm9sXSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGluZGV4LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD1NQVhfU0FGRV9JTlRFR0VSXSBUaGUgdXBwZXIgYm91bmRzIG9mIGEgdmFsaWQgaW5kZXguXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBpbmRleCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzSW5kZXgodmFsdWUsIGxlbmd0aCkge1xuICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gICAgICBsZW5ndGggPSBsZW5ndGggPT0gbnVsbCA/IE1BWF9TQUZFX0lOVEVHRVIgOiBsZW5ndGg7XG5cbiAgICAgIHJldHVybiAhIWxlbmd0aCAmJlxuICAgICAgICAodHlwZSA9PSAnbnVtYmVyJyB8fFxuICAgICAgICAgICh0eXBlICE9ICdzeW1ib2wnICYmIHJlSXNVaW50LnRlc3QodmFsdWUpKSkgJiZcbiAgICAgICAgICAgICh2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDwgbGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgdGhlIGdpdmVuIGFyZ3VtZW50cyBhcmUgZnJvbSBhbiBpdGVyYXRlZSBjYWxsLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSBwb3RlbnRpYWwgaXRlcmF0ZWUgdmFsdWUgYXJndW1lbnQuXG4gICAgICogQHBhcmFtIHsqfSBpbmRleCBUaGUgcG90ZW50aWFsIGl0ZXJhdGVlIGluZGV4IG9yIGtleSBhcmd1bWVudC5cbiAgICAgKiBAcGFyYW0geyp9IG9iamVjdCBUaGUgcG90ZW50aWFsIGl0ZXJhdGVlIG9iamVjdCBhcmd1bWVudC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGFyZ3VtZW50cyBhcmUgZnJvbSBhbiBpdGVyYXRlZSBjYWxsLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNJdGVyYXRlZUNhbGwodmFsdWUsIGluZGV4LCBvYmplY3QpIHtcbiAgICAgIGlmICghaXNPYmplY3Qob2JqZWN0KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgdHlwZSA9IHR5cGVvZiBpbmRleDtcbiAgICAgIGlmICh0eXBlID09ICdudW1iZXInXG4gICAgICAgICAgICA/IChpc0FycmF5TGlrZShvYmplY3QpICYmIGlzSW5kZXgoaW5kZXgsIG9iamVjdC5sZW5ndGgpKVxuICAgICAgICAgICAgOiAodHlwZSA9PSAnc3RyaW5nJyAmJiBpbmRleCBpbiBvYmplY3QpXG4gICAgICAgICAgKSB7XG4gICAgICAgIHJldHVybiBlcShvYmplY3RbaW5kZXhdLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBwcm9wZXJ0eSBuYW1lIGFuZCBub3QgYSBwcm9wZXJ0eSBwYXRoLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeSBrZXlzIG9uLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcHJvcGVydHkgbmFtZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzS2V5KHZhbHVlLCBvYmplY3QpIHtcbiAgICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgICAgIGlmICh0eXBlID09ICdudW1iZXInIHx8IHR5cGUgPT0gJ3N5bWJvbCcgfHwgdHlwZSA9PSAnYm9vbGVhbicgfHxcbiAgICAgICAgICB2YWx1ZSA9PSBudWxsIHx8IGlzU3ltYm9sKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZUlzUGxhaW5Qcm9wLnRlc3QodmFsdWUpIHx8ICFyZUlzRGVlcFByb3AudGVzdCh2YWx1ZSkgfHxcbiAgICAgICAgKG9iamVjdCAhPSBudWxsICYmIHZhbHVlIGluIE9iamVjdChvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSBmb3IgdXNlIGFzIHVuaXF1ZSBvYmplY3Qga2V5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzS2V5YWJsZSh2YWx1ZSkge1xuICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gICAgICByZXR1cm4gKHR5cGUgPT0gJ3N0cmluZycgfHwgdHlwZSA9PSAnbnVtYmVyJyB8fCB0eXBlID09ICdzeW1ib2wnIHx8IHR5cGUgPT0gJ2Jvb2xlYW4nKVxuICAgICAgICA/ICh2YWx1ZSAhPT0gJ19fcHJvdG9fXycpXG4gICAgICAgIDogKHZhbHVlID09PSBudWxsKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYGZ1bmNgIGhhcyBhIGxhenkgY291bnRlcnBhcnQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgZnVuY2AgaGFzIGEgbGF6eSBjb3VudGVycGFydCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTGF6aWFibGUoZnVuYykge1xuICAgICAgdmFyIGZ1bmNOYW1lID0gZ2V0RnVuY05hbWUoZnVuYyksXG4gICAgICAgICAgb3RoZXIgPSBsb2Rhc2hbZnVuY05hbWVdO1xuXG4gICAgICBpZiAodHlwZW9mIG90aGVyICE9ICdmdW5jdGlvbicgfHwgIShmdW5jTmFtZSBpbiBMYXp5V3JhcHBlci5wcm90b3R5cGUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChmdW5jID09PSBvdGhlcikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHZhciBkYXRhID0gZ2V0RGF0YShvdGhlcik7XG4gICAgICByZXR1cm4gISFkYXRhICYmIGZ1bmMgPT09IGRhdGFbMF07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBmdW5jYCBoYXMgaXRzIHNvdXJjZSBtYXNrZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgZnVuY2AgaXMgbWFza2VkLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNNYXNrZWQoZnVuYykge1xuICAgICAgcmV0dXJuICEhbWFza1NyY0tleSAmJiAobWFza1NyY0tleSBpbiBmdW5jKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYGZ1bmNgIGlzIGNhcGFibGUgb2YgYmVpbmcgbWFza2VkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGZ1bmNgIGlzIG1hc2thYmxlLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgdmFyIGlzTWFza2FibGUgPSBjb3JlSnNEYXRhID8gaXNGdW5jdGlvbiA6IHN0dWJGYWxzZTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhIHByb3RvdHlwZSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcHJvdG90eXBlLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNQcm90b3R5cGUodmFsdWUpIHtcbiAgICAgIHZhciBDdG9yID0gdmFsdWUgJiYgdmFsdWUuY29uc3RydWN0b3IsXG4gICAgICAgICAgcHJvdG8gPSAodHlwZW9mIEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBDdG9yLnByb3RvdHlwZSkgfHwgb2JqZWN0UHJvdG87XG5cbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gcHJvdG87XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUgZm9yIHN0cmljdCBlcXVhbGl0eSBjb21wYXJpc29ucywgaS5lLiBgPT09YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaWYgc3VpdGFibGUgZm9yIHN0cmljdFxuICAgICAqICBlcXVhbGl0eSBjb21wYXJpc29ucywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzU3RyaWN0Q29tcGFyYWJsZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZSAmJiAhaXNPYmplY3QodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgbWF0Y2hlc1Byb3BlcnR5YCBmb3Igc291cmNlIHZhbHVlcyBzdWl0YWJsZVxuICAgICAqIGZvciBzdHJpY3QgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGkuZS4gYD09PWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHZhbHVlIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWF0Y2hlc1N0cmljdENvbXBhcmFibGUoa2V5LCBzcmNWYWx1ZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iamVjdFtrZXldID09PSBzcmNWYWx1ZSAmJlxuICAgICAgICAgIChzcmNWYWx1ZSAhPT0gdW5kZWZpbmVkIHx8IChrZXkgaW4gT2JqZWN0KG9iamVjdCkpKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLm1lbW9pemVgIHdoaWNoIGNsZWFycyB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24nc1xuICAgICAqIGNhY2hlIHdoZW4gaXQgZXhjZWVkcyBgTUFYX01FTU9JWkVfU0laRWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGhhdmUgaXRzIG91dHB1dCBtZW1vaXplZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBtZW1vaXplZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtZW1vaXplQ2FwcGVkKGZ1bmMpIHtcbiAgICAgIHZhciByZXN1bHQgPSBtZW1vaXplKGZ1bmMsIGZ1bmN0aW9uKGtleSkge1xuICAgICAgICBpZiAoY2FjaGUuc2l6ZSA9PT0gTUFYX01FTU9JWkVfU0laRSkge1xuICAgICAgICAgIGNhY2hlLmNsZWFyKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGtleTtcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgY2FjaGUgPSByZXN1bHQuY2FjaGU7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1lcmdlcyB0aGUgZnVuY3Rpb24gbWV0YWRhdGEgb2YgYHNvdXJjZWAgaW50byBgZGF0YWAuXG4gICAgICpcbiAgICAgKiBNZXJnaW5nIG1ldGFkYXRhIHJlZHVjZXMgdGhlIG51bWJlciBvZiB3cmFwcGVycyB1c2VkIHRvIGludm9rZSBhIGZ1bmN0aW9uLlxuICAgICAqIFRoaXMgaXMgcG9zc2libGUgYmVjYXVzZSBtZXRob2RzIGxpa2UgYF8uYmluZGAsIGBfLmN1cnJ5YCwgYW5kIGBfLnBhcnRpYWxgXG4gICAgICogbWF5IGJlIGFwcGxpZWQgcmVnYXJkbGVzcyBvZiBleGVjdXRpb24gb3JkZXIuIE1ldGhvZHMgbGlrZSBgXy5hcnlgIGFuZFxuICAgICAqIGBfLnJlYXJnYCBtb2RpZnkgZnVuY3Rpb24gYXJndW1lbnRzLCBtYWtpbmcgdGhlIG9yZGVyIGluIHdoaWNoIHRoZXkgYXJlXG4gICAgICogZXhlY3V0ZWQgaW1wb3J0YW50LCBwcmV2ZW50aW5nIHRoZSBtZXJnaW5nIG9mIG1ldGFkYXRhLiBIb3dldmVyLCB3ZSBtYWtlXG4gICAgICogYW4gZXhjZXB0aW9uIGZvciBhIHNhZmUgY29tYmluZWQgY2FzZSB3aGVyZSBjdXJyaWVkIGZ1bmN0aW9ucyBoYXZlIGBfLmFyeWBcbiAgICAgKiBhbmQgb3IgYF8ucmVhcmdgIGFwcGxpZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGRhdGEgVGhlIGRlc3RpbmF0aW9uIG1ldGFkYXRhLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHNvdXJjZSBUaGUgc291cmNlIG1ldGFkYXRhLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgZGF0YWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWVyZ2VEYXRhKGRhdGEsIHNvdXJjZSkge1xuICAgICAgdmFyIGJpdG1hc2sgPSBkYXRhWzFdLFxuICAgICAgICAgIHNyY0JpdG1hc2sgPSBzb3VyY2VbMV0sXG4gICAgICAgICAgbmV3Qml0bWFzayA9IGJpdG1hc2sgfCBzcmNCaXRtYXNrLFxuICAgICAgICAgIGlzQ29tbW9uID0gbmV3Qml0bWFzayA8IChXUkFQX0JJTkRfRkxBRyB8IFdSQVBfQklORF9LRVlfRkxBRyB8IFdSQVBfQVJZX0ZMQUcpO1xuXG4gICAgICB2YXIgaXNDb21ibyA9XG4gICAgICAgICgoc3JjQml0bWFzayA9PSBXUkFQX0FSWV9GTEFHKSAmJiAoYml0bWFzayA9PSBXUkFQX0NVUlJZX0ZMQUcpKSB8fFxuICAgICAgICAoKHNyY0JpdG1hc2sgPT0gV1JBUF9BUllfRkxBRykgJiYgKGJpdG1hc2sgPT0gV1JBUF9SRUFSR19GTEFHKSAmJiAoZGF0YVs3XS5sZW5ndGggPD0gc291cmNlWzhdKSkgfHxcbiAgICAgICAgKChzcmNCaXRtYXNrID09IChXUkFQX0FSWV9GTEFHIHwgV1JBUF9SRUFSR19GTEFHKSkgJiYgKHNvdXJjZVs3XS5sZW5ndGggPD0gc291cmNlWzhdKSAmJiAoYml0bWFzayA9PSBXUkFQX0NVUlJZX0ZMQUcpKTtcblxuICAgICAgLy8gRXhpdCBlYXJseSBpZiBtZXRhZGF0YSBjYW4ndCBiZSBtZXJnZWQuXG4gICAgICBpZiAoIShpc0NvbW1vbiB8fCBpc0NvbWJvKSkge1xuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgIH1cbiAgICAgIC8vIFVzZSBzb3VyY2UgYHRoaXNBcmdgIGlmIGF2YWlsYWJsZS5cbiAgICAgIGlmIChzcmNCaXRtYXNrICYgV1JBUF9CSU5EX0ZMQUcpIHtcbiAgICAgICAgZGF0YVsyXSA9IHNvdXJjZVsyXTtcbiAgICAgICAgLy8gU2V0IHdoZW4gY3VycnlpbmcgYSBib3VuZCBmdW5jdGlvbi5cbiAgICAgICAgbmV3Qml0bWFzayB8PSBiaXRtYXNrICYgV1JBUF9CSU5EX0ZMQUcgPyAwIDogV1JBUF9DVVJSWV9CT1VORF9GTEFHO1xuICAgICAgfVxuICAgICAgLy8gQ29tcG9zZSBwYXJ0aWFsIGFyZ3VtZW50cy5cbiAgICAgIHZhciB2YWx1ZSA9IHNvdXJjZVszXTtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICB2YXIgcGFydGlhbHMgPSBkYXRhWzNdO1xuICAgICAgICBkYXRhWzNdID0gcGFydGlhbHMgPyBjb21wb3NlQXJncyhwYXJ0aWFscywgdmFsdWUsIHNvdXJjZVs0XSkgOiB2YWx1ZTtcbiAgICAgICAgZGF0YVs0XSA9IHBhcnRpYWxzID8gcmVwbGFjZUhvbGRlcnMoZGF0YVszXSwgUExBQ0VIT0xERVIpIDogc291cmNlWzRdO1xuICAgICAgfVxuICAgICAgLy8gQ29tcG9zZSBwYXJ0aWFsIHJpZ2h0IGFyZ3VtZW50cy5cbiAgICAgIHZhbHVlID0gc291cmNlWzVdO1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIHBhcnRpYWxzID0gZGF0YVs1XTtcbiAgICAgICAgZGF0YVs1XSA9IHBhcnRpYWxzID8gY29tcG9zZUFyZ3NSaWdodChwYXJ0aWFscywgdmFsdWUsIHNvdXJjZVs2XSkgOiB2YWx1ZTtcbiAgICAgICAgZGF0YVs2XSA9IHBhcnRpYWxzID8gcmVwbGFjZUhvbGRlcnMoZGF0YVs1XSwgUExBQ0VIT0xERVIpIDogc291cmNlWzZdO1xuICAgICAgfVxuICAgICAgLy8gVXNlIHNvdXJjZSBgYXJnUG9zYCBpZiBhdmFpbGFibGUuXG4gICAgICB2YWx1ZSA9IHNvdXJjZVs3XTtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICBkYXRhWzddID0gdmFsdWU7XG4gICAgICB9XG4gICAgICAvLyBVc2Ugc291cmNlIGBhcnlgIGlmIGl0J3Mgc21hbGxlci5cbiAgICAgIGlmIChzcmNCaXRtYXNrICYgV1JBUF9BUllfRkxBRykge1xuICAgICAgICBkYXRhWzhdID0gZGF0YVs4XSA9PSBudWxsID8gc291cmNlWzhdIDogbmF0aXZlTWluKGRhdGFbOF0sIHNvdXJjZVs4XSk7XG4gICAgICB9XG4gICAgICAvLyBVc2Ugc291cmNlIGBhcml0eWAgaWYgb25lIGlzIG5vdCBwcm92aWRlZC5cbiAgICAgIGlmIChkYXRhWzldID09IG51bGwpIHtcbiAgICAgICAgZGF0YVs5XSA9IHNvdXJjZVs5XTtcbiAgICAgIH1cbiAgICAgIC8vIFVzZSBzb3VyY2UgYGZ1bmNgIGFuZCBtZXJnZSBiaXRtYXNrcy5cbiAgICAgIGRhdGFbMF0gPSBzb3VyY2VbMF07XG4gICAgICBkYXRhWzFdID0gbmV3Qml0bWFzaztcblxuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlXG4gICAgICogW2BPYmplY3Qua2V5c2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5rZXlzKVxuICAgICAqIGV4Y2VwdCB0aGF0IGl0IGluY2x1ZGVzIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnRpZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG5hdGl2ZUtleXNJbihvYmplY3QpIHtcbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIGlmIChvYmplY3QgIT0gbnVsbCkge1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcgdXNpbmcgYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gICAgICovXG4gICAgZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcodmFsdWUpIHtcbiAgICAgIHJldHVybiBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VSZXN0YCB3aGljaCB0cmFuc2Zvcm1zIHRoZSByZXN0IGFycmF5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9ZnVuYy5sZW5ndGgtMV0gVGhlIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSByZXN0IHBhcmFtZXRlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB0cmFuc2Zvcm0gVGhlIHJlc3QgYXJyYXkgdHJhbnNmb3JtLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG92ZXJSZXN0KGZ1bmMsIHN0YXJ0LCB0cmFuc2Zvcm0pIHtcbiAgICAgIHN0YXJ0ID0gbmF0aXZlTWF4KHN0YXJ0ID09PSB1bmRlZmluZWQgPyAoZnVuYy5sZW5ndGggLSAxKSA6IHN0YXJ0LCAwKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgICAgICBpbmRleCA9IC0xLFxuICAgICAgICAgICAgbGVuZ3RoID0gbmF0aXZlTWF4KGFyZ3MubGVuZ3RoIC0gc3RhcnQsIDApLFxuICAgICAgICAgICAgYXJyYXkgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgYXJyYXlbaW5kZXhdID0gYXJnc1tzdGFydCArIGluZGV4XTtcbiAgICAgICAgfVxuICAgICAgICBpbmRleCA9IC0xO1xuICAgICAgICB2YXIgb3RoZXJBcmdzID0gQXJyYXkoc3RhcnQgKyAxKTtcbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBzdGFydCkge1xuICAgICAgICAgIG90aGVyQXJnc1tpbmRleF0gPSBhcmdzW2luZGV4XTtcbiAgICAgICAgfVxuICAgICAgICBvdGhlckFyZ3Nbc3RhcnRdID0gdHJhbnNmb3JtKGFycmF5KTtcbiAgICAgICAgcmV0dXJuIGFwcGx5KGZ1bmMsIHRoaXMsIG90aGVyQXJncyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHBhcmVudCB2YWx1ZSBhdCBgcGF0aGAgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYXRoIFRoZSBwYXRoIHRvIGdldCB0aGUgcGFyZW50IHZhbHVlIG9mLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwYXJlbnQgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gcGFyZW50KG9iamVjdCwgcGF0aCkge1xuICAgICAgcmV0dXJuIHBhdGgubGVuZ3RoIDwgMiA/IG9iamVjdCA6IGJhc2VHZXQob2JqZWN0LCBiYXNlU2xpY2UocGF0aCwgMCwgLTEpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW9yZGVyIGBhcnJheWAgYWNjb3JkaW5nIHRvIHRoZSBzcGVjaWZpZWQgaW5kZXhlcyB3aGVyZSB0aGUgZWxlbWVudCBhdFxuICAgICAqIHRoZSBmaXJzdCBpbmRleCBpcyBhc3NpZ25lZCBhcyB0aGUgZmlyc3QgZWxlbWVudCwgdGhlIGVsZW1lbnQgYXRcbiAgICAgKiB0aGUgc2Vjb25kIGluZGV4IGlzIGFzc2lnbmVkIGFzIHRoZSBzZWNvbmQgZWxlbWVudCwgYW5kIHNvIG9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcmVvcmRlci5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBpbmRleGVzIFRoZSBhcnJhbmdlZCBhcnJheSBpbmRleGVzLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlb3JkZXIoYXJyYXksIGluZGV4ZXMpIHtcbiAgICAgIHZhciBhcnJMZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgbGVuZ3RoID0gbmF0aXZlTWluKGluZGV4ZXMubGVuZ3RoLCBhcnJMZW5ndGgpLFxuICAgICAgICAgIG9sZEFycmF5ID0gY29weUFycmF5KGFycmF5KTtcblxuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGluZGV4ZXNbbGVuZ3RoXTtcbiAgICAgICAgYXJyYXlbbGVuZ3RoXSA9IGlzSW5kZXgoaW5kZXgsIGFyckxlbmd0aCkgPyBvbGRBcnJheVtpbmRleF0gOiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgdmFsdWUgYXQgYGtleWAsIHVubGVzcyBga2V5YCBpcyBcIl9fcHJvdG9fX1wiIG9yIFwiY29uc3RydWN0b3JcIi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzYWZlR2V0KG9iamVjdCwga2V5KSB7XG4gICAgICBpZiAoa2V5ID09PSAnY29uc3RydWN0b3InICYmIHR5cGVvZiBvYmplY3Rba2V5XSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChrZXkgPT0gJ19fcHJvdG9fXycpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gb2JqZWN0W2tleV07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyBtZXRhZGF0YSBmb3IgYGZ1bmNgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIElmIHRoaXMgZnVuY3Rpb24gYmVjb21lcyBob3QsIGkuZS4gaXMgaW52b2tlZCBhIGxvdCBpbiBhIHNob3J0XG4gICAgICogcGVyaW9kIG9mIHRpbWUsIGl0IHdpbGwgdHJpcCBpdHMgYnJlYWtlciBhbmQgdHJhbnNpdGlvbiB0byBhbiBpZGVudGl0eVxuICAgICAqIGZ1bmN0aW9uIHRvIGF2b2lkIGdhcmJhZ2UgY29sbGVjdGlvbiBwYXVzZXMgaW4gVjguIFNlZVxuICAgICAqIFtWOCBpc3N1ZSAyMDcwXShodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0yMDcwKVxuICAgICAqIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFzc29jaWF0ZSBtZXRhZGF0YSB3aXRoLlxuICAgICAqIEBwYXJhbSB7Kn0gZGF0YSBUaGUgbWV0YWRhdGEuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBmdW5jYC5cbiAgICAgKi9cbiAgICB2YXIgc2V0RGF0YSA9IHNob3J0T3V0KGJhc2VTZXREYXRhKTtcblxuICAgIC8qKlxuICAgICAqIEEgc2ltcGxlIHdyYXBwZXIgYXJvdW5kIHRoZSBnbG9iYWwgW2BzZXRUaW1lb3V0YF0oaHR0cHM6Ly9tZG4uaW8vc2V0VGltZW91dCkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRlbGF5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB3YWl0IFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIGRlbGF5IGludm9jYXRpb24uXG4gICAgICogQHJldHVybnMge251bWJlcnxPYmplY3R9IFJldHVybnMgdGhlIHRpbWVyIGlkIG9yIHRpbWVvdXQgb2JqZWN0LlxuICAgICAqL1xuICAgIHZhciBzZXRUaW1lb3V0ID0gY3R4U2V0VGltZW91dCB8fCBmdW5jdGlvbihmdW5jLCB3YWl0KSB7XG4gICAgICByZXR1cm4gcm9vdC5zZXRUaW1lb3V0KGZ1bmMsIHdhaXQpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBgdG9TdHJpbmdgIG1ldGhvZCBvZiBgZnVuY2AgdG8gcmV0dXJuIGBzdHJpbmdgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc3RyaW5nIFRoZSBgdG9TdHJpbmdgIHJlc3VsdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGZ1bmNgLlxuICAgICAqL1xuICAgIHZhciBzZXRUb1N0cmluZyA9IHNob3J0T3V0KGJhc2VTZXRUb1N0cmluZyk7XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBgdG9TdHJpbmdgIG1ldGhvZCBvZiBgd3JhcHBlcmAgdG8gbWltaWMgdGhlIHNvdXJjZSBvZiBgcmVmZXJlbmNlYFxuICAgICAqIHdpdGggd3JhcHBlciBkZXRhaWxzIGluIGEgY29tbWVudCBhdCB0aGUgdG9wIG9mIHRoZSBzb3VyY2UgYm9keS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gd3JhcHBlciBUaGUgZnVuY3Rpb24gdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHJlZmVyZW5jZSBUaGUgcmVmZXJlbmNlIGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGB3cmFwcGVyYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXRXcmFwVG9TdHJpbmcod3JhcHBlciwgcmVmZXJlbmNlLCBiaXRtYXNrKSB7XG4gICAgICB2YXIgc291cmNlID0gKHJlZmVyZW5jZSArICcnKTtcbiAgICAgIHJldHVybiBzZXRUb1N0cmluZyh3cmFwcGVyLCBpbnNlcnRXcmFwRGV0YWlscyhzb3VyY2UsIHVwZGF0ZVdyYXBEZXRhaWxzKGdldFdyYXBEZXRhaWxzKHNvdXJjZSksIGJpdG1hc2spKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQnbGwgc2hvcnQgb3V0IGFuZCBpbnZva2UgYGlkZW50aXR5YCBpbnN0ZWFkXG4gICAgICogb2YgYGZ1bmNgIHdoZW4gaXQncyBjYWxsZWQgYEhPVF9DT1VOVGAgb3IgbW9yZSB0aW1lcyBpbiBgSE9UX1NQQU5gXG4gICAgICogbWlsbGlzZWNvbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byByZXN0cmljdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzaG9ydGFibGUgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2hvcnRPdXQoZnVuYykge1xuICAgICAgdmFyIGNvdW50ID0gMCxcbiAgICAgICAgICBsYXN0Q2FsbGVkID0gMDtcblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgc3RhbXAgPSBuYXRpdmVOb3coKSxcbiAgICAgICAgICAgIHJlbWFpbmluZyA9IEhPVF9TUEFOIC0gKHN0YW1wIC0gbGFzdENhbGxlZCk7XG5cbiAgICAgICAgbGFzdENhbGxlZCA9IHN0YW1wO1xuICAgICAgICBpZiAocmVtYWluaW5nID4gMCkge1xuICAgICAgICAgIGlmICgrK2NvdW50ID49IEhPVF9DT1VOVCkge1xuICAgICAgICAgICAgcmV0dXJuIGFyZ3VtZW50c1swXTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY291bnQgPSAwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmdW5jLmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnNodWZmbGVgIHdoaWNoIG11dGF0ZXMgYW5kIHNldHMgdGhlIHNpemUgb2YgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNodWZmbGUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzaXplPWFycmF5Lmxlbmd0aF0gVGhlIHNpemUgb2YgYGFycmF5YC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzaHVmZmxlU2VsZihhcnJheSwgc2l6ZSkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIGxhc3RJbmRleCA9IGxlbmd0aCAtIDE7XG5cbiAgICAgIHNpemUgPSBzaXplID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiBzaXplO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBzaXplKSB7XG4gICAgICAgIHZhciByYW5kID0gYmFzZVJhbmRvbShpbmRleCwgbGFzdEluZGV4KSxcbiAgICAgICAgICAgIHZhbHVlID0gYXJyYXlbcmFuZF07XG5cbiAgICAgICAgYXJyYXlbcmFuZF0gPSBhcnJheVtpbmRleF07XG4gICAgICAgIGFycmF5W2luZGV4XSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgYXJyYXkubGVuZ3RoID0gc2l6ZTtcbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0byBhIHByb3BlcnR5IHBhdGggYXJyYXkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAgICAgKi9cbiAgICB2YXIgc3RyaW5nVG9QYXRoID0gbWVtb2l6ZUNhcHBlZChmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIGlmIChzdHJpbmcuY2hhckNvZGVBdCgwKSA9PT0gNDYgLyogLiAqLykge1xuICAgICAgICByZXN1bHQucHVzaCgnJyk7XG4gICAgICB9XG4gICAgICBzdHJpbmcucmVwbGFjZShyZVByb3BOYW1lLCBmdW5jdGlvbihtYXRjaCwgbnVtYmVyLCBxdW90ZSwgc3ViU3RyaW5nKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKHF1b3RlID8gc3ViU3RyaW5nLnJlcGxhY2UocmVFc2NhcGVDaGFyLCAnJDEnKSA6IChudW1iZXIgfHwgbWF0Y2gpKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcga2V5IGlmIGl0J3Mgbm90IGEgc3RyaW5nIG9yIHN5bWJvbC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfHN5bWJvbH0gUmV0dXJucyB0aGUga2V5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvS2V5KHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8IGlzU3ltYm9sKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gKHZhbHVlICsgJycpO1xuICAgICAgcmV0dXJuIChyZXN1bHQgPT0gJzAnICYmICgxIC8gdmFsdWUpID09IC1JTkZJTklUWSkgPyAnLTAnIDogcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBmdW5jYCB0byBpdHMgc291cmNlIGNvZGUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc291cmNlIGNvZGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9Tb3VyY2UoZnVuYykge1xuICAgICAgaWYgKGZ1bmMgIT0gbnVsbCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHJldHVybiBmdW5jVG9TdHJpbmcuY2FsbChmdW5jKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gKGZ1bmMgKyAnJyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICB9XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB3cmFwcGVyIGBkZXRhaWxzYCBiYXNlZCBvbiBgYml0bWFza2AgZmxhZ3MuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gZGV0YWlscyBUaGUgZGV0YWlscyB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGRldGFpbHNgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVwZGF0ZVdyYXBEZXRhaWxzKGRldGFpbHMsIGJpdG1hc2spIHtcbiAgICAgIGFycmF5RWFjaCh3cmFwRmxhZ3MsIGZ1bmN0aW9uKHBhaXIpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gJ18uJyArIHBhaXJbMF07XG4gICAgICAgIGlmICgoYml0bWFzayAmIHBhaXJbMV0pICYmICFhcnJheUluY2x1ZGVzKGRldGFpbHMsIHZhbHVlKSkge1xuICAgICAgICAgIGRldGFpbHMucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGRldGFpbHMuc29ydCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgd3JhcHBlcmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB3cmFwcGVyIFRoZSB3cmFwcGVyIHRvIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCB3cmFwcGVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJDbG9uZSh3cmFwcGVyKSB7XG4gICAgICBpZiAod3JhcHBlciBpbnN0YW5jZW9mIExhenlXcmFwcGVyKSB7XG4gICAgICAgIHJldHVybiB3cmFwcGVyLmNsb25lKCk7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gbmV3IExvZGFzaFdyYXBwZXIod3JhcHBlci5fX3dyYXBwZWRfXywgd3JhcHBlci5fX2NoYWluX18pO1xuICAgICAgcmVzdWx0Ll9fYWN0aW9uc19fID0gY29weUFycmF5KHdyYXBwZXIuX19hY3Rpb25zX18pO1xuICAgICAgcmVzdWx0Ll9faW5kZXhfXyAgPSB3cmFwcGVyLl9faW5kZXhfXztcbiAgICAgIHJlc3VsdC5fX3ZhbHVlc19fID0gd3JhcHBlci5fX3ZhbHVlc19fO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIGVsZW1lbnRzIHNwbGl0IGludG8gZ3JvdXBzIHRoZSBsZW5ndGggb2YgYHNpemVgLlxuICAgICAqIElmIGBhcnJheWAgY2FuJ3QgYmUgc3BsaXQgZXZlbmx5LCB0aGUgZmluYWwgY2h1bmsgd2lsbCBiZSB0aGUgcmVtYWluaW5nXG4gICAgICogZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3NpemU9MV0gVGhlIGxlbmd0aCBvZiBlYWNoIGNodW5rXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjaHVua3MuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY2h1bmsoWydhJywgJ2InLCAnYycsICdkJ10sIDIpO1xuICAgICAqIC8vID0+IFtbJ2EnLCAnYiddLCBbJ2MnLCAnZCddXVxuICAgICAqXG4gICAgICogXy5jaHVuayhbJ2EnLCAnYicsICdjJywgJ2QnXSwgMyk7XG4gICAgICogLy8gPT4gW1snYScsICdiJywgJ2MnXSwgWydkJ11dXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2h1bmsoYXJyYXksIHNpemUsIGd1YXJkKSB7XG4gICAgICBpZiAoKGd1YXJkID8gaXNJdGVyYXRlZUNhbGwoYXJyYXksIHNpemUsIGd1YXJkKSA6IHNpemUgPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgc2l6ZSA9IDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzaXplID0gbmF0aXZlTWF4KHRvSW50ZWdlcihzaXplKSwgMCk7XG4gICAgICB9XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCB8fCBzaXplIDwgMSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSAwLFxuICAgICAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheShuYXRpdmVDZWlsKGxlbmd0aCAvIHNpemUpKTtcblxuICAgICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IGJhc2VTbGljZShhcnJheSwgaW5kZXgsIChpbmRleCArPSBzaXplKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgd2l0aCBhbGwgZmFsc2V5IHZhbHVlcyByZW1vdmVkLiBUaGUgdmFsdWVzIGBmYWxzZWAsIGBudWxsYCxcbiAgICAgKiBgMGAsIGBcIlwiYCwgYHVuZGVmaW5lZGAsIGFuZCBgTmFOYCBhcmUgZmFsc2V5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNvbXBhY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNvbXBhY3QoWzAsIDEsIGZhbHNlLCAyLCAnJywgM10pO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBhY3QoYXJyYXkpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGFycmF5IGNvbmNhdGVuYXRpbmcgYGFycmF5YCB3aXRoIGFueSBhZGRpdGlvbmFsIGFycmF5c1xuICAgICAqIGFuZC9vciB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY29uY2F0ZW5hdGUuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGNvbmNhdGVuYXRlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGNvbmNhdGVuYXRlZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzFdO1xuICAgICAqIHZhciBvdGhlciA9IF8uY29uY2F0KGFycmF5LCAyLCBbM10sIFtbNF1dKTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKG90aGVyKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgMywgWzRdXVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbmNhdCgpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIGFyZ3MgPSBBcnJheShsZW5ndGggLSAxKSxcbiAgICAgICAgICBhcnJheSA9IGFyZ3VtZW50c1swXSxcbiAgICAgICAgICBpbmRleCA9IGxlbmd0aDtcblxuICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgYXJnc1tpbmRleCAtIDFdID0gYXJndW1lbnRzW2luZGV4XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheVB1c2goaXNBcnJheShhcnJheSkgPyBjb3B5QXJyYXkoYXJyYXkpIDogW2FycmF5XSwgYmFzZUZsYXR0ZW4oYXJncywgMSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgYGFycmF5YCB2YWx1ZXMgbm90IGluY2x1ZGVkIGluIHRoZSBvdGhlciBnaXZlbiBhcnJheXNcbiAgICAgKiB1c2luZyBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy4gVGhlIG9yZGVyIGFuZCByZWZlcmVuY2VzIG9mIHJlc3VsdCB2YWx1ZXMgYXJlXG4gICAgICogZGV0ZXJtaW5lZCBieSB0aGUgZmlyc3QgYXJyYXkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLnB1bGxBbGxgLCB0aGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBleGNsdWRlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAc2VlIF8ud2l0aG91dCwgXy54b3JcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kaWZmZXJlbmNlKFsyLCAxXSwgWzIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMV1cbiAgICAgKi9cbiAgICB2YXIgZGlmZmVyZW5jZSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5LCB2YWx1ZXMpIHtcbiAgICAgIHJldHVybiBpc0FycmF5TGlrZU9iamVjdChhcnJheSlcbiAgICAgICAgPyBiYXNlRGlmZmVyZW5jZShhcnJheSwgYmFzZUZsYXR0ZW4odmFsdWVzLCAxLCBpc0FycmF5TGlrZU9iamVjdCwgdHJ1ZSkpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmRpZmZlcmVuY2VgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBvZiBgYXJyYXlgIGFuZCBgdmFsdWVzYCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uXG4gICAgICogYnkgd2hpY2ggdGhleSdyZSBjb21wYXJlZC4gVGhlIG9yZGVyIGFuZCByZWZlcmVuY2VzIG9mIHJlc3VsdCB2YWx1ZXMgYXJlXG4gICAgICogZGV0ZXJtaW5lZCBieSB0aGUgZmlyc3QgYXJyYXkuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OlxuICAgICAqICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLnB1bGxBbGxCeWAsIHRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGV4Y2x1ZGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kaWZmZXJlbmNlQnkoWzIuMSwgMS4yXSwgWzIuMywgMy40XSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4gWzEuMl1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZGlmZmVyZW5jZUJ5KFt7ICd4JzogMiB9LCB7ICd4JzogMSB9XSwgW3sgJ3gnOiAxIH1dLCAneCcpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMiB9XVxuICAgICAqL1xuICAgIHZhciBkaWZmZXJlbmNlQnkgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheSwgdmFsdWVzKSB7XG4gICAgICB2YXIgaXRlcmF0ZWUgPSBsYXN0KHZhbHVlcyk7XG4gICAgICBpZiAoaXNBcnJheUxpa2VPYmplY3QoaXRlcmF0ZWUpKSB7XG4gICAgICAgIGl0ZXJhdGVlID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlT2JqZWN0KGFycmF5KVxuICAgICAgICA/IGJhc2VEaWZmZXJlbmNlKGFycmF5LCBiYXNlRmxhdHRlbih2YWx1ZXMsIDEsIGlzQXJyYXlMaWtlT2JqZWN0LCB0cnVlKSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKVxuICAgICAgICA6IFtdO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5kaWZmZXJlbmNlYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjb21wYXJhdG9yYFxuICAgICAqIHdoaWNoIGlzIGludm9rZWQgdG8gY29tcGFyZSBlbGVtZW50cyBvZiBgYXJyYXlgIHRvIGB2YWx1ZXNgLiBUaGUgb3JkZXIgYW5kXG4gICAgICogcmVmZXJlbmNlcyBvZiByZXN1bHQgdmFsdWVzIGFyZSBkZXRlcm1pbmVkIGJ5IHRoZSBmaXJzdCBhcnJheS4gVGhlIGNvbXBhcmF0b3JcbiAgICAgKiBpcyBpbnZva2VkIHdpdGggdHdvIGFyZ3VtZW50czogKGFyclZhbCwgb3RoVmFsKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8ucHVsbEFsbFdpdGhgLCB0aGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBleGNsdWRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH1dO1xuICAgICAqXG4gICAgICogXy5kaWZmZXJlbmNlV2l0aChvYmplY3RzLCBbeyAneCc6IDEsICd5JzogMiB9XSwgXy5pc0VxdWFsKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDIsICd5JzogMSB9XVxuICAgICAqL1xuICAgIHZhciBkaWZmZXJlbmNlV2l0aCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5LCB2YWx1ZXMpIHtcbiAgICAgIHZhciBjb21wYXJhdG9yID0gbGFzdCh2YWx1ZXMpO1xuICAgICAgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KGNvbXBhcmF0b3IpKSB7XG4gICAgICAgIGNvbXBhcmF0b3IgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNBcnJheUxpa2VPYmplY3QoYXJyYXkpXG4gICAgICAgID8gYmFzZURpZmZlcmVuY2UoYXJyYXksIGJhc2VGbGF0dGVuKHZhbHVlcywgMSwgaXNBcnJheUxpa2VPYmplY3QsIHRydWUpLCB1bmRlZmluZWQsIGNvbXBhcmF0b3IpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCB3aXRoIGBuYCBlbGVtZW50cyBkcm9wcGVkIGZyb20gdGhlIGJlZ2lubmluZy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjUuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MV0gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byBkcm9wLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRyb3AoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMiwgM11cbiAgICAgKlxuICAgICAqIF8uZHJvcChbMSwgMiwgM10sIDIpO1xuICAgICAqIC8vID0+IFszXVxuICAgICAqXG4gICAgICogXy5kcm9wKFsxLCAyLCAzXSwgNSk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKlxuICAgICAqIF8uZHJvcChbMSwgMiwgM10sIDApO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRyb3AoYXJyYXksIG4sIGd1YXJkKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBuID0gKGd1YXJkIHx8IG4gPT09IHVuZGVmaW5lZCkgPyAxIDogdG9JbnRlZ2VyKG4pO1xuICAgICAgcmV0dXJuIGJhc2VTbGljZShhcnJheSwgbiA8IDAgPyAwIDogbiwgbGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCB3aXRoIGBuYCBlbGVtZW50cyBkcm9wcGVkIGZyb20gdGhlIGVuZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MV0gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byBkcm9wLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRyb3BSaWdodChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqXG4gICAgICogXy5kcm9wUmlnaHQoWzEsIDIsIDNdLCAyKTtcbiAgICAgKiAvLyA9PiBbMV1cbiAgICAgKlxuICAgICAqIF8uZHJvcFJpZ2h0KFsxLCAyLCAzXSwgNSk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKlxuICAgICAqIF8uZHJvcFJpZ2h0KFsxLCAyLCAzXSwgMCk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZHJvcFJpZ2h0KGFycmF5LCBuLCBndWFyZCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgbiA9IChndWFyZCB8fCBuID09PSB1bmRlZmluZWQpID8gMSA6IHRvSW50ZWdlcihuKTtcbiAgICAgIG4gPSBsZW5ndGggLSBuO1xuICAgICAgcmV0dXJuIGJhc2VTbGljZShhcnJheSwgMCwgbiA8IDAgPyAwIDogbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgZXhjbHVkaW5nIGVsZW1lbnRzIGRyb3BwZWQgZnJvbSB0aGUgZW5kLlxuICAgICAqIEVsZW1lbnRzIGFyZSBkcm9wcGVkIHVudGlsIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5LiBUaGUgcHJlZGljYXRlIGlzXG4gICAgICogaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleCwgYXJyYXkpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZHJvcFJpZ2h0V2hpbGUodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuICFvLmFjdGl2ZTsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRyb3BSaWdodFdoaWxlKHVzZXJzLCB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknLCAnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5kcm9wUmlnaHRXaGlsZSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZHJvcFJpZ2h0V2hpbGUodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leScsICdmcmVkJywgJ3BlYmJsZXMnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRyb3BSaWdodFdoaWxlKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VXaGlsZShhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgdHJ1ZSwgdHJ1ZSlcbiAgICAgICAgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCBleGNsdWRpbmcgZWxlbWVudHMgZHJvcHBlZCBmcm9tIHRoZSBiZWdpbm5pbmcuXG4gICAgICogRWxlbWVudHMgYXJlIGRyb3BwZWQgdW50aWwgYHByZWRpY2F0ZWAgcmV0dXJucyBmYWxzZXkuIFRoZSBwcmVkaWNhdGUgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4LCBhcnJheSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5kcm9wV2hpbGUodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuICFvLmFjdGl2ZTsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5kcm9wV2hpbGUodXNlcnMsIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCcsICdwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRyb3BXaGlsZSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsncGViYmxlcyddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRyb3BXaGlsZSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5JywgJ2ZyZWQnLCAncGViYmxlcyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gZHJvcFdoaWxlKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VXaGlsZShhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgdHJ1ZSlcbiAgICAgICAgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGaWxscyBlbGVtZW50cyBvZiBgYXJyYXlgIHdpdGggYHZhbHVlYCBmcm9tIGBzdGFydGAgdXAgdG8sIGJ1dCBub3RcbiAgICAgKiBpbmNsdWRpbmcsIGBlbmRgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjIuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmaWxsLlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGZpbGwgYGFycmF5YCB3aXRoLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IHBvc2l0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZW5kPWFycmF5Lmxlbmd0aF0gVGhlIGVuZCBwb3NpdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIDIsIDNdO1xuICAgICAqXG4gICAgICogXy5maWxsKGFycmF5LCAnYScpO1xuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYScsICdhJ11cbiAgICAgKlxuICAgICAqIF8uZmlsbChBcnJheSgzKSwgMik7XG4gICAgICogLy8gPT4gWzIsIDIsIDJdXG4gICAgICpcbiAgICAgKiBfLmZpbGwoWzQsIDYsIDgsIDEwXSwgJyonLCAxLCAzKTtcbiAgICAgKiAvLyA9PiBbNCwgJyonLCAnKicsIDEwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbGwoYXJyYXksIHZhbHVlLCBzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBpZiAoc3RhcnQgJiYgdHlwZW9mIHN0YXJ0ICE9ICdudW1iZXInICYmIGlzSXRlcmF0ZWVDYWxsKGFycmF5LCB2YWx1ZSwgc3RhcnQpKSB7XG4gICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgICAgZW5kID0gbGVuZ3RoO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VGaWxsKGFycmF5LCB2YWx1ZSwgc3RhcnQsIGVuZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5maW5kYCBleGNlcHQgdGhhdCBpdCByZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgZmlyc3RcbiAgICAgKiBlbGVtZW50IGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvciBpbnN0ZWFkIG9mIHRoZSBlbGVtZW50IGl0c2VsZi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD0wXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGZvdW5kIGVsZW1lbnQsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maW5kSW5kZXgodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8udXNlciA9PSAnYmFybmV5JzsgfSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRJbmRleCh1c2VycywgeyAndXNlcic6ICdmcmVkJywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IDFcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRJbmRleCh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZEluZGV4KHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gMlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbmRJbmRleChhcnJheSwgcHJlZGljYXRlLCBmcm9tSW5kZXgpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IGZyb21JbmRleCA9PSBudWxsID8gMCA6IHRvSW50ZWdlcihmcm9tSW5kZXgpO1xuICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICBpbmRleCA9IG5hdGl2ZU1heChsZW5ndGggKyBpbmRleCwgMCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUZpbmRJbmRleChhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgaW5kZXgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmluZEluZGV4YCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzXG4gICAgICogb2YgYGNvbGxlY3Rpb25gIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD1hcnJheS5sZW5ndGgtMV0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBmb3VuZCBlbGVtZW50LCBlbHNlIGAtMWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZmluZExhc3RJbmRleCh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby51c2VyID09ICdwZWJibGVzJzsgfSk7XG4gICAgICogLy8gPT4gMlxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRMYXN0SW5kZXgodXNlcnMsIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IHRydWUgfSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZExhc3RJbmRleCh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IDJcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZExhc3RJbmRleCh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IDBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaW5kTGFzdEluZGV4KGFycmF5LCBwcmVkaWNhdGUsIGZyb21JbmRleCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gbGVuZ3RoIC0gMTtcbiAgICAgIGlmIChmcm9tSW5kZXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpbmRleCA9IHRvSW50ZWdlcihmcm9tSW5kZXgpO1xuICAgICAgICBpbmRleCA9IGZyb21JbmRleCA8IDBcbiAgICAgICAgICA/IG5hdGl2ZU1heChsZW5ndGggKyBpbmRleCwgMClcbiAgICAgICAgICA6IG5hdGl2ZU1pbihpbmRleCwgbGVuZ3RoIC0gMSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUZpbmRJbmRleChhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgaW5kZXgsIHRydWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZsYXR0ZW5zIGBhcnJheWAgYSBzaW5nbGUgbGV2ZWwgZGVlcC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmbGF0dGVuLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mbGF0dGVuKFsxLCBbMiwgWzMsIFs0XV0sIDVdXSk7XG4gICAgICogLy8gPT4gWzEsIDIsIFszLCBbNF1dLCA1XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXR0ZW4oYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIHJldHVybiBsZW5ndGggPyBiYXNlRmxhdHRlbihhcnJheSwgMSkgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZWN1cnNpdmVseSBmbGF0dGVucyBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZsYXR0ZW4uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmZsYXR0ZW5EZWVwKFsxLCBbMiwgWzMsIFs0XV0sIDVdXSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDMsIDQsIDVdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdHRlbkRlZXAoYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIHJldHVybiBsZW5ndGggPyBiYXNlRmxhdHRlbihhcnJheSwgSU5GSU5JVFkpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVjdXJzaXZlbHkgZmxhdHRlbiBgYXJyYXlgIHVwIHRvIGBkZXB0aGAgdGltZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC40LjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmxhdHRlbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2RlcHRoPTFdIFRoZSBtYXhpbXVtIHJlY3Vyc2lvbiBkZXB0aC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmbGF0dGVuZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCBbMiwgWzMsIFs0XV0sIDVdXTtcbiAgICAgKlxuICAgICAqIF8uZmxhdHRlbkRlcHRoKGFycmF5LCAxKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgWzMsIFs0XV0sIDVdXG4gICAgICpcbiAgICAgKiBfLmZsYXR0ZW5EZXB0aChhcnJheSwgMik7XG4gICAgICogLy8gPT4gWzEsIDIsIDMsIFs0XSwgNV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0dGVuRGVwdGgoYXJyYXksIGRlcHRoKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBkZXB0aCA9IGRlcHRoID09PSB1bmRlZmluZWQgPyAxIDogdG9JbnRlZ2VyKGRlcHRoKTtcbiAgICAgIHJldHVybiBiYXNlRmxhdHRlbihhcnJheSwgZGVwdGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBpbnZlcnNlIG9mIGBfLnRvUGFpcnNgOyB0aGlzIG1ldGhvZCByZXR1cm5zIGFuIG9iamVjdCBjb21wb3NlZFxuICAgICAqIGZyb20ga2V5LXZhbHVlIGBwYWlyc2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYWlycyBUaGUga2V5LXZhbHVlIHBhaXJzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZnJvbVBhaXJzKFtbJ2EnLCAxXSwgWydiJywgMl1dKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmcm9tUGFpcnMocGFpcnMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHBhaXJzID09IG51bGwgPyAwIDogcGFpcnMubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IHt9O1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgcGFpciA9IHBhaXJzW2luZGV4XTtcbiAgICAgICAgcmVzdWx0W3BhaXJbMF1dID0gcGFpclsxXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgZmlyc3QgZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGFsaWFzIGZpcnN0XG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBmaXJzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaGVhZChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IDFcbiAgICAgKlxuICAgICAqIF8uaGVhZChbXSk7XG4gICAgICogLy8gPT4gdW5kZWZpbmVkXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGVhZChhcnJheSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpID8gYXJyYXlbMF0gOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgaW5kZXggYXQgd2hpY2ggdGhlIGZpcnN0IG9jY3VycmVuY2Ugb2YgYHZhbHVlYCBpcyBmb3VuZCBpbiBgYXJyYXlgXG4gICAgICogdXNpbmcgW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuIElmIGBmcm9tSW5kZXhgIGlzIG5lZ2F0aXZlLCBpdCdzIHVzZWQgYXMgdGhlXG4gICAgICogb2Zmc2V0IGZyb20gdGhlIGVuZCBvZiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD0wXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pbmRleE9mKFsxLCAyLCAxLCAyXSwgMik7XG4gICAgICogLy8gPT4gMVxuICAgICAqXG4gICAgICogLy8gU2VhcmNoIGZyb20gdGhlIGBmcm9tSW5kZXhgLlxuICAgICAqIF8uaW5kZXhPZihbMSwgMiwgMSwgMl0sIDIsIDIpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSBmcm9tSW5kZXggPT0gbnVsbCA/IDAgOiB0b0ludGVnZXIoZnJvbUluZGV4KTtcbiAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgaW5kZXggPSBuYXRpdmVNYXgobGVuZ3RoICsgaW5kZXgsIDApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VJbmRleE9mKGFycmF5LCB2YWx1ZSwgaW5kZXgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgYWxsIGJ1dCB0aGUgbGFzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmluaXRpYWwoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbml0aWFsKGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICByZXR1cm4gbGVuZ3RoID8gYmFzZVNsaWNlKGFycmF5LCAwLCAtMSkgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHVuaXF1ZSB2YWx1ZXMgdGhhdCBhcmUgaW5jbHVkZWQgaW4gYWxsIGdpdmVuIGFycmF5c1xuICAgICAqIHVzaW5nIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLiBUaGUgb3JkZXIgYW5kIHJlZmVyZW5jZXMgb2YgcmVzdWx0IHZhbHVlcyBhcmVcbiAgICAgKiBkZXRlcm1pbmVkIGJ5IHRoZSBmaXJzdCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBpbnRlcnNlY3RpbmcgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmludGVyc2VjdGlvbihbMiwgMV0sIFsyLCAzXSk7XG4gICAgICogLy8gPT4gWzJdXG4gICAgICovXG4gICAgdmFyIGludGVyc2VjdGlvbiA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIG1hcHBlZCA9IGFycmF5TWFwKGFycmF5cywgY2FzdEFycmF5TGlrZU9iamVjdCk7XG4gICAgICByZXR1cm4gKG1hcHBlZC5sZW5ndGggJiYgbWFwcGVkWzBdID09PSBhcnJheXNbMF0pXG4gICAgICAgID8gYmFzZUludGVyc2VjdGlvbihtYXBwZWQpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmludGVyc2VjdGlvbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgXG4gICAgICogd2hpY2ggaXMgaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IG9mIGVhY2ggYGFycmF5c2AgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvblxuICAgICAqIGJ5IHdoaWNoIHRoZXkncmUgY29tcGFyZWQuIFRoZSBvcmRlciBhbmQgcmVmZXJlbmNlcyBvZiByZXN1bHQgdmFsdWVzIGFyZVxuICAgICAqIGRldGVybWluZWQgYnkgdGhlIGZpcnN0IGFycmF5LiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDpcbiAgICAgKiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBpbnRlcnNlY3RpbmcgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmludGVyc2VjdGlvbkJ5KFsyLjEsIDEuMl0sIFsyLjMsIDMuNF0sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IFsyLjFdXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmludGVyc2VjdGlvbkJ5KFt7ICd4JzogMSB9XSwgW3sgJ3gnOiAyIH0sIHsgJ3gnOiAxIH1dLCAneCcpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSB9XVxuICAgICAqL1xuICAgIHZhciBpbnRlcnNlY3Rpb25CeSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGl0ZXJhdGVlID0gbGFzdChhcnJheXMpLFxuICAgICAgICAgIG1hcHBlZCA9IGFycmF5TWFwKGFycmF5cywgY2FzdEFycmF5TGlrZU9iamVjdCk7XG5cbiAgICAgIGlmIChpdGVyYXRlZSA9PT0gbGFzdChtYXBwZWQpKSB7XG4gICAgICAgIGl0ZXJhdGVlID0gdW5kZWZpbmVkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbWFwcGVkLnBvcCgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIChtYXBwZWQubGVuZ3RoICYmIG1hcHBlZFswXSA9PT0gYXJyYXlzWzBdKVxuICAgICAgICA/IGJhc2VJbnRlcnNlY3Rpb24obWFwcGVkLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmludGVyc2VjdGlvbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY29tcGFyYXRvcmBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIHRvIGNvbXBhcmUgZWxlbWVudHMgb2YgYGFycmF5c2AuIFRoZSBvcmRlciBhbmQgcmVmZXJlbmNlc1xuICAgICAqIG9mIHJlc3VsdCB2YWx1ZXMgYXJlIGRldGVybWluZWQgYnkgdGhlIGZpcnN0IGFycmF5LiBUaGUgY29tcGFyYXRvciBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0d28gYXJndW1lbnRzOiAoYXJyVmFsLCBvdGhWYWwpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGludGVyc2VjdGluZyB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9XTtcbiAgICAgKiB2YXIgb3RoZXJzID0gW3sgJ3gnOiAxLCAneSc6IDEgfSwgeyAneCc6IDEsICd5JzogMiB9XTtcbiAgICAgKlxuICAgICAqIF8uaW50ZXJzZWN0aW9uV2l0aChvYmplY3RzLCBvdGhlcnMsIF8uaXNFcXVhbCk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxLCAneSc6IDIgfV1cbiAgICAgKi9cbiAgICB2YXIgaW50ZXJzZWN0aW9uV2l0aCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGNvbXBhcmF0b3IgPSBsYXN0KGFycmF5cyksXG4gICAgICAgICAgbWFwcGVkID0gYXJyYXlNYXAoYXJyYXlzLCBjYXN0QXJyYXlMaWtlT2JqZWN0KTtcblxuICAgICAgY29tcGFyYXRvciA9IHR5cGVvZiBjb21wYXJhdG9yID09ICdmdW5jdGlvbicgPyBjb21wYXJhdG9yIDogdW5kZWZpbmVkO1xuICAgICAgaWYgKGNvbXBhcmF0b3IpIHtcbiAgICAgICAgbWFwcGVkLnBvcCgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIChtYXBwZWQubGVuZ3RoICYmIG1hcHBlZFswXSA9PT0gYXJyYXlzWzBdKVxuICAgICAgICA/IGJhc2VJbnRlcnNlY3Rpb24obWFwcGVkLCB1bmRlZmluZWQsIGNvbXBhcmF0b3IpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBhbGwgZWxlbWVudHMgaW4gYGFycmF5YCBpbnRvIGEgc3RyaW5nIHNlcGFyYXRlZCBieSBgc2VwYXJhdG9yYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjb252ZXJ0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc2VwYXJhdG9yPScsJ10gVGhlIGVsZW1lbnQgc2VwYXJhdG9yLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGpvaW5lZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uam9pbihbJ2EnLCAnYicsICdjJ10sICd+Jyk7XG4gICAgICogLy8gPT4gJ2F+Yn5jJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGpvaW4oYXJyYXksIHNlcGFyYXRvcikge1xuICAgICAgcmV0dXJuIGFycmF5ID09IG51bGwgPyAnJyA6IG5hdGl2ZUpvaW4uY2FsbChhcnJheSwgc2VwYXJhdG9yKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBsYXN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbGFzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubGFzdChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsYXN0KGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICByZXR1cm4gbGVuZ3RoID8gYXJyYXlbbGVuZ3RoIC0gMV0gOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pbmRleE9mYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mXG4gICAgICogYGFycmF5YCBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZnJvbUluZGV4PWFycmF5Lmxlbmd0aC0xXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5sYXN0SW5kZXhPZihbMSwgMiwgMSwgMl0sIDIpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIC8vIFNlYXJjaCBmcm9tIHRoZSBgZnJvbUluZGV4YC5cbiAgICAgKiBfLmxhc3RJbmRleE9mKFsxLCAyLCAxLCAyXSwgMiwgMik7XG4gICAgICogLy8gPT4gMVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxhc3RJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSBsZW5ndGg7XG4gICAgICBpZiAoZnJvbUluZGV4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaW5kZXggPSB0b0ludGVnZXIoZnJvbUluZGV4KTtcbiAgICAgICAgaW5kZXggPSBpbmRleCA8IDAgPyBuYXRpdmVNYXgobGVuZ3RoICsgaW5kZXgsIDApIDogbmF0aXZlTWluKGluZGV4LCBsZW5ndGggLSAxKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gdmFsdWVcbiAgICAgICAgPyBzdHJpY3RMYXN0SW5kZXhPZihhcnJheSwgdmFsdWUsIGluZGV4KVxuICAgICAgICA6IGJhc2VGaW5kSW5kZXgoYXJyYXksIGJhc2VJc05hTiwgaW5kZXgsIHRydWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGVsZW1lbnQgYXQgaW5kZXggYG5gIG9mIGBhcnJheWAuIElmIGBuYCBpcyBuZWdhdGl2ZSwgdGhlIG50aFxuICAgICAqIGVsZW1lbnQgZnJvbSB0aGUgZW5kIGlzIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MF0gVGhlIGluZGV4IG9mIHRoZSBlbGVtZW50IHRvIHJldHVybi5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbnRoIGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWydhJywgJ2InLCAnYycsICdkJ107XG4gICAgICpcbiAgICAgKiBfLm50aChhcnJheSwgMSk7XG4gICAgICogLy8gPT4gJ2InXG4gICAgICpcbiAgICAgKiBfLm50aChhcnJheSwgLTIpO1xuICAgICAqIC8vID0+ICdjJztcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBudGgoYXJyYXksIG4pIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSA/IGJhc2VOdGgoYXJyYXksIHRvSW50ZWdlcihuKSkgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbGwgZ2l2ZW4gdmFsdWVzIGZyb20gYGFycmF5YCB1c2luZ1xuICAgICAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy53aXRob3V0YCwgdGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLiBVc2UgYF8ucmVtb3ZlYFxuICAgICAqIHRvIHJlbW92ZSBlbGVtZW50cyBmcm9tIGFuIGFycmF5IGJ5IHByZWRpY2F0ZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWydhJywgJ2InLCAnYycsICdhJywgJ2InLCAnYyddO1xuICAgICAqXG4gICAgICogXy5wdWxsKGFycmF5LCAnYScsICdjJyk7XG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsnYicsICdiJ11cbiAgICAgKi9cbiAgICB2YXIgcHVsbCA9IGJhc2VSZXN0KHB1bGxBbGwpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5wdWxsYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGFuIGFycmF5IG9mIHZhbHVlcyB0byByZW1vdmUuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLmRpZmZlcmVuY2VgLCB0aGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWydhJywgJ2InLCAnYycsICdhJywgJ2InLCAnYyddO1xuICAgICAqXG4gICAgICogXy5wdWxsQWxsKGFycmF5LCBbJ2EnLCAnYyddKTtcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWydiJywgJ2InXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHB1bGxBbGwoYXJyYXksIHZhbHVlcykge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGggJiYgdmFsdWVzICYmIHZhbHVlcy5sZW5ndGgpXG4gICAgICAgID8gYmFzZVB1bGxBbGwoYXJyYXksIHZhbHVlcylcbiAgICAgICAgOiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnB1bGxBbGxgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBvZiBgYXJyYXlgIGFuZCBgdmFsdWVzYCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uXG4gICAgICogYnkgd2hpY2ggdGhleSdyZSBjb21wYXJlZC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLmRpZmZlcmVuY2VCeWAsIHRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gcmVtb3ZlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gW3sgJ3gnOiAxIH0sIHsgJ3gnOiAyIH0sIHsgJ3gnOiAzIH0sIHsgJ3gnOiAxIH1dO1xuICAgICAqXG4gICAgICogXy5wdWxsQWxsQnkoYXJyYXksIFt7ICd4JzogMSB9LCB7ICd4JzogMyB9XSwgJ3gnKTtcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAyIH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gcHVsbEFsbEJ5KGFycmF5LCB2YWx1ZXMsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCAmJiB2YWx1ZXMgJiYgdmFsdWVzLmxlbmd0aClcbiAgICAgICAgPyBiYXNlUHVsbEFsbChhcnJheSwgdmFsdWVzLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpXG4gICAgICAgIDogYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5wdWxsQWxsYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjb21wYXJhdG9yYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgdG8gY29tcGFyZSBlbGVtZW50cyBvZiBgYXJyYXlgIHRvIGB2YWx1ZXNgLiBUaGUgY29tcGFyYXRvciBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0d28gYXJndW1lbnRzOiAoYXJyVmFsLCBvdGhWYWwpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5kaWZmZXJlbmNlV2l0aGAsIHRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjYuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gcmVtb3ZlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMywgJ3knOiA0IH0sIHsgJ3gnOiA1LCAneSc6IDYgfV07XG4gICAgICpcbiAgICAgKiBfLnB1bGxBbGxXaXRoKGFycmF5LCBbeyAneCc6IDMsICd5JzogNCB9XSwgXy5pc0VxdWFsKTtcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDUsICd5JzogNiB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHB1bGxBbGxXaXRoKGFycmF5LCB2YWx1ZXMsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoICYmIHZhbHVlcyAmJiB2YWx1ZXMubGVuZ3RoKVxuICAgICAgICA/IGJhc2VQdWxsQWxsKGFycmF5LCB2YWx1ZXMsIHVuZGVmaW5lZCwgY29tcGFyYXRvcilcbiAgICAgICAgOiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGVsZW1lbnRzIGZyb20gYGFycmF5YCBjb3JyZXNwb25kaW5nIHRvIGBpbmRleGVzYCBhbmQgcmV0dXJucyBhblxuICAgICAqIGFycmF5IG9mIHJlbW92ZWQgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLmF0YCwgdGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0gey4uLihudW1iZXJ8bnVtYmVyW10pfSBbaW5kZXhlc10gVGhlIGluZGV4ZXMgb2YgZWxlbWVudHMgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHJlbW92ZWQgZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsnYScsICdiJywgJ2MnLCAnZCddO1xuICAgICAqIHZhciBwdWxsZWQgPSBfLnB1bGxBdChhcnJheSwgWzEsIDNdKTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYyddXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhwdWxsZWQpO1xuICAgICAqIC8vID0+IFsnYicsICdkJ11cbiAgICAgKi9cbiAgICB2YXIgcHVsbEF0ID0gZmxhdFJlc3QoZnVuY3Rpb24oYXJyYXksIGluZGV4ZXMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSBiYXNlQXQoYXJyYXksIGluZGV4ZXMpO1xuXG4gICAgICBiYXNlUHVsbEF0KGFycmF5LCBhcnJheU1hcChpbmRleGVzLCBmdW5jdGlvbihpbmRleCkge1xuICAgICAgICByZXR1cm4gaXNJbmRleChpbmRleCwgbGVuZ3RoKSA/ICtpbmRleCA6IGluZGV4O1xuICAgICAgfSkuc29ydChjb21wYXJlQXNjZW5kaW5nKSk7XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBlbGVtZW50cyBmcm9tIGBhcnJheWAgdGhhdCBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3JcbiAgICAgKiBhbmQgcmV0dXJucyBhbiBhcnJheSBvZiB0aGUgcmVtb3ZlZCBlbGVtZW50cy4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXgsIGFycmF5KS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8uZmlsdGVyYCwgdGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLiBVc2UgYF8ucHVsbGBcbiAgICAgKiB0byBwdWxsIGVsZW1lbnRzIGZyb20gYW4gYXJyYXkgYnkgdmFsdWUuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiByZW1vdmVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgMiwgMywgNF07XG4gICAgICogdmFyIGV2ZW5zID0gXy5yZW1vdmUoYXJyYXksIGZ1bmN0aW9uKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICUgMiA9PSAwO1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsxLCAzXVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2coZXZlbnMpO1xuICAgICAqIC8vID0+IFsyLCA0XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlbW92ZShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICBpZiAoIShhcnJheSAmJiBhcnJheS5sZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBpbmRleGVzID0gW10sXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgICBwcmVkaWNhdGUgPSBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICAgIGluZGV4ZXMucHVzaChpbmRleCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJhc2VQdWxsQXQoYXJyYXksIGluZGV4ZXMpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXZlcnNlcyBgYXJyYXlgIHNvIHRoYXQgdGhlIGZpcnN0IGVsZW1lbnQgYmVjb21lcyB0aGUgbGFzdCwgdGhlIHNlY29uZFxuICAgICAqIGVsZW1lbnQgYmVjb21lcyB0aGUgc2Vjb25kIHRvIGxhc3QsIGFuZCBzbyBvbi5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAgYW5kIGlzIGJhc2VkIG9uXG4gICAgICogW2BBcnJheSNyZXZlcnNlYF0oaHR0cHM6Ly9tZG4uaW8vQXJyYXkvcmV2ZXJzZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgMiwgM107XG4gICAgICpcbiAgICAgKiBfLnJldmVyc2UoYXJyYXkpO1xuICAgICAqIC8vID0+IFszLCAyLCAxXVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFszLCAyLCAxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJldmVyc2UoYXJyYXkpIHtcbiAgICAgIHJldHVybiBhcnJheSA9PSBudWxsID8gYXJyYXkgOiBuYXRpdmVSZXZlcnNlLmNhbGwoYXJyYXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIGZyb20gYHN0YXJ0YCB1cCB0bywgYnV0IG5vdCBpbmNsdWRpbmcsIGBlbmRgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIHVzZWQgaW5zdGVhZCBvZlxuICAgICAqIFtgQXJyYXkjc2xpY2VgXShodHRwczovL21kbi5pby9BcnJheS9zbGljZSkgdG8gZW5zdXJlIGRlbnNlIGFycmF5cyBhcmVcbiAgICAgKiByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzbGljZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBwb3NpdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2VuZD1hcnJheS5sZW5ndGhdIFRoZSBlbmQgcG9zaXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNsaWNlKGFycmF5LCBzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBpZiAoZW5kICYmIHR5cGVvZiBlbmQgIT0gJ251bWJlcicgJiYgaXNJdGVyYXRlZUNhbGwoYXJyYXksIHN0YXJ0LCBlbmQpKSB7XG4gICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgICAgZW5kID0gbGVuZ3RoO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHN0YXJ0ID0gc3RhcnQgPT0gbnVsbCA/IDAgOiB0b0ludGVnZXIoc3RhcnQpO1xuICAgICAgICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IHRvSW50ZWdlcihlbmQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VTbGljZShhcnJheSwgc3RhcnQsIGVuZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXNlcyBhIGJpbmFyeSBzZWFyY2ggdG8gZGV0ZXJtaW5lIHRoZSBsb3dlc3QgaW5kZXggYXQgd2hpY2ggYHZhbHVlYFxuICAgICAqIHNob3VsZCBiZSBpbnNlcnRlZCBpbnRvIGBhcnJheWAgaW4gb3JkZXIgdG8gbWFpbnRhaW4gaXRzIHNvcnQgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgc29ydGVkIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZXZhbHVhdGUuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAgICAgKiAgaW50byBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvcnRlZEluZGV4KFszMCwgNTBdLCA0MCk7XG4gICAgICogLy8gPT4gMVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIGJhc2VTb3J0ZWRJbmRleChhcnJheSwgdmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc29ydGVkSW5kZXhgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYFxuICAgICAqIHdoaWNoIGlzIGludm9rZWQgZm9yIGB2YWx1ZWAgYW5kIGVhY2ggZWxlbWVudCBvZiBgYXJyYXlgIHRvIGNvbXB1dGUgdGhlaXJcbiAgICAgKiBzb3J0IHJhbmtpbmcuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvcnRlZCBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGV2YWx1YXRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZFxuICAgICAqICBpbnRvIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiA0IH0sIHsgJ3gnOiA1IH1dO1xuICAgICAqXG4gICAgICogXy5zb3J0ZWRJbmRleEJ5KG9iamVjdHMsIHsgJ3gnOiA0IH0sIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8ueDsgfSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zb3J0ZWRJbmRleEJ5KG9iamVjdHMsIHsgJ3gnOiA0IH0sICd4Jyk7XG4gICAgICogLy8gPT4gMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZEluZGV4QnkoYXJyYXksIHZhbHVlLCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIGJhc2VTb3J0ZWRJbmRleEJ5KGFycmF5LCB2YWx1ZSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmluZGV4T2ZgIGV4Y2VwdCB0aGF0IGl0IHBlcmZvcm1zIGEgYmluYXJ5XG4gICAgICogc2VhcmNoIG9uIGEgc29ydGVkIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29ydGVkSW5kZXhPZihbNCwgNSwgNSwgNSwgNl0sIDUpO1xuICAgICAqIC8vID0+IDFcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRJbmRleE9mKGFycmF5LCB2YWx1ZSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKGxlbmd0aCkge1xuICAgICAgICB2YXIgaW5kZXggPSBiYXNlU29ydGVkSW5kZXgoYXJyYXksIHZhbHVlKTtcbiAgICAgICAgaWYgKGluZGV4IDwgbGVuZ3RoICYmIGVxKGFycmF5W2luZGV4XSwgdmFsdWUpKSB7XG4gICAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5zb3J0ZWRJbmRleGAgZXhjZXB0IHRoYXQgaXQgcmV0dXJucyB0aGUgaGlnaGVzdFxuICAgICAqIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkIGludG8gYGFycmF5YCBpbiBvcmRlciB0b1xuICAgICAqIG1haW50YWluIGl0cyBzb3J0IG9yZGVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvcnRlZCBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGV2YWx1YXRlLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gICAgICogIGludG8gYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb3J0ZWRMYXN0SW5kZXgoWzQsIDUsIDUsIDUsIDZdLCA1KTtcbiAgICAgKiAvLyA9PiA0XG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkTGFzdEluZGV4KGFycmF5LCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIGJhc2VTb3J0ZWRJbmRleChhcnJheSwgdmFsdWUsIHRydWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc29ydGVkTGFzdEluZGV4YCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIGZvciBgdmFsdWVgIGFuZCBlYWNoIGVsZW1lbnQgb2YgYGFycmF5YCB0byBjb21wdXRlIHRoZWlyXG4gICAgICogc29ydCByYW5raW5nLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBzb3J0ZWQgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBldmFsdWF0ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAgICAgKiAgaW50byBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogNCB9LCB7ICd4JzogNSB9XTtcbiAgICAgKlxuICAgICAqIF8uc29ydGVkTGFzdEluZGV4Qnkob2JqZWN0cywgeyAneCc6IDQgfSwgZnVuY3Rpb24obykgeyByZXR1cm4gby54OyB9KTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnNvcnRlZExhc3RJbmRleEJ5KG9iamVjdHMsIHsgJ3gnOiA0IH0sICd4Jyk7XG4gICAgICogLy8gPT4gMVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZExhc3RJbmRleEJ5KGFycmF5LCB2YWx1ZSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBiYXNlU29ydGVkSW5kZXhCeShhcnJheSwgdmFsdWUsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5sYXN0SW5kZXhPZmAgZXhjZXB0IHRoYXQgaXQgcGVyZm9ybXMgYSBiaW5hcnlcbiAgICAgKiBzZWFyY2ggb24gYSBzb3J0ZWQgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb3J0ZWRMYXN0SW5kZXhPZihbNCwgNSwgNSwgNSwgNl0sIDUpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRMYXN0SW5kZXhPZihhcnJheSwgdmFsdWUpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmIChsZW5ndGgpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gYmFzZVNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSwgdHJ1ZSkgLSAxO1xuICAgICAgICBpZiAoZXEoYXJyYXlbaW5kZXhdLCB2YWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuaXFgIGV4Y2VwdCB0aGF0IGl0J3MgZGVzaWduZWQgYW5kIG9wdGltaXplZFxuICAgICAqIGZvciBzb3J0ZWQgYXJyYXlzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29ydGVkVW5pcShbMSwgMSwgMl0pO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZFVuaXEoYXJyYXkpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VTb3J0ZWRVbmlxKGFycmF5KVxuICAgICAgICA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW5pcUJ5YCBleGNlcHQgdGhhdCBpdCdzIGRlc2lnbmVkIGFuZCBvcHRpbWl6ZWRcbiAgICAgKiBmb3Igc29ydGVkIGFycmF5cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29ydGVkVW5pcUJ5KFsxLjEsIDEuMiwgMi4zLCAyLjRdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiBbMS4xLCAyLjNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkVW5pcUJ5KGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVNvcnRlZFVuaXEoYXJyYXksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSlcbiAgICAgICAgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGFsbCBidXQgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGFpbChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IFsyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRhaWwoYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIHJldHVybiBsZW5ndGggPyBiYXNlU2xpY2UoYXJyYXksIDEsIGxlbmd0aCkgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCB3aXRoIGBuYCBlbGVtZW50cyB0YWtlbiBmcm9tIHRoZSBiZWdpbm5pbmcuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTFdIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gdGFrZS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50YWtlKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gWzFdXG4gICAgICpcbiAgICAgKiBfLnRha2UoWzEsIDIsIDNdLCAyKTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKlxuICAgICAqIF8udGFrZShbMSwgMiwgM10sIDUpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogXy50YWtlKFsxLCAyLCAzXSwgMCk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0YWtlKGFycmF5LCBuLCBndWFyZCkge1xuICAgICAgaWYgKCEoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBuID0gKGd1YXJkIHx8IG4gPT09IHVuZGVmaW5lZCkgPyAxIDogdG9JbnRlZ2VyKG4pO1xuICAgICAgcmV0dXJuIGJhc2VTbGljZShhcnJheSwgMCwgbiA8IDAgPyAwIDogbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgd2l0aCBgbmAgZWxlbWVudHMgdGFrZW4gZnJvbSB0aGUgZW5kLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0xXSBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIHRha2UuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGFrZVJpZ2h0KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gWzNdXG4gICAgICpcbiAgICAgKiBfLnRha2VSaWdodChbMSwgMiwgM10sIDIpO1xuICAgICAqIC8vID0+IFsyLCAzXVxuICAgICAqXG4gICAgICogXy50YWtlUmlnaHQoWzEsIDIsIDNdLCA1KTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIF8udGFrZVJpZ2h0KFsxLCAyLCAzXSwgMCk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0YWtlUmlnaHQoYXJyYXksIG4sIGd1YXJkKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBuID0gKGd1YXJkIHx8IG4gPT09IHVuZGVmaW5lZCkgPyAxIDogdG9JbnRlZ2VyKG4pO1xuICAgICAgbiA9IGxlbmd0aCAtIG47XG4gICAgICByZXR1cm4gYmFzZVNsaWNlKGFycmF5LCBuIDwgMCA/IDAgOiBuLCBsZW5ndGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIHdpdGggZWxlbWVudHMgdGFrZW4gZnJvbSB0aGUgZW5kLiBFbGVtZW50cyBhcmVcbiAgICAgKiB0YWtlbiB1bnRpbCBgcHJlZGljYXRlYCByZXR1cm5zIGZhbHNleS4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGhcbiAgICAgKiB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXgsIGFycmF5KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLnRha2VSaWdodFdoaWxlKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiAhby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCcsICdwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy50YWtlUmlnaHRXaGlsZSh1c2VycywgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsncGViYmxlcyddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy50YWtlUmlnaHRXaGlsZSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCcsICdwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udGFrZVJpZ2h0V2hpbGUodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRha2VSaWdodFdoaWxlKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VXaGlsZShhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgZmFsc2UsIHRydWUpXG4gICAgICAgIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgd2l0aCBlbGVtZW50cyB0YWtlbiBmcm9tIHRoZSBiZWdpbm5pbmcuIEVsZW1lbnRzXG4gICAgICogYXJlIHRha2VuIHVudGlsIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5LiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aFxuICAgICAqIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleCwgYXJyYXkpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogdHJ1ZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8udGFrZVdoaWxlKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiAhby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5JywgJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnRha2VXaGlsZSh1c2VycywgeyAndXNlcic6ICdiYXJuZXknLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udGFrZVdoaWxlKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknLCAnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnRha2VXaGlsZSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IFtdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGFrZVdoaWxlKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VXaGlsZShhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSlcbiAgICAgICAgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHVuaXF1ZSB2YWx1ZXMsIGluIG9yZGVyLCBmcm9tIGFsbCBnaXZlbiBhcnJheXMgdXNpbmdcbiAgICAgKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjb21iaW5lZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5pb24oWzJdLCBbMSwgMl0pO1xuICAgICAqIC8vID0+IFsyLCAxXVxuICAgICAqL1xuICAgIHZhciB1bmlvbiA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgcmV0dXJuIGJhc2VVbmlxKGJhc2VGbGF0dGVuKGFycmF5cywgMSwgaXNBcnJheUxpa2VPYmplY3QsIHRydWUpKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW5pb25gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBvZiBlYWNoIGBhcnJheXNgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb24gYnlcbiAgICAgKiB3aGljaCB1bmlxdWVuZXNzIGlzIGNvbXB1dGVkLiBSZXN1bHQgdmFsdWVzIGFyZSBjaG9zZW4gZnJvbSB0aGUgZmlyc3RcbiAgICAgKiBhcnJheSBpbiB3aGljaCB0aGUgdmFsdWUgb2NjdXJzLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDpcbiAgICAgKiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjb21iaW5lZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5pb25CeShbMi4xXSwgWzEuMiwgMi4zXSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4gWzIuMSwgMS4yXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy51bmlvbkJ5KFt7ICd4JzogMSB9XSwgW3sgJ3gnOiAyIH0sIHsgJ3gnOiAxIH1dLCAneCcpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSB9LCB7ICd4JzogMiB9XVxuICAgICAqL1xuICAgIHZhciB1bmlvbkJ5ID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgaXRlcmF0ZWUgPSBsYXN0KGFycmF5cyk7XG4gICAgICBpZiAoaXNBcnJheUxpa2VPYmplY3QoaXRlcmF0ZWUpKSB7XG4gICAgICAgIGl0ZXJhdGVlID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VVbmlxKGJhc2VGbGF0dGVuKGFycmF5cywgMSwgaXNBcnJheUxpa2VPYmplY3QsIHRydWUpLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bmlvbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY29tcGFyYXRvcmAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIHRvIGNvbXBhcmUgZWxlbWVudHMgb2YgYGFycmF5c2AuIFJlc3VsdCB2YWx1ZXMgYXJlIGNob3NlbiBmcm9tXG4gICAgICogdGhlIGZpcnN0IGFycmF5IGluIHdoaWNoIHRoZSB2YWx1ZSBvY2N1cnMuIFRoZSBjb21wYXJhdG9yIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHR3byBhcmd1bWVudHM6IChhcnJWYWwsIG90aFZhbCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgY29tYmluZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfV07XG4gICAgICogdmFyIG90aGVycyA9IFt7ICd4JzogMSwgJ3knOiAxIH0sIHsgJ3gnOiAxLCAneSc6IDIgfV07XG4gICAgICpcbiAgICAgKiBfLnVuaW9uV2l0aChvYmplY3RzLCBvdGhlcnMsIF8uaXNFcXVhbCk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9LCB7ICd4JzogMSwgJ3knOiAxIH1dXG4gICAgICovXG4gICAgdmFyIHVuaW9uV2l0aCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGNvbXBhcmF0b3IgPSBsYXN0KGFycmF5cyk7XG4gICAgICBjb21wYXJhdG9yID0gdHlwZW9mIGNvbXBhcmF0b3IgPT0gJ2Z1bmN0aW9uJyA/IGNvbXBhcmF0b3IgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gYmFzZVVuaXEoYmFzZUZsYXR0ZW4oYXJyYXlzLCAxLCBpc0FycmF5TGlrZU9iamVjdCwgdHJ1ZSksIHVuZGVmaW5lZCwgY29tcGFyYXRvcik7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZHVwbGljYXRlLWZyZWUgdmVyc2lvbiBvZiBhbiBhcnJheSwgdXNpbmdcbiAgICAgKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucywgaW4gd2hpY2ggb25seSB0aGUgZmlyc3Qgb2NjdXJyZW5jZSBvZiBlYWNoIGVsZW1lbnRcbiAgICAgKiBpcyBrZXB0LiBUaGUgb3JkZXIgb2YgcmVzdWx0IHZhbHVlcyBpcyBkZXRlcm1pbmVkIGJ5IHRoZSBvcmRlciB0aGV5IG9jY3VyXG4gICAgICogaW4gdGhlIGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5pcShbMiwgMSwgMl0pO1xuICAgICAqIC8vID0+IFsyLCAxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuaXEoYXJyYXkpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSA/IGJhc2VVbmlxKGFycmF5KSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW5pcWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IGluIGBhcnJheWAgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvbiBieSB3aGljaFxuICAgICAqIHVuaXF1ZW5lc3MgaXMgY29tcHV0ZWQuIFRoZSBvcmRlciBvZiByZXN1bHQgdmFsdWVzIGlzIGRldGVybWluZWQgYnkgdGhlXG4gICAgICogb3JkZXIgdGhleSBvY2N1ciBpbiB0aGUgYXJyYXkuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OlxuICAgICAqICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5pcUJ5KFsyLjEsIDEuMiwgMi4zXSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4gWzIuMSwgMS4yXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy51bmlxQnkoW3sgJ3gnOiAxIH0sIHsgJ3gnOiAyIH0sIHsgJ3gnOiAxIH1dLCAneCcpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSB9LCB7ICd4JzogMiB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuaXFCeShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSA/IGJhc2VVbmlxKGFycmF5LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bmlxYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjb21wYXJhdG9yYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgdG8gY29tcGFyZSBlbGVtZW50cyBvZiBgYXJyYXlgLiBUaGUgb3JkZXIgb2YgcmVzdWx0IHZhbHVlcyBpc1xuICAgICAqIGRldGVybWluZWQgYnkgdGhlIG9yZGVyIHRoZXkgb2NjdXIgaW4gdGhlIGFycmF5LlRoZSBjb21wYXJhdG9yIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHR3byBhcmd1bWVudHM6IChhcnJWYWwsIG90aFZhbCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH0sIHsgJ3gnOiAxLCAneSc6IDIgfV07XG4gICAgICpcbiAgICAgKiBfLnVuaXFXaXRoKG9iamVjdHMsIF8uaXNFcXVhbCk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuaXFXaXRoKGFycmF5LCBjb21wYXJhdG9yKSB7XG4gICAgICBjb21wYXJhdG9yID0gdHlwZW9mIGNvbXBhcmF0b3IgPT0gJ2Z1bmN0aW9uJyA/IGNvbXBhcmF0b3IgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkgPyBiYXNlVW5pcShhcnJheSwgdW5kZWZpbmVkLCBjb21wYXJhdG9yKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uemlwYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGFuIGFycmF5IG9mIGdyb3VwZWRcbiAgICAgKiBlbGVtZW50cyBhbmQgY3JlYXRlcyBhbiBhcnJheSByZWdyb3VwaW5nIHRoZSBlbGVtZW50cyB0byB0aGVpciBwcmUtemlwXG4gICAgICogY29uZmlndXJhdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjIuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzIHRvIHByb2Nlc3MuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgcmVncm91cGVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgemlwcGVkID0gXy56aXAoWydhJywgJ2InXSwgWzEsIDJdLCBbdHJ1ZSwgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBbWydhJywgMSwgdHJ1ZV0sIFsnYicsIDIsIGZhbHNlXV1cbiAgICAgKlxuICAgICAqIF8udW56aXAoemlwcGVkKTtcbiAgICAgKiAvLyA9PiBbWydhJywgJ2InXSwgWzEsIDJdLCBbdHJ1ZSwgZmFsc2VdXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuemlwKGFycmF5KSB7XG4gICAgICBpZiAoIShhcnJheSAmJiBhcnJheS5sZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciBsZW5ndGggPSAwO1xuICAgICAgYXJyYXkgPSBhcnJheUZpbHRlcihhcnJheSwgZnVuY3Rpb24oZ3JvdXApIHtcbiAgICAgICAgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KGdyb3VwKSkge1xuICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1heChncm91cC5sZW5ndGgsIGxlbmd0aCk7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGJhc2VUaW1lcyhsZW5ndGgsIGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICAgIHJldHVybiBhcnJheU1hcChhcnJheSwgYmFzZVByb3BlcnR5KGluZGV4KSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuemlwYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgdG8gc3BlY2lmeVxuICAgICAqIGhvdyByZWdyb3VwZWQgdmFsdWVzIHNob3VsZCBiZSBjb21iaW5lZC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aGVcbiAgICAgKiBlbGVtZW50cyBvZiBlYWNoIGdyb3VwOiAoLi4uZ3JvdXApLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IG9mIGdyb3VwZWQgZWxlbWVudHMgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIHRvIGNvbWJpbmVcbiAgICAgKiAgcmVncm91cGVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiByZWdyb3VwZWQgZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB6aXBwZWQgPSBfLnppcChbMSwgMl0sIFsxMCwgMjBdLCBbMTAwLCAyMDBdKTtcbiAgICAgKiAvLyA9PiBbWzEsIDEwLCAxMDBdLCBbMiwgMjAsIDIwMF1dXG4gICAgICpcbiAgICAgKiBfLnVuemlwV2l0aCh6aXBwZWQsIF8uYWRkKTtcbiAgICAgKiAvLyA9PiBbMywgMzAsIDMwMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bnppcFdpdGgoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICBpZiAoIShhcnJheSAmJiBhcnJheS5sZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSB1bnppcChhcnJheSk7XG4gICAgICBpZiAoaXRlcmF0ZWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5TWFwKHJlc3VsdCwgZnVuY3Rpb24oZ3JvdXApIHtcbiAgICAgICAgcmV0dXJuIGFwcGx5KGl0ZXJhdGVlLCB1bmRlZmluZWQsIGdyb3VwKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgZXhjbHVkaW5nIGFsbCBnaXZlbiB2YWx1ZXMgdXNpbmdcbiAgICAgKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8ucHVsbGAsIHRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0gey4uLip9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gZXhjbHVkZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQHNlZSBfLmRpZmZlcmVuY2UsIF8ueG9yXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ud2l0aG91dChbMiwgMSwgMiwgM10sIDEsIDIpO1xuICAgICAqIC8vID0+IFszXVxuICAgICAqL1xuICAgIHZhciB3aXRob3V0ID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXksIHZhbHVlcykge1xuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlT2JqZWN0KGFycmF5KVxuICAgICAgICA/IGJhc2VEaWZmZXJlbmNlKGFycmF5LCB2YWx1ZXMpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHVuaXF1ZSB2YWx1ZXMgdGhhdCBpcyB0aGVcbiAgICAgKiBbc3ltbWV0cmljIGRpZmZlcmVuY2VdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1N5bW1ldHJpY19kaWZmZXJlbmNlKVxuICAgICAqIG9mIHRoZSBnaXZlbiBhcnJheXMuIFRoZSBvcmRlciBvZiByZXN1bHQgdmFsdWVzIGlzIGRldGVybWluZWQgYnkgdGhlIG9yZGVyXG4gICAgICogdGhleSBvY2N1ciBpbiB0aGUgYXJyYXlzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuNC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAc2VlIF8uZGlmZmVyZW5jZSwgXy53aXRob3V0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ueG9yKFsyLCAxXSwgWzIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMSwgM11cbiAgICAgKi9cbiAgICB2YXIgeG9yID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICByZXR1cm4gYmFzZVhvcihhcnJheUZpbHRlcihhcnJheXMsIGlzQXJyYXlMaWtlT2JqZWN0KSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnhvcmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IG9mIGVhY2ggYGFycmF5c2AgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvbiBieVxuICAgICAqIHdoaWNoIGJ5IHdoaWNoIHRoZXkncmUgY29tcGFyZWQuIFRoZSBvcmRlciBvZiByZXN1bHQgdmFsdWVzIGlzIGRldGVybWluZWRcbiAgICAgKiBieSB0aGUgb3JkZXIgdGhleSBvY2N1ciBpbiB0aGUgYXJyYXlzLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZVxuICAgICAqIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ueG9yQnkoWzIuMSwgMS4yXSwgWzIuMywgMy40XSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4gWzEuMiwgMy40XVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy54b3JCeShbeyAneCc6IDEgfV0sIFt7ICd4JzogMiB9LCB7ICd4JzogMSB9XSwgJ3gnKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDIgfV1cbiAgICAgKi9cbiAgICB2YXIgeG9yQnkgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBpdGVyYXRlZSA9IGxhc3QoYXJyYXlzKTtcbiAgICAgIGlmIChpc0FycmF5TGlrZU9iamVjdChpdGVyYXRlZSkpIHtcbiAgICAgICAgaXRlcmF0ZWUgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVhvcihhcnJheUZpbHRlcihhcnJheXMsIGlzQXJyYXlMaWtlT2JqZWN0KSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ueG9yYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjb21wYXJhdG9yYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgdG8gY29tcGFyZSBlbGVtZW50cyBvZiBgYXJyYXlzYC4gVGhlIG9yZGVyIG9mIHJlc3VsdCB2YWx1ZXMgaXNcbiAgICAgKiBkZXRlcm1pbmVkIGJ5IHRoZSBvcmRlciB0aGV5IG9jY3VyIGluIHRoZSBhcnJheXMuIFRoZSBjb21wYXJhdG9yIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHR3byBhcmd1bWVudHM6IChhcnJWYWwsIG90aFZhbCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfV07XG4gICAgICogdmFyIG90aGVycyA9IFt7ICd4JzogMSwgJ3knOiAxIH0sIHsgJ3gnOiAxLCAneSc6IDIgfV07XG4gICAgICpcbiAgICAgKiBfLnhvcldpdGgob2JqZWN0cywgb3RoZXJzLCBfLmlzRXF1YWwpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMiwgJ3knOiAxIH0sIHsgJ3gnOiAxLCAneSc6IDEgfV1cbiAgICAgKi9cbiAgICB2YXIgeG9yV2l0aCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGNvbXBhcmF0b3IgPSBsYXN0KGFycmF5cyk7XG4gICAgICBjb21wYXJhdG9yID0gdHlwZW9mIGNvbXBhcmF0b3IgPT0gJ2Z1bmN0aW9uJyA/IGNvbXBhcmF0b3IgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gYmFzZVhvcihhcnJheUZpbHRlcihhcnJheXMsIGlzQXJyYXlMaWtlT2JqZWN0KSwgdW5kZWZpbmVkLCBjb21wYXJhdG9yKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZ3JvdXBlZCBlbGVtZW50cywgdGhlIGZpcnN0IG9mIHdoaWNoIGNvbnRhaW5zIHRoZVxuICAgICAqIGZpcnN0IGVsZW1lbnRzIG9mIHRoZSBnaXZlbiBhcnJheXMsIHRoZSBzZWNvbmQgb2Ygd2hpY2ggY29udGFpbnMgdGhlXG4gICAgICogc2Vjb25kIGVsZW1lbnRzIG9mIHRoZSBnaXZlbiBhcnJheXMsIGFuZCBzbyBvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnppcChbJ2EnLCAnYiddLCBbMSwgMl0sIFt0cnVlLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IFtbJ2EnLCAxLCB0cnVlXSwgWydiJywgMiwgZmFsc2VdXVxuICAgICAqL1xuICAgIHZhciB6aXAgPSBiYXNlUmVzdCh1bnppcCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZyb21QYWlyc2AgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyB0d28gYXJyYXlzLFxuICAgICAqIG9uZSBvZiBwcm9wZXJ0eSBpZGVudGlmaWVycyBhbmQgb25lIG9mIGNvcnJlc3BvbmRpbmcgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gW3Byb3BzPVtdXSBUaGUgcHJvcGVydHkgaWRlbnRpZmllcnMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3ZhbHVlcz1bXV0gVGhlIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnppcE9iamVjdChbJ2EnLCAnYiddLCBbMSwgMl0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHppcE9iamVjdChwcm9wcywgdmFsdWVzKSB7XG4gICAgICByZXR1cm4gYmFzZVppcE9iamVjdChwcm9wcyB8fCBbXSwgdmFsdWVzIHx8IFtdLCBhc3NpZ25WYWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy56aXBPYmplY3RgIGV4Y2VwdCB0aGF0IGl0IHN1cHBvcnRzIHByb3BlcnR5IHBhdGhzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gW3Byb3BzPVtdXSBUaGUgcHJvcGVydHkgaWRlbnRpZmllcnMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3ZhbHVlcz1bXV0gVGhlIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnppcE9iamVjdERlZXAoWydhLmJbMF0uYycsICdhLmJbMV0uZCddLCBbMSwgMl0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiB7ICdiJzogW3sgJ2MnOiAxIH0sIHsgJ2QnOiAyIH1dIH0gfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHppcE9iamVjdERlZXAocHJvcHMsIHZhbHVlcykge1xuICAgICAgcmV0dXJuIGJhc2VaaXBPYmplY3QocHJvcHMgfHwgW10sIHZhbHVlcyB8fCBbXSwgYmFzZVNldCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy56aXBgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB0byBzcGVjaWZ5XG4gICAgICogaG93IGdyb3VwZWQgdmFsdWVzIHNob3VsZCBiZSBjb21iaW5lZC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aGVcbiAgICAgKiBlbGVtZW50cyBvZiBlYWNoIGdyb3VwOiAoLi4uZ3JvdXApLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBwcm9jZXNzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gdG8gY29tYmluZVxuICAgICAqICBncm91cGVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnppcFdpdGgoWzEsIDJdLCBbMTAsIDIwXSwgWzEwMCwgMjAwXSwgZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAqICAgcmV0dXJuIGEgKyBiICsgYztcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBbMTExLCAyMjJdXG4gICAgICovXG4gICAgdmFyIHppcFdpdGggPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheXMubGVuZ3RoLFxuICAgICAgICAgIGl0ZXJhdGVlID0gbGVuZ3RoID4gMSA/IGFycmF5c1tsZW5ndGggLSAxXSA6IHVuZGVmaW5lZDtcblxuICAgICAgaXRlcmF0ZWUgPSB0eXBlb2YgaXRlcmF0ZWUgPT0gJ2Z1bmN0aW9uJyA/IChhcnJheXMucG9wKCksIGl0ZXJhdGVlKSA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiB1bnppcFdpdGgoYXJyYXlzLCBpdGVyYXRlZSk7XG4gICAgfSk7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZSB0aGF0IHdyYXBzIGB2YWx1ZWAgd2l0aCBleHBsaWNpdCBtZXRob2RcbiAgICAgKiBjaGFpbiBzZXF1ZW5jZXMgZW5hYmxlZC4gVGhlIHJlc3VsdCBvZiBzdWNoIHNlcXVlbmNlcyBtdXN0IGJlIHVud3JhcHBlZFxuICAgICAqIHdpdGggYF8jdmFsdWVgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMy4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHdyYXAuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhZ2UnOiAzNiB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FnZSc6IDQwIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWdlJzogMSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIHZhciB5b3VuZ2VzdCA9IF9cbiAgICAgKiAgIC5jaGFpbih1c2VycylcbiAgICAgKiAgIC5zb3J0QnkoJ2FnZScpXG4gICAgICogICAubWFwKGZ1bmN0aW9uKG8pIHtcbiAgICAgKiAgICAgcmV0dXJuIG8udXNlciArICcgaXMgJyArIG8uYWdlO1xuICAgICAqICAgfSlcbiAgICAgKiAgIC5oZWFkKClcbiAgICAgKiAgIC52YWx1ZSgpO1xuICAgICAqIC8vID0+ICdwZWJibGVzIGlzIDEnXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2hhaW4odmFsdWUpIHtcbiAgICAgIHZhciByZXN1bHQgPSBsb2Rhc2godmFsdWUpO1xuICAgICAgcmVzdWx0Ll9fY2hhaW5fXyA9IHRydWU7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGludm9rZXMgYGludGVyY2VwdG9yYCBhbmQgcmV0dXJucyBgdmFsdWVgLiBUaGUgaW50ZXJjZXB0b3JcbiAgICAgKiBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OyAodmFsdWUpLiBUaGUgcHVycG9zZSBvZiB0aGlzIG1ldGhvZCBpcyB0b1xuICAgICAqIFwidGFwIGludG9cIiBhIG1ldGhvZCBjaGFpbiBzZXF1ZW5jZSBpbiBvcmRlciB0byBtb2RpZnkgaW50ZXJtZWRpYXRlIHJlc3VsdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvdmlkZSB0byBgaW50ZXJjZXB0b3JgLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGludGVyY2VwdG9yIFRoZSBmdW5jdGlvbiB0byBpbnZva2UuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgYHZhbHVlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXyhbMSwgMiwgM10pXG4gICAgICogIC50YXAoZnVuY3Rpb24oYXJyYXkpIHtcbiAgICAgKiAgICAvLyBNdXRhdGUgaW5wdXQgYXJyYXkuXG4gICAgICogICAgYXJyYXkucG9wKCk7XG4gICAgICogIH0pXG4gICAgICogIC5yZXZlcnNlKClcbiAgICAgKiAgLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWzIsIDFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGFwKHZhbHVlLCBpbnRlcmNlcHRvcikge1xuICAgICAgaW50ZXJjZXB0b3IodmFsdWUpO1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udGFwYCBleGNlcHQgdGhhdCBpdCByZXR1cm5zIHRoZSByZXN1bHQgb2YgYGludGVyY2VwdG9yYC5cbiAgICAgKiBUaGUgcHVycG9zZSBvZiB0aGlzIG1ldGhvZCBpcyB0byBcInBhc3MgdGhydVwiIHZhbHVlcyByZXBsYWNpbmcgaW50ZXJtZWRpYXRlXG4gICAgICogcmVzdWx0cyBpbiBhIG1ldGhvZCBjaGFpbiBzZXF1ZW5jZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm92aWRlIHRvIGBpbnRlcmNlcHRvcmAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaW50ZXJjZXB0b3IgVGhlIGZ1bmN0aW9uIHRvIGludm9rZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzdWx0IG9mIGBpbnRlcmNlcHRvcmAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8oJyAgYWJjICAnKVxuICAgICAqICAuY2hhaW4oKVxuICAgICAqICAudHJpbSgpXG4gICAgICogIC50aHJ1KGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICogICAgcmV0dXJuIFt2YWx1ZV07XG4gICAgICogIH0pXG4gICAgICogIC52YWx1ZSgpO1xuICAgICAqIC8vID0+IFsnYWJjJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0aHJ1KHZhbHVlLCBpbnRlcmNlcHRvcikge1xuICAgICAgcmV0dXJuIGludGVyY2VwdG9yKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyB0aGUgd3JhcHBlciB2ZXJzaW9uIG9mIGBfLmF0YC5cbiAgICAgKlxuICAgICAqIEBuYW1lIGF0XG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHBhcmFtIHsuLi4oc3RyaW5nfHN0cmluZ1tdKX0gW3BhdGhzXSBUaGUgcHJvcGVydHkgcGF0aHMgdG8gcGljay5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiAzIH0gfSwgNF0gfTtcbiAgICAgKlxuICAgICAqIF8ob2JqZWN0KS5hdChbJ2FbMF0uYi5jJywgJ2FbMV0nXSkudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbMywgNF1cbiAgICAgKi9cbiAgICB2YXIgd3JhcHBlckF0ID0gZmxhdFJlc3QoZnVuY3Rpb24ocGF0aHMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBwYXRocy5sZW5ndGgsXG4gICAgICAgICAgc3RhcnQgPSBsZW5ndGggPyBwYXRoc1swXSA6IDAsXG4gICAgICAgICAgdmFsdWUgPSB0aGlzLl9fd3JhcHBlZF9fLFxuICAgICAgICAgIGludGVyY2VwdG9yID0gZnVuY3Rpb24ob2JqZWN0KSB7IHJldHVybiBiYXNlQXQob2JqZWN0LCBwYXRocyk7IH07XG5cbiAgICAgIGlmIChsZW5ndGggPiAxIHx8IHRoaXMuX19hY3Rpb25zX18ubGVuZ3RoIHx8XG4gICAgICAgICAgISh2YWx1ZSBpbnN0YW5jZW9mIExhenlXcmFwcGVyKSB8fCAhaXNJbmRleChzdGFydCkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGhydShpbnRlcmNlcHRvcik7XG4gICAgICB9XG4gICAgICB2YWx1ZSA9IHZhbHVlLnNsaWNlKHN0YXJ0LCArc3RhcnQgKyAobGVuZ3RoID8gMSA6IDApKTtcbiAgICAgIHZhbHVlLl9fYWN0aW9uc19fLnB1c2goe1xuICAgICAgICAnZnVuYyc6IHRocnUsXG4gICAgICAgICdhcmdzJzogW2ludGVyY2VwdG9yXSxcbiAgICAgICAgJ3RoaXNBcmcnOiB1bmRlZmluZWRcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIG5ldyBMb2Rhc2hXcmFwcGVyKHZhbHVlLCB0aGlzLl9fY2hhaW5fXykudGhydShmdW5jdGlvbihhcnJheSkge1xuICAgICAgICBpZiAobGVuZ3RoICYmICFhcnJheS5sZW5ndGgpIHtcbiAgICAgICAgICBhcnJheS5wdXNoKHVuZGVmaW5lZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFycmF5O1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZSB3aXRoIGV4cGxpY2l0IG1ldGhvZCBjaGFpbiBzZXF1ZW5jZXMgZW5hYmxlZC5cbiAgICAgKlxuICAgICAqIEBuYW1lIGNoYWluXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2IH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIEEgc2VxdWVuY2Ugd2l0aG91dCBleHBsaWNpdCBjaGFpbmluZy5cbiAgICAgKiBfKHVzZXJzKS5oZWFkKCk7XG4gICAgICogLy8gPT4geyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYgfVxuICAgICAqXG4gICAgICogLy8gQSBzZXF1ZW5jZSB3aXRoIGV4cGxpY2l0IGNoYWluaW5nLlxuICAgICAqIF8odXNlcnMpXG4gICAgICogICAuY2hhaW4oKVxuICAgICAqICAgLmhlYWQoKVxuICAgICAqICAgLnBpY2soJ3VzZXInKVxuICAgICAqICAgLnZhbHVlKCk7XG4gICAgICogLy8gPT4geyAndXNlcic6ICdiYXJuZXknIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyQ2hhaW4oKSB7XG4gICAgICByZXR1cm4gY2hhaW4odGhpcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXhlY3V0ZXMgdGhlIGNoYWluIHNlcXVlbmNlIGFuZCByZXR1cm5zIHRoZSB3cmFwcGVkIHJlc3VsdC5cbiAgICAgKlxuICAgICAqIEBuYW1lIGNvbW1pdFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMi4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgMl07XG4gICAgICogdmFyIHdyYXBwZWQgPSBfKGFycmF5KS5wdXNoKDMpO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqXG4gICAgICogd3JhcHBlZCA9IHdyYXBwZWQuY29tbWl0KCk7XG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogd3JhcHBlZC5sYXN0KCk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJDb21taXQoKSB7XG4gICAgICByZXR1cm4gbmV3IExvZGFzaFdyYXBwZXIodGhpcy52YWx1ZSgpLCB0aGlzLl9fY2hhaW5fXyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbmV4dCB2YWx1ZSBvbiBhIHdyYXBwZWQgb2JqZWN0IGZvbGxvd2luZyB0aGVcbiAgICAgKiBbaXRlcmF0b3IgcHJvdG9jb2xdKGh0dHBzOi8vbWRuLmlvL2l0ZXJhdGlvbl9wcm90b2NvbHMjaXRlcmF0b3IpLlxuICAgICAqXG4gICAgICogQG5hbWUgbmV4dFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5leHQgaXRlcmF0b3IgdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB3cmFwcGVkID0gXyhbMSwgMl0pO1xuICAgICAqXG4gICAgICogd3JhcHBlZC5uZXh0KCk7XG4gICAgICogLy8gPT4geyAnZG9uZSc6IGZhbHNlLCAndmFsdWUnOiAxIH1cbiAgICAgKlxuICAgICAqIHdyYXBwZWQubmV4dCgpO1xuICAgICAqIC8vID0+IHsgJ2RvbmUnOiBmYWxzZSwgJ3ZhbHVlJzogMiB9XG4gICAgICpcbiAgICAgKiB3cmFwcGVkLm5leHQoKTtcbiAgICAgKiAvLyA9PiB7ICdkb25lJzogdHJ1ZSwgJ3ZhbHVlJzogdW5kZWZpbmVkIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyTmV4dCgpIHtcbiAgICAgIGlmICh0aGlzLl9fdmFsdWVzX18gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLl9fdmFsdWVzX18gPSB0b0FycmF5KHRoaXMudmFsdWUoKSk7XG4gICAgICB9XG4gICAgICB2YXIgZG9uZSA9IHRoaXMuX19pbmRleF9fID49IHRoaXMuX192YWx1ZXNfXy5sZW5ndGgsXG4gICAgICAgICAgdmFsdWUgPSBkb25lID8gdW5kZWZpbmVkIDogdGhpcy5fX3ZhbHVlc19fW3RoaXMuX19pbmRleF9fKytdO1xuXG4gICAgICByZXR1cm4geyAnZG9uZSc6IGRvbmUsICd2YWx1ZSc6IHZhbHVlIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRW5hYmxlcyB0aGUgd3JhcHBlciB0byBiZSBpdGVyYWJsZS5cbiAgICAgKlxuICAgICAqIEBuYW1lIFN5bWJvbC5pdGVyYXRvclxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIHdyYXBwZXIgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgd3JhcHBlZCA9IF8oWzEsIDJdKTtcbiAgICAgKlxuICAgICAqIHdyYXBwZWRbU3ltYm9sLml0ZXJhdG9yXSgpID09PSB3cmFwcGVkO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIEFycmF5LmZyb20od3JhcHBlZCk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlclRvSXRlcmF0b3IoKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgdGhlIGNoYWluIHNlcXVlbmNlIHBsYW50aW5nIGB2YWx1ZWAgYXMgdGhlIHdyYXBwZWQgdmFsdWUuXG4gICAgICpcbiAgICAgKiBAbmFtZSBwbGFudFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMi4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHBsYW50LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICAgICAqICAgcmV0dXJuIG4gKiBuO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciB3cmFwcGVkID0gXyhbMSwgMl0pLm1hcChzcXVhcmUpO1xuICAgICAqIHZhciBvdGhlciA9IHdyYXBwZWQucGxhbnQoWzMsIDRdKTtcbiAgICAgKlxuICAgICAqIG90aGVyLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWzksIDE2XVxuICAgICAqXG4gICAgICogd3JhcHBlZC52YWx1ZSgpO1xuICAgICAqIC8vID0+IFsxLCA0XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJQbGFudCh2YWx1ZSkge1xuICAgICAgdmFyIHJlc3VsdCxcbiAgICAgICAgICBwYXJlbnQgPSB0aGlzO1xuXG4gICAgICB3aGlsZSAocGFyZW50IGluc3RhbmNlb2YgYmFzZUxvZGFzaCkge1xuICAgICAgICB2YXIgY2xvbmUgPSB3cmFwcGVyQ2xvbmUocGFyZW50KTtcbiAgICAgICAgY2xvbmUuX19pbmRleF9fID0gMDtcbiAgICAgICAgY2xvbmUuX192YWx1ZXNfXyA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgIHByZXZpb3VzLl9fd3JhcHBlZF9fID0gY2xvbmU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzdWx0ID0gY2xvbmU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHByZXZpb3VzID0gY2xvbmU7XG4gICAgICAgIHBhcmVudCA9IHBhcmVudC5fX3dyYXBwZWRfXztcbiAgICAgIH1cbiAgICAgIHByZXZpb3VzLl9fd3JhcHBlZF9fID0gdmFsdWU7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIHRoZSB3cmFwcGVyIHZlcnNpb24gb2YgYF8ucmV2ZXJzZWAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyB0aGUgd3JhcHBlZCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBuYW1lIHJldmVyc2VcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIDIsIDNdO1xuICAgICAqXG4gICAgICogXyhhcnJheSkucmV2ZXJzZSgpLnZhbHVlKClcbiAgICAgKiAvLyA9PiBbMywgMiwgMV1cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMywgMiwgMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyUmV2ZXJzZSgpIHtcbiAgICAgIHZhciB2YWx1ZSA9IHRoaXMuX193cmFwcGVkX187XG4gICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBMYXp5V3JhcHBlcikge1xuICAgICAgICB2YXIgd3JhcHBlZCA9IHZhbHVlO1xuICAgICAgICBpZiAodGhpcy5fX2FjdGlvbnNfXy5sZW5ndGgpIHtcbiAgICAgICAgICB3cmFwcGVkID0gbmV3IExhenlXcmFwcGVyKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHdyYXBwZWQgPSB3cmFwcGVkLnJldmVyc2UoKTtcbiAgICAgICAgd3JhcHBlZC5fX2FjdGlvbnNfXy5wdXNoKHtcbiAgICAgICAgICAnZnVuYyc6IHRocnUsXG4gICAgICAgICAgJ2FyZ3MnOiBbcmV2ZXJzZV0sXG4gICAgICAgICAgJ3RoaXNBcmcnOiB1bmRlZmluZWRcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBuZXcgTG9kYXNoV3JhcHBlcih3cmFwcGVkLCB0aGlzLl9fY2hhaW5fXyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy50aHJ1KHJldmVyc2UpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEV4ZWN1dGVzIHRoZSBjaGFpbiBzZXF1ZW5jZSB0byByZXNvbHZlIHRoZSB1bndyYXBwZWQgdmFsdWUuXG4gICAgICpcbiAgICAgKiBAbmFtZSB2YWx1ZVxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGFsaWFzIHRvSlNPTiwgdmFsdWVPZlxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdW53cmFwcGVkIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfKFsxLCAyLCAzXSkudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyVmFsdWUoKSB7XG4gICAgICByZXR1cm4gYmFzZVdyYXBwZXJWYWx1ZSh0aGlzLl9fd3JhcHBlZF9fLCB0aGlzLl9fYWN0aW9uc19fKTtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiBrZXlzIGdlbmVyYXRlZCBmcm9tIHRoZSByZXN1bHRzIG9mIHJ1bm5pbmdcbiAgICAgKiBlYWNoIGVsZW1lbnQgb2YgYGNvbGxlY3Rpb25gIHRocnUgYGl0ZXJhdGVlYC4gVGhlIGNvcnJlc3BvbmRpbmcgdmFsdWUgb2ZcbiAgICAgKiBlYWNoIGtleSBpcyB0aGUgbnVtYmVyIG9mIHRpbWVzIHRoZSBrZXkgd2FzIHJldHVybmVkIGJ5IGBpdGVyYXRlZWAuIFRoZVxuICAgICAqIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC41LjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIHRvIHRyYW5zZm9ybSBrZXlzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNvbXBvc2VkIGFnZ3JlZ2F0ZSBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY291bnRCeShbNi4xLCA0LjIsIDYuM10sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IHsgJzQnOiAxLCAnNic6IDIgfVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5jb3VudEJ5KFsnb25lJywgJ3R3bycsICd0aHJlZSddLCAnbGVuZ3RoJyk7XG4gICAgICogLy8gPT4geyAnMyc6IDIsICc1JzogMSB9XG4gICAgICovXG4gICAgdmFyIGNvdW50QnkgPSBjcmVhdGVBZ2dyZWdhdG9yKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwocmVzdWx0LCBrZXkpKSB7XG4gICAgICAgICsrcmVzdWx0W2tleV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUocmVzdWx0LCBrZXksIDEpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvciAqKmFsbCoqIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYC5cbiAgICAgKiBJdGVyYXRpb24gaXMgc3RvcHBlZCBvbmNlIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5LiBUaGUgcHJlZGljYXRlIGlzXG4gICAgICogaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIHJldHVybnMgYHRydWVgIGZvclxuICAgICAqIFtlbXB0eSBjb2xsZWN0aW9uc10oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRW1wdHlfc2V0KSBiZWNhdXNlXG4gICAgICogW2V2ZXJ5dGhpbmcgaXMgdHJ1ZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvVmFjdW91c190cnV0aCkgb2ZcbiAgICAgKiBlbGVtZW50cyBvZiBlbXB0eSBjb2xsZWN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbGwgZWxlbWVudHMgcGFzcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZXZlcnkoW3RydWUsIDEsIG51bGwsICd5ZXMnXSwgQm9vbGVhbik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2LCAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZXZlcnkodXNlcnMsIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5ldmVyeSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZXZlcnkodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGV2ZXJ5KGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZ3VhcmQpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5RXZlcnkgOiBiYXNlRXZlcnk7XG4gICAgICBpZiAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBndWFyZCkpIHtcbiAgICAgICAgcHJlZGljYXRlID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmAsIHJldHVybmluZyBhbiBhcnJheSBvZiBhbGwgZWxlbWVudHNcbiAgICAgKiBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoIHRocmVlXG4gICAgICogYXJndW1lbnRzOiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLnJlbW92ZWAsIHRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmlsdGVyZWQgYXJyYXkuXG4gICAgICogQHNlZSBfLnJlamVjdFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbHRlcih1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gIW8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbHRlcih1c2VycywgeyAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbHRlcih1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbHRlcih1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaWx0ZXIoY29sbGVjdGlvbiwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheUZpbHRlciA6IGJhc2VGaWx0ZXI7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYCwgcmV0dXJuaW5nIHRoZSBmaXJzdCBlbGVtZW50XG4gICAgICogYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yLiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aCB0aHJlZVxuICAgICAqIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD0wXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1hdGNoZWQgZWxlbWVudCwgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhZ2UnOiAxLCAgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbmQodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8uYWdlIDwgNDA7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdCBmb3IgJ2Jhcm5leSdcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kKHVzZXJzLCB7ICdhZ2UnOiAxLCAnYWN0aXZlJzogdHJ1ZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3QgZm9yICdwZWJibGVzJ1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZCh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdCBmb3IgJ2ZyZWQnXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmQodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBvYmplY3QgZm9yICdiYXJuZXknXG4gICAgICovXG4gICAgdmFyIGZpbmQgPSBjcmVhdGVGaW5kKGZpbmRJbmRleCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZpbmRgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2ZcbiAgICAgKiBgY29sbGVjdGlvbmAgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD1jb2xsZWN0aW9uLmxlbmd0aC0xXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1hdGNoZWQgZWxlbWVudCwgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5maW5kTGFzdChbMSwgMiwgMywgNF0sIGZ1bmN0aW9uKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICUgMiA9PSAxO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICB2YXIgZmluZExhc3QgPSBjcmVhdGVGaW5kKGZpbmRMYXN0SW5kZXgpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZsYXR0ZW5lZCBhcnJheSBvZiB2YWx1ZXMgYnkgcnVubmluZyBlYWNoIGVsZW1lbnQgaW4gYGNvbGxlY3Rpb25gXG4gICAgICogdGhydSBgaXRlcmF0ZWVgIGFuZCBmbGF0dGVuaW5nIHRoZSBtYXBwZWQgcmVzdWx0cy4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBkdXBsaWNhdGUobikge1xuICAgICAqICAgcmV0dXJuIFtuLCBuXTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBfLmZsYXRNYXAoWzEsIDJdLCBkdXBsaWNhdGUpO1xuICAgICAqIC8vID0+IFsxLCAxLCAyLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXRNYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBiYXNlRmxhdHRlbihtYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpLCAxKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZsYXRNYXBgIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IGZsYXR0ZW5zIHRoZVxuICAgICAqIG1hcHBlZCByZXN1bHRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNy4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBkdXBsaWNhdGUobikge1xuICAgICAqICAgcmV0dXJuIFtbW24sIG5dXV07XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5mbGF0TWFwRGVlcChbMSwgMl0sIGR1cGxpY2F0ZSk7XG4gICAgICogLy8gPT4gWzEsIDEsIDIsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdE1hcERlZXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBiYXNlRmxhdHRlbihtYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpLCBJTkZJTklUWSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mbGF0TWFwYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBmbGF0dGVucyB0aGVcbiAgICAgKiBtYXBwZWQgcmVzdWx0cyB1cCB0byBgZGVwdGhgIHRpbWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNy4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtkZXB0aD0xXSBUaGUgbWF4aW11bSByZWN1cnNpb24gZGVwdGguXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBkdXBsaWNhdGUobikge1xuICAgICAqICAgcmV0dXJuIFtbW24sIG5dXV07XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5mbGF0TWFwRGVwdGgoWzEsIDJdLCBkdXBsaWNhdGUsIDIpO1xuICAgICAqIC8vID0+IFtbMSwgMV0sIFsyLCAyXV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0TWFwRGVwdGgoY29sbGVjdGlvbiwgaXRlcmF0ZWUsIGRlcHRoKSB7XG4gICAgICBkZXB0aCA9IGRlcHRoID09PSB1bmRlZmluZWQgPyAxIDogdG9JbnRlZ2VyKGRlcHRoKTtcbiAgICAgIHJldHVybiBiYXNlRmxhdHRlbihtYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpLCBkZXB0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmAgYW5kIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgZWFjaCBlbGVtZW50LlxuICAgICAqIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICogSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0IGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIEFzIHdpdGggb3RoZXIgXCJDb2xsZWN0aW9uc1wiIG1ldGhvZHMsIG9iamVjdHMgd2l0aCBhIFwibGVuZ3RoXCJcbiAgICAgKiBwcm9wZXJ0eSBhcmUgaXRlcmF0ZWQgbGlrZSBhcnJheXMuIFRvIGF2b2lkIHRoaXMgYmVoYXZpb3IgdXNlIGBfLmZvckluYFxuICAgICAqIG9yIGBfLmZvck93bmAgZm9yIG9iamVjdCBpdGVyYXRpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAYWxpYXMgZWFjaFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgYGNvbGxlY3Rpb25gLlxuICAgICAqIEBzZWUgXy5mb3JFYWNoUmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mb3JFYWNoKFsxLCAyXSwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKHZhbHVlKTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzIGAxYCB0aGVuIGAyYC5cbiAgICAgKlxuICAgICAqIF8uZm9yRWFjaCh7ICdhJzogMSwgJ2InOiAyIH0sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGtleSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyAnYScgdGhlbiAnYicgKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZCkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9yRWFjaChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlFYWNoIDogYmFzZUVhY2g7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZm9yRWFjaGAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZlxuICAgICAqIGBjb2xsZWN0aW9uYCBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAYWxpYXMgZWFjaFJpZ2h0XG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fE9iamVjdH0gUmV0dXJucyBgY29sbGVjdGlvbmAuXG4gICAgICogQHNlZSBfLmZvckVhY2hcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mb3JFYWNoUmlnaHQoWzEsIDJdLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAqICAgY29uc29sZS5sb2codmFsdWUpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgYDJgIHRoZW4gYDFgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvckVhY2hSaWdodChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlFYWNoUmlnaHQgOiBiYXNlRWFjaFJpZ2h0O1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiBrZXlzIGdlbmVyYXRlZCBmcm9tIHRoZSByZXN1bHRzIG9mIHJ1bm5pbmdcbiAgICAgKiBlYWNoIGVsZW1lbnQgb2YgYGNvbGxlY3Rpb25gIHRocnUgYGl0ZXJhdGVlYC4gVGhlIG9yZGVyIG9mIGdyb3VwZWQgdmFsdWVzXG4gICAgICogaXMgZGV0ZXJtaW5lZCBieSB0aGUgb3JkZXIgdGhleSBvY2N1ciBpbiBgY29sbGVjdGlvbmAuIFRoZSBjb3JyZXNwb25kaW5nXG4gICAgICogdmFsdWUgb2YgZWFjaCBrZXkgaXMgYW4gYXJyYXkgb2YgZWxlbWVudHMgcmVzcG9uc2libGUgZm9yIGdlbmVyYXRpbmcgdGhlXG4gICAgICoga2V5LiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgdG8gdHJhbnNmb3JtIGtleXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY29tcG9zZWQgYWdncmVnYXRlIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5ncm91cEJ5KFs2LjEsIDQuMiwgNi4zXSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4geyAnNCc6IFs0LjJdLCAnNic6IFs2LjEsIDYuM10gfVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5ncm91cEJ5KFsnb25lJywgJ3R3bycsICd0aHJlZSddLCAnbGVuZ3RoJyk7XG4gICAgICogLy8gPT4geyAnMyc6IFsnb25lJywgJ3R3byddLCAnNSc6IFsndGhyZWUnXSB9XG4gICAgICovXG4gICAgdmFyIGdyb3VwQnkgPSBjcmVhdGVBZ2dyZWdhdG9yKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwocmVzdWx0LCBrZXkpKSB7XG4gICAgICAgIHJlc3VsdFtrZXldLnB1c2godmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKHJlc3VsdCwga2V5LCBbdmFsdWVdKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGluIGBjb2xsZWN0aW9uYC4gSWYgYGNvbGxlY3Rpb25gIGlzIGEgc3RyaW5nLCBpdCdzXG4gICAgICogY2hlY2tlZCBmb3IgYSBzdWJzdHJpbmcgb2YgYHZhbHVlYCwgb3RoZXJ3aXNlXG4gICAgICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBpcyB1c2VkIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy4gSWYgYGZyb21JbmRleGAgaXMgbmVnYXRpdmUsIGl0J3MgdXNlZCBhc1xuICAgICAqIHRoZSBvZmZzZXQgZnJvbSB0aGUgZW5kIG9mIGBjb2xsZWN0aW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8c3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD0wXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ucmVkdWNlYC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmluY2x1ZGVzKFsxLCAyLCAzXSwgMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pbmNsdWRlcyhbMSwgMiwgM10sIDEsIDIpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmluY2x1ZGVzKHsgJ2EnOiAxLCAnYic6IDIgfSwgMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pbmNsdWRlcygnYWJjZCcsICdiYycpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbmNsdWRlcyhjb2xsZWN0aW9uLCB2YWx1ZSwgZnJvbUluZGV4LCBndWFyZCkge1xuICAgICAgY29sbGVjdGlvbiA9IGlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pID8gY29sbGVjdGlvbiA6IHZhbHVlcyhjb2xsZWN0aW9uKTtcbiAgICAgIGZyb21JbmRleCA9IChmcm9tSW5kZXggJiYgIWd1YXJkKSA/IHRvSW50ZWdlcihmcm9tSW5kZXgpIDogMDtcblxuICAgICAgdmFyIGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xuICAgICAgaWYgKGZyb21JbmRleCA8IDApIHtcbiAgICAgICAgZnJvbUluZGV4ID0gbmF0aXZlTWF4KGxlbmd0aCArIGZyb21JbmRleCwgMCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNTdHJpbmcoY29sbGVjdGlvbilcbiAgICAgICAgPyAoZnJvbUluZGV4IDw9IGxlbmd0aCAmJiBjb2xsZWN0aW9uLmluZGV4T2YodmFsdWUsIGZyb21JbmRleCkgPiAtMSlcbiAgICAgICAgOiAoISFsZW5ndGggJiYgYmFzZUluZGV4T2YoY29sbGVjdGlvbiwgdmFsdWUsIGZyb21JbmRleCkgPiAtMSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW52b2tlcyB0aGUgbWV0aG9kIGF0IGBwYXRoYCBvZiBlYWNoIGVsZW1lbnQgaW4gYGNvbGxlY3Rpb25gLCByZXR1cm5pbmdcbiAgICAgKiBhbiBhcnJheSBvZiB0aGUgcmVzdWx0cyBvZiBlYWNoIGludm9rZWQgbWV0aG9kLiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHNcbiAgICAgKiBhcmUgcHJvdmlkZWQgdG8gZWFjaCBpbnZva2VkIG1ldGhvZC4gSWYgYHBhdGhgIGlzIGEgZnVuY3Rpb24sIGl0J3MgaW52b2tlZFxuICAgICAqIGZvciwgYW5kIGB0aGlzYCBib3VuZCB0bywgZWFjaCBlbGVtZW50IGluIGBjb2xsZWN0aW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7QXJyYXl8RnVuY3Rpb258c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBtZXRob2QgdG8gaW52b2tlIG9yXG4gICAgICogIHRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgZWFjaCBtZXRob2Qgd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHJlc3VsdHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW52b2tlTWFwKFtbNSwgMSwgN10sIFszLCAyLCAxXV0sICdzb3J0Jyk7XG4gICAgICogLy8gPT4gW1sxLCA1LCA3XSwgWzEsIDIsIDNdXVxuICAgICAqXG4gICAgICogXy5pbnZva2VNYXAoWzEyMywgNDU2XSwgU3RyaW5nLnByb3RvdHlwZS5zcGxpdCwgJycpO1xuICAgICAqIC8vID0+IFtbJzEnLCAnMicsICczJ10sIFsnNCcsICc1JywgJzYnXV1cbiAgICAgKi9cbiAgICB2YXIgaW52b2tlTWFwID0gYmFzZVJlc3QoZnVuY3Rpb24oY29sbGVjdGlvbiwgcGF0aCwgYXJncykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgaXNGdW5jID0gdHlwZW9mIHBhdGggPT0gJ2Z1bmN0aW9uJyxcbiAgICAgICAgICByZXN1bHQgPSBpc0FycmF5TGlrZShjb2xsZWN0aW9uKSA/IEFycmF5KGNvbGxlY3Rpb24ubGVuZ3RoKSA6IFtdO1xuXG4gICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXN1bHRbKytpbmRleF0gPSBpc0Z1bmMgPyBhcHBseShwYXRoLCB2YWx1ZSwgYXJncykgOiBiYXNlSW52b2tlKHZhbHVlLCBwYXRoLCBhcmdzKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIGtleXMgZ2VuZXJhdGVkIGZyb20gdGhlIHJlc3VsdHMgb2YgcnVubmluZ1xuICAgICAqIGVhY2ggZWxlbWVudCBvZiBgY29sbGVjdGlvbmAgdGhydSBgaXRlcmF0ZWVgLiBUaGUgY29ycmVzcG9uZGluZyB2YWx1ZSBvZlxuICAgICAqIGVhY2gga2V5IGlzIHRoZSBsYXN0IGVsZW1lbnQgcmVzcG9uc2libGUgZm9yIGdlbmVyYXRpbmcgdGhlIGtleS4gVGhlXG4gICAgICogaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgdG8gdHJhbnNmb3JtIGtleXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY29tcG9zZWQgYWdncmVnYXRlIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gW1xuICAgICAqICAgeyAnZGlyJzogJ2xlZnQnLCAnY29kZSc6IDk3IH0sXG4gICAgICogICB7ICdkaXInOiAncmlnaHQnLCAnY29kZSc6IDEwMCB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8ua2V5QnkoYXJyYXksIGZ1bmN0aW9uKG8pIHtcbiAgICAgKiAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKG8uY29kZSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4geyAnYSc6IHsgJ2Rpcic6ICdsZWZ0JywgJ2NvZGUnOiA5NyB9LCAnZCc6IHsgJ2Rpcic6ICdyaWdodCcsICdjb2RlJzogMTAwIH0gfVxuICAgICAqXG4gICAgICogXy5rZXlCeShhcnJheSwgJ2RpcicpO1xuICAgICAqIC8vID0+IHsgJ2xlZnQnOiB7ICdkaXInOiAnbGVmdCcsICdjb2RlJzogOTcgfSwgJ3JpZ2h0JzogeyAnZGlyJzogJ3JpZ2h0JywgJ2NvZGUnOiAxMDAgfSB9XG4gICAgICovXG4gICAgdmFyIGtleUJ5ID0gY3JlYXRlQWdncmVnYXRvcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgIGJhc2VBc3NpZ25WYWx1ZShyZXN1bHQsIGtleSwgdmFsdWUpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB2YWx1ZXMgYnkgcnVubmluZyBlYWNoIGVsZW1lbnQgaW4gYGNvbGxlY3Rpb25gIHRocnVcbiAgICAgKiBgaXRlcmF0ZWVgLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czpcbiAgICAgKiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiBNYW55IGxvZGFzaCBtZXRob2RzIGFyZSBndWFyZGVkIHRvIHdvcmsgYXMgaXRlcmF0ZWVzIGZvciBtZXRob2RzIGxpa2VcbiAgICAgKiBgXy5ldmVyeWAsIGBfLmZpbHRlcmAsIGBfLm1hcGAsIGBfLm1hcFZhbHVlc2AsIGBfLnJlamVjdGAsIGFuZCBgXy5zb21lYC5cbiAgICAgKlxuICAgICAqIFRoZSBndWFyZGVkIG1ldGhvZHMgYXJlOlxuICAgICAqIGBhcnlgLCBgY2h1bmtgLCBgY3VycnlgLCBgY3VycnlSaWdodGAsIGBkcm9wYCwgYGRyb3BSaWdodGAsIGBldmVyeWAsXG4gICAgICogYGZpbGxgLCBgaW52ZXJ0YCwgYHBhcnNlSW50YCwgYHJhbmRvbWAsIGByYW5nZWAsIGByYW5nZVJpZ2h0YCwgYHJlcGVhdGAsXG4gICAgICogYHNhbXBsZVNpemVgLCBgc2xpY2VgLCBgc29tZWAsIGBzb3J0QnlgLCBgc3BsaXRgLCBgdGFrZWAsIGB0YWtlUmlnaHRgLFxuICAgICAqIGB0ZW1wbGF0ZWAsIGB0cmltYCwgYHRyaW1FbmRgLCBgdHJpbVN0YXJ0YCwgYW5kIGB3b3Jkc2BcbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBfLm1hcChbNCwgOF0sIHNxdWFyZSk7XG4gICAgICogLy8gPT4gWzE2LCA2NF1cbiAgICAgKlxuICAgICAqIF8ubWFwKHsgJ2EnOiA0LCAnYic6IDggfSwgc3F1YXJlKTtcbiAgICAgKiAvLyA9PiBbMTYsIDY0XSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5tYXAodXNlcnMsICd1c2VyJyk7XG4gICAgICogLy8gPT4gWydiYXJuZXknLCAnZnJlZCddXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheU1hcCA6IGJhc2VNYXA7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc29ydEJ5YCBleGNlcHQgdGhhdCBpdCBhbGxvd3Mgc3BlY2lmeWluZyB0aGUgc29ydFxuICAgICAqIG9yZGVycyBvZiB0aGUgaXRlcmF0ZWVzIHRvIHNvcnQgYnkuIElmIGBvcmRlcnNgIGlzIHVuc3BlY2lmaWVkLCBhbGwgdmFsdWVzXG4gICAgICogYXJlIHNvcnRlZCBpbiBhc2NlbmRpbmcgb3JkZXIuIE90aGVyd2lzZSwgc3BlY2lmeSBhbiBvcmRlciBvZiBcImRlc2NcIiBmb3JcbiAgICAgKiBkZXNjZW5kaW5nIG9yIFwiYXNjXCIgZm9yIGFzY2VuZGluZyBzb3J0IG9yZGVyIG9mIGNvcnJlc3BvbmRpbmcgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtBcnJheVtdfEZ1bmN0aW9uW118T2JqZWN0W118c3RyaW5nW119IFtpdGVyYXRlZXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgaXRlcmF0ZWVzIHRvIHNvcnQgYnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gW29yZGVyc10gVGhlIHNvcnQgb3JkZXJzIG9mIGBpdGVyYXRlZXNgLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLnJlZHVjZWAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc29ydGVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0OCB9LFxuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzQgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIFNvcnQgYnkgYHVzZXJgIGluIGFzY2VuZGluZyBvcmRlciBhbmQgYnkgYGFnZWAgaW4gZGVzY2VuZGluZyBvcmRlci5cbiAgICAgKiBfLm9yZGVyQnkodXNlcnMsIFsndXNlcicsICdhZ2UnXSwgWydhc2MnLCAnZGVzYyddKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydiYXJuZXknLCAzNl0sIFsnYmFybmV5JywgMzRdLCBbJ2ZyZWQnLCA0OF0sIFsnZnJlZCcsIDQwXV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvcmRlckJ5KGNvbGxlY3Rpb24sIGl0ZXJhdGVlcywgb3JkZXJzLCBndWFyZCkge1xuICAgICAgaWYgKGNvbGxlY3Rpb24gPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBpZiAoIWlzQXJyYXkoaXRlcmF0ZWVzKSkge1xuICAgICAgICBpdGVyYXRlZXMgPSBpdGVyYXRlZXMgPT0gbnVsbCA/IFtdIDogW2l0ZXJhdGVlc107XG4gICAgICB9XG4gICAgICBvcmRlcnMgPSBndWFyZCA/IHVuZGVmaW5lZCA6IG9yZGVycztcbiAgICAgIGlmICghaXNBcnJheShvcmRlcnMpKSB7XG4gICAgICAgIG9yZGVycyA9IG9yZGVycyA9PSBudWxsID8gW10gOiBbb3JkZXJzXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlT3JkZXJCeShjb2xsZWN0aW9uLCBpdGVyYXRlZXMsIG9yZGVycyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBlbGVtZW50cyBzcGxpdCBpbnRvIHR3byBncm91cHMsIHRoZSBmaXJzdCBvZiB3aGljaFxuICAgICAqIGNvbnRhaW5zIGVsZW1lbnRzIGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvciwgdGhlIHNlY29uZCBvZiB3aGljaFxuICAgICAqIGNvbnRhaW5zIGVsZW1lbnRzIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5IGZvci4gVGhlIHByZWRpY2F0ZSBpc1xuICAgICAqIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWdlJzogMzYsICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FnZSc6IDEsICAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLnBhcnRpdGlvbih1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ2ZyZWQnXSwgWydiYXJuZXknLCAncGViYmxlcyddXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnBhcnRpdGlvbih1c2VycywgeyAnYWdlJzogMSwgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ3BlYmJsZXMnXSwgWydiYXJuZXknLCAnZnJlZCddXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ucGFydGl0aW9uKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgW1snYmFybmV5JywgJ3BlYmJsZXMnXSwgWydmcmVkJ11dXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnBhcnRpdGlvbih1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ2ZyZWQnXSwgWydiYXJuZXknLCAncGViYmxlcyddXVxuICAgICAqL1xuICAgIHZhciBwYXJ0aXRpb24gPSBjcmVhdGVBZ2dyZWdhdG9yKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgcmVzdWx0W2tleSA/IDAgOiAxXS5wdXNoKHZhbHVlKTtcbiAgICB9LCBmdW5jdGlvbigpIHsgcmV0dXJuIFtbXSwgW11dOyB9KTtcblxuICAgIC8qKlxuICAgICAqIFJlZHVjZXMgYGNvbGxlY3Rpb25gIHRvIGEgdmFsdWUgd2hpY2ggaXMgdGhlIGFjY3VtdWxhdGVkIHJlc3VsdCBvZiBydW5uaW5nXG4gICAgICogZWFjaCBlbGVtZW50IGluIGBjb2xsZWN0aW9uYCB0aHJ1IGBpdGVyYXRlZWAsIHdoZXJlIGVhY2ggc3VjY2Vzc2l2ZVxuICAgICAqIGludm9jYXRpb24gaXMgc3VwcGxpZWQgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgcHJldmlvdXMuIElmIGBhY2N1bXVsYXRvcmBcbiAgICAgKiBpcyBub3QgZ2l2ZW4sIHRoZSBmaXJzdCBlbGVtZW50IG9mIGBjb2xsZWN0aW9uYCBpcyB1c2VkIGFzIHRoZSBpbml0aWFsXG4gICAgICogdmFsdWUuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggZm91ciBhcmd1bWVudHM6XG4gICAgICogKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqIE1hbnkgbG9kYXNoIG1ldGhvZHMgYXJlIGd1YXJkZWQgdG8gd29yayBhcyBpdGVyYXRlZXMgZm9yIG1ldGhvZHMgbGlrZVxuICAgICAqIGBfLnJlZHVjZWAsIGBfLnJlZHVjZVJpZ2h0YCwgYW5kIGBfLnRyYW5zZm9ybWAuXG4gICAgICpcbiAgICAgKiBUaGUgZ3VhcmRlZCBtZXRob2RzIGFyZTpcbiAgICAgKiBgYXNzaWduYCwgYGRlZmF1bHRzYCwgYGRlZmF1bHRzRGVlcGAsIGBpbmNsdWRlc2AsIGBtZXJnZWAsIGBvcmRlckJ5YCxcbiAgICAgKiBhbmQgYHNvcnRCeWBcbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW2FjY3VtdWxhdG9yXSBUaGUgaW5pdGlhbCB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAgICogQHNlZSBfLnJlZHVjZVJpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucmVkdWNlKFsxLCAyXSwgZnVuY3Rpb24oc3VtLCBuKSB7XG4gICAgICogICByZXR1cm4gc3VtICsgbjtcbiAgICAgKiB9LCAwKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLnJlZHVjZSh7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDEgfSwgZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICogICAocmVzdWx0W3ZhbHVlXSB8fCAocmVzdWx0W3ZhbHVlXSA9IFtdKSkucHVzaChrZXkpO1xuICAgICAqICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgKiB9LCB7fSk7XG4gICAgICogLy8gPT4geyAnMSc6IFsnYScsICdjJ10sICcyJzogWydiJ10gfSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlZHVjZShjb2xsZWN0aW9uLCBpdGVyYXRlZSwgYWNjdW11bGF0b3IpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5UmVkdWNlIDogYmFzZVJlZHVjZSxcbiAgICAgICAgICBpbml0QWNjdW0gPSBhcmd1bWVudHMubGVuZ3RoIDwgMztcblxuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDQpLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtLCBiYXNlRWFjaCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5yZWR1Y2VgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2ZcbiAgICAgKiBgY29sbGVjdGlvbmAgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIFRoZSBpbml0aWFsIHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAgICAgKiBAc2VlIF8ucmVkdWNlXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFtbMCwgMV0sIFsyLCAzXSwgWzQsIDVdXTtcbiAgICAgKlxuICAgICAqIF8ucmVkdWNlUmlnaHQoYXJyYXksIGZ1bmN0aW9uKGZsYXR0ZW5lZCwgb3RoZXIpIHtcbiAgICAgKiAgIHJldHVybiBmbGF0dGVuZWQuY29uY2F0KG90aGVyKTtcbiAgICAgKiB9LCBbXSk7XG4gICAgICogLy8gPT4gWzQsIDUsIDIsIDMsIDAsIDFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVkdWNlUmlnaHQoY29sbGVjdGlvbiwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVJlZHVjZVJpZ2h0IDogYmFzZVJlZHVjZSxcbiAgICAgICAgICBpbml0QWNjdW0gPSBhcmd1bWVudHMubGVuZ3RoIDwgMztcblxuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDQpLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtLCBiYXNlRWFjaFJpZ2h0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8uZmlsdGVyYDsgdGhpcyBtZXRob2QgcmV0dXJucyB0aGUgZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gXG4gICAgICogdGhhdCBgcHJlZGljYXRlYCBkb2VzICoqbm90KiogcmV0dXJuIHRydXRoeSBmb3IuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmlsdGVyZWQgYXJyYXkuXG4gICAgICogQHNlZSBfLmZpbHRlclxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLnJlamVjdCh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gIW8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnJlamVjdCh1c2VycywgeyAnYWdlJzogNDAsICdhY3RpdmUnOiB0cnVlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnJlamVjdCh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnJlamVjdCh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZWplY3QoY29sbGVjdGlvbiwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheUZpbHRlciA6IGJhc2VGaWx0ZXI7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBuZWdhdGUoZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgYSByYW5kb20gZWxlbWVudCBmcm9tIGBjb2xsZWN0aW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2FtcGxlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByYW5kb20gZWxlbWVudC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zYW1wbGUoWzEsIDIsIDMsIDRdKTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2FtcGxlKGNvbGxlY3Rpb24pIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5U2FtcGxlIDogYmFzZVNhbXBsZTtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgYG5gIHJhbmRvbSBlbGVtZW50cyBhdCB1bmlxdWUga2V5cyBmcm9tIGBjb2xsZWN0aW9uYCB1cCB0byB0aGVcbiAgICAgKiBzaXplIG9mIGBjb2xsZWN0aW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2FtcGxlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0xXSBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIHNhbXBsZS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZG9tIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNhbXBsZVNpemUoWzEsIDIsIDNdLCAyKTtcbiAgICAgKiAvLyA9PiBbMywgMV1cbiAgICAgKlxuICAgICAqIF8uc2FtcGxlU2l6ZShbMSwgMiwgM10sIDQpO1xuICAgICAqIC8vID0+IFsyLCAzLCAxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNhbXBsZVNpemUoY29sbGVjdGlvbiwgbiwgZ3VhcmQpIHtcbiAgICAgIGlmICgoZ3VhcmQgPyBpc0l0ZXJhdGVlQ2FsbChjb2xsZWN0aW9uLCBuLCBndWFyZCkgOiBuID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIG4gPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbiA9IHRvSW50ZWdlcihuKTtcbiAgICAgIH1cbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5U2FtcGxlU2l6ZSA6IGJhc2VTYW1wbGVTaXplO1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBzaHVmZmxlZCB2YWx1ZXMsIHVzaW5nIGEgdmVyc2lvbiBvZiB0aGVcbiAgICAgKiBbRmlzaGVyLVlhdGVzIHNodWZmbGVdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Zpc2hlci1ZYXRlc19zaHVmZmxlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2h1ZmZsZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBzaHVmZmxlZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zaHVmZmxlKFsxLCAyLCAzLCA0XSk7XG4gICAgICogLy8gPT4gWzQsIDEsIDMsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2h1ZmZsZShjb2xsZWN0aW9uKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVNodWZmbGUgOiBiYXNlU2h1ZmZsZTtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHNpemUgb2YgYGNvbGxlY3Rpb25gIGJ5IHJldHVybmluZyBpdHMgbGVuZ3RoIGZvciBhcnJheS1saWtlXG4gICAgICogdmFsdWVzIG9yIHRoZSBudW1iZXIgb2Ygb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgZm9yIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbGxlY3Rpb24gc2l6ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zaXplKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy5zaXplKHsgJ2EnOiAxLCAnYic6IDIgfSk7XG4gICAgICogLy8gPT4gMlxuICAgICAqXG4gICAgICogXy5zaXplKCdwZWJibGVzJyk7XG4gICAgICogLy8gPT4gN1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNpemUoY29sbGVjdGlvbikge1xuICAgICAgaWYgKGNvbGxlY3Rpb24gPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cbiAgICAgIGlmIChpc0FycmF5TGlrZShjb2xsZWN0aW9uKSkge1xuICAgICAgICByZXR1cm4gaXNTdHJpbmcoY29sbGVjdGlvbikgPyBzdHJpbmdTaXplKGNvbGxlY3Rpb24pIDogY29sbGVjdGlvbi5sZW5ndGg7XG4gICAgICB9XG4gICAgICB2YXIgdGFnID0gZ2V0VGFnKGNvbGxlY3Rpb24pO1xuICAgICAgaWYgKHRhZyA9PSBtYXBUYWcgfHwgdGFnID09IHNldFRhZykge1xuICAgICAgICByZXR1cm4gY29sbGVjdGlvbi5zaXplO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VLZXlzKGNvbGxlY3Rpb24pLmxlbmd0aDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yICoqYW55KiogZWxlbWVudCBvZiBgY29sbGVjdGlvbmAuXG4gICAgICogSXRlcmF0aW9uIGlzIHN0b3BwZWQgb25jZSBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeS4gVGhlIHByZWRpY2F0ZSBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbnkgZWxlbWVudCBwYXNzZXMgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvbWUoW251bGwsIDAsICd5ZXMnLCBmYWxzZV0sIEJvb2xlYW4pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnNvbWUodXNlcnMsIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zb21lKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zb21lKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvbWUoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBndWFyZCkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlTb21lIDogYmFzZVNvbWU7XG4gICAgICBpZiAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBndWFyZCkpIHtcbiAgICAgICAgcHJlZGljYXRlID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBlbGVtZW50cywgc29ydGVkIGluIGFzY2VuZGluZyBvcmRlciBieSB0aGUgcmVzdWx0cyBvZlxuICAgICAqIHJ1bm5pbmcgZWFjaCBlbGVtZW50IGluIGEgY29sbGVjdGlvbiB0aHJ1IGVhY2ggaXRlcmF0ZWUuIFRoaXMgbWV0aG9kXG4gICAgICogcGVyZm9ybXMgYSBzdGFibGUgc29ydCwgdGhhdCBpcywgaXQgcHJlc2VydmVzIHRoZSBvcmlnaW5hbCBzb3J0IG9yZGVyIG9mXG4gICAgICogZXF1YWwgZWxlbWVudHMuIFRoZSBpdGVyYXRlZXMgYXJlIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW2l0ZXJhdGVlcz1bXy5pZGVudGl0eV1dXG4gICAgICogIFRoZSBpdGVyYXRlZXMgdG8gc29ydCBieS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBzb3J0ZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQ4IH0sXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDAgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM0IH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5zb3J0QnkodXNlcnMsIFtmdW5jdGlvbihvKSB7IHJldHVybiBvLnVzZXI7IH1dKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydiYXJuZXknLCAzNl0sIFsnYmFybmV5JywgMzRdLCBbJ2ZyZWQnLCA0OF0sIFsnZnJlZCcsIDQwXV1cbiAgICAgKlxuICAgICAqIF8uc29ydEJ5KHVzZXJzLCBbJ3VzZXInLCAnYWdlJ10pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ2Jhcm5leScsIDM0XSwgWydiYXJuZXknLCAzNl0sIFsnZnJlZCcsIDQwXSwgWydmcmVkJywgNDhdXVxuICAgICAqL1xuICAgIHZhciBzb3J0QnkgPSBiYXNlUmVzdChmdW5jdGlvbihjb2xsZWN0aW9uLCBpdGVyYXRlZXMpIHtcbiAgICAgIGlmIChjb2xsZWN0aW9uID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIGxlbmd0aCA9IGl0ZXJhdGVlcy5sZW5ndGg7XG4gICAgICBpZiAobGVuZ3RoID4gMSAmJiBpc0l0ZXJhdGVlQ2FsbChjb2xsZWN0aW9uLCBpdGVyYXRlZXNbMF0sIGl0ZXJhdGVlc1sxXSkpIHtcbiAgICAgICAgaXRlcmF0ZWVzID0gW107XG4gICAgICB9IGVsc2UgaWYgKGxlbmd0aCA+IDIgJiYgaXNJdGVyYXRlZUNhbGwoaXRlcmF0ZWVzWzBdLCBpdGVyYXRlZXNbMV0sIGl0ZXJhdGVlc1syXSkpIHtcbiAgICAgICAgaXRlcmF0ZWVzID0gW2l0ZXJhdGVlc1swXV07XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZU9yZGVyQnkoY29sbGVjdGlvbiwgYmFzZUZsYXR0ZW4oaXRlcmF0ZWVzLCAxKSwgW10pO1xuICAgIH0pO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgdGltZXN0YW1wIG9mIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRoYXQgaGF2ZSBlbGFwc2VkIHNpbmNlXG4gICAgICogdGhlIFVuaXggZXBvY2ggKDEgSmFudWFyeSAxOTcwIDAwOjAwOjAwIFVUQykuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi40LjBcbiAgICAgKiBAY2F0ZWdvcnkgRGF0ZVxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRpbWVzdGFtcC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWZlcihmdW5jdGlvbihzdGFtcCkge1xuICAgICAqICAgY29uc29sZS5sb2coXy5ub3coKSAtIHN0YW1wKTtcbiAgICAgKiB9LCBfLm5vdygpKTtcbiAgICAgKiAvLyA9PiBMb2dzIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGl0IHRvb2sgZm9yIHRoZSBkZWZlcnJlZCBpbnZvY2F0aW9uLlxuICAgICAqL1xuICAgIHZhciBub3cgPSBjdHhOb3cgfHwgZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gcm9vdC5EYXRlLm5vdygpO1xuICAgIH07XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8uYmVmb3JlYDsgdGhpcyBtZXRob2QgY3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlc1xuICAgICAqIGBmdW5jYCBvbmNlIGl0J3MgY2FsbGVkIGBuYCBvciBtb3JlIHRpbWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiBjYWxscyBiZWZvcmUgYGZ1bmNgIGlzIGludm9rZWQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVzdHJpY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcmVzdHJpY3RlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHNhdmVzID0gWydwcm9maWxlJywgJ3NldHRpbmdzJ107XG4gICAgICpcbiAgICAgKiB2YXIgZG9uZSA9IF8uYWZ0ZXIoc2F2ZXMubGVuZ3RoLCBmdW5jdGlvbigpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKCdkb25lIHNhdmluZyEnKTtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIF8uZm9yRWFjaChzYXZlcywgZnVuY3Rpb24odHlwZSkge1xuICAgICAqICAgYXN5bmNTYXZlKHsgJ3R5cGUnOiB0eXBlLCAnY29tcGxldGUnOiBkb25lIH0pO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgJ2RvbmUgc2F2aW5nIScgYWZ0ZXIgdGhlIHR3byBhc3luYyBzYXZlcyBoYXZlIGNvbXBsZXRlZC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhZnRlcihuLCBmdW5jKSB7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICBuID0gdG9JbnRlZ2VyKG4pO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoLS1uIDwgMSkge1xuICAgICAgICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2AsIHdpdGggdXAgdG8gYG5gIGFyZ3VtZW50cyxcbiAgICAgKiBpZ25vcmluZyBhbnkgYWRkaXRpb25hbCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjYXAgYXJndW1lbnRzIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249ZnVuYy5sZW5ndGhdIFRoZSBhcml0eSBjYXAuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjYXBwZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubWFwKFsnNicsICc4JywgJzEwJ10sIF8uYXJ5KHBhcnNlSW50LCAxKSk7XG4gICAgICogLy8gPT4gWzYsIDgsIDEwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFyeShmdW5jLCBuLCBndWFyZCkge1xuICAgICAgbiA9IGd1YXJkID8gdW5kZWZpbmVkIDogbjtcbiAgICAgIG4gPSAoZnVuYyAmJiBuID09IG51bGwpID8gZnVuYy5sZW5ndGggOiBuO1xuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9BUllfRkxBRywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBuKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCwgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgYW5kIGFyZ3VtZW50c1xuICAgICAqIG9mIHRoZSBjcmVhdGVkIGZ1bmN0aW9uLCB3aGlsZSBpdCdzIGNhbGxlZCBsZXNzIHRoYW4gYG5gIHRpbWVzLiBTdWJzZXF1ZW50XG4gICAgICogY2FsbHMgdG8gdGhlIGNyZWF0ZWQgZnVuY3Rpb24gcmV0dXJuIHRoZSByZXN1bHQgb2YgdGhlIGxhc3QgYGZ1bmNgIGludm9jYXRpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIGNhbGxzIGF0IHdoaWNoIGBmdW5jYCBpcyBubyBsb25nZXIgaW52b2tlZC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byByZXN0cmljdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyByZXN0cmljdGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBqUXVlcnkoZWxlbWVudCkub24oJ2NsaWNrJywgXy5iZWZvcmUoNSwgYWRkQ29udGFjdFRvTGlzdCkpO1xuICAgICAqIC8vID0+IEFsbG93cyBhZGRpbmcgdXAgdG8gNCBjb250YWN0cyB0byB0aGUgbGlzdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiZWZvcmUobiwgZnVuYykge1xuICAgICAgdmFyIHJlc3VsdDtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIG4gPSB0b0ludGVnZXIobik7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICgtLW4gPiAwKSB7XG4gICAgICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChuIDw9IDEpIHtcbiAgICAgICAgICBmdW5jID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIGB0aGlzQXJnYFxuICAgICAqIGFuZCBgcGFydGlhbHNgIHByZXBlbmRlZCB0byB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzLlxuICAgICAqXG4gICAgICogVGhlIGBfLmJpbmQucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpYyBidWlsZHMsXG4gICAgICogbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBuYXRpdmUgYEZ1bmN0aW9uI2JpbmRgLCB0aGlzIG1ldGhvZCBkb2Vzbid0IHNldCB0aGUgXCJsZW5ndGhcIlxuICAgICAqIHByb3BlcnR5IG9mIGJvdW5kIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGJpbmQuXG4gICAgICogQHBhcmFtIHsqfSB0aGlzQXJnIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gYmUgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYm91bmQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGdyZWV0KGdyZWV0aW5nLCBwdW5jdHVhdGlvbikge1xuICAgICAqICAgcmV0dXJuIGdyZWV0aW5nICsgJyAnICsgdGhpcy51c2VyICsgcHVuY3R1YXRpb247XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ3VzZXInOiAnZnJlZCcgfTtcbiAgICAgKlxuICAgICAqIHZhciBib3VuZCA9IF8uYmluZChncmVldCwgb2JqZWN0LCAnaGknKTtcbiAgICAgKiBib3VuZCgnIScpO1xuICAgICAqIC8vID0+ICdoaSBmcmVkISdcbiAgICAgKlxuICAgICAqIC8vIEJvdW5kIHdpdGggcGxhY2Vob2xkZXJzLlxuICAgICAqIHZhciBib3VuZCA9IF8uYmluZChncmVldCwgb2JqZWN0LCBfLCAnIScpO1xuICAgICAqIGJvdW5kKCdoaScpO1xuICAgICAqIC8vID0+ICdoaSBmcmVkISdcbiAgICAgKi9cbiAgICB2YXIgYmluZCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIHRoaXNBcmcsIHBhcnRpYWxzKSB7XG4gICAgICB2YXIgYml0bWFzayA9IFdSQVBfQklORF9GTEFHO1xuICAgICAgaWYgKHBhcnRpYWxzLmxlbmd0aCkge1xuICAgICAgICB2YXIgaG9sZGVycyA9IHJlcGxhY2VIb2xkZXJzKHBhcnRpYWxzLCBnZXRIb2xkZXIoYmluZCkpO1xuICAgICAgICBiaXRtYXNrIHw9IFdSQVBfUEFSVElBTF9GTEFHO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgYml0bWFzaywgdGhpc0FyZywgcGFydGlhbHMsIGhvbGRlcnMpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyB0aGUgbWV0aG9kIGF0IGBvYmplY3Rba2V5XWAgd2l0aCBgcGFydGlhbHNgXG4gICAgICogcHJlcGVuZGVkIHRvIHRoZSBhcmd1bWVudHMgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBUaGlzIG1ldGhvZCBkaWZmZXJzIGZyb20gYF8uYmluZGAgYnkgYWxsb3dpbmcgYm91bmQgZnVuY3Rpb25zIHRvIHJlZmVyZW5jZVxuICAgICAqIG1ldGhvZHMgdGhhdCBtYXkgYmUgcmVkZWZpbmVkIG9yIGRvbid0IHlldCBleGlzdC4gU2VlXG4gICAgICogW1BldGVyIE1pY2hhdXgncyBhcnRpY2xlXShodHRwOi8vcGV0ZXIubWljaGF1eC5jYS9hcnRpY2xlcy9sYXp5LWZ1bmN0aW9uLWRlZmluaXRpb24tcGF0dGVybilcbiAgICAgKiBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqXG4gICAgICogVGhlIGBfLmJpbmRLZXkucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpY1xuICAgICAqIGJ1aWxkcywgbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMTAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnZva2UgdGhlIG1ldGhvZCBvbi5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIG1ldGhvZC5cbiAgICAgKiBAcGFyYW0gey4uLip9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBiZSBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBib3VuZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHtcbiAgICAgKiAgICd1c2VyJzogJ2ZyZWQnLFxuICAgICAqICAgJ2dyZWV0JzogZnVuY3Rpb24oZ3JlZXRpbmcsIHB1bmN0dWF0aW9uKSB7XG4gICAgICogICAgIHJldHVybiBncmVldGluZyArICcgJyArIHRoaXMudXNlciArIHB1bmN0dWF0aW9uO1xuICAgICAqICAgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiB2YXIgYm91bmQgPSBfLmJpbmRLZXkob2JqZWN0LCAnZ3JlZXQnLCAnaGknKTtcbiAgICAgKiBib3VuZCgnIScpO1xuICAgICAqIC8vID0+ICdoaSBmcmVkISdcbiAgICAgKlxuICAgICAqIG9iamVjdC5ncmVldCA9IGZ1bmN0aW9uKGdyZWV0aW5nLCBwdW5jdHVhdGlvbikge1xuICAgICAqICAgcmV0dXJuIGdyZWV0aW5nICsgJ3lhICcgKyB0aGlzLnVzZXIgKyBwdW5jdHVhdGlvbjtcbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogYm91bmQoJyEnKTtcbiAgICAgKiAvLyA9PiAnaGl5YSBmcmVkISdcbiAgICAgKlxuICAgICAqIC8vIEJvdW5kIHdpdGggcGxhY2Vob2xkZXJzLlxuICAgICAqIHZhciBib3VuZCA9IF8uYmluZEtleShvYmplY3QsICdncmVldCcsIF8sICchJyk7XG4gICAgICogYm91bmQoJ2hpJyk7XG4gICAgICogLy8gPT4gJ2hpeWEgZnJlZCEnXG4gICAgICovXG4gICAgdmFyIGJpbmRLZXkgPSBiYXNlUmVzdChmdW5jdGlvbihvYmplY3QsIGtleSwgcGFydGlhbHMpIHtcbiAgICAgIHZhciBiaXRtYXNrID0gV1JBUF9CSU5EX0ZMQUcgfCBXUkFQX0JJTkRfS0VZX0ZMQUc7XG4gICAgICBpZiAocGFydGlhbHMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBob2xkZXJzID0gcmVwbGFjZUhvbGRlcnMocGFydGlhbHMsIGdldEhvbGRlcihiaW5kS2V5KSk7XG4gICAgICAgIGJpdG1hc2sgfD0gV1JBUF9QQVJUSUFMX0ZMQUc7XG4gICAgICB9XG4gICAgICByZXR1cm4gY3JlYXRlV3JhcChrZXksIGJpdG1hc2ssIG9iamVjdCwgcGFydGlhbHMsIGhvbGRlcnMpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyBhcmd1bWVudHMgb2YgYGZ1bmNgIGFuZCBlaXRoZXIgaW52b2tlc1xuICAgICAqIGBmdW5jYCByZXR1cm5pbmcgaXRzIHJlc3VsdCwgaWYgYXQgbGVhc3QgYGFyaXR5YCBudW1iZXIgb2YgYXJndW1lbnRzIGhhdmVcbiAgICAgKiBiZWVuIHByb3ZpZGVkLCBvciByZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBhY2NlcHRzIHRoZSByZW1haW5pbmcgYGZ1bmNgXG4gICAgICogYXJndW1lbnRzLCBhbmQgc28gb24uIFRoZSBhcml0eSBvZiBgZnVuY2AgbWF5IGJlIHNwZWNpZmllZCBpZiBgZnVuYy5sZW5ndGhgXG4gICAgICogaXMgbm90IHN1ZmZpY2llbnQuXG4gICAgICpcbiAgICAgKiBUaGUgYF8uY3VycnkucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpYyBidWlsZHMsXG4gICAgICogbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcHJvdmlkZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGRvZXNuJ3Qgc2V0IHRoZSBcImxlbmd0aFwiIHByb3BlcnR5IG9mIGN1cnJpZWQgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY3VycnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcml0eT1mdW5jLmxlbmd0aF0gVGhlIGFyaXR5IG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGN1cnJpZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhYmMgPSBmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICogICByZXR1cm4gW2EsIGIsIGNdO1xuICAgICAqIH07XG4gICAgICpcbiAgICAgKiB2YXIgY3VycmllZCA9IF8uY3VycnkoYWJjKTtcbiAgICAgKlxuICAgICAqIGN1cnJpZWQoMSkoMikoMyk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiBjdXJyaWVkKDEsIDIpKDMpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogY3VycmllZCgxLCAyLCAzKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIC8vIEN1cnJpZWQgd2l0aCBwbGFjZWhvbGRlcnMuXG4gICAgICogY3VycmllZCgxKShfLCAzKSgyKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjdXJyeShmdW5jLCBhcml0eSwgZ3VhcmQpIHtcbiAgICAgIGFyaXR5ID0gZ3VhcmQgPyB1bmRlZmluZWQgOiBhcml0eTtcbiAgICAgIHZhciByZXN1bHQgPSBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfQ1VSUllfRkxBRywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGFyaXR5KTtcbiAgICAgIHJlc3VsdC5wbGFjZWhvbGRlciA9IGN1cnJ5LnBsYWNlaG9sZGVyO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmN1cnJ5YCBleGNlcHQgdGhhdCBhcmd1bWVudHMgYXJlIGFwcGxpZWQgdG8gYGZ1bmNgXG4gICAgICogaW4gdGhlIG1hbm5lciBvZiBgXy5wYXJ0aWFsUmlnaHRgIGluc3RlYWQgb2YgYF8ucGFydGlhbGAuXG4gICAgICpcbiAgICAgKiBUaGUgYF8uY3VycnlSaWdodC5wbGFjZWhvbGRlcmAgdmFsdWUsIHdoaWNoIGRlZmF1bHRzIHRvIGBfYCBpbiBtb25vbGl0aGljXG4gICAgICogYnVpbGRzLCBtYXkgYmUgdXNlZCBhcyBhIHBsYWNlaG9sZGVyIGZvciBwcm92aWRlZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgZG9lc24ndCBzZXQgdGhlIFwibGVuZ3RoXCIgcHJvcGVydHkgb2YgY3VycmllZCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjdXJyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5PWZ1bmMubGVuZ3RoXSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY3VycmllZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFiYyA9IGZ1bmN0aW9uKGEsIGIsIGMpIHtcbiAgICAgKiAgIHJldHVybiBbYSwgYiwgY107XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIHZhciBjdXJyaWVkID0gXy5jdXJyeVJpZ2h0KGFiYyk7XG4gICAgICpcbiAgICAgKiBjdXJyaWVkKDMpKDIpKDEpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogY3VycmllZCgyLCAzKSgxKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIGN1cnJpZWQoMSwgMiwgMyk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiAvLyBDdXJyaWVkIHdpdGggcGxhY2Vob2xkZXJzLlxuICAgICAqIGN1cnJpZWQoMykoMSwgXykoMik7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3VycnlSaWdodChmdW5jLCBhcml0eSwgZ3VhcmQpIHtcbiAgICAgIGFyaXR5ID0gZ3VhcmQgPyB1bmRlZmluZWQgOiBhcml0eTtcbiAgICAgIHZhciByZXN1bHQgPSBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfQ1VSUllfUklHSFRfRkxBRywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGFyaXR5KTtcbiAgICAgIHJlc3VsdC5wbGFjZWhvbGRlciA9IGN1cnJ5UmlnaHQucGxhY2Vob2xkZXI7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBkZWJvdW5jZWQgZnVuY3Rpb24gdGhhdCBkZWxheXMgaW52b2tpbmcgYGZ1bmNgIHVudGlsIGFmdGVyIGB3YWl0YFxuICAgICAqIG1pbGxpc2Vjb25kcyBoYXZlIGVsYXBzZWQgc2luY2UgdGhlIGxhc3QgdGltZSB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uIHdhc1xuICAgICAqIGludm9rZWQuIFRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gY29tZXMgd2l0aCBhIGBjYW5jZWxgIG1ldGhvZCB0byBjYW5jZWxcbiAgICAgKiBkZWxheWVkIGBmdW5jYCBpbnZvY2F0aW9ucyBhbmQgYSBgZmx1c2hgIG1ldGhvZCB0byBpbW1lZGlhdGVseSBpbnZva2UgdGhlbS5cbiAgICAgKiBQcm92aWRlIGBvcHRpb25zYCB0byBpbmRpY2F0ZSB3aGV0aGVyIGBmdW5jYCBzaG91bGQgYmUgaW52b2tlZCBvbiB0aGVcbiAgICAgKiBsZWFkaW5nIGFuZC9vciB0cmFpbGluZyBlZGdlIG9mIHRoZSBgd2FpdGAgdGltZW91dC4gVGhlIGBmdW5jYCBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aGUgbGFzdCBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIGRlYm91bmNlZCBmdW5jdGlvbi4gU3Vic2VxdWVudFxuICAgICAqIGNhbGxzIHRvIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gcmV0dXJuIHRoZSByZXN1bHQgb2YgdGhlIGxhc3QgYGZ1bmNgXG4gICAgICogaW52b2NhdGlvbi5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBJZiBgbGVhZGluZ2AgYW5kIGB0cmFpbGluZ2Agb3B0aW9ucyBhcmUgYHRydWVgLCBgZnVuY2AgaXNcbiAgICAgKiBpbnZva2VkIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0IG9ubHkgaWYgdGhlIGRlYm91bmNlZCBmdW5jdGlvblxuICAgICAqIGlzIGludm9rZWQgbW9yZSB0aGFuIG9uY2UgZHVyaW5nIHRoZSBgd2FpdGAgdGltZW91dC5cbiAgICAgKlxuICAgICAqIElmIGB3YWl0YCBpcyBgMGAgYW5kIGBsZWFkaW5nYCBpcyBgZmFsc2VgLCBgZnVuY2AgaW52b2NhdGlvbiBpcyBkZWZlcnJlZFxuICAgICAqIHVudGlsIHRvIHRoZSBuZXh0IHRpY2ssIHNpbWlsYXIgdG8gYHNldFRpbWVvdXRgIHdpdGggYSB0aW1lb3V0IG9mIGAwYC5cbiAgICAgKlxuICAgICAqIFNlZSBbRGF2aWQgQ29yYmFjaG8ncyBhcnRpY2xlXShodHRwczovL2Nzcy10cmlja3MuY29tL2RlYm91bmNpbmctdGhyb3R0bGluZy1leHBsYWluZWQtZXhhbXBsZXMvKVxuICAgICAqIGZvciBkZXRhaWxzIG92ZXIgdGhlIGRpZmZlcmVuY2VzIGJldHdlZW4gYF8uZGVib3VuY2VgIGFuZCBgXy50aHJvdHRsZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWJvdW5jZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3dhaXQ9MF0gVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVsYXkuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5sZWFkaW5nPWZhbHNlXVxuICAgICAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSBsZWFkaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLm1heFdhaXRdXG4gICAgICogIFRoZSBtYXhpbXVtIHRpbWUgYGZ1bmNgIGlzIGFsbG93ZWQgdG8gYmUgZGVsYXllZCBiZWZvcmUgaXQncyBpbnZva2VkLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMudHJhaWxpbmc9dHJ1ZV1cbiAgICAgKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBkZWJvdW5jZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIC8vIEF2b2lkIGNvc3RseSBjYWxjdWxhdGlvbnMgd2hpbGUgdGhlIHdpbmRvdyBzaXplIGlzIGluIGZsdXguXG4gICAgICogalF1ZXJ5KHdpbmRvdykub24oJ3Jlc2l6ZScsIF8uZGVib3VuY2UoY2FsY3VsYXRlTGF5b3V0LCAxNTApKTtcbiAgICAgKlxuICAgICAqIC8vIEludm9rZSBgc2VuZE1haWxgIHdoZW4gY2xpY2tlZCwgZGVib3VuY2luZyBzdWJzZXF1ZW50IGNhbGxzLlxuICAgICAqIGpRdWVyeShlbGVtZW50KS5vbignY2xpY2snLCBfLmRlYm91bmNlKHNlbmRNYWlsLCAzMDAsIHtcbiAgICAgKiAgICdsZWFkaW5nJzogdHJ1ZSxcbiAgICAgKiAgICd0cmFpbGluZyc6IGZhbHNlXG4gICAgICogfSkpO1xuICAgICAqXG4gICAgICogLy8gRW5zdXJlIGBiYXRjaExvZ2AgaXMgaW52b2tlZCBvbmNlIGFmdGVyIDEgc2Vjb25kIG9mIGRlYm91bmNlZCBjYWxscy5cbiAgICAgKiB2YXIgZGVib3VuY2VkID0gXy5kZWJvdW5jZShiYXRjaExvZywgMjUwLCB7ICdtYXhXYWl0JzogMTAwMCB9KTtcbiAgICAgKiB2YXIgc291cmNlID0gbmV3IEV2ZW50U291cmNlKCcvc3RyZWFtJyk7XG4gICAgICogalF1ZXJ5KHNvdXJjZSkub24oJ21lc3NhZ2UnLCBkZWJvdW5jZWQpO1xuICAgICAqXG4gICAgICogLy8gQ2FuY2VsIHRoZSB0cmFpbGluZyBkZWJvdW5jZWQgaW52b2NhdGlvbi5cbiAgICAgKiBqUXVlcnkod2luZG93KS5vbigncG9wc3RhdGUnLCBkZWJvdW5jZWQuY2FuY2VsKTtcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkZWJvdW5jZShmdW5jLCB3YWl0LCBvcHRpb25zKSB7XG4gICAgICB2YXIgbGFzdEFyZ3MsXG4gICAgICAgICAgbGFzdFRoaXMsXG4gICAgICAgICAgbWF4V2FpdCxcbiAgICAgICAgICByZXN1bHQsXG4gICAgICAgICAgdGltZXJJZCxcbiAgICAgICAgICBsYXN0Q2FsbFRpbWUsXG4gICAgICAgICAgbGFzdEludm9rZVRpbWUgPSAwLFxuICAgICAgICAgIGxlYWRpbmcgPSBmYWxzZSxcbiAgICAgICAgICBtYXhpbmcgPSBmYWxzZSxcbiAgICAgICAgICB0cmFpbGluZyA9IHRydWU7XG5cbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHdhaXQgPSB0b051bWJlcih3YWl0KSB8fCAwO1xuICAgICAgaWYgKGlzT2JqZWN0KG9wdGlvbnMpKSB7XG4gICAgICAgIGxlYWRpbmcgPSAhIW9wdGlvbnMubGVhZGluZztcbiAgICAgICAgbWF4aW5nID0gJ21heFdhaXQnIGluIG9wdGlvbnM7XG4gICAgICAgIG1heFdhaXQgPSBtYXhpbmcgPyBuYXRpdmVNYXgodG9OdW1iZXIob3B0aW9ucy5tYXhXYWl0KSB8fCAwLCB3YWl0KSA6IG1heFdhaXQ7XG4gICAgICAgIHRyYWlsaW5nID0gJ3RyYWlsaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLnRyYWlsaW5nIDogdHJhaWxpbmc7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGludm9rZUZ1bmModGltZSkge1xuICAgICAgICB2YXIgYXJncyA9IGxhc3RBcmdzLFxuICAgICAgICAgICAgdGhpc0FyZyA9IGxhc3RUaGlzO1xuXG4gICAgICAgIGxhc3RBcmdzID0gbGFzdFRoaXMgPSB1bmRlZmluZWQ7XG4gICAgICAgIGxhc3RJbnZva2VUaW1lID0gdGltZTtcbiAgICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gbGVhZGluZ0VkZ2UodGltZSkge1xuICAgICAgICAvLyBSZXNldCBhbnkgYG1heFdhaXRgIHRpbWVyLlxuICAgICAgICBsYXN0SW52b2tlVGltZSA9IHRpbWU7XG4gICAgICAgIC8vIFN0YXJ0IHRoZSB0aW1lciBmb3IgdGhlIHRyYWlsaW5nIGVkZ2UuXG4gICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgICAgIC8vIEludm9rZSB0aGUgbGVhZGluZyBlZGdlLlxuICAgICAgICByZXR1cm4gbGVhZGluZyA/IGludm9rZUZ1bmModGltZSkgOiByZXN1bHQ7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHJlbWFpbmluZ1dhaXQodGltZSkge1xuICAgICAgICB2YXIgdGltZVNpbmNlTGFzdENhbGwgPSB0aW1lIC0gbGFzdENhbGxUaW1lLFxuICAgICAgICAgICAgdGltZVNpbmNlTGFzdEludm9rZSA9IHRpbWUgLSBsYXN0SW52b2tlVGltZSxcbiAgICAgICAgICAgIHRpbWVXYWl0aW5nID0gd2FpdCAtIHRpbWVTaW5jZUxhc3RDYWxsO1xuXG4gICAgICAgIHJldHVybiBtYXhpbmdcbiAgICAgICAgICA/IG5hdGl2ZU1pbih0aW1lV2FpdGluZywgbWF4V2FpdCAtIHRpbWVTaW5jZUxhc3RJbnZva2UpXG4gICAgICAgICAgOiB0aW1lV2FpdGluZztcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gc2hvdWxkSW52b2tlKHRpbWUpIHtcbiAgICAgICAgdmFyIHRpbWVTaW5jZUxhc3RDYWxsID0gdGltZSAtIGxhc3RDYWxsVGltZSxcbiAgICAgICAgICAgIHRpbWVTaW5jZUxhc3RJbnZva2UgPSB0aW1lIC0gbGFzdEludm9rZVRpbWU7XG5cbiAgICAgICAgLy8gRWl0aGVyIHRoaXMgaXMgdGhlIGZpcnN0IGNhbGwsIGFjdGl2aXR5IGhhcyBzdG9wcGVkIGFuZCB3ZSdyZSBhdCB0aGVcbiAgICAgICAgLy8gdHJhaWxpbmcgZWRnZSwgdGhlIHN5c3RlbSB0aW1lIGhhcyBnb25lIGJhY2t3YXJkcyBhbmQgd2UncmUgdHJlYXRpbmdcbiAgICAgICAgLy8gaXQgYXMgdGhlIHRyYWlsaW5nIGVkZ2UsIG9yIHdlJ3ZlIGhpdCB0aGUgYG1heFdhaXRgIGxpbWl0LlxuICAgICAgICByZXR1cm4gKGxhc3RDYWxsVGltZSA9PT0gdW5kZWZpbmVkIHx8ICh0aW1lU2luY2VMYXN0Q2FsbCA+PSB3YWl0KSB8fFxuICAgICAgICAgICh0aW1lU2luY2VMYXN0Q2FsbCA8IDApIHx8IChtYXhpbmcgJiYgdGltZVNpbmNlTGFzdEludm9rZSA+PSBtYXhXYWl0KSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHRpbWVyRXhwaXJlZCgpIHtcbiAgICAgICAgdmFyIHRpbWUgPSBub3coKTtcbiAgICAgICAgaWYgKHNob3VsZEludm9rZSh0aW1lKSkge1xuICAgICAgICAgIHJldHVybiB0cmFpbGluZ0VkZ2UodGltZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVzdGFydCB0aGUgdGltZXIuXG4gICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgcmVtYWluaW5nV2FpdCh0aW1lKSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHRyYWlsaW5nRWRnZSh0aW1lKSB7XG4gICAgICAgIHRpbWVySWQgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgLy8gT25seSBpbnZva2UgaWYgd2UgaGF2ZSBgbGFzdEFyZ3NgIHdoaWNoIG1lYW5zIGBmdW5jYCBoYXMgYmVlblxuICAgICAgICAvLyBkZWJvdW5jZWQgYXQgbGVhc3Qgb25jZS5cbiAgICAgICAgaWYgKHRyYWlsaW5nICYmIGxhc3RBcmdzKSB7XG4gICAgICAgICAgcmV0dXJuIGludm9rZUZ1bmModGltZSk7XG4gICAgICAgIH1cbiAgICAgICAgbGFzdEFyZ3MgPSBsYXN0VGhpcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gY2FuY2VsKCkge1xuICAgICAgICBpZiAodGltZXJJZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVySWQpO1xuICAgICAgICB9XG4gICAgICAgIGxhc3RJbnZva2VUaW1lID0gMDtcbiAgICAgICAgbGFzdEFyZ3MgPSBsYXN0Q2FsbFRpbWUgPSBsYXN0VGhpcyA9IHRpbWVySWQgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGZsdXNoKCkge1xuICAgICAgICByZXR1cm4gdGltZXJJZCA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogdHJhaWxpbmdFZGdlKG5vdygpKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gZGVib3VuY2VkKCkge1xuICAgICAgICB2YXIgdGltZSA9IG5vdygpLFxuICAgICAgICAgICAgaXNJbnZva2luZyA9IHNob3VsZEludm9rZSh0aW1lKTtcblxuICAgICAgICBsYXN0QXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgbGFzdFRoaXMgPSB0aGlzO1xuICAgICAgICBsYXN0Q2FsbFRpbWUgPSB0aW1lO1xuXG4gICAgICAgIGlmIChpc0ludm9raW5nKSB7XG4gICAgICAgICAgaWYgKHRpbWVySWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIGxlYWRpbmdFZGdlKGxhc3RDYWxsVGltZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChtYXhpbmcpIHtcbiAgICAgICAgICAgIC8vIEhhbmRsZSBpbnZvY2F0aW9ucyBpbiBhIHRpZ2h0IGxvb3AuXG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXJJZCk7XG4gICAgICAgICAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpO1xuICAgICAgICAgICAgcmV0dXJuIGludm9rZUZ1bmMobGFzdENhbGxUaW1lKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRpbWVySWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIGRlYm91bmNlZC5jYW5jZWwgPSBjYW5jZWw7XG4gICAgICBkZWJvdW5jZWQuZmx1c2ggPSBmbHVzaDtcbiAgICAgIHJldHVybiBkZWJvdW5jZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVmZXJzIGludm9raW5nIHRoZSBgZnVuY2AgdW50aWwgdGhlIGN1cnJlbnQgY2FsbCBzdGFjayBoYXMgY2xlYXJlZC4gQW55XG4gICAgICogYWRkaXRpb25hbCBhcmd1bWVudHMgYXJlIHByb3ZpZGVkIHRvIGBmdW5jYCB3aGVuIGl0J3MgaW52b2tlZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRlZmVyLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIGBmdW5jYCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRpbWVyIGlkLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlZmVyKGZ1bmN0aW9uKHRleHQpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKHRleHQpO1xuICAgICAqIH0sICdkZWZlcnJlZCcpO1xuICAgICAqIC8vID0+IExvZ3MgJ2RlZmVycmVkJyBhZnRlciBvbmUgbWlsbGlzZWNvbmQuXG4gICAgICovXG4gICAgdmFyIGRlZmVyID0gYmFzZVJlc3QoZnVuY3Rpb24oZnVuYywgYXJncykge1xuICAgICAgcmV0dXJuIGJhc2VEZWxheShmdW5jLCAxLCBhcmdzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIEludm9rZXMgYGZ1bmNgIGFmdGVyIGB3YWl0YCBtaWxsaXNlY29uZHMuIEFueSBhZGRpdGlvbmFsIGFyZ3VtZW50cyBhcmVcbiAgICAgKiBwcm92aWRlZCB0byBgZnVuY2Agd2hlbiBpdCdzIGludm9rZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWxheS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gd2FpdCBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byBkZWxheSBpbnZvY2F0aW9uLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIGBmdW5jYCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRpbWVyIGlkLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlbGF5KGZ1bmN0aW9uKHRleHQpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKHRleHQpO1xuICAgICAqIH0sIDEwMDAsICdsYXRlcicpO1xuICAgICAqIC8vID0+IExvZ3MgJ2xhdGVyJyBhZnRlciBvbmUgc2Vjb25kLlxuICAgICAqL1xuICAgIHZhciBkZWxheSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIHdhaXQsIGFyZ3MpIHtcbiAgICAgIHJldHVybiBiYXNlRGVsYXkoZnVuYywgdG9OdW1iZXIod2FpdCkgfHwgMCwgYXJncyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGFyZ3VtZW50cyByZXZlcnNlZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGZsaXAgYXJndW1lbnRzIGZvci5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmbGlwcGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgZmxpcHBlZCA9IF8uZmxpcChmdW5jdGlvbigpIHtcbiAgICAgKiAgIHJldHVybiBfLnRvQXJyYXkoYXJndW1lbnRzKTtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIGZsaXBwZWQoJ2EnLCAnYicsICdjJywgJ2QnKTtcbiAgICAgKiAvLyA9PiBbJ2QnLCAnYycsICdiJywgJ2EnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsaXAoZnVuYykge1xuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9GTElQX0ZMQUcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IG1lbW9pemVzIHRoZSByZXN1bHQgb2YgYGZ1bmNgLiBJZiBgcmVzb2x2ZXJgIGlzXG4gICAgICogcHJvdmlkZWQsIGl0IGRldGVybWluZXMgdGhlIGNhY2hlIGtleSBmb3Igc3RvcmluZyB0aGUgcmVzdWx0IGJhc2VkIG9uIHRoZVxuICAgICAqIGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24uIEJ5IGRlZmF1bHQsIHRoZSBmaXJzdCBhcmd1bWVudFxuICAgICAqIHByb3ZpZGVkIHRvIHRoZSBtZW1vaXplZCBmdW5jdGlvbiBpcyB1c2VkIGFzIHRoZSBtYXAgY2FjaGUga2V5LiBUaGUgYGZ1bmNgXG4gICAgICogaXMgaW52b2tlZCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhlIGNhY2hlIGlzIGV4cG9zZWQgYXMgdGhlIGBjYWNoZWAgcHJvcGVydHkgb24gdGhlIG1lbW9pemVkXG4gICAgICogZnVuY3Rpb24uIEl0cyBjcmVhdGlvbiBtYXkgYmUgY3VzdG9taXplZCBieSByZXBsYWNpbmcgdGhlIGBfLm1lbW9pemUuQ2FjaGVgXG4gICAgICogY29uc3RydWN0b3Igd2l0aCBvbmUgd2hvc2UgaW5zdGFuY2VzIGltcGxlbWVudCB0aGVcbiAgICAgKiBbYE1hcGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXByb3BlcnRpZXMtb2YtdGhlLW1hcC1wcm90b3R5cGUtb2JqZWN0KVxuICAgICAqIG1ldGhvZCBpbnRlcmZhY2Ugb2YgYGNsZWFyYCwgYGRlbGV0ZWAsIGBnZXRgLCBgaGFzYCwgYW5kIGBzZXRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaGF2ZSBpdHMgb3V0cHV0IG1lbW9pemVkLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtyZXNvbHZlcl0gVGhlIGZ1bmN0aW9uIHRvIHJlc29sdmUgdGhlIGNhY2hlIGtleS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBtZW1vaXplZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6IDIgfTtcbiAgICAgKiB2YXIgb3RoZXIgPSB7ICdjJzogMywgJ2QnOiA0IH07XG4gICAgICpcbiAgICAgKiB2YXIgdmFsdWVzID0gXy5tZW1vaXplKF8udmFsdWVzKTtcbiAgICAgKiB2YWx1ZXMob2JqZWN0KTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKlxuICAgICAqIHZhbHVlcyhvdGhlcik7XG4gICAgICogLy8gPT4gWzMsIDRdXG4gICAgICpcbiAgICAgKiBvYmplY3QuYSA9IDI7XG4gICAgICogdmFsdWVzKG9iamVjdCk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICpcbiAgICAgKiAvLyBNb2RpZnkgdGhlIHJlc3VsdCBjYWNoZS5cbiAgICAgKiB2YWx1ZXMuY2FjaGUuc2V0KG9iamVjdCwgWydhJywgJ2InXSk7XG4gICAgICogdmFsdWVzKG9iamVjdCk7XG4gICAgICogLy8gPT4gWydhJywgJ2InXVxuICAgICAqXG4gICAgICogLy8gUmVwbGFjZSBgXy5tZW1vaXplLkNhY2hlYC5cbiAgICAgKiBfLm1lbW9pemUuQ2FjaGUgPSBXZWFrTWFwO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1lbW9pemUoZnVuYywgcmVzb2x2ZXIpIHtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nIHx8IChyZXNvbHZlciAhPSBudWxsICYmIHR5cGVvZiByZXNvbHZlciAhPSAnZnVuY3Rpb24nKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICB2YXIgbWVtb2l6ZWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgICAgICBrZXkgPSByZXNvbHZlciA/IHJlc29sdmVyLmFwcGx5KHRoaXMsIGFyZ3MpIDogYXJnc1swXSxcbiAgICAgICAgICAgIGNhY2hlID0gbWVtb2l6ZWQuY2FjaGU7XG5cbiAgICAgICAgaWYgKGNhY2hlLmhhcyhrZXkpKSB7XG4gICAgICAgICAgcmV0dXJuIGNhY2hlLmdldChrZXkpO1xuICAgICAgICB9XG4gICAgICAgIHZhciByZXN1bHQgPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICBtZW1vaXplZC5jYWNoZSA9IGNhY2hlLnNldChrZXksIHJlc3VsdCkgfHwgY2FjaGU7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgICAgbWVtb2l6ZWQuY2FjaGUgPSBuZXcgKG1lbW9pemUuQ2FjaGUgfHwgTWFwQ2FjaGUpO1xuICAgICAgcmV0dXJuIG1lbW9pemVkO1xuICAgIH1cblxuICAgIC8vIEV4cG9zZSBgTWFwQ2FjaGVgLlxuICAgIG1lbW9pemUuQ2FjaGUgPSBNYXBDYWNoZTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IG5lZ2F0ZXMgdGhlIHJlc3VsdCBvZiB0aGUgcHJlZGljYXRlIGBmdW5jYC4gVGhlXG4gICAgICogYGZ1bmNgIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIGFuZCBhcmd1bWVudHMgb2YgdGhlXG4gICAgICogY3JlYXRlZCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgcHJlZGljYXRlIHRvIG5lZ2F0ZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBuZWdhdGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBpc0V2ZW4obikge1xuICAgICAqICAgcmV0dXJuIG4gJSAyID09IDA7XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5maWx0ZXIoWzEsIDIsIDMsIDQsIDUsIDZdLCBfLm5lZ2F0ZShpc0V2ZW4pKTtcbiAgICAgKiAvLyA9PiBbMSwgMywgNV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBuZWdhdGUocHJlZGljYXRlKSB7XG4gICAgICBpZiAodHlwZW9mIHByZWRpY2F0ZSAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgICBjYXNlIDA6IHJldHVybiAhcHJlZGljYXRlLmNhbGwodGhpcyk7XG4gICAgICAgICAgY2FzZSAxOiByZXR1cm4gIXByZWRpY2F0ZS5jYWxsKHRoaXMsIGFyZ3NbMF0pO1xuICAgICAgICAgIGNhc2UgMjogcmV0dXJuICFwcmVkaWNhdGUuY2FsbCh0aGlzLCBhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgICBjYXNlIDM6IHJldHVybiAhcHJlZGljYXRlLmNhbGwodGhpcywgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICFwcmVkaWNhdGUuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGlzIHJlc3RyaWN0ZWQgdG8gaW52b2tpbmcgYGZ1bmNgIG9uY2UuIFJlcGVhdCBjYWxsc1xuICAgICAqIHRvIHRoZSBmdW5jdGlvbiByZXR1cm4gdGhlIHZhbHVlIG9mIHRoZSBmaXJzdCBpbnZvY2F0aW9uLiBUaGUgYGZ1bmNgIGlzXG4gICAgICogaW52b2tlZCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBhbmQgYXJndW1lbnRzIG9mIHRoZSBjcmVhdGVkIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVzdHJpY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcmVzdHJpY3RlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGluaXRpYWxpemUgPSBfLm9uY2UoY3JlYXRlQXBwbGljYXRpb24pO1xuICAgICAqIGluaXRpYWxpemUoKTtcbiAgICAgKiBpbml0aWFsaXplKCk7XG4gICAgICogLy8gPT4gYGNyZWF0ZUFwcGxpY2F0aW9uYCBpcyBpbnZva2VkIG9uY2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvbmNlKGZ1bmMpIHtcbiAgICAgIHJldHVybiBiZWZvcmUoMiwgZnVuYyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBpdHMgYXJndW1lbnRzIHRyYW5zZm9ybWVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW3RyYW5zZm9ybXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgYXJndW1lbnQgdHJhbnNmb3Jtcy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gZG91YmxlZChuKSB7XG4gICAgICogICByZXR1cm4gbiAqIDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8ub3ZlckFyZ3MoZnVuY3Rpb24oeCwgeSkge1xuICAgICAqICAgcmV0dXJuIFt4LCB5XTtcbiAgICAgKiB9LCBbc3F1YXJlLCBkb3VibGVkXSk7XG4gICAgICpcbiAgICAgKiBmdW5jKDksIDMpO1xuICAgICAqIC8vID0+IFs4MSwgNl1cbiAgICAgKlxuICAgICAqIGZ1bmMoMTAsIDUpO1xuICAgICAqIC8vID0+IFsxMDAsIDEwXVxuICAgICAqL1xuICAgIHZhciBvdmVyQXJncyA9IGNhc3RSZXN0KGZ1bmN0aW9uKGZ1bmMsIHRyYW5zZm9ybXMpIHtcbiAgICAgIHRyYW5zZm9ybXMgPSAodHJhbnNmb3Jtcy5sZW5ndGggPT0gMSAmJiBpc0FycmF5KHRyYW5zZm9ybXNbMF0pKVxuICAgICAgICA/IGFycmF5TWFwKHRyYW5zZm9ybXNbMF0sIGJhc2VVbmFyeShnZXRJdGVyYXRlZSgpKSlcbiAgICAgICAgOiBhcnJheU1hcChiYXNlRmxhdHRlbih0cmFuc2Zvcm1zLCAxKSwgYmFzZVVuYXJ5KGdldEl0ZXJhdGVlKCkpKTtcblxuICAgICAgdmFyIGZ1bmNzTGVuZ3RoID0gdHJhbnNmb3Jtcy5sZW5ndGg7XG4gICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICAgICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1pbihhcmdzLmxlbmd0aCwgZnVuY3NMZW5ndGgpO1xuXG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgYXJnc1tpbmRleF0gPSB0cmFuc2Zvcm1zW2luZGV4XS5jYWxsKHRoaXMsIGFyZ3NbaW5kZXhdKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXBwbHkoZnVuYywgdGhpcywgYXJncyk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggYHBhcnRpYWxzYCBwcmVwZW5kZWQgdG8gdGhlXG4gICAgICogYXJndW1lbnRzIGl0IHJlY2VpdmVzLiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmJpbmRgIGV4Y2VwdCBpdCBkb2VzICoqbm90KipcbiAgICAgKiBhbHRlciB0aGUgYHRoaXNgIGJpbmRpbmcuXG4gICAgICpcbiAgICAgKiBUaGUgYF8ucGFydGlhbC5wbGFjZWhvbGRlcmAgdmFsdWUsIHdoaWNoIGRlZmF1bHRzIHRvIGBfYCBpbiBtb25vbGl0aGljXG4gICAgICogYnVpbGRzLCBtYXkgYmUgdXNlZCBhcyBhIHBsYWNlaG9sZGVyIGZvciBwYXJ0aWFsbHkgYXBwbGllZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgZG9lc24ndCBzZXQgdGhlIFwibGVuZ3RoXCIgcHJvcGVydHkgb2YgcGFydGlhbGx5XG4gICAgICogYXBwbGllZCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4yLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBwYXJ0aWFsbHkgYXBwbHkgYXJndW1lbnRzIHRvLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIGJlIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHBhcnRpYWxseSBhcHBsaWVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBncmVldChncmVldGluZywgbmFtZSkge1xuICAgICAqICAgcmV0dXJuIGdyZWV0aW5nICsgJyAnICsgbmFtZTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgc2F5SGVsbG9UbyA9IF8ucGFydGlhbChncmVldCwgJ2hlbGxvJyk7XG4gICAgICogc2F5SGVsbG9UbygnZnJlZCcpO1xuICAgICAqIC8vID0+ICdoZWxsbyBmcmVkJ1xuICAgICAqXG4gICAgICogLy8gUGFydGlhbGx5IGFwcGxpZWQgd2l0aCBwbGFjZWhvbGRlcnMuXG4gICAgICogdmFyIGdyZWV0RnJlZCA9IF8ucGFydGlhbChncmVldCwgXywgJ2ZyZWQnKTtcbiAgICAgKiBncmVldEZyZWQoJ2hpJyk7XG4gICAgICogLy8gPT4gJ2hpIGZyZWQnXG4gICAgICovXG4gICAgdmFyIHBhcnRpYWwgPSBiYXNlUmVzdChmdW5jdGlvbihmdW5jLCBwYXJ0aWFscykge1xuICAgICAgdmFyIGhvbGRlcnMgPSByZXBsYWNlSG9sZGVycyhwYXJ0aWFscywgZ2V0SG9sZGVyKHBhcnRpYWwpKTtcbiAgICAgIHJldHVybiBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfUEFSVElBTF9GTEFHLCB1bmRlZmluZWQsIHBhcnRpYWxzLCBob2xkZXJzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ucGFydGlhbGAgZXhjZXB0IHRoYXQgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzXG4gICAgICogYXJlIGFwcGVuZGVkIHRvIHRoZSBhcmd1bWVudHMgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBUaGUgYF8ucGFydGlhbFJpZ2h0LnBsYWNlaG9sZGVyYCB2YWx1ZSwgd2hpY2ggZGVmYXVsdHMgdG8gYF9gIGluIG1vbm9saXRoaWNcbiAgICAgKiBidWlsZHMsIG1heSBiZSB1c2VkIGFzIGEgcGxhY2Vob2xkZXIgZm9yIHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBkb2Vzbid0IHNldCB0aGUgXCJsZW5ndGhcIiBwcm9wZXJ0eSBvZiBwYXJ0aWFsbHlcbiAgICAgKiBhcHBsaWVkIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHBhcnRpYWxseSBhcHBseSBhcmd1bWVudHMgdG8uXG4gICAgICogQHBhcmFtIHsuLi4qfSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gYmUgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcGFydGlhbGx5IGFwcGxpZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGdyZWV0KGdyZWV0aW5nLCBuYW1lKSB7XG4gICAgICogICByZXR1cm4gZ3JlZXRpbmcgKyAnICcgKyBuYW1lO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBncmVldEZyZWQgPSBfLnBhcnRpYWxSaWdodChncmVldCwgJ2ZyZWQnKTtcbiAgICAgKiBncmVldEZyZWQoJ2hpJyk7XG4gICAgICogLy8gPT4gJ2hpIGZyZWQnXG4gICAgICpcbiAgICAgKiAvLyBQYXJ0aWFsbHkgYXBwbGllZCB3aXRoIHBsYWNlaG9sZGVycy5cbiAgICAgKiB2YXIgc2F5SGVsbG9UbyA9IF8ucGFydGlhbFJpZ2h0KGdyZWV0LCAnaGVsbG8nLCBfKTtcbiAgICAgKiBzYXlIZWxsb1RvKCdmcmVkJyk7XG4gICAgICogLy8gPT4gJ2hlbGxvIGZyZWQnXG4gICAgICovXG4gICAgdmFyIHBhcnRpYWxSaWdodCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIHBhcnRpYWxzKSB7XG4gICAgICB2YXIgaG9sZGVycyA9IHJlcGxhY2VIb2xkZXJzKHBhcnRpYWxzLCBnZXRIb2xkZXIocGFydGlhbFJpZ2h0KSk7XG4gICAgICByZXR1cm4gY3JlYXRlV3JhcChmdW5jLCBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRywgdW5kZWZpbmVkLCBwYXJ0aWFscywgaG9sZGVycyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGFyZ3VtZW50cyBhcnJhbmdlZCBhY2NvcmRpbmdcbiAgICAgKiB0byB0aGUgc3BlY2lmaWVkIGBpbmRleGVzYCB3aGVyZSB0aGUgYXJndW1lbnQgdmFsdWUgYXQgdGhlIGZpcnN0IGluZGV4IGlzXG4gICAgICogcHJvdmlkZWQgYXMgdGhlIGZpcnN0IGFyZ3VtZW50LCB0aGUgYXJndW1lbnQgdmFsdWUgYXQgdGhlIHNlY29uZCBpbmRleCBpc1xuICAgICAqIHByb3ZpZGVkIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQsIGFuZCBzbyBvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHJlYXJyYW5nZSBhcmd1bWVudHMgZm9yLlxuICAgICAqIEBwYXJhbSB7Li4uKG51bWJlcnxudW1iZXJbXSl9IGluZGV4ZXMgVGhlIGFycmFuZ2VkIGFyZ3VtZW50IGluZGV4ZXMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciByZWFyZ2VkID0gXy5yZWFyZyhmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICogICByZXR1cm4gW2EsIGIsIGNdO1xuICAgICAqIH0sIFsyLCAwLCAxXSk7XG4gICAgICpcbiAgICAgKiByZWFyZ2VkKCdiJywgJ2MnLCAnYScpXG4gICAgICogLy8gPT4gWydhJywgJ2InLCAnYyddXG4gICAgICovXG4gICAgdmFyIHJlYXJnID0gZmxhdFJlc3QoZnVuY3Rpb24oZnVuYywgaW5kZXhlcykge1xuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9SRUFSR19GTEFHLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBpbmRleGVzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIHRoZVxuICAgICAqIGNyZWF0ZWQgZnVuY3Rpb24gYW5kIGFyZ3VtZW50cyBmcm9tIGBzdGFydGAgYW5kIGJleW9uZCBwcm92aWRlZCBhc1xuICAgICAqIGFuIGFycmF5LlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uIHRoZVxuICAgICAqIFtyZXN0IHBhcmFtZXRlcl0oaHR0cHM6Ly9tZG4uaW8vcmVzdF9wYXJhbWV0ZXJzKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD1mdW5jLmxlbmd0aC0xXSBUaGUgc3RhcnQgcG9zaXRpb24gb2YgdGhlIHJlc3QgcGFyYW1ldGVyLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgc2F5ID0gXy5yZXN0KGZ1bmN0aW9uKHdoYXQsIG5hbWVzKSB7XG4gICAgICogICByZXR1cm4gd2hhdCArICcgJyArIF8uaW5pdGlhbChuYW1lcykuam9pbignLCAnKSArXG4gICAgICogICAgIChfLnNpemUobmFtZXMpID4gMSA/ICcsICYgJyA6ICcnKSArIF8ubGFzdChuYW1lcyk7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBzYXkoJ2hlbGxvJywgJ2ZyZWQnLCAnYmFybmV5JywgJ3BlYmJsZXMnKTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gZnJlZCwgYmFybmV5LCAmIHBlYmJsZXMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVzdChmdW5jLCBzdGFydCkge1xuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgc3RhcnQgPSBzdGFydCA9PT0gdW5kZWZpbmVkID8gc3RhcnQgOiB0b0ludGVnZXIoc3RhcnQpO1xuICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmMsIHN0YXJ0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiB0aGVcbiAgICAgKiBjcmVhdGUgZnVuY3Rpb24gYW5kIGFuIGFycmF5IG9mIGFyZ3VtZW50cyBtdWNoIGxpa2VcbiAgICAgKiBbYEZ1bmN0aW9uI2FwcGx5YF0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb24gdGhlXG4gICAgICogW3NwcmVhZCBvcGVyYXRvcl0oaHR0cHM6Ly9tZG4uaW8vc3ByZWFkX29wZXJhdG9yKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjIuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHNwcmVhZCBhcmd1bWVudHMgb3Zlci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgc3ByZWFkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgc2F5ID0gXy5zcHJlYWQoZnVuY3Rpb24od2hvLCB3aGF0KSB7XG4gICAgICogICByZXR1cm4gd2hvICsgJyBzYXlzICcgKyB3aGF0O1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogc2F5KFsnZnJlZCcsICdoZWxsbyddKTtcbiAgICAgKiAvLyA9PiAnZnJlZCBzYXlzIGhlbGxvJ1xuICAgICAqXG4gICAgICogdmFyIG51bWJlcnMgPSBQcm9taXNlLmFsbChbXG4gICAgICogICBQcm9taXNlLnJlc29sdmUoNDApLFxuICAgICAqICAgUHJvbWlzZS5yZXNvbHZlKDM2KVxuICAgICAqIF0pO1xuICAgICAqXG4gICAgICogbnVtYmVycy50aGVuKF8uc3ByZWFkKGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgKiAgIHJldHVybiB4ICsgeTtcbiAgICAgKiB9KSk7XG4gICAgICogLy8gPT4gYSBQcm9taXNlIG9mIDc2XG4gICAgICovXG4gICAgZnVuY3Rpb24gc3ByZWFkKGZ1bmMsIHN0YXJ0KSB7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICBzdGFydCA9IHN0YXJ0ID09IG51bGwgPyAwIDogbmF0aXZlTWF4KHRvSW50ZWdlcihzdGFydCksIDApO1xuICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgICAgdmFyIGFycmF5ID0gYXJnc1tzdGFydF0sXG4gICAgICAgICAgICBvdGhlckFyZ3MgPSBjYXN0U2xpY2UoYXJncywgMCwgc3RhcnQpO1xuXG4gICAgICAgIGlmIChhcnJheSkge1xuICAgICAgICAgIGFycmF5UHVzaChvdGhlckFyZ3MsIGFycmF5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXBwbHkoZnVuYywgdGhpcywgb3RoZXJBcmdzKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSB0aHJvdHRsZWQgZnVuY3Rpb24gdGhhdCBvbmx5IGludm9rZXMgYGZ1bmNgIGF0IG1vc3Qgb25jZSBwZXJcbiAgICAgKiBldmVyeSBgd2FpdGAgbWlsbGlzZWNvbmRzLiBUaGUgdGhyb3R0bGVkIGZ1bmN0aW9uIGNvbWVzIHdpdGggYSBgY2FuY2VsYFxuICAgICAqIG1ldGhvZCB0byBjYW5jZWwgZGVsYXllZCBgZnVuY2AgaW52b2NhdGlvbnMgYW5kIGEgYGZsdXNoYCBtZXRob2QgdG9cbiAgICAgKiBpbW1lZGlhdGVseSBpbnZva2UgdGhlbS4gUHJvdmlkZSBgb3B0aW9uc2AgdG8gaW5kaWNhdGUgd2hldGhlciBgZnVuY2BcbiAgICAgKiBzaG91bGQgYmUgaW52b2tlZCBvbiB0aGUgbGVhZGluZyBhbmQvb3IgdHJhaWxpbmcgZWRnZSBvZiB0aGUgYHdhaXRgXG4gICAgICogdGltZW91dC4gVGhlIGBmdW5jYCBpcyBpbnZva2VkIHdpdGggdGhlIGxhc3QgYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZVxuICAgICAqIHRocm90dGxlZCBmdW5jdGlvbi4gU3Vic2VxdWVudCBjYWxscyB0byB0aGUgdGhyb3R0bGVkIGZ1bmN0aW9uIHJldHVybiB0aGVcbiAgICAgKiByZXN1bHQgb2YgdGhlIGxhc3QgYGZ1bmNgIGludm9jYXRpb24uXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogSWYgYGxlYWRpbmdgIGFuZCBgdHJhaWxpbmdgIG9wdGlvbnMgYXJlIGB0cnVlYCwgYGZ1bmNgIGlzXG4gICAgICogaW52b2tlZCBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dCBvbmx5IGlmIHRoZSB0aHJvdHRsZWQgZnVuY3Rpb25cbiAgICAgKiBpcyBpbnZva2VkIG1vcmUgdGhhbiBvbmNlIGR1cmluZyB0aGUgYHdhaXRgIHRpbWVvdXQuXG4gICAgICpcbiAgICAgKiBJZiBgd2FpdGAgaXMgYDBgIGFuZCBgbGVhZGluZ2AgaXMgYGZhbHNlYCwgYGZ1bmNgIGludm9jYXRpb24gaXMgZGVmZXJyZWRcbiAgICAgKiB1bnRpbCB0byB0aGUgbmV4dCB0aWNrLCBzaW1pbGFyIHRvIGBzZXRUaW1lb3V0YCB3aXRoIGEgdGltZW91dCBvZiBgMGAuXG4gICAgICpcbiAgICAgKiBTZWUgW0RhdmlkIENvcmJhY2hvJ3MgYXJ0aWNsZV0oaHR0cHM6Ly9jc3MtdHJpY2tzLmNvbS9kZWJvdW5jaW5nLXRocm90dGxpbmctZXhwbGFpbmVkLWV4YW1wbGVzLylcbiAgICAgKiBmb3IgZGV0YWlscyBvdmVyIHRoZSBkaWZmZXJlbmNlcyBiZXR3ZWVuIGBfLnRocm90dGxlYCBhbmQgYF8uZGVib3VuY2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gdGhyb3R0bGUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFt3YWl0PTBdIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHRocm90dGxlIGludm9jYXRpb25zIHRvLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMubGVhZGluZz10cnVlXVxuICAgICAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSBsZWFkaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy50cmFpbGluZz10cnVlXVxuICAgICAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHRocm90dGxlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogLy8gQXZvaWQgZXhjZXNzaXZlbHkgdXBkYXRpbmcgdGhlIHBvc2l0aW9uIHdoaWxlIHNjcm9sbGluZy5cbiAgICAgKiBqUXVlcnkod2luZG93KS5vbignc2Nyb2xsJywgXy50aHJvdHRsZSh1cGRhdGVQb3NpdGlvbiwgMTAwKSk7XG4gICAgICpcbiAgICAgKiAvLyBJbnZva2UgYHJlbmV3VG9rZW5gIHdoZW4gdGhlIGNsaWNrIGV2ZW50IGlzIGZpcmVkLCBidXQgbm90IG1vcmUgdGhhbiBvbmNlIGV2ZXJ5IDUgbWludXRlcy5cbiAgICAgKiB2YXIgdGhyb3R0bGVkID0gXy50aHJvdHRsZShyZW5ld1Rva2VuLCAzMDAwMDAsIHsgJ3RyYWlsaW5nJzogZmFsc2UgfSk7XG4gICAgICogalF1ZXJ5KGVsZW1lbnQpLm9uKCdjbGljaycsIHRocm90dGxlZCk7XG4gICAgICpcbiAgICAgKiAvLyBDYW5jZWwgdGhlIHRyYWlsaW5nIHRocm90dGxlZCBpbnZvY2F0aW9uLlxuICAgICAqIGpRdWVyeSh3aW5kb3cpLm9uKCdwb3BzdGF0ZScsIHRocm90dGxlZC5jYW5jZWwpO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRocm90dGxlKGZ1bmMsIHdhaXQsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBsZWFkaW5nID0gdHJ1ZSxcbiAgICAgICAgICB0cmFpbGluZyA9IHRydWU7XG5cbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc09iamVjdChvcHRpb25zKSkge1xuICAgICAgICBsZWFkaW5nID0gJ2xlYWRpbmcnIGluIG9wdGlvbnMgPyAhIW9wdGlvbnMubGVhZGluZyA6IGxlYWRpbmc7XG4gICAgICAgIHRyYWlsaW5nID0gJ3RyYWlsaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLnRyYWlsaW5nIDogdHJhaWxpbmc7XG4gICAgICB9XG4gICAgICByZXR1cm4gZGVib3VuY2UoZnVuYywgd2FpdCwge1xuICAgICAgICAnbGVhZGluZyc6IGxlYWRpbmcsXG4gICAgICAgICdtYXhXYWl0Jzogd2FpdCxcbiAgICAgICAgJ3RyYWlsaW5nJzogdHJhaWxpbmdcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGFjY2VwdHMgdXAgdG8gb25lIGFyZ3VtZW50LCBpZ25vcmluZyBhbnlcbiAgICAgKiBhZGRpdGlvbmFsIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNhcCBhcmd1bWVudHMgZm9yLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNhcHBlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5tYXAoWyc2JywgJzgnLCAnMTAnXSwgXy51bmFyeShwYXJzZUludCkpO1xuICAgICAqIC8vID0+IFs2LCA4LCAxMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bmFyeShmdW5jKSB7XG4gICAgICByZXR1cm4gYXJ5KGZ1bmMsIDEpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHByb3ZpZGVzIGB2YWx1ZWAgdG8gYHdyYXBwZXJgIGFzIGl0cyBmaXJzdFxuICAgICAqIGFyZ3VtZW50LiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIGZ1bmN0aW9uIGFyZSBhcHBlbmRlZFxuICAgICAqIHRvIHRob3NlIHByb3ZpZGVkIHRvIHRoZSBgd3JhcHBlcmAuIFRoZSB3cmFwcGVyIGlzIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgXG4gICAgICogYmluZGluZyBvZiB0aGUgY3JlYXRlZCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3dyYXBwZXI9aWRlbnRpdHldIFRoZSB3cmFwcGVyIGZ1bmN0aW9uLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgcCA9IF8ud3JhcChfLmVzY2FwZSwgZnVuY3Rpb24oZnVuYywgdGV4dCkge1xuICAgICAqICAgcmV0dXJuICc8cD4nICsgZnVuYyh0ZXh0KSArICc8L3A+JztcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIHAoJ2ZyZWQsIGJhcm5leSwgJiBwZWJibGVzJyk7XG4gICAgICogLy8gPT4gJzxwPmZyZWQsIGJhcm5leSwgJmFtcDsgcGViYmxlczwvcD4nXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcCh2YWx1ZSwgd3JhcHBlcikge1xuICAgICAgcmV0dXJuIHBhcnRpYWwoY2FzdEZ1bmN0aW9uKHdyYXBwZXIpLCB2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ2FzdHMgYHZhbHVlYCBhcyBhbiBhcnJheSBpZiBpdCdzIG5vdCBvbmUuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC40LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjYXN0IGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNhc3RBcnJheSgxKTtcbiAgICAgKiAvLyA9PiBbMV1cbiAgICAgKlxuICAgICAqIF8uY2FzdEFycmF5KHsgJ2EnOiAxIH0pO1xuICAgICAqIC8vID0+IFt7ICdhJzogMSB9XVxuICAgICAqXG4gICAgICogXy5jYXN0QXJyYXkoJ2FiYycpO1xuICAgICAqIC8vID0+IFsnYWJjJ11cbiAgICAgKlxuICAgICAqIF8uY2FzdEFycmF5KG51bGwpO1xuICAgICAqIC8vID0+IFtudWxsXVxuICAgICAqXG4gICAgICogXy5jYXN0QXJyYXkodW5kZWZpbmVkKTtcbiAgICAgKiAvLyA9PiBbdW5kZWZpbmVkXVxuICAgICAqXG4gICAgICogXy5jYXN0QXJyYXkoKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIDIsIDNdO1xuICAgICAqIGNvbnNvbGUubG9nKF8uY2FzdEFycmF5KGFycmF5KSA9PT0gYXJyYXkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYXN0QXJyYXkoKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIHZhbHVlID0gYXJndW1lbnRzWzBdO1xuICAgICAgcmV0dXJuIGlzQXJyYXkodmFsdWUpID8gdmFsdWUgOiBbdmFsdWVdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzaGFsbG93IGNsb25lIG9mIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvbiB0aGVcbiAgICAgKiBbc3RydWN0dXJlZCBjbG9uZSBhbGdvcml0aG1dKGh0dHBzOi8vbWRuLmlvL1N0cnVjdHVyZWRfY2xvbmVfYWxnb3JpdGhtKVxuICAgICAqIGFuZCBzdXBwb3J0cyBjbG9uaW5nIGFycmF5cywgYXJyYXkgYnVmZmVycywgYm9vbGVhbnMsIGRhdGUgb2JqZWN0cywgbWFwcyxcbiAgICAgKiBudW1iZXJzLCBgT2JqZWN0YCBvYmplY3RzLCByZWdleGVzLCBzZXRzLCBzdHJpbmdzLCBzeW1ib2xzLCBhbmQgdHlwZWRcbiAgICAgKiBhcnJheXMuIFRoZSBvd24gZW51bWVyYWJsZSBwcm9wZXJ0aWVzIG9mIGBhcmd1bWVudHNgIG9iamVjdHMgYXJlIGNsb25lZFxuICAgICAqIGFzIHBsYWluIG9iamVjdHMuIEFuIGVtcHR5IG9iamVjdCBpcyByZXR1cm5lZCBmb3IgdW5jbG9uZWFibGUgdmFsdWVzIHN1Y2hcbiAgICAgKiBhcyBlcnJvciBvYmplY3RzLCBmdW5jdGlvbnMsIERPTSBub2RlcywgYW5kIFdlYWtNYXBzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgY2xvbmVkIHZhbHVlLlxuICAgICAqIEBzZWUgXy5jbG9uZURlZXBcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAnYSc6IDEgfSwgeyAnYic6IDIgfV07XG4gICAgICpcbiAgICAgKiB2YXIgc2hhbGxvdyA9IF8uY2xvbmUob2JqZWN0cyk7XG4gICAgICogY29uc29sZS5sb2coc2hhbGxvd1swXSA9PT0gb2JqZWN0c1swXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lKHZhbHVlKSB7XG4gICAgICByZXR1cm4gYmFzZUNsb25lKHZhbHVlLCBDTE9ORV9TWU1CT0xTX0ZMQUcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uY2xvbmVgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBwcm9kdWNlIHRoZSBjbG9uZWQgdmFsdWUuIElmIGBjdXN0b21pemVyYCByZXR1cm5zIGB1bmRlZmluZWRgLFxuICAgICAqIGNsb25pbmcgaXMgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmAgaXMgaW52b2tlZCB3aXRoXG4gICAgICogdXAgdG8gZm91ciBhcmd1bWVudHM7ICh2YWx1ZSBbLCBpbmRleHxrZXksIG9iamVjdCwgc3RhY2tdKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY2xvbmluZy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgY2xvbmVkIHZhbHVlLlxuICAgICAqIEBzZWUgXy5jbG9uZURlZXBXaXRoXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIodmFsdWUpIHtcbiAgICAgKiAgIGlmIChfLmlzRWxlbWVudCh2YWx1ZSkpIHtcbiAgICAgKiAgICAgcmV0dXJuIHZhbHVlLmNsb25lTm9kZShmYWxzZSk7XG4gICAgICogICB9XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGVsID0gXy5jbG9uZVdpdGgoZG9jdW1lbnQuYm9keSwgY3VzdG9taXplcik7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhlbCA9PT0gZG9jdW1lbnQuYm9keSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKiBjb25zb2xlLmxvZyhlbC5ub2RlTmFtZSk7XG4gICAgICogLy8gPT4gJ0JPRFknXG4gICAgICogY29uc29sZS5sb2coZWwuY2hpbGROb2Rlcy5sZW5ndGgpO1xuICAgICAqIC8vID0+IDBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZVdpdGgodmFsdWUsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nID8gY3VzdG9taXplciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBiYXNlQ2xvbmUodmFsdWUsIENMT05FX1NZTUJPTFNfRkxBRywgY3VzdG9taXplcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5jbG9uZWAgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgY2xvbmVzIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHJlY3Vyc2l2ZWx5IGNsb25lLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBkZWVwIGNsb25lZCB2YWx1ZS5cbiAgICAgKiBAc2VlIF8uY2xvbmVcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAnYSc6IDEgfSwgeyAnYic6IDIgfV07XG4gICAgICpcbiAgICAgKiB2YXIgZGVlcCA9IF8uY2xvbmVEZWVwKG9iamVjdHMpO1xuICAgICAqIGNvbnNvbGUubG9nKGRlZXBbMF0gPT09IG9iamVjdHNbMF0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVEZWVwKHZhbHVlKSB7XG4gICAgICByZXR1cm4gYmFzZUNsb25lKHZhbHVlLCBDTE9ORV9ERUVQX0ZMQUcgfCBDTE9ORV9TWU1CT0xTX0ZMQUcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uY2xvbmVXaXRoYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBjbG9uZXMgYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcmVjdXJzaXZlbHkgY2xvbmUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY2xvbmluZy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZGVlcCBjbG9uZWQgdmFsdWUuXG4gICAgICogQHNlZSBfLmNsb25lV2l0aFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKHZhbHVlKSB7XG4gICAgICogICBpZiAoXy5pc0VsZW1lbnQodmFsdWUpKSB7XG4gICAgICogICAgIHJldHVybiB2YWx1ZS5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgICogICB9XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGVsID0gXy5jbG9uZURlZXBXaXRoKGRvY3VtZW50LmJvZHksIGN1c3RvbWl6ZXIpO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coZWwgPT09IGRvY3VtZW50LmJvZHkpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICogY29uc29sZS5sb2coZWwubm9kZU5hbWUpO1xuICAgICAqIC8vID0+ICdCT0RZJ1xuICAgICAqIGNvbnNvbGUubG9nKGVsLmNoaWxkTm9kZXMubGVuZ3RoKTtcbiAgICAgKiAvLyA9PiAyMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lRGVlcFdpdGgodmFsdWUsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nID8gY3VzdG9taXplciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBiYXNlQ2xvbmUodmFsdWUsIENMT05FX0RFRVBfRkxBRyB8IENMT05FX1NZTUJPTFNfRkxBRywgY3VzdG9taXplcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBvYmplY3RgIGNvbmZvcm1zIHRvIGBzb3VyY2VgIGJ5IGludm9raW5nIHRoZSBwcmVkaWNhdGVcbiAgICAgKiBwcm9wZXJ0aWVzIG9mIGBzb3VyY2VgIHdpdGggdGhlIGNvcnJlc3BvbmRpbmcgcHJvcGVydHkgdmFsdWVzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGVxdWl2YWxlbnQgdG8gYF8uY29uZm9ybXNgIHdoZW4gYHNvdXJjZWAgaXNcbiAgICAgKiBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjE0LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSBwcmVkaWNhdGVzIHRvIGNvbmZvcm0gdG8uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBvYmplY3RgIGNvbmZvcm1zLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAyIH07XG4gICAgICpcbiAgICAgKiBfLmNvbmZvcm1zVG8ob2JqZWN0LCB7ICdiJzogZnVuY3Rpb24obikgeyByZXR1cm4gbiA+IDE7IH0gfSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5jb25mb3Jtc1RvKG9iamVjdCwgeyAnYic6IGZ1bmN0aW9uKG4pIHsgcmV0dXJuIG4gPiAyOyB9IH0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29uZm9ybXNUbyhvYmplY3QsIHNvdXJjZSkge1xuICAgICAgcmV0dXJuIHNvdXJjZSA9PSBudWxsIHx8IGJhc2VDb25mb3Jtc1RvKG9iamVjdCwgc291cmNlLCBrZXlzKHNvdXJjZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBlcmZvcm1zIGFcbiAgICAgKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGNvbXBhcmlzb24gYmV0d2VlbiB0d28gdmFsdWVzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZSBlcXVpdmFsZW50LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gICAgICogdmFyIG90aGVyID0geyAnYSc6IDEgfTtcbiAgICAgKlxuICAgICAqIF8uZXEob2JqZWN0LCBvYmplY3QpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uZXEob2JqZWN0LCBvdGhlcik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uZXEoJ2EnLCAnYScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uZXEoJ2EnLCBPYmplY3QoJ2EnKSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uZXEoTmFOLCBOYU4pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlcSh2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gb3RoZXIgfHwgKHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGdyZWF0ZXIgdGhhbiBgb3RoZXJgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZ3JlYXRlciB0aGFuIGBvdGhlcmAsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAc2VlIF8ubHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5ndCgzLCAxKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmd0KDMsIDMpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmd0KDEsIDMpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGd0ID0gY3JlYXRlUmVsYXRpb25hbE9wZXJhdGlvbihiYXNlR3QpO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIGBvdGhlcmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy45LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG9cbiAgICAgKiAgYG90aGVyYCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBzZWUgXy5sdGVcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5ndGUoMywgMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5ndGUoMywgMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5ndGUoMSwgMyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgZ3RlID0gY3JlYXRlUmVsYXRpb25hbE9wZXJhdGlvbihmdW5jdGlvbih2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA+PSBvdGhlcjtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhbiBgYXJndW1lbnRzYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcmd1bWVudHMoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc0FyZ3VtZW50cyA9IGJhc2VJc0FyZ3VtZW50cyhmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA/IGJhc2VJc0FyZ3VtZW50cyA6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCAnY2FsbGVlJykgJiZcbiAgICAgICAgIXByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwodmFsdWUsICdjYWxsZWUnKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhbiBgQXJyYXlgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXkoJ2FiYycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXkoXy5ub29wKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYW4gYEFycmF5QnVmZmVyYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5IGJ1ZmZlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlCdWZmZXIobmV3IEFycmF5QnVmZmVyKDIpKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlCdWZmZXIobmV3IEFycmF5KDIpKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc0FycmF5QnVmZmVyID0gbm9kZUlzQXJyYXlCdWZmZXIgPyBiYXNlVW5hcnkobm9kZUlzQXJyYXlCdWZmZXIpIDogYmFzZUlzQXJyYXlCdWZmZXI7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLiBBIHZhbHVlIGlzIGNvbnNpZGVyZWQgYXJyYXktbGlrZSBpZiBpdCdzXG4gICAgICogbm90IGEgZnVuY3Rpb24gYW5kIGhhcyBhIGB2YWx1ZS5sZW5ndGhgIHRoYXQncyBhbiBpbnRlZ2VyIGdyZWF0ZXIgdGhhbiBvclxuICAgICAqIGVxdWFsIHRvIGAwYCBhbmQgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIGBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZShbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2UoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZSgnYWJjJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZShfLm5vb3ApO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNBcnJheUxpa2UodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgIWlzRnVuY3Rpb24odmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaXNBcnJheUxpa2VgIGV4Y2VwdCB0aGF0IGl0IGFsc28gY2hlY2tzIGlmIGB2YWx1ZWBcbiAgICAgKiBpcyBhbiBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5LWxpa2Ugb2JqZWN0LFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2VPYmplY3QoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlT2JqZWN0KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2VPYmplY3QoJ2FiYycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlT2JqZWN0KF8ubm9vcCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0FycmF5TGlrZU9iamVjdCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgaXNBcnJheUxpa2UodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBib29sZWFuIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgYm9vbGVhbiwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQm9vbGVhbihmYWxzZSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0Jvb2xlYW4obnVsbCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0Jvb2xlYW4odmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gdHJ1ZSB8fCB2YWx1ZSA9PT0gZmFsc2UgfHxcbiAgICAgICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gYm9vbFRhZyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBidWZmZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgYnVmZmVyLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNCdWZmZXIobmV3IEJ1ZmZlcigyKSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0J1ZmZlcihuZXcgVWludDhBcnJheSgyKSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNCdWZmZXIgPSBuYXRpdmVJc0J1ZmZlciB8fCBzdHViRmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYERhdGVgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBkYXRlIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzRGF0ZShuZXcgRGF0ZSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0RhdGUoJ01vbiBBcHJpbCAyMyAyMDEyJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNEYXRlID0gbm9kZUlzRGF0ZSA/IGJhc2VVbmFyeShub2RlSXNEYXRlKSA6IGJhc2VJc0RhdGU7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYSBET00gZWxlbWVudC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBET00gZWxlbWVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzRWxlbWVudChkb2N1bWVudC5ib2R5KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRWxlbWVudCgnPGJvZHk+Jyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0VsZW1lbnQodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIHZhbHVlLm5vZGVUeXBlID09PSAxICYmICFpc1BsYWluT2JqZWN0KHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhbiBlbXB0eSBvYmplY3QsIGNvbGxlY3Rpb24sIG1hcCwgb3Igc2V0LlxuICAgICAqXG4gICAgICogT2JqZWN0cyBhcmUgY29uc2lkZXJlZCBlbXB0eSBpZiB0aGV5IGhhdmUgbm8gb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkXG4gICAgICogcHJvcGVydGllcy5cbiAgICAgKlxuICAgICAqIEFycmF5LWxpa2UgdmFsdWVzIHN1Y2ggYXMgYGFyZ3VtZW50c2Agb2JqZWN0cywgYXJyYXlzLCBidWZmZXJzLCBzdHJpbmdzLCBvclxuICAgICAqIGpRdWVyeS1saWtlIGNvbGxlY3Rpb25zIGFyZSBjb25zaWRlcmVkIGVtcHR5IGlmIHRoZXkgaGF2ZSBhIGBsZW5ndGhgIG9mIGAwYC5cbiAgICAgKiBTaW1pbGFybHksIG1hcHMgYW5kIHNldHMgYXJlIGNvbnNpZGVyZWQgZW1wdHkgaWYgdGhleSBoYXZlIGEgYHNpemVgIG9mIGAwYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZW1wdHksIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0VtcHR5KG51bGwpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNFbXB0eSh0cnVlKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRW1wdHkoMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0VtcHR5KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNFbXB0eSh7ICdhJzogMSB9KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRW1wdHkodmFsdWUpIHtcbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKGlzQXJyYXlMaWtlKHZhbHVlKSAmJlxuICAgICAgICAgIChpc0FycmF5KHZhbHVlKSB8fCB0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgfHwgdHlwZW9mIHZhbHVlLnNwbGljZSA9PSAnZnVuY3Rpb24nIHx8XG4gICAgICAgICAgICBpc0J1ZmZlcih2YWx1ZSkgfHwgaXNUeXBlZEFycmF5KHZhbHVlKSB8fCBpc0FyZ3VtZW50cyh2YWx1ZSkpKSB7XG4gICAgICAgIHJldHVybiAhdmFsdWUubGVuZ3RoO1xuICAgICAgfVxuICAgICAgdmFyIHRhZyA9IGdldFRhZyh2YWx1ZSk7XG4gICAgICBpZiAodGFnID09IG1hcFRhZyB8fCB0YWcgPT0gc2V0VGFnKSB7XG4gICAgICAgIHJldHVybiAhdmFsdWUuc2l6ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1Byb3RvdHlwZSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuICFiYXNlS2V5cyh2YWx1ZSkubGVuZ3RoO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBrZXkpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQZXJmb3JtcyBhIGRlZXAgY29tcGFyaXNvbiBiZXR3ZWVuIHR3byB2YWx1ZXMgdG8gZGV0ZXJtaW5lIGlmIHRoZXkgYXJlXG4gICAgICogZXF1aXZhbGVudC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBzdXBwb3J0cyBjb21wYXJpbmcgYXJyYXlzLCBhcnJheSBidWZmZXJzLCBib29sZWFucyxcbiAgICAgKiBkYXRlIG9iamVjdHMsIGVycm9yIG9iamVjdHMsIG1hcHMsIG51bWJlcnMsIGBPYmplY3RgIG9iamVjdHMsIHJlZ2V4ZXMsXG4gICAgICogc2V0cywgc3RyaW5ncywgc3ltYm9scywgYW5kIHR5cGVkIGFycmF5cy4gYE9iamVjdGAgb2JqZWN0cyBhcmUgY29tcGFyZWRcbiAgICAgKiBieSB0aGVpciBvd24sIG5vdCBpbmhlcml0ZWQsIGVudW1lcmFibGUgcHJvcGVydGllcy4gRnVuY3Rpb25zIGFuZCBET01cbiAgICAgKiBub2RlcyBhcmUgY29tcGFyZWQgYnkgc3RyaWN0IGVxdWFsaXR5LCBpLmUuIGA9PT1gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gICAgICogdmFyIG90aGVyID0geyAnYSc6IDEgfTtcbiAgICAgKlxuICAgICAqIF8uaXNFcXVhbChvYmplY3QsIG90aGVyKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBvYmplY3QgPT09IG90aGVyO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNFcXVhbCh2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiBiYXNlSXNFcXVhbCh2YWx1ZSwgb3RoZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaXNFcXVhbGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIHRvIGNvbXBhcmUgdmFsdWVzLiBJZiBgY3VzdG9taXplcmAgcmV0dXJucyBgdW5kZWZpbmVkYCwgY29tcGFyaXNvbnNcbiAgICAgKiBhcmUgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmAgaXMgaW52b2tlZCB3aXRoIHVwIHRvXG4gICAgICogc2l4IGFyZ3VtZW50czogKG9ialZhbHVlLCBvdGhWYWx1ZSBbLCBpbmRleHxrZXksIG9iamVjdCwgb3RoZXIsIHN0YWNrXSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBpc0dyZWV0aW5nKHZhbHVlKSB7XG4gICAgICogICByZXR1cm4gL15oKD86aXxlbGxvKSQvLnRlc3QodmFsdWUpO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIob2JqVmFsdWUsIG90aFZhbHVlKSB7XG4gICAgICogICBpZiAoaXNHcmVldGluZyhvYmpWYWx1ZSkgJiYgaXNHcmVldGluZyhvdGhWYWx1ZSkpIHtcbiAgICAgKiAgICAgcmV0dXJuIHRydWU7XG4gICAgICogICB9XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWydoZWxsbycsICdnb29kYnllJ107XG4gICAgICogdmFyIG90aGVyID0gWydoaScsICdnb29kYnllJ107XG4gICAgICpcbiAgICAgKiBfLmlzRXF1YWxXaXRoKGFycmF5LCBvdGhlciwgY3VzdG9taXplcik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRXF1YWxXaXRoKHZhbHVlLCBvdGhlciwgY3VzdG9taXplcikge1xuICAgICAgY3VzdG9taXplciA9IHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicgPyBjdXN0b21pemVyIDogdW5kZWZpbmVkO1xuICAgICAgdmFyIHJlc3VsdCA9IGN1c3RvbWl6ZXIgPyBjdXN0b21pemVyKHZhbHVlLCBvdGhlcikgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gcmVzdWx0ID09PSB1bmRlZmluZWQgPyBiYXNlSXNFcXVhbCh2YWx1ZSwgb3RoZXIsIHVuZGVmaW5lZCwgY3VzdG9taXplcikgOiAhIXJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhbiBgRXJyb3JgLCBgRXZhbEVycm9yYCwgYFJhbmdlRXJyb3JgLCBgUmVmZXJlbmNlRXJyb3JgLFxuICAgICAqIGBTeW50YXhFcnJvcmAsIGBUeXBlRXJyb3JgLCBvciBgVVJJRXJyb3JgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gZXJyb3Igb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNFcnJvcihuZXcgRXJyb3IpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNFcnJvcihFcnJvcik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0Vycm9yKHZhbHVlKSB7XG4gICAgICBpZiAoIWlzT2JqZWN0TGlrZSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHRhZyA9IGJhc2VHZXRUYWcodmFsdWUpO1xuICAgICAgcmV0dXJuIHRhZyA9PSBlcnJvclRhZyB8fCB0YWcgPT0gZG9tRXhjVGFnIHx8XG4gICAgICAgICh0eXBlb2YgdmFsdWUubWVzc2FnZSA9PSAnc3RyaW5nJyAmJiB0eXBlb2YgdmFsdWUubmFtZSA9PSAnc3RyaW5nJyAmJiAhaXNQbGFpbk9iamVjdCh2YWx1ZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgZmluaXRlIHByaW1pdGl2ZSBudW1iZXIuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAgICAgKiBbYE51bWJlci5pc0Zpbml0ZWBdKGh0dHBzOi8vbWRuLmlvL051bWJlci9pc0Zpbml0ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZmluaXRlIG51bWJlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzRmluaXRlKDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNGaW5pdGUoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0Zpbml0ZShJbmZpbml0eSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNGaW5pdGUoJzMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRmluaXRlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmIG5hdGl2ZUlzRmluaXRlKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYEZ1bmN0aW9uYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZnVuY3Rpb24sIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0Z1bmN0aW9uKF8pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNGdW5jdGlvbigvYWJjLyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gICAgICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICAvLyBUaGUgdXNlIG9mIGBPYmplY3QjdG9TdHJpbmdgIGF2b2lkcyBpc3N1ZXMgd2l0aCB0aGUgYHR5cGVvZmAgb3BlcmF0b3JcbiAgICAgIC8vIGluIFNhZmFyaSA5IHdoaWNoIHJldHVybnMgJ29iamVjdCcgZm9yIHR5cGVkIGFycmF5cyBhbmQgb3RoZXIgY29uc3RydWN0b3JzLlxuICAgICAgdmFyIHRhZyA9IGJhc2VHZXRUYWcodmFsdWUpO1xuICAgICAgcmV0dXJuIHRhZyA9PSBmdW5jVGFnIHx8IHRhZyA9PSBnZW5UYWcgfHwgdGFnID09IGFzeW5jVGFnIHx8IHRhZyA9PSBwcm94eVRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhbiBpbnRlZ2VyLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BOdW1iZXIuaXNJbnRlZ2VyYF0oaHR0cHM6Ly9tZG4uaW8vTnVtYmVyL2lzSW50ZWdlcikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGludGVnZXIsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0ludGVnZXIoMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0ludGVnZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNJbnRlZ2VyKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0ludGVnZXIoJzMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzSW50ZWdlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJiB2YWx1ZSA9PSB0b0ludGVnZXIodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBsZW5ndGguXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvblxuICAgICAqIFtgVG9MZW5ndGhgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10b2xlbmd0aCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgbGVuZ3RoLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNMZW5ndGgoMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0xlbmd0aChOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0xlbmd0aChJbmZpbml0eSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNMZW5ndGgoJzMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTGVuZ3RoKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmXG4gICAgICAgIHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPD0gTUFYX1NBRkVfSU5URUdFUjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyB0aGVcbiAgICAgKiBbbGFuZ3VhZ2UgdHlwZV0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMpXG4gICAgICogb2YgYE9iamVjdGAuIChlLmcuIGFycmF5cywgZnVuY3Rpb25zLCBvYmplY3RzLCByZWdleGVzLCBgbmV3IE51bWJlcigwKWAsIGFuZCBgbmV3IFN0cmluZygnJylgKVxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdCh7fSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3QoXy5ub29wKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0KG51bGwpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgICAgIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICAgICAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgKHR5cGUgPT0gJ29iamVjdCcgfHwgdHlwZSA9PSAnZnVuY3Rpb24nKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGBcbiAgICAgKiBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3RMaWtlKHt9KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3RMaWtlKG51bGwpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBNYXBgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjMuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBtYXAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc01hcChuZXcgTWFwKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTWFwKG5ldyBXZWFrTWFwKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc01hcCA9IG5vZGVJc01hcCA/IGJhc2VVbmFyeShub2RlSXNNYXApIDogYmFzZUlzTWFwO1xuXG4gICAgLyoqXG4gICAgICogUGVyZm9ybXMgYSBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbiBiZXR3ZWVuIGBvYmplY3RgIGFuZCBgc291cmNlYCB0b1xuICAgICAqIGRldGVybWluZSBpZiBgb2JqZWN0YCBjb250YWlucyBlcXVpdmFsZW50IHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBlcXVpdmFsZW50IHRvIGBfLm1hdGNoZXNgIHdoZW4gYHNvdXJjZWAgaXNcbiAgICAgKiBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKlxuICAgICAqIFBhcnRpYWwgY29tcGFyaXNvbnMgd2lsbCBtYXRjaCBlbXB0eSBhcnJheSBhbmQgZW1wdHkgb2JqZWN0IGBzb3VyY2VgXG4gICAgICogdmFsdWVzIGFnYWluc3QgYW55IGFycmF5IG9yIG9iamVjdCB2YWx1ZSwgcmVzcGVjdGl2ZWx5LiBTZWUgYF8uaXNFcXVhbGBcbiAgICAgKiBmb3IgYSBsaXN0IG9mIHN1cHBvcnRlZCB2YWx1ZSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgaXMgYSBtYXRjaCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiB9O1xuICAgICAqXG4gICAgICogXy5pc01hdGNoKG9iamVjdCwgeyAnYic6IDIgfSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc01hdGNoKG9iamVjdCwgeyAnYic6IDEgfSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc01hdGNoKG9iamVjdCwgc291cmNlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09PSBzb3VyY2UgfHwgYmFzZUlzTWF0Y2gob2JqZWN0LCBzb3VyY2UsIGdldE1hdGNoRGF0YShzb3VyY2UpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmlzTWF0Y2hgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBjb21wYXJlIHZhbHVlcy4gSWYgYGN1c3RvbWl6ZXJgIHJldHVybnMgYHVuZGVmaW5lZGAsIGNvbXBhcmlzb25zXG4gICAgICogYXJlIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgIGlzIGludm9rZWQgd2l0aCBmaXZlXG4gICAgICogYXJndW1lbnRzOiAob2JqVmFsdWUsIHNyY1ZhbHVlLCBpbmRleHxrZXksIG9iamVjdCwgc291cmNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgaXMgYSBtYXRjaCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBpc0dyZWV0aW5nKHZhbHVlKSB7XG4gICAgICogICByZXR1cm4gL15oKD86aXxlbGxvKSQvLnRlc3QodmFsdWUpO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlKSB7XG4gICAgICogICBpZiAoaXNHcmVldGluZyhvYmpWYWx1ZSkgJiYgaXNHcmVldGluZyhzcmNWYWx1ZSkpIHtcbiAgICAgKiAgICAgcmV0dXJuIHRydWU7XG4gICAgICogICB9XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2dyZWV0aW5nJzogJ2hlbGxvJyB9O1xuICAgICAqIHZhciBzb3VyY2UgPSB7ICdncmVldGluZyc6ICdoaScgfTtcbiAgICAgKlxuICAgICAqIF8uaXNNYXRjaFdpdGgob2JqZWN0LCBzb3VyY2UsIGN1c3RvbWl6ZXIpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc01hdGNoV2l0aChvYmplY3QsIHNvdXJjZSwgY3VzdG9taXplcikge1xuICAgICAgY3VzdG9taXplciA9IHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicgPyBjdXN0b21pemVyIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIGJhc2VJc01hdGNoKG9iamVjdCwgc291cmNlLCBnZXRNYXRjaERhdGEoc291cmNlKSwgY3VzdG9taXplcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYE5hTmAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAgICAgKiBbYE51bWJlci5pc05hTmBdKGh0dHBzOi8vbWRuLmlvL051bWJlci9pc05hTikgYW5kIGlzIG5vdCB0aGUgc2FtZSBhc1xuICAgICAqIGdsb2JhbCBbYGlzTmFOYF0oaHR0cHM6Ly9tZG4uaW8vaXNOYU4pIHdoaWNoIHJldHVybnMgYHRydWVgIGZvclxuICAgICAqIGB1bmRlZmluZWRgIGFuZCBvdGhlciBub24tbnVtYmVyIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYE5hTmAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc05hTihOYU4pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOYU4obmV3IE51bWJlcihOYU4pKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBpc05hTih1bmRlZmluZWQpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOYU4odW5kZWZpbmVkKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTmFOKHZhbHVlKSB7XG4gICAgICAvLyBBbiBgTmFOYCBwcmltaXRpdmUgaXMgdGhlIG9ubHkgdmFsdWUgdGhhdCBpcyBub3QgZXF1YWwgdG8gaXRzZWxmLlxuICAgICAgLy8gUGVyZm9ybSB0aGUgYHRvU3RyaW5nVGFnYCBjaGVjayBmaXJzdCB0byBhdm9pZCBlcnJvcnMgd2l0aCBzb21lXG4gICAgICAvLyBBY3RpdmVYIG9iamVjdHMgaW4gSUUuXG4gICAgICByZXR1cm4gaXNOdW1iZXIodmFsdWUpICYmIHZhbHVlICE9ICt2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHByaXN0aW5lIG5hdGl2ZSBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBjYW4ndCByZWxpYWJseSBkZXRlY3QgbmF0aXZlIGZ1bmN0aW9ucyBpbiB0aGUgcHJlc2VuY2VcbiAgICAgKiBvZiB0aGUgY29yZS1qcyBwYWNrYWdlIGJlY2F1c2UgY29yZS1qcyBjaXJjdW12ZW50cyB0aGlzIGtpbmQgb2YgZGV0ZWN0aW9uLlxuICAgICAqIERlc3BpdGUgbXVsdGlwbGUgcmVxdWVzdHMsIHRoZSBjb3JlLWpzIG1haW50YWluZXIgaGFzIG1hZGUgaXQgY2xlYXI6IGFueVxuICAgICAqIGF0dGVtcHQgdG8gZml4IHRoZSBkZXRlY3Rpb24gd2lsbCBiZSBvYnN0cnVjdGVkLiBBcyBhIHJlc3VsdCwgd2UncmUgbGVmdFxuICAgICAqIHdpdGggbGl0dGxlIGNob2ljZSBidXQgdG8gdGhyb3cgYW4gZXJyb3IuIFVuZm9ydHVuYXRlbHksIHRoaXMgYWxzbyBhZmZlY3RzXG4gICAgICogcGFja2FnZXMsIGxpa2UgW2JhYmVsLXBvbHlmaWxsXShodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9iYWJlbC1wb2x5ZmlsbCksXG4gICAgICogd2hpY2ggcmVseSBvbiBjb3JlLWpzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG5hdGl2ZSBmdW5jdGlvbixcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzTmF0aXZlKEFycmF5LnByb3RvdHlwZS5wdXNoKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTmF0aXZlKF8pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNOYXRpdmUodmFsdWUpIHtcbiAgICAgIGlmIChpc01hc2thYmxlKHZhbHVlKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoQ09SRV9FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlSXNOYXRpdmUodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGBudWxsYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYG51bGxgLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNOdWxsKG51bGwpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOdWxsKHZvaWQgMCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc051bGwodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBgbnVsbGAgb3IgYHVuZGVmaW5lZGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG51bGxpc2gsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc05pbChudWxsKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTmlsKHZvaWQgMCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc05pbChOYU4pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNOaWwodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PSBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgTnVtYmVyYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRvIGV4Y2x1ZGUgYEluZmluaXR5YCwgYC1JbmZpbml0eWAsIGFuZCBgTmFOYCwgd2hpY2ggYXJlXG4gICAgICogY2xhc3NpZmllZCBhcyBudW1iZXJzLCB1c2UgdGhlIGBfLmlzRmluaXRlYCBtZXRob2QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbnVtYmVyLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNOdW1iZXIoMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc051bWJlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTnVtYmVyKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTnVtYmVyKCczJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc051bWJlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyB8fFxuICAgICAgICAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBudW1iZXJUYWcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgcGxhaW4gb2JqZWN0LCB0aGF0IGlzLCBhbiBvYmplY3QgY3JlYXRlZCBieSB0aGVcbiAgICAgKiBgT2JqZWN0YCBjb25zdHJ1Y3RvciBvciBvbmUgd2l0aCBhIGBbW1Byb3RvdHlwZV1dYCBvZiBgbnVsbGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC44LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcGxhaW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5pc1BsYWluT2JqZWN0KG5ldyBGb28pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzUGxhaW5PYmplY3QoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc1BsYWluT2JqZWN0KHsgJ3gnOiAwLCAneSc6IDAgfSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1BsYWluT2JqZWN0KE9iamVjdC5jcmVhdGUobnVsbCkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1BsYWluT2JqZWN0KHZhbHVlKSB7XG4gICAgICBpZiAoIWlzT2JqZWN0TGlrZSh2YWx1ZSkgfHwgYmFzZUdldFRhZyh2YWx1ZSkgIT0gb2JqZWN0VGFnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBwcm90byA9IGdldFByb3RvdHlwZSh2YWx1ZSk7XG4gICAgICBpZiAocHJvdG8gPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICB2YXIgQ3RvciA9IGhhc093blByb3BlcnR5LmNhbGwocHJvdG8sICdjb25zdHJ1Y3RvcicpICYmIHByb3RvLmNvbnN0cnVjdG9yO1xuICAgICAgcmV0dXJuIHR5cGVvZiBDdG9yID09ICdmdW5jdGlvbicgJiYgQ3RvciBpbnN0YW5jZW9mIEN0b3IgJiZcbiAgICAgICAgZnVuY1RvU3RyaW5nLmNhbGwoQ3RvcikgPT0gb2JqZWN0Q3RvclN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFJlZ0V4cGAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHJlZ2V4cCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzUmVnRXhwKC9hYmMvKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzUmVnRXhwKCcvYWJjLycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzUmVnRXhwID0gbm9kZUlzUmVnRXhwID8gYmFzZVVuYXJ5KG5vZGVJc1JlZ0V4cCkgOiBiYXNlSXNSZWdFeHA7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHNhZmUgaW50ZWdlci4gQW4gaW50ZWdlciBpcyBzYWZlIGlmIGl0J3MgYW4gSUVFRS03NTRcbiAgICAgKiBkb3VibGUgcHJlY2lzaW9uIG51bWJlciB3aGljaCBpc24ndCB0aGUgcmVzdWx0IG9mIGEgcm91bmRlZCB1bnNhZmUgaW50ZWdlci5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvblxuICAgICAqIFtgTnVtYmVyLmlzU2FmZUludGVnZXJgXShodHRwczovL21kbi5pby9OdW1iZXIvaXNTYWZlSW50ZWdlcikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc2FmZSBpbnRlZ2VyLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNTYWZlSW50ZWdlcigzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzU2FmZUludGVnZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNTYWZlSW50ZWdlcihJbmZpbml0eSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNTYWZlSW50ZWdlcignMycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNTYWZlSW50ZWdlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzSW50ZWdlcih2YWx1ZSkgJiYgdmFsdWUgPj0gLU1BWF9TQUZFX0lOVEVHRVIgJiYgdmFsdWUgPD0gTUFYX1NBRkVfSU5URUdFUjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFNldGAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMy4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHNldCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzU2V0KG5ldyBTZXQpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNTZXQobmV3IFdlYWtTZXQpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzU2V0ID0gbm9kZUlzU2V0ID8gYmFzZVVuYXJ5KG5vZGVJc1NldCkgOiBiYXNlSXNTZXQ7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFN0cmluZ2AgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzdHJpbmcsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1N0cmluZygnYWJjJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1N0cmluZygxKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzU3RyaW5nKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8XG4gICAgICAgICghaXNBcnJheSh2YWx1ZSkgJiYgaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBzdHJpbmdUYWcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU3ltYm9sYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHN5bWJvbCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzU3ltYm9sKFN5bWJvbC5pdGVyYXRvcik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1N5bWJvbCgnYWJjJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1N5bWJvbCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnc3ltYm9sJyB8fFxuICAgICAgICAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBzeW1ib2xUYWcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSB0eXBlZCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB0eXBlZCBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzVHlwZWRBcnJheShuZXcgVWludDhBcnJheSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1R5cGVkQXJyYXkoW10pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzVHlwZWRBcnJheSA9IG5vZGVJc1R5cGVkQXJyYXkgPyBiYXNlVW5hcnkobm9kZUlzVHlwZWRBcnJheSkgOiBiYXNlSXNUeXBlZEFycmF5O1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYHVuZGVmaW5lZGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGB1bmRlZmluZWRgLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNVbmRlZmluZWQodm9pZCAwKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzVW5kZWZpbmVkKG51bGwpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNVbmRlZmluZWQodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgV2Vha01hcGAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMy4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHdlYWsgbWFwLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNXZWFrTWFwKG5ldyBXZWFrTWFwKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzV2Vha01hcChuZXcgTWFwKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzV2Vha01hcCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgZ2V0VGFnKHZhbHVlKSA9PSB3ZWFrTWFwVGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgV2Vha1NldGAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMy4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHdlYWsgc2V0LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNXZWFrU2V0KG5ldyBXZWFrU2V0KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzV2Vha1NldChuZXcgU2V0KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzV2Vha1NldCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gd2Vha1NldFRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsZXNzIHRoYW4gYG90aGVyYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjkuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGxlc3MgdGhhbiBgb3RoZXJgLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQHNlZSBfLmd0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubHQoMSwgMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5sdCgzLCAzKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5sdCgzLCAxKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBsdCA9IGNyZWF0ZVJlbGF0aW9uYWxPcGVyYXRpb24oYmFzZUx0KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0byBgb3RoZXJgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgbGVzcyB0aGFuIG9yIGVxdWFsIHRvXG4gICAgICogIGBvdGhlcmAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAc2VlIF8uZ3RlXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubHRlKDEsIDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8ubHRlKDMsIDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8ubHRlKDMsIDEpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGx0ZSA9IGNyZWF0ZVJlbGF0aW9uYWxPcGVyYXRpb24oZnVuY3Rpb24odmFsdWUsIG90aGVyKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPD0gb3RoZXI7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGFuIGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY29udmVydGVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvQXJyYXkoeyAnYSc6IDEsICdiJzogMiB9KTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKlxuICAgICAqIF8udG9BcnJheSgnYWJjJyk7XG4gICAgICogLy8gPT4gWydhJywgJ2InLCAnYyddXG4gICAgICpcbiAgICAgKiBfLnRvQXJyYXkoMSk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKlxuICAgICAqIF8udG9BcnJheShudWxsKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvQXJyYXkodmFsdWUpIHtcbiAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgaWYgKGlzQXJyYXlMaWtlKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gaXNTdHJpbmcodmFsdWUpID8gc3RyaW5nVG9BcnJheSh2YWx1ZSkgOiBjb3B5QXJyYXkodmFsdWUpO1xuICAgICAgfVxuICAgICAgaWYgKHN5bUl0ZXJhdG9yICYmIHZhbHVlW3N5bUl0ZXJhdG9yXSkge1xuICAgICAgICByZXR1cm4gaXRlcmF0b3JUb0FycmF5KHZhbHVlW3N5bUl0ZXJhdG9yXSgpKTtcbiAgICAgIH1cbiAgICAgIHZhciB0YWcgPSBnZXRUYWcodmFsdWUpLFxuICAgICAgICAgIGZ1bmMgPSB0YWcgPT0gbWFwVGFnID8gbWFwVG9BcnJheSA6ICh0YWcgPT0gc2V0VGFnID8gc2V0VG9BcnJheSA6IHZhbHVlcyk7XG5cbiAgICAgIHJldHVybiBmdW5jKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgZmluaXRlIG51bWJlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEyLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29udmVydGVkIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b0Zpbml0ZSgzLjIpO1xuICAgICAqIC8vID0+IDMuMlxuICAgICAqXG4gICAgICogXy50b0Zpbml0ZShOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiA1ZS0zMjRcbiAgICAgKlxuICAgICAqIF8udG9GaW5pdGUoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IDEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4XG4gICAgICpcbiAgICAgKiBfLnRvRmluaXRlKCczLjInKTtcbiAgICAgKiAvLyA9PiAzLjJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0Zpbml0ZSh2YWx1ZSkge1xuICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdmFsdWUgPT09IDAgPyB2YWx1ZSA6IDA7XG4gICAgICB9XG4gICAgICB2YWx1ZSA9IHRvTnVtYmVyKHZhbHVlKTtcbiAgICAgIGlmICh2YWx1ZSA9PT0gSU5GSU5JVFkgfHwgdmFsdWUgPT09IC1JTkZJTklUWSkge1xuICAgICAgICB2YXIgc2lnbiA9ICh2YWx1ZSA8IDAgPyAtMSA6IDEpO1xuICAgICAgICByZXR1cm4gc2lnbiAqIE1BWF9JTlRFR0VSO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZSA/IHZhbHVlIDogMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGFuIGludGVnZXIuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvblxuICAgICAqIFtgVG9JbnRlZ2VyYF0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRvaW50ZWdlcikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29udmVydGVkIGludGVnZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9JbnRlZ2VyKDMuMik7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy50b0ludGVnZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogXy50b0ludGVnZXIoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IDEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4XG4gICAgICpcbiAgICAgKiBfLnRvSW50ZWdlcignMy4yJyk7XG4gICAgICogLy8gPT4gM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvSW50ZWdlcih2YWx1ZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IHRvRmluaXRlKHZhbHVlKSxcbiAgICAgICAgICByZW1haW5kZXIgPSByZXN1bHQgJSAxO1xuXG4gICAgICByZXR1cm4gcmVzdWx0ID09PSByZXN1bHQgPyAocmVtYWluZGVyID8gcmVzdWx0IC0gcmVtYWluZGVyIDogcmVzdWx0KSA6IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhbiBpbnRlZ2VyIHN1aXRhYmxlIGZvciB1c2UgYXMgdGhlIGxlbmd0aCBvZiBhblxuICAgICAqIGFycmF5LWxpa2Ugb2JqZWN0LlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BUb0xlbmd0aGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRvbGVuZ3RoKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgaW50ZWdlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b0xlbmd0aCgzLjIpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8udG9MZW5ndGgoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogXy50b0xlbmd0aChJbmZpbml0eSk7XG4gICAgICogLy8gPT4gNDI5NDk2NzI5NVxuICAgICAqXG4gICAgICogXy50b0xlbmd0aCgnMy4yJyk7XG4gICAgICogLy8gPT4gM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvTGVuZ3RoKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPyBiYXNlQ2xhbXAodG9JbnRlZ2VyKHZhbHVlKSwgMCwgTUFYX0FSUkFZX0xFTkdUSCkgOiAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBudW1iZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvTnVtYmVyKDMuMik7XG4gICAgICogLy8gPT4gMy4yXG4gICAgICpcbiAgICAgKiBfLnRvTnVtYmVyKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IDVlLTMyNFxuICAgICAqXG4gICAgICogXy50b051bWJlcihJbmZpbml0eSk7XG4gICAgICogLy8gPT4gSW5maW5pdHlcbiAgICAgKlxuICAgICAqIF8udG9OdW1iZXIoJzMuMicpO1xuICAgICAqIC8vID0+IDMuMlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvTnVtYmVyKHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdudW1iZXInKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIE5BTjtcbiAgICAgIH1cbiAgICAgIGlmIChpc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgdmFyIG90aGVyID0gdHlwZW9mIHZhbHVlLnZhbHVlT2YgPT0gJ2Z1bmN0aW9uJyA/IHZhbHVlLnZhbHVlT2YoKSA6IHZhbHVlO1xuICAgICAgICB2YWx1ZSA9IGlzT2JqZWN0KG90aGVyKSA/IChvdGhlciArICcnKSA6IG90aGVyO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gdmFsdWUgPT09IDAgPyB2YWx1ZSA6ICt2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZShyZVRyaW0sICcnKTtcbiAgICAgIHZhciBpc0JpbmFyeSA9IHJlSXNCaW5hcnkudGVzdCh2YWx1ZSk7XG4gICAgICByZXR1cm4gKGlzQmluYXJ5IHx8IHJlSXNPY3RhbC50ZXN0KHZhbHVlKSlcbiAgICAgICAgPyBmcmVlUGFyc2VJbnQodmFsdWUuc2xpY2UoMiksIGlzQmluYXJ5ID8gMiA6IDgpXG4gICAgICAgIDogKHJlSXNCYWRIZXgudGVzdCh2YWx1ZSkgPyBOQU4gOiArdmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBwbGFpbiBvYmplY3QgZmxhdHRlbmluZyBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmdcbiAgICAgKiBrZXllZCBwcm9wZXJ0aWVzIG9mIGB2YWx1ZWAgdG8gb3duIHByb3BlcnRpZXMgb2YgdGhlIHBsYWluIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgcGxhaW4gb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmFzc2lnbih7ICdhJzogMSB9LCBuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKlxuICAgICAqIF8uYXNzaWduKHsgJ2EnOiAxIH0sIF8udG9QbGFpbk9iamVjdChuZXcgRm9vKSk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b1BsYWluT2JqZWN0KHZhbHVlKSB7XG4gICAgICByZXR1cm4gY29weU9iamVjdCh2YWx1ZSwga2V5c0luKHZhbHVlKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIHNhZmUgaW50ZWdlci4gQSBzYWZlIGludGVnZXIgY2FuIGJlIGNvbXBhcmVkIGFuZFxuICAgICAqIHJlcHJlc2VudGVkIGNvcnJlY3RseS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgaW50ZWdlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b1NhZmVJbnRlZ2VyKDMuMik7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy50b1NhZmVJbnRlZ2VyKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIF8udG9TYWZlSW50ZWdlcihJbmZpbml0eSk7XG4gICAgICogLy8gPT4gOTAwNzE5OTI1NDc0MDk5MVxuICAgICAqXG4gICAgICogXy50b1NhZmVJbnRlZ2VyKCczLjInKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9TYWZlSW50ZWdlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlXG4gICAgICAgID8gYmFzZUNsYW1wKHRvSW50ZWdlcih2YWx1ZSksIC1NQVhfU0FGRV9JTlRFR0VSLCBNQVhfU0FGRV9JTlRFR0VSKVxuICAgICAgICA6ICh2YWx1ZSA9PT0gMCA/IHZhbHVlIDogMCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZy4gQW4gZW1wdHkgc3RyaW5nIGlzIHJldHVybmVkIGZvciBgbnVsbGBcbiAgICAgKiBhbmQgYHVuZGVmaW5lZGAgdmFsdWVzLiBUaGUgc2lnbiBvZiBgLTBgIGlzIHByZXNlcnZlZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvU3RyaW5nKG51bGwpO1xuICAgICAqIC8vID0+ICcnXG4gICAgICpcbiAgICAgKiBfLnRvU3RyaW5nKC0wKTtcbiAgICAgKiAvLyA9PiAnLTAnXG4gICAgICpcbiAgICAgKiBfLnRvU3RyaW5nKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gJzEsMiwzJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvU3RyaW5nKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/ICcnIDogYmFzZVRvU3RyaW5nKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBBc3NpZ25zIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIG9mIHNvdXJjZSBvYmplY3RzIHRvIHRoZVxuICAgICAqIGRlc3RpbmF0aW9uIG9iamVjdC4gU291cmNlIG9iamVjdHMgYXJlIGFwcGxpZWQgZnJvbSBsZWZ0IHRvIHJpZ2h0LlxuICAgICAqIFN1YnNlcXVlbnQgc291cmNlcyBvdmVyd3JpdGUgcHJvcGVydHkgYXNzaWdubWVudHMgb2YgcHJldmlvdXMgc291cmNlcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgIGFuZCBpcyBsb29zZWx5IGJhc2VkIG9uXG4gICAgICogW2BPYmplY3QuYXNzaWduYF0oaHR0cHM6Ly9tZG4uaW8vT2JqZWN0L2Fzc2lnbikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gW3NvdXJjZXNdIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5hc3NpZ25JblxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEJhcigpIHtcbiAgICAgKiAgIHRoaXMuYyA9IDM7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5iID0gMjtcbiAgICAgKiBCYXIucHJvdG90eXBlLmQgPSA0O1xuICAgICAqXG4gICAgICogXy5hc3NpZ24oeyAnYSc6IDAgfSwgbmV3IEZvbywgbmV3IEJhcik7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdjJzogMyB9XG4gICAgICovXG4gICAgdmFyIGFzc2lnbiA9IGNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlKSB7XG4gICAgICBpZiAoaXNQcm90b3R5cGUoc291cmNlKSB8fCBpc0FycmF5TGlrZShzb3VyY2UpKSB7XG4gICAgICAgIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzKHNvdXJjZSksIG9iamVjdCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgYXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHNvdXJjZVtrZXldKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5hc3NpZ25gIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgb3duIGFuZFxuICAgICAqIGluaGVyaXRlZCBzb3VyY2UgcHJvcGVydGllcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGFsaWFzIGV4dGVuZFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IFtzb3VyY2VzXSBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uYXNzaWduXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogfVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gQmFyKCkge1xuICAgICAqICAgdGhpcy5jID0gMztcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmIgPSAyO1xuICAgICAqIEJhci5wcm90b3R5cGUuZCA9IDQ7XG4gICAgICpcbiAgICAgKiBfLmFzc2lnbkluKHsgJ2EnOiAwIH0sIG5ldyBGb28sIG5ldyBCYXIpO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMywgJ2QnOiA0IH1cbiAgICAgKi9cbiAgICB2YXIgYXNzaWduSW4gPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSkge1xuICAgICAgY29weU9iamVjdChzb3VyY2UsIGtleXNJbihzb3VyY2UpLCBvYmplY3QpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5hc3NpZ25JbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIHRvIHByb2R1Y2UgdGhlIGFzc2lnbmVkIHZhbHVlcy4gSWYgYGN1c3RvbWl6ZXJgIHJldHVybnNcbiAgICAgKiBgdW5kZWZpbmVkYCwgYXNzaWdubWVudCBpcyBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYFxuICAgICAqIGlzIGludm9rZWQgd2l0aCBmaXZlIGFyZ3VtZW50czogKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QsIHNvdXJjZSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBhbGlhcyBleHRlbmRXaXRoXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gc291cmNlcyBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmFzc2lnbldpdGhcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUpIHtcbiAgICAgKiAgIHJldHVybiBfLmlzVW5kZWZpbmVkKG9ialZhbHVlKSA/IHNyY1ZhbHVlIDogb2JqVmFsdWU7XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGRlZmF1bHRzID0gXy5wYXJ0aWFsUmlnaHQoXy5hc3NpZ25JbldpdGgsIGN1c3RvbWl6ZXIpO1xuICAgICAqXG4gICAgICogZGVmYXVsdHMoeyAnYSc6IDEgfSwgeyAnYic6IDIgfSwgeyAnYSc6IDMgfSk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiB9XG4gICAgICovXG4gICAgdmFyIGFzc2lnbkluV2l0aCA9IGNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCwgY3VzdG9taXplcikge1xuICAgICAgY29weU9iamVjdChzb3VyY2UsIGtleXNJbihzb3VyY2UpLCBvYmplY3QsIGN1c3RvbWl6ZXIpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5hc3NpZ25gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgXG4gICAgICogd2hpY2ggaXMgaW52b2tlZCB0byBwcm9kdWNlIHRoZSBhc3NpZ25lZCB2YWx1ZXMuIElmIGBjdXN0b21pemVyYCByZXR1cm5zXG4gICAgICogYHVuZGVmaW5lZGAsIGFzc2lnbm1lbnQgaXMgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmBcbiAgICAgKiBpcyBpbnZva2VkIHdpdGggZml2ZSBhcmd1bWVudHM6IChvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0LCBzb3VyY2UpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBzb3VyY2VzIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uYXNzaWduSW5XaXRoXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlKSB7XG4gICAgICogICByZXR1cm4gXy5pc1VuZGVmaW5lZChvYmpWYWx1ZSkgPyBzcmNWYWx1ZSA6IG9ialZhbHVlO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBkZWZhdWx0cyA9IF8ucGFydGlhbFJpZ2h0KF8uYXNzaWduV2l0aCwgY3VzdG9taXplcik7XG4gICAgICpcbiAgICAgKiBkZWZhdWx0cyh7ICdhJzogMSB9LCB7ICdiJzogMiB9LCB7ICdhJzogMyB9KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKi9cbiAgICB2YXIgYXNzaWduV2l0aCA9IGNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCwgY3VzdG9taXplcikge1xuICAgICAgY29weU9iamVjdChzb3VyY2UsIGtleXMoc291cmNlKSwgb2JqZWN0LCBjdXN0b21pemVyKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdmFsdWVzIGNvcnJlc3BvbmRpbmcgdG8gYHBhdGhzYCBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7Li4uKHN0cmluZ3xzdHJpbmdbXSl9IFtwYXRoc10gVGhlIHByb3BlcnR5IHBhdGhzIHRvIHBpY2suXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBwaWNrZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDMgfSB9LCA0XSB9O1xuICAgICAqXG4gICAgICogXy5hdChvYmplY3QsIFsnYVswXS5iLmMnLCAnYVsxXSddKTtcbiAgICAgKiAvLyA9PiBbMywgNF1cbiAgICAgKi9cbiAgICB2YXIgYXQgPSBmbGF0UmVzdChiYXNlQXQpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgdGhhdCBpbmhlcml0cyBmcm9tIHRoZSBgcHJvdG90eXBlYCBvYmplY3QuIElmIGFcbiAgICAgKiBgcHJvcGVydGllc2Agb2JqZWN0IGlzIGdpdmVuLCBpdHMgb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXNcbiAgICAgKiBhcmUgYXNzaWduZWQgdG8gdGhlIGNyZWF0ZWQgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwcm90b3R5cGUgVGhlIG9iamVjdCB0byBpbmhlcml0IGZyb20uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtwcm9wZXJ0aWVzXSBUaGUgcHJvcGVydGllcyB0byBhc3NpZ24gdG8gdGhlIG9iamVjdC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBTaGFwZSgpIHtcbiAgICAgKiAgIHRoaXMueCA9IDA7XG4gICAgICogICB0aGlzLnkgPSAwO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIENpcmNsZSgpIHtcbiAgICAgKiAgIFNoYXBlLmNhbGwodGhpcyk7XG4gICAgICogfVxuICAgICAqXG4gICAgICogQ2lyY2xlLnByb3RvdHlwZSA9IF8uY3JlYXRlKFNoYXBlLnByb3RvdHlwZSwge1xuICAgICAqICAgJ2NvbnN0cnVjdG9yJzogQ2lyY2xlXG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiB2YXIgY2lyY2xlID0gbmV3IENpcmNsZTtcbiAgICAgKiBjaXJjbGUgaW5zdGFuY2VvZiBDaXJjbGU7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogY2lyY2xlIGluc3RhbmNlb2YgU2hhcGU7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZShwcm90b3R5cGUsIHByb3BlcnRpZXMpIHtcbiAgICAgIHZhciByZXN1bHQgPSBiYXNlQ3JlYXRlKHByb3RvdHlwZSk7XG4gICAgICByZXR1cm4gcHJvcGVydGllcyA9PSBudWxsID8gcmVzdWx0IDogYmFzZUFzc2lnbihyZXN1bHQsIHByb3BlcnRpZXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFzc2lnbnMgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBvZiBzb3VyY2VcbiAgICAgKiBvYmplY3RzIHRvIHRoZSBkZXN0aW5hdGlvbiBvYmplY3QgZm9yIGFsbCBkZXN0aW5hdGlvbiBwcm9wZXJ0aWVzIHRoYXRcbiAgICAgKiByZXNvbHZlIHRvIGB1bmRlZmluZWRgLiBTb3VyY2Ugb2JqZWN0cyBhcmUgYXBwbGllZCBmcm9tIGxlZnQgdG8gcmlnaHQuXG4gICAgICogT25jZSBhIHByb3BlcnR5IGlzIHNldCwgYWRkaXRpb25hbCB2YWx1ZXMgb2YgdGhlIHNhbWUgcHJvcGVydHkgYXJlIGlnbm9yZWQuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IFtzb3VyY2VzXSBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uZGVmYXVsdHNEZWVwXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGVmYXVsdHMoeyAnYSc6IDEgfSwgeyAnYic6IDIgfSwgeyAnYSc6IDMgfSk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiB9XG4gICAgICovXG4gICAgdmFyIGRlZmF1bHRzID0gYmFzZVJlc3QoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2VzKSB7XG4gICAgICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcblxuICAgICAgdmFyIGluZGV4ID0gLTE7XG4gICAgICB2YXIgbGVuZ3RoID0gc291cmNlcy5sZW5ndGg7XG4gICAgICB2YXIgZ3VhcmQgPSBsZW5ndGggPiAyID8gc291cmNlc1syXSA6IHVuZGVmaW5lZDtcblxuICAgICAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKHNvdXJjZXNbMF0sIHNvdXJjZXNbMV0sIGd1YXJkKSkge1xuICAgICAgICBsZW5ndGggPSAxO1xuICAgICAgfVxuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgc291cmNlID0gc291cmNlc1tpbmRleF07XG4gICAgICAgIHZhciBwcm9wcyA9IGtleXNJbihzb3VyY2UpO1xuICAgICAgICB2YXIgcHJvcHNJbmRleCA9IC0xO1xuICAgICAgICB2YXIgcHJvcHNMZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cbiAgICAgICAgd2hpbGUgKCsrcHJvcHNJbmRleCA8IHByb3BzTGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIGtleSA9IHByb3BzW3Byb3BzSW5kZXhdO1xuICAgICAgICAgIHZhciB2YWx1ZSA9IG9iamVjdFtrZXldO1xuXG4gICAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgICAgKGVxKHZhbHVlLCBvYmplY3RQcm90b1trZXldKSAmJiAhaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkpKSB7XG4gICAgICAgICAgICBvYmplY3Rba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5kZWZhdWx0c2AgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgYXNzaWduc1xuICAgICAqIGRlZmF1bHQgcHJvcGVydGllcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMTAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IFtzb3VyY2VzXSBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uZGVmYXVsdHNcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWZhdWx0c0RlZXAoeyAnYSc6IHsgJ2InOiAyIH0gfSwgeyAnYSc6IHsgJ2InOiAxLCAnYyc6IDMgfSB9KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogeyAnYic6IDIsICdjJzogMyB9IH1cbiAgICAgKi9cbiAgICB2YXIgZGVmYXVsdHNEZWVwID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICAgICAgYXJncy5wdXNoKHVuZGVmaW5lZCwgY3VzdG9tRGVmYXVsdHNNZXJnZSk7XG4gICAgICByZXR1cm4gYXBwbHkobWVyZ2VXaXRoLCB1bmRlZmluZWQsIGFyZ3MpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5maW5kYCBleGNlcHQgdGhhdCBpdCByZXR1cm5zIHRoZSBrZXkgb2YgdGhlIGZpcnN0XG4gICAgICogZWxlbWVudCBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IgaW5zdGVhZCBvZiB0aGUgZWxlbWVudCBpdHNlbGYuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd8dW5kZWZpbmVkfSBSZXR1cm5zIHRoZSBrZXkgb2YgdGhlIG1hdGNoZWQgZWxlbWVudCxcbiAgICAgKiAgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0ge1xuICAgICAqICAgJ2Jhcm5leSc6ICB7ICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgICdmcmVkJzogICAgeyAnYWdlJzogNDAsICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgJ3BlYmJsZXMnOiB7ICdhZ2UnOiAxLCAgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiBfLmZpbmRLZXkodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8uYWdlIDwgNDA7IH0pO1xuICAgICAqIC8vID0+ICdiYXJuZXknIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZEtleSh1c2VycywgeyAnYWdlJzogMSwgJ2FjdGl2ZSc6IHRydWUgfSk7XG4gICAgICogLy8gPT4gJ3BlYmJsZXMnXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kS2V5KHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gJ2ZyZWQnXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRLZXkodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiAnYmFybmV5J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbmRLZXkob2JqZWN0LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiBiYXNlRmluZEtleShvYmplY3QsIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIGJhc2VGb3JPd24pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmluZEtleWAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZlxuICAgICAqIGEgY29sbGVjdGlvbiBpbiB0aGUgb3Bwb3NpdGUgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd8dW5kZWZpbmVkfSBSZXR1cm5zIHRoZSBrZXkgb2YgdGhlIG1hdGNoZWQgZWxlbWVudCxcbiAgICAgKiAgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0ge1xuICAgICAqICAgJ2Jhcm5leSc6ICB7ICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgICdmcmVkJzogICAgeyAnYWdlJzogNDAsICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgJ3BlYmJsZXMnOiB7ICdhZ2UnOiAxLCAgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiBfLmZpbmRMYXN0S2V5KHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLmFnZSA8IDQwOyB9KTtcbiAgICAgKiAvLyA9PiByZXR1cm5zICdwZWJibGVzJyBhc3N1bWluZyBgXy5maW5kS2V5YCByZXR1cm5zICdiYXJuZXknXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZExhc3RLZXkodXNlcnMsIHsgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9KTtcbiAgICAgKiAvLyA9PiAnYmFybmV5J1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZExhc3RLZXkodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiAnZnJlZCdcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZExhc3RLZXkodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiAncGViYmxlcydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaW5kTGFzdEtleShvYmplY3QsIHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIGJhc2VGaW5kS2V5KG9iamVjdCwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgYmFzZUZvck93blJpZ2h0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJdGVyYXRlcyBvdmVyIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2YgYW5cbiAgICAgKiBvYmplY3QgYW5kIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgZWFjaCBwcm9wZXJ0eS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBrZXksIG9iamVjdCkuIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdFxuICAgICAqIGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uZm9ySW5SaWdodFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5mb3JJbihuZXcgRm9vLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICogICBjb25zb2xlLmxvZyhrZXkpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgJ2EnLCAnYicsIHRoZW4gJ2MnIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvckluKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbFxuICAgICAgICA/IG9iamVjdFxuICAgICAgICA6IGJhc2VGb3Iob2JqZWN0LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMyksIGtleXNJbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mb3JJbmAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBwcm9wZXJ0aWVzIG9mXG4gICAgICogYG9iamVjdGAgaW4gdGhlIG9wcG9zaXRlIG9yZGVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uZm9ySW5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8uZm9ySW5SaWdodChuZXcgRm9vLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICogICBjb25zb2xlLmxvZyhrZXkpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgJ2MnLCAnYicsIHRoZW4gJ2EnIGFzc3VtaW5nIGBfLmZvckluYCBsb2dzICdhJywgJ2InLCB0aGVuICdjJy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmb3JJblJpZ2h0KG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbFxuICAgICAgICA/IG9iamVjdFxuICAgICAgICA6IGJhc2VGb3JSaWdodChvYmplY3QsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSwga2V5c0luKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJdGVyYXRlcyBvdmVyIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIG9mIGFuIG9iamVjdCBhbmRcbiAgICAgKiBpbnZva2VzIGBpdGVyYXRlZWAgZm9yIGVhY2ggcHJvcGVydHkuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhyZWVcbiAgICAgKiBhcmd1bWVudHM6ICh2YWx1ZSwga2V5LCBvYmplY3QpLiBJdGVyYXRlZSBmdW5jdGlvbnMgbWF5IGV4aXQgaXRlcmF0aW9uXG4gICAgICogZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjMuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmZvck93blJpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmZvck93bihuZXcgRm9vLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICogICBjb25zb2xlLmxvZyhrZXkpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgJ2EnIHRoZW4gJ2InIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvck93bihvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICYmIGJhc2VGb3JPd24ob2JqZWN0LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZm9yT3duYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIHByb3BlcnRpZXMgb2ZcbiAgICAgKiBgb2JqZWN0YCBpbiB0aGUgb3Bwb3NpdGUgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5mb3JPd25cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8uZm9yT3duUmlnaHQobmV3IEZvbywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAqICAgY29uc29sZS5sb2coa2V5KTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzICdiJyB0aGVuICdhJyBhc3N1bWluZyBgXy5mb3JPd25gIGxvZ3MgJ2EnIHRoZW4gJ2InLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvck93blJpZ2h0KG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBvYmplY3QgJiYgYmFzZUZvck93blJpZ2h0KG9iamVjdCwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIGZ1bmN0aW9uIHByb3BlcnR5IG5hbWVzIGZyb20gb3duIGVudW1lcmFibGUgcHJvcGVydGllc1xuICAgICAqIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgZnVuY3Rpb24gbmFtZXMuXG4gICAgICogQHNlZSBfLmZ1bmN0aW9uc0luXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IF8uY29uc3RhbnQoJ2EnKTtcbiAgICAgKiAgIHRoaXMuYiA9IF8uY29uc3RhbnQoJ2InKTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSBfLmNvbnN0YW50KCdjJyk7XG4gICAgICpcbiAgICAgKiBfLmZ1bmN0aW9ucyhuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYiddXG4gICAgICovXG4gICAgZnVuY3Rpb24gZnVuY3Rpb25zKG9iamVjdCkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gW10gOiBiYXNlRnVuY3Rpb25zKG9iamVjdCwga2V5cyhvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIGZ1bmN0aW9uIHByb3BlcnR5IG5hbWVzIGZyb20gb3duIGFuZCBpbmhlcml0ZWRcbiAgICAgKiBlbnVtZXJhYmxlIHByb3BlcnRpZXMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBuYW1lcy5cbiAgICAgKiBAc2VlIF8uZnVuY3Rpb25zXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IF8uY29uc3RhbnQoJ2EnKTtcbiAgICAgKiAgIHRoaXMuYiA9IF8uY29uc3RhbnQoJ2InKTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSBfLmNvbnN0YW50KCdjJyk7XG4gICAgICpcbiAgICAgKiBfLmZ1bmN0aW9uc0luKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFsnYScsICdiJywgJ2MnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZ1bmN0aW9uc0luKG9iamVjdCkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gW10gOiBiYXNlRnVuY3Rpb25zKG9iamVjdCwga2V5c0luKG9iamVjdCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHZhbHVlIGF0IGBwYXRoYCBvZiBgb2JqZWN0YC4gSWYgdGhlIHJlc29sdmVkIHZhbHVlIGlzXG4gICAgICogYHVuZGVmaW5lZGAsIHRoZSBgZGVmYXVsdFZhbHVlYCBpcyByZXR1cm5lZCBpbiBpdHMgcGxhY2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy43LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHBhcmFtIHsqfSBbZGVmYXVsdFZhbHVlXSBUaGUgdmFsdWUgcmV0dXJuZWQgZm9yIGB1bmRlZmluZWRgIHJlc29sdmVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogMyB9IH1dIH07XG4gICAgICpcbiAgICAgKiBfLmdldChvYmplY3QsICdhWzBdLmIuYycpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8uZ2V0KG9iamVjdCwgWydhJywgJzAnLCAnYicsICdjJ10pO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8uZ2V0KG9iamVjdCwgJ2EuYi5jJywgJ2RlZmF1bHQnKTtcbiAgICAgKiAvLyA9PiAnZGVmYXVsdCdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXQob2JqZWN0LCBwYXRoLCBkZWZhdWx0VmFsdWUpIHtcbiAgICAgIHZhciByZXN1bHQgPSBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGJhc2VHZXQob2JqZWN0LCBwYXRoKTtcbiAgICAgIHJldHVybiByZXN1bHQgPT09IHVuZGVmaW5lZCA/IGRlZmF1bHRWYWx1ZSA6IHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHBhdGhgIGlzIGEgZGlyZWN0IHByb3BlcnR5IG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHBhdGhgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IHsgJ2InOiAyIH0gfTtcbiAgICAgKiB2YXIgb3RoZXIgPSBfLmNyZWF0ZSh7ICdhJzogXy5jcmVhdGUoeyAnYic6IDIgfSkgfSk7XG4gICAgICpcbiAgICAgKiBfLmhhcyhvYmplY3QsICdhJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5oYXMob2JqZWN0LCAnYS5iJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5oYXMob2JqZWN0LCBbJ2EnLCAnYiddKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmhhcyhvdGhlciwgJ2EnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhcyhvYmplY3QsIHBhdGgpIHtcbiAgICAgIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiBoYXNQYXRoKG9iamVjdCwgcGF0aCwgYmFzZUhhcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBwYXRoYCBpcyBhIGRpcmVjdCBvciBpbmhlcml0ZWQgcHJvcGVydHkgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgcGF0aGAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSBfLmNyZWF0ZSh7ICdhJzogXy5jcmVhdGUoeyAnYic6IDIgfSkgfSk7XG4gICAgICpcbiAgICAgKiBfLmhhc0luKG9iamVjdCwgJ2EnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmhhc0luKG9iamVjdCwgJ2EuYicpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaGFzSW4ob2JqZWN0LCBbJ2EnLCAnYiddKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmhhc0luKG9iamVjdCwgJ2InKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc0luKG9iamVjdCwgcGF0aCkge1xuICAgICAgcmV0dXJuIG9iamVjdCAhPSBudWxsICYmIGhhc1BhdGgob2JqZWN0LCBwYXRoLCBiYXNlSGFzSW4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIHRoZSBpbnZlcnRlZCBrZXlzIGFuZCB2YWx1ZXMgb2YgYG9iamVjdGAuXG4gICAgICogSWYgYG9iamVjdGAgY29udGFpbnMgZHVwbGljYXRlIHZhbHVlcywgc3Vic2VxdWVudCB2YWx1ZXMgb3ZlcndyaXRlXG4gICAgICogcHJvcGVydHkgYXNzaWdubWVudHMgb2YgcHJldmlvdXMgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnZlcnQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGludmVydGVkIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMSB9O1xuICAgICAqXG4gICAgICogXy5pbnZlcnQob2JqZWN0KTtcbiAgICAgKiAvLyA9PiB7ICcxJzogJ2MnLCAnMic6ICdiJyB9XG4gICAgICovXG4gICAgdmFyIGludmVydCA9IGNyZWF0ZUludmVydGVyKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgaWYgKHZhbHVlICE9IG51bGwgJiZcbiAgICAgICAgICB0eXBlb2YgdmFsdWUudG9TdHJpbmcgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2YWx1ZSA9IG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICAgICAgfVxuXG4gICAgICByZXN1bHRbdmFsdWVdID0ga2V5O1xuICAgIH0sIGNvbnN0YW50KGlkZW50aXR5KSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmludmVydGAgZXhjZXB0IHRoYXQgdGhlIGludmVydGVkIG9iamVjdCBpcyBnZW5lcmF0ZWRcbiAgICAgKiBmcm9tIHRoZSByZXN1bHRzIG9mIHJ1bm5pbmcgZWFjaCBlbGVtZW50IG9mIGBvYmplY3RgIHRocnUgYGl0ZXJhdGVlYC4gVGhlXG4gICAgICogY29ycmVzcG9uZGluZyBpbnZlcnRlZCB2YWx1ZSBvZiBlYWNoIGludmVydGVkIGtleSBpcyBhbiBhcnJheSBvZiBrZXlzXG4gICAgICogcmVzcG9uc2libGUgZm9yIGdlbmVyYXRpbmcgdGhlIGludmVydGVkIHZhbHVlLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZFxuICAgICAqIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMS4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnZlcnQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBpbnZlcnRlZCBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDEgfTtcbiAgICAgKlxuICAgICAqIF8uaW52ZXJ0Qnkob2JqZWN0KTtcbiAgICAgKiAvLyA9PiB7ICcxJzogWydhJywgJ2MnXSwgJzInOiBbJ2InXSB9XG4gICAgICpcbiAgICAgKiBfLmludmVydEJ5KG9iamVjdCwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgKiAgIHJldHVybiAnZ3JvdXAnICsgdmFsdWU7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4geyAnZ3JvdXAxJzogWydhJywgJ2MnXSwgJ2dyb3VwMic6IFsnYiddIH1cbiAgICAgKi9cbiAgICB2YXIgaW52ZXJ0QnkgPSBjcmVhdGVJbnZlcnRlcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgIGlmICh2YWx1ZSAhPSBudWxsICYmXG4gICAgICAgICAgdHlwZW9mIHZhbHVlLnRvU3RyaW5nICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdmFsdWUgPSBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwocmVzdWx0LCB2YWx1ZSkpIHtcbiAgICAgICAgcmVzdWx0W3ZhbHVlXS5wdXNoKGtleSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHRbdmFsdWVdID0gW2tleV07XG4gICAgICB9XG4gICAgfSwgZ2V0SXRlcmF0ZWUpO1xuXG4gICAgLyoqXG4gICAgICogSW52b2tlcyB0aGUgbWV0aG9kIGF0IGBwYXRoYCBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIG1ldGhvZCB0byBpbnZva2UuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgdGhlIG1ldGhvZCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXN1bHQgb2YgdGhlIGludm9rZWQgbWV0aG9kLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IFsxLCAyLCAzLCA0XSB9IH1dIH07XG4gICAgICpcbiAgICAgKiBfLmludm9rZShvYmplY3QsICdhWzBdLmIuYy5zbGljZScsIDEsIDMpO1xuICAgICAqIC8vID0+IFsyLCAzXVxuICAgICAqL1xuICAgIHZhciBpbnZva2UgPSBiYXNlUmVzdChiYXNlSW52b2tlKTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuIFNlZSB0aGVcbiAgICAgKiBbRVMgc3BlY10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LmtleXMpXG4gICAgICogZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8ua2V5cyhuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYiddIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICpcbiAgICAgKiBfLmtleXMoJ2hpJyk7XG4gICAgICogLy8gPT4gWycwJywgJzEnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGtleXMob2JqZWN0KSB7XG4gICAgICByZXR1cm4gaXNBcnJheUxpa2Uob2JqZWN0KSA/IGFycmF5TGlrZUtleXMob2JqZWN0KSA6IGJhc2VLZXlzKG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5rZXlzSW4obmV3IEZvbyk7XG4gICAgICogLy8gPT4gWydhJywgJ2InLCAnYyddIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICovXG4gICAgZnVuY3Rpb24ga2V5c0luKG9iamVjdCkge1xuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlKG9iamVjdCkgPyBhcnJheUxpa2VLZXlzKG9iamVjdCwgdHJ1ZSkgOiBiYXNlS2V5c0luKG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLm1hcFZhbHVlc2A7IHRoaXMgbWV0aG9kIGNyZWF0ZXMgYW4gb2JqZWN0IHdpdGggdGhlXG4gICAgICogc2FtZSB2YWx1ZXMgYXMgYG9iamVjdGAgYW5kIGtleXMgZ2VuZXJhdGVkIGJ5IHJ1bm5pbmcgZWFjaCBvd24gZW51bWVyYWJsZVxuICAgICAqIHN0cmluZyBrZXllZCBwcm9wZXJ0eSBvZiBgb2JqZWN0YCB0aHJ1IGBpdGVyYXRlZWAuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwga2V5LCBvYmplY3QpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBvYmplY3QuXG4gICAgICogQHNlZSBfLm1hcFZhbHVlc1xuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm1hcEtleXMoeyAnYSc6IDEsICdiJzogMiB9LCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICogICByZXR1cm4ga2V5ICsgdmFsdWU7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4geyAnYTEnOiAxLCAnYjInOiAyIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBLZXlzKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICAgIGl0ZXJhdGVlID0gZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpO1xuXG4gICAgICBiYXNlRm9yT3duKG9iamVjdCwgZnVuY3Rpb24odmFsdWUsIGtleSwgb2JqZWN0KSB7XG4gICAgICAgIGJhc2VBc3NpZ25WYWx1ZShyZXN1bHQsIGl0ZXJhdGVlKHZhbHVlLCBrZXksIG9iamVjdCksIHZhbHVlKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCB3aXRoIHRoZSBzYW1lIGtleXMgYXMgYG9iamVjdGAgYW5kIHZhbHVlcyBnZW5lcmF0ZWRcbiAgICAgKiBieSBydW5uaW5nIGVhY2ggb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnR5IG9mIGBvYmplY3RgIHRocnVcbiAgICAgKiBgaXRlcmF0ZWVgLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czpcbiAgICAgKiAodmFsdWUsIGtleSwgb2JqZWN0KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjQuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgb2JqZWN0LlxuICAgICAqIEBzZWUgXy5tYXBLZXlzXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IHtcbiAgICAgKiAgICdmcmVkJzogICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FnZSc6IDQwIH0sXG4gICAgICogICAncGViYmxlcyc6IHsgJ3VzZXInOiAncGViYmxlcycsICdhZ2UnOiAxIH1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogXy5tYXBWYWx1ZXModXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8uYWdlOyB9KTtcbiAgICAgKiAvLyA9PiB7ICdmcmVkJzogNDAsICdwZWJibGVzJzogMSB9IChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLm1hcFZhbHVlcyh1c2VycywgJ2FnZScpO1xuICAgICAqIC8vID0+IHsgJ2ZyZWQnOiA0MCwgJ3BlYmJsZXMnOiAxIH0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBWYWx1ZXMob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgICAgaXRlcmF0ZWUgPSBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMyk7XG5cbiAgICAgIGJhc2VGb3JPd24ob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSwga2V5LCBvYmplY3QpIHtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKHJlc3VsdCwga2V5LCBpdGVyYXRlZSh2YWx1ZSwga2V5LCBvYmplY3QpKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmFzc2lnbmAgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgbWVyZ2VzIG93biBhbmRcbiAgICAgKiBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBvZiBzb3VyY2Ugb2JqZWN0cyBpbnRvIHRoZVxuICAgICAqIGRlc3RpbmF0aW9uIG9iamVjdC4gU291cmNlIHByb3BlcnRpZXMgdGhhdCByZXNvbHZlIHRvIGB1bmRlZmluZWRgIGFyZVxuICAgICAqIHNraXBwZWQgaWYgYSBkZXN0aW5hdGlvbiB2YWx1ZSBleGlzdHMuIEFycmF5IGFuZCBwbGFpbiBvYmplY3QgcHJvcGVydGllc1xuICAgICAqIGFyZSBtZXJnZWQgcmVjdXJzaXZlbHkuIE90aGVyIG9iamVjdHMgYW5kIHZhbHVlIHR5cGVzIGFyZSBvdmVycmlkZGVuIGJ5XG4gICAgICogYXNzaWdubWVudC4gU291cmNlIG9iamVjdHMgYXJlIGFwcGxpZWQgZnJvbSBsZWZ0IHRvIHJpZ2h0LiBTdWJzZXF1ZW50XG4gICAgICogc291cmNlcyBvdmVyd3JpdGUgcHJvcGVydHkgYXNzaWdubWVudHMgb2YgcHJldmlvdXMgc291cmNlcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNS4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gW3NvdXJjZXNdIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0ge1xuICAgICAqICAgJ2EnOiBbeyAnYic6IDIgfSwgeyAnZCc6IDQgfV1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogdmFyIG90aGVyID0ge1xuICAgICAqICAgJ2EnOiBbeyAnYyc6IDMgfSwgeyAnZSc6IDUgfV1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogXy5tZXJnZShvYmplY3QsIG90aGVyKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogW3sgJ2InOiAyLCAnYyc6IDMgfSwgeyAnZCc6IDQsICdlJzogNSB9XSB9XG4gICAgICovXG4gICAgdmFyIG1lcmdlID0gY3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4KSB7XG4gICAgICBiYXNlTWVyZ2Uob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4KTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ubWVyZ2VgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBwcm9kdWNlIHRoZSBtZXJnZWQgdmFsdWVzIG9mIHRoZSBkZXN0aW5hdGlvbiBhbmQgc291cmNlXG4gICAgICogcHJvcGVydGllcy4gSWYgYGN1c3RvbWl6ZXJgIHJldHVybnMgYHVuZGVmaW5lZGAsIG1lcmdpbmcgaXMgaGFuZGxlZCBieSB0aGVcbiAgICAgKiBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYCBpcyBpbnZva2VkIHdpdGggc2l4IGFyZ3VtZW50czpcbiAgICAgKiAob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCwgc291cmNlLCBzdGFjaykuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IHNvdXJjZXMgVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUpIHtcbiAgICAgKiAgIGlmIChfLmlzQXJyYXkob2JqVmFsdWUpKSB7XG4gICAgICogICAgIHJldHVybiBvYmpWYWx1ZS5jb25jYXQoc3JjVmFsdWUpO1xuICAgICAqICAgfVxuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogWzFdLCAnYic6IFsyXSB9O1xuICAgICAqIHZhciBvdGhlciA9IHsgJ2EnOiBbM10sICdiJzogWzRdIH07XG4gICAgICpcbiAgICAgKiBfLm1lcmdlV2l0aChvYmplY3QsIG90aGVyLCBjdXN0b21pemVyKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogWzEsIDNdLCAnYic6IFsyLCA0XSB9XG4gICAgICovXG4gICAgdmFyIG1lcmdlV2l0aCA9IGNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCwgY3VzdG9taXplcikge1xuICAgICAgYmFzZU1lcmdlKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCwgY3VzdG9taXplcik7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8ucGlja2A7IHRoaXMgbWV0aG9kIGNyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIHRoZVxuICAgICAqIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydHkgcGF0aHMgb2YgYG9iamVjdGAgdGhhdCBhcmUgbm90IG9taXR0ZWQuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgY29uc2lkZXJhYmx5IHNsb3dlciB0aGFuIGBfLnBpY2tgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi4oc3RyaW5nfHN0cmluZ1tdKX0gW3BhdGhzXSBUaGUgcHJvcGVydHkgcGF0aHMgdG8gb21pdC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogJzInLCAnYyc6IDMgfTtcbiAgICAgKlxuICAgICAqIF8ub21pdChvYmplY3QsIFsnYScsICdjJ10pO1xuICAgICAqIC8vID0+IHsgJ2InOiAnMicgfVxuICAgICAqL1xuICAgIHZhciBvbWl0ID0gZmxhdFJlc3QoZnVuY3Rpb24ob2JqZWN0LCBwYXRocykge1xuICAgICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICB2YXIgaXNEZWVwID0gZmFsc2U7XG4gICAgICBwYXRocyA9IGFycmF5TWFwKHBhdGhzLCBmdW5jdGlvbihwYXRoKSB7XG4gICAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuICAgICAgICBpc0RlZXAgfHwgKGlzRGVlcCA9IHBhdGgubGVuZ3RoID4gMSk7XG4gICAgICAgIHJldHVybiBwYXRoO1xuICAgICAgfSk7XG4gICAgICBjb3B5T2JqZWN0KG9iamVjdCwgZ2V0QWxsS2V5c0luKG9iamVjdCksIHJlc3VsdCk7XG4gICAgICBpZiAoaXNEZWVwKSB7XG4gICAgICAgIHJlc3VsdCA9IGJhc2VDbG9uZShyZXN1bHQsIENMT05FX0RFRVBfRkxBRyB8IENMT05FX0ZMQVRfRkxBRyB8IENMT05FX1NZTUJPTFNfRkxBRywgY3VzdG9tT21pdENsb25lKTtcbiAgICAgIH1cbiAgICAgIHZhciBsZW5ndGggPSBwYXRocy5sZW5ndGg7XG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgYmFzZVVuc2V0KHJlc3VsdCwgcGF0aHNbbGVuZ3RoXSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLnBpY2tCeWA7IHRoaXMgbWV0aG9kIGNyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mXG4gICAgICogdGhlIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2YgYG9iamVjdGAgdGhhdFxuICAgICAqIGBwcmVkaWNhdGVgIGRvZXNuJ3QgcmV0dXJuIHRydXRoeSBmb3IuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoIHR3b1xuICAgICAqIGFyZ3VtZW50czogKHZhbHVlLCBrZXkpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgcHJvcGVydHkuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6ICcyJywgJ2MnOiAzIH07XG4gICAgICpcbiAgICAgKiBfLm9taXRCeShvYmplY3QsIF8uaXNOdW1iZXIpO1xuICAgICAqIC8vID0+IHsgJ2InOiAnMicgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG9taXRCeShvYmplY3QsIHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIHBpY2tCeShvYmplY3QsIG5lZ2F0ZShnZXRJdGVyYXRlZShwcmVkaWNhdGUpKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2YgdGhlIHBpY2tlZCBgb2JqZWN0YCBwcm9wZXJ0aWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi4oc3RyaW5nfHN0cmluZ1tdKX0gW3BhdGhzXSBUaGUgcHJvcGVydHkgcGF0aHMgdG8gcGljay5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogJzInLCAnYyc6IDMgfTtcbiAgICAgKlxuICAgICAqIF8ucGljayhvYmplY3QsIFsnYScsICdjJ10pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYyc6IDMgfVxuICAgICAqL1xuICAgIHZhciBwaWNrID0gZmxhdFJlc3QoZnVuY3Rpb24ob2JqZWN0LCBwYXRocykge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8ge30gOiBiYXNlUGljayhvYmplY3QsIHBhdGhzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIHRoZSBgb2JqZWN0YCBwcm9wZXJ0aWVzIGBwcmVkaWNhdGVgIHJldHVybnNcbiAgICAgKiB0cnV0aHkgZm9yLiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aCB0d28gYXJndW1lbnRzOiAodmFsdWUsIGtleSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBwcm9wZXJ0eS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogJzInLCAnYyc6IDMgfTtcbiAgICAgKlxuICAgICAqIF8ucGlja0J5KG9iamVjdCwgXy5pc051bWJlcik7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdjJzogMyB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gcGlja0J5KG9iamVjdCwgcHJlZGljYXRlKSB7XG4gICAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgfVxuICAgICAgdmFyIHByb3BzID0gYXJyYXlNYXAoZ2V0QWxsS2V5c0luKG9iamVjdCksIGZ1bmN0aW9uKHByb3ApIHtcbiAgICAgICAgcmV0dXJuIFtwcm9wXTtcbiAgICAgIH0pO1xuICAgICAgcHJlZGljYXRlID0gZ2V0SXRlcmF0ZWUocHJlZGljYXRlKTtcbiAgICAgIHJldHVybiBiYXNlUGlja0J5KG9iamVjdCwgcHJvcHMsIGZ1bmN0aW9uKHZhbHVlLCBwYXRoKSB7XG4gICAgICAgIHJldHVybiBwcmVkaWNhdGUodmFsdWUsIHBhdGhbMF0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5nZXRgIGV4Y2VwdCB0aGF0IGlmIHRoZSByZXNvbHZlZCB2YWx1ZSBpcyBhXG4gICAgICogZnVuY3Rpb24gaXQncyBpbnZva2VkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIGl0cyBwYXJlbnQgb2JqZWN0IGFuZFxuICAgICAqIGl0cyByZXN1bHQgaXMgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byByZXNvbHZlLlxuICAgICAqIEBwYXJhbSB7Kn0gW2RlZmF1bHRWYWx1ZV0gVGhlIHZhbHVlIHJldHVybmVkIGZvciBgdW5kZWZpbmVkYCByZXNvbHZlZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYzEnOiAzLCAnYzInOiBfLmNvbnN0YW50KDQpIH0gfV0gfTtcbiAgICAgKlxuICAgICAqIF8ucmVzdWx0KG9iamVjdCwgJ2FbMF0uYi5jMScpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8ucmVzdWx0KG9iamVjdCwgJ2FbMF0uYi5jMicpO1xuICAgICAqIC8vID0+IDRcbiAgICAgKlxuICAgICAqIF8ucmVzdWx0KG9iamVjdCwgJ2FbMF0uYi5jMycsICdkZWZhdWx0Jyk7XG4gICAgICogLy8gPT4gJ2RlZmF1bHQnXG4gICAgICpcbiAgICAgKiBfLnJlc3VsdChvYmplY3QsICdhWzBdLmIuYzMnLCBfLmNvbnN0YW50KCdkZWZhdWx0JykpO1xuICAgICAqIC8vID0+ICdkZWZhdWx0J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlc3VsdChvYmplY3QsIHBhdGgsIGRlZmF1bHRWYWx1ZSkge1xuICAgICAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG5cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHBhdGgubGVuZ3RoO1xuXG4gICAgICAvLyBFbnN1cmUgdGhlIGxvb3AgaXMgZW50ZXJlZCB3aGVuIHBhdGggaXMgZW1wdHkuXG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICBsZW5ndGggPSAxO1xuICAgICAgICBvYmplY3QgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFt0b0tleShwYXRoW2luZGV4XSldO1xuICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGluZGV4ID0gbGVuZ3RoO1xuICAgICAgICAgIHZhbHVlID0gZGVmYXVsdFZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIG9iamVjdCA9IGlzRnVuY3Rpb24odmFsdWUpID8gdmFsdWUuY2FsbChvYmplY3QpIDogdmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHZhbHVlIGF0IGBwYXRoYCBvZiBgb2JqZWN0YC4gSWYgYSBwb3J0aW9uIG9mIGBwYXRoYCBkb2Vzbid0IGV4aXN0LFxuICAgICAqIGl0J3MgY3JlYXRlZC4gQXJyYXlzIGFyZSBjcmVhdGVkIGZvciBtaXNzaW5nIGluZGV4IHByb3BlcnRpZXMgd2hpbGUgb2JqZWN0c1xuICAgICAqIGFyZSBjcmVhdGVkIGZvciBhbGwgb3RoZXIgbWlzc2luZyBwcm9wZXJ0aWVzLiBVc2UgYF8uc2V0V2l0aGAgdG8gY3VzdG9taXplXG4gICAgICogYHBhdGhgIGNyZWF0aW9uLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy43LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDMgfSB9XSB9O1xuICAgICAqXG4gICAgICogXy5zZXQob2JqZWN0LCAnYVswXS5iLmMnLCA0KTtcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3QuYVswXS5iLmMpO1xuICAgICAqIC8vID0+IDRcbiAgICAgKlxuICAgICAqIF8uc2V0KG9iamVjdCwgWyd4JywgJzAnLCAneScsICd6J10sIDUpO1xuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdC54WzBdLnkueik7XG4gICAgICogLy8gPT4gNVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNldChvYmplY3QsIHBhdGgsIHZhbHVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBvYmplY3QgOiBiYXNlU2V0KG9iamVjdCwgcGF0aCwgdmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc2V0YCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgdG8gcHJvZHVjZSB0aGUgb2JqZWN0cyBvZiBgcGF0aGAuICBJZiBgY3VzdG9taXplcmAgcmV0dXJucyBgdW5kZWZpbmVkYFxuICAgICAqIHBhdGggY3JlYXRpb24gaXMgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmAgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdGhyZWUgYXJndW1lbnRzOiAobnNWYWx1ZSwga2V5LCBuc09iamVjdCkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBzZXQuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGFzc2lnbmVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0ge307XG4gICAgICpcbiAgICAgKiBfLnNldFdpdGgob2JqZWN0LCAnWzBdWzFdJywgJ2EnLCBPYmplY3QpO1xuICAgICAqIC8vID0+IHsgJzAnOiB7ICcxJzogJ2EnIH0gfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNldFdpdGgob2JqZWN0LCBwYXRoLCB2YWx1ZSwgY3VzdG9taXplcikge1xuICAgICAgY3VzdG9taXplciA9IHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicgPyBjdXN0b21pemVyIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gb2JqZWN0IDogYmFzZVNldChvYmplY3QsIHBhdGgsIHZhbHVlLCBjdXN0b21pemVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZC12YWx1ZSBwYWlycyBmb3IgYG9iamVjdGBcbiAgICAgKiB3aGljaCBjYW4gYmUgY29uc3VtZWQgYnkgYF8uZnJvbVBhaXJzYC4gSWYgYG9iamVjdGAgaXMgYSBtYXAgb3Igc2V0LCBpdHNcbiAgICAgKiBlbnRyaWVzIGFyZSByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBhbGlhcyBlbnRyaWVzXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGtleS12YWx1ZSBwYWlycy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8udG9QYWlycyhuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbWydhJywgMV0sIFsnYicsIDJdXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqL1xuICAgIHZhciB0b1BhaXJzID0gY3JlYXRlVG9QYWlycyhrZXlzKTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQtdmFsdWUgcGFpcnNcbiAgICAgKiBmb3IgYG9iamVjdGAgd2hpY2ggY2FuIGJlIGNvbnN1bWVkIGJ5IGBfLmZyb21QYWlyc2AuIElmIGBvYmplY3RgIGlzIGEgbWFwXG4gICAgICogb3Igc2V0LCBpdHMgZW50cmllcyBhcmUgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAYWxpYXMgZW50cmllc0luXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGtleS12YWx1ZSBwYWlycy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8udG9QYWlyc0luKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFtbJ2EnLCAxXSwgWydiJywgMl0sIFsnYycsIDNdXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqL1xuICAgIHZhciB0b1BhaXJzSW4gPSBjcmVhdGVUb1BhaXJzKGtleXNJbik7XG5cbiAgICAvKipcbiAgICAgKiBBbiBhbHRlcm5hdGl2ZSB0byBgXy5yZWR1Y2VgOyB0aGlzIG1ldGhvZCB0cmFuc2Zvcm1zIGBvYmplY3RgIHRvIGEgbmV3XG4gICAgICogYGFjY3VtdWxhdG9yYCBvYmplY3Qgd2hpY2ggaXMgdGhlIHJlc3VsdCBvZiBydW5uaW5nIGVhY2ggb2YgaXRzIG93blxuICAgICAqIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgdGhydSBgaXRlcmF0ZWVgLCB3aXRoIGVhY2ggaW52b2NhdGlvblxuICAgICAqIHBvdGVudGlhbGx5IG11dGF0aW5nIHRoZSBgYWNjdW11bGF0b3JgIG9iamVjdC4gSWYgYGFjY3VtdWxhdG9yYCBpcyBub3RcbiAgICAgKiBwcm92aWRlZCwgYSBuZXcgb2JqZWN0IHdpdGggdGhlIHNhbWUgYFtbUHJvdG90eXBlXV1gIHdpbGwgYmUgdXNlZC4gVGhlXG4gICAgICogaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIGZvdXIgYXJndW1lbnRzOiAoYWNjdW11bGF0b3IsIHZhbHVlLCBrZXksIG9iamVjdCkuXG4gICAgICogSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0IGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIFRoZSBjdXN0b20gYWNjdW11bGF0b3IgdmFsdWUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGFjY3VtdWxhdGVkIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRyYW5zZm9ybShbMiwgMywgNF0sIGZ1bmN0aW9uKHJlc3VsdCwgbikge1xuICAgICAqICAgcmVzdWx0LnB1c2gobiAqPSBuKTtcbiAgICAgKiAgIHJldHVybiBuICUgMiA9PSAwO1xuICAgICAqIH0sIFtdKTtcbiAgICAgKiAvLyA9PiBbNCwgOV1cbiAgICAgKlxuICAgICAqIF8udHJhbnNmb3JtKHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMSB9LCBmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIChyZXN1bHRbdmFsdWVdIHx8IChyZXN1bHRbdmFsdWVdID0gW10pKS5wdXNoKGtleSk7XG4gICAgICogfSwge30pO1xuICAgICAqIC8vID0+IHsgJzEnOiBbJ2EnLCAnYyddLCAnMic6IFsnYiddIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cmFuc2Zvcm0ob2JqZWN0LCBpdGVyYXRlZSwgYWNjdW11bGF0b3IpIHtcbiAgICAgIHZhciBpc0FyciA9IGlzQXJyYXkob2JqZWN0KSxcbiAgICAgICAgICBpc0Fyckxpa2UgPSBpc0FyciB8fCBpc0J1ZmZlcihvYmplY3QpIHx8IGlzVHlwZWRBcnJheShvYmplY3QpO1xuXG4gICAgICBpdGVyYXRlZSA9IGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCA0KTtcbiAgICAgIGlmIChhY2N1bXVsYXRvciA9PSBudWxsKSB7XG4gICAgICAgIHZhciBDdG9yID0gb2JqZWN0ICYmIG9iamVjdC5jb25zdHJ1Y3RvcjtcbiAgICAgICAgaWYgKGlzQXJyTGlrZSkge1xuICAgICAgICAgIGFjY3VtdWxhdG9yID0gaXNBcnIgPyBuZXcgQ3RvciA6IFtdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgICBhY2N1bXVsYXRvciA9IGlzRnVuY3Rpb24oQ3RvcikgPyBiYXNlQ3JlYXRlKGdldFByb3RvdHlwZShvYmplY3QpKSA6IHt9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGFjY3VtdWxhdG9yID0ge307XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIChpc0Fyckxpa2UgPyBhcnJheUVhY2ggOiBiYXNlRm9yT3duKShvYmplY3QsIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgb2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRlZShhY2N1bXVsYXRvciwgdmFsdWUsIGluZGV4LCBvYmplY3QpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyB0aGUgcHJvcGVydHkgYXQgYHBhdGhgIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gdW5zZXQuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBwcm9wZXJ0eSBpcyBkZWxldGVkLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogNyB9IH1dIH07XG4gICAgICogXy51bnNldChvYmplY3QsICdhWzBdLmIuYycpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdCk7XG4gICAgICogLy8gPT4geyAnYSc6IFt7ICdiJzoge30gfV0gfTtcbiAgICAgKlxuICAgICAqIF8udW5zZXQob2JqZWN0LCBbJ2EnLCAnMCcsICdiJywgJ2MnXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob2JqZWN0KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogW3sgJ2InOiB7fSB9XSB9O1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuc2V0KG9iamVjdCwgcGF0aCkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdHJ1ZSA6IGJhc2VVbnNldChvYmplY3QsIHBhdGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc2V0YCBleGNlcHQgdGhhdCBhY2NlcHRzIGB1cGRhdGVyYCB0byBwcm9kdWNlIHRoZVxuICAgICAqIHZhbHVlIHRvIHNldC4gVXNlIGBfLnVwZGF0ZVdpdGhgIHRvIGN1c3RvbWl6ZSBgcGF0aGAgY3JlYXRpb24uIFRoZSBgdXBkYXRlcmBcbiAgICAgKiBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC42LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHVwZGF0ZXIgVGhlIGZ1bmN0aW9uIHRvIHByb2R1Y2UgdGhlIHVwZGF0ZWQgdmFsdWUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiAzIH0gfV0gfTtcbiAgICAgKlxuICAgICAqIF8udXBkYXRlKG9iamVjdCwgJ2FbMF0uYi5jJywgZnVuY3Rpb24obikgeyByZXR1cm4gbiAqIG47IH0pO1xuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdC5hWzBdLmIuYyk7XG4gICAgICogLy8gPT4gOVxuICAgICAqXG4gICAgICogXy51cGRhdGUob2JqZWN0LCAneFswXS55LnonLCBmdW5jdGlvbihuKSB7IHJldHVybiBuID8gbiArIDEgOiAwOyB9KTtcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3QueFswXS55LnopO1xuICAgICAqIC8vID0+IDBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1cGRhdGUob2JqZWN0LCBwYXRoLCB1cGRhdGVyKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBvYmplY3QgOiBiYXNlVXBkYXRlKG9iamVjdCwgcGF0aCwgY2FzdEZ1bmN0aW9uKHVwZGF0ZXIpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVwZGF0ZWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIHRvIHByb2R1Y2UgdGhlIG9iamVjdHMgb2YgYHBhdGhgLiAgSWYgYGN1c3RvbWl6ZXJgIHJldHVybnMgYHVuZGVmaW5lZGBcbiAgICAgKiBwYXRoIGNyZWF0aW9uIGlzIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHRocmVlIGFyZ3VtZW50czogKG5zVmFsdWUsIGtleSwgbnNPYmplY3QpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC42LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHVwZGF0ZXIgVGhlIGZ1bmN0aW9uIHRvIHByb2R1Y2UgdGhlIHVwZGF0ZWQgdmFsdWUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7fTtcbiAgICAgKlxuICAgICAqIF8udXBkYXRlV2l0aChvYmplY3QsICdbMF1bMV0nLCBfLmNvbnN0YW50KCdhJyksIE9iamVjdCk7XG4gICAgICogLy8gPT4geyAnMCc6IHsgJzEnOiAnYScgfSB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gdXBkYXRlV2l0aChvYmplY3QsIHBhdGgsIHVwZGF0ZXIsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nID8gY3VzdG9taXplciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IG9iamVjdCA6IGJhc2VVcGRhdGUob2JqZWN0LCBwYXRoLCBjYXN0RnVuY3Rpb24odXBkYXRlciksIGN1c3RvbWl6ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0eSB2YWx1ZXMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLnZhbHVlcyhuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbMSwgMl0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKlxuICAgICAqIF8udmFsdWVzKCdoaScpO1xuICAgICAqIC8vID0+IFsnaCcsICdpJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB2YWx1ZXMob2JqZWN0KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBbXSA6IGJhc2VWYWx1ZXMob2JqZWN0LCBrZXlzKG9iamVjdCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnR5XG4gICAgICogdmFsdWVzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy52YWx1ZXNJbihuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM10gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB2YWx1ZXNJbihvYmplY3QpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IFtdIDogYmFzZVZhbHVlcyhvYmplY3QsIGtleXNJbihvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDbGFtcHMgYG51bWJlcmAgd2l0aGluIHRoZSBpbmNsdXNpdmUgYGxvd2VyYCBhbmQgYHVwcGVyYCBib3VuZHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTnVtYmVyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIGNsYW1wLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbG93ZXJdIFRoZSBsb3dlciBib3VuZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdXBwZXIgVGhlIHVwcGVyIGJvdW5kLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNsYW1wZWQgbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNsYW1wKC0xMCwgLTUsIDUpO1xuICAgICAqIC8vID0+IC01XG4gICAgICpcbiAgICAgKiBfLmNsYW1wKDEwLCAtNSwgNSk7XG4gICAgICogLy8gPT4gNVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsYW1wKG51bWJlciwgbG93ZXIsIHVwcGVyKSB7XG4gICAgICBpZiAodXBwZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB1cHBlciA9IGxvd2VyO1xuICAgICAgICBsb3dlciA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGlmICh1cHBlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHVwcGVyID0gdG9OdW1iZXIodXBwZXIpO1xuICAgICAgICB1cHBlciA9IHVwcGVyID09PSB1cHBlciA/IHVwcGVyIDogMDtcbiAgICAgIH1cbiAgICAgIGlmIChsb3dlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGxvd2VyID0gdG9OdW1iZXIobG93ZXIpO1xuICAgICAgICBsb3dlciA9IGxvd2VyID09PSBsb3dlciA/IGxvd2VyIDogMDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlQ2xhbXAodG9OdW1iZXIobnVtYmVyKSwgbG93ZXIsIHVwcGVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYG5gIGlzIGJldHdlZW4gYHN0YXJ0YCBhbmQgdXAgdG8sIGJ1dCBub3QgaW5jbHVkaW5nLCBgZW5kYC4gSWZcbiAgICAgKiBgZW5kYCBpcyBub3Qgc3BlY2lmaWVkLCBpdCdzIHNldCB0byBgc3RhcnRgIHdpdGggYHN0YXJ0YCB0aGVuIHNldCB0byBgMGAuXG4gICAgICogSWYgYHN0YXJ0YCBpcyBncmVhdGVyIHRoYW4gYGVuZGAgdGhlIHBhcmFtcyBhcmUgc3dhcHBlZCB0byBzdXBwb3J0XG4gICAgICogbmVnYXRpdmUgcmFuZ2VzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMy4wXG4gICAgICogQGNhdGVnb3J5IE51bWJlclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byBjaGVjay5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG51bWJlcmAgaXMgaW4gdGhlIHJhbmdlLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQHNlZSBfLnJhbmdlLCBfLnJhbmdlUmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKDMsIDIsIDQpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSg0LCA4KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoNCwgMik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSgyLCAyKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKDEuMiwgMik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKDUuMiwgNCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSgtMywgLTIsIC02KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5SYW5nZShudW1iZXIsIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHN0YXJ0ID0gdG9GaW5pdGUoc3RhcnQpO1xuICAgICAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGVuZCA9IHN0YXJ0O1xuICAgICAgICBzdGFydCA9IDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbmQgPSB0b0Zpbml0ZShlbmQpO1xuICAgICAgfVxuICAgICAgbnVtYmVyID0gdG9OdW1iZXIobnVtYmVyKTtcbiAgICAgIHJldHVybiBiYXNlSW5SYW5nZShudW1iZXIsIHN0YXJ0LCBlbmQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFByb2R1Y2VzIGEgcmFuZG9tIG51bWJlciBiZXR3ZWVuIHRoZSBpbmNsdXNpdmUgYGxvd2VyYCBhbmQgYHVwcGVyYCBib3VuZHMuXG4gICAgICogSWYgb25seSBvbmUgYXJndW1lbnQgaXMgcHJvdmlkZWQgYSBudW1iZXIgYmV0d2VlbiBgMGAgYW5kIHRoZSBnaXZlbiBudW1iZXJcbiAgICAgKiBpcyByZXR1cm5lZC4gSWYgYGZsb2F0aW5nYCBpcyBgdHJ1ZWAsIG9yIGVpdGhlciBgbG93ZXJgIG9yIGB1cHBlcmAgYXJlXG4gICAgICogZmxvYXRzLCBhIGZsb2F0aW5nLXBvaW50IG51bWJlciBpcyByZXR1cm5lZCBpbnN0ZWFkIG9mIGFuIGludGVnZXIuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogSmF2YVNjcmlwdCBmb2xsb3dzIHRoZSBJRUVFLTc1NCBzdGFuZGFyZCBmb3IgcmVzb2x2aW5nXG4gICAgICogZmxvYXRpbmctcG9pbnQgdmFsdWVzIHdoaWNoIGNhbiBwcm9kdWNlIHVuZXhwZWN0ZWQgcmVzdWx0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjcuMFxuICAgICAqIEBjYXRlZ29yeSBOdW1iZXJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xvd2VyPTBdIFRoZSBsb3dlciBib3VuZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3VwcGVyPTFdIFRoZSB1cHBlciBib3VuZC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmbG9hdGluZ10gU3BlY2lmeSByZXR1cm5pbmcgYSBmbG9hdGluZy1wb2ludCBudW1iZXIuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcmFuZG9tIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yYW5kb20oMCwgNSk7XG4gICAgICogLy8gPT4gYW4gaW50ZWdlciBiZXR3ZWVuIDAgYW5kIDVcbiAgICAgKlxuICAgICAqIF8ucmFuZG9tKDUpO1xuICAgICAqIC8vID0+IGFsc28gYW4gaW50ZWdlciBiZXR3ZWVuIDAgYW5kIDVcbiAgICAgKlxuICAgICAqIF8ucmFuZG9tKDUsIHRydWUpO1xuICAgICAqIC8vID0+IGEgZmxvYXRpbmctcG9pbnQgbnVtYmVyIGJldHdlZW4gMCBhbmQgNVxuICAgICAqXG4gICAgICogXy5yYW5kb20oMS4yLCA1LjIpO1xuICAgICAqIC8vID0+IGEgZmxvYXRpbmctcG9pbnQgbnVtYmVyIGJldHdlZW4gMS4yIGFuZCA1LjJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByYW5kb20obG93ZXIsIHVwcGVyLCBmbG9hdGluZykge1xuICAgICAgaWYgKGZsb2F0aW5nICYmIHR5cGVvZiBmbG9hdGluZyAhPSAnYm9vbGVhbicgJiYgaXNJdGVyYXRlZUNhbGwobG93ZXIsIHVwcGVyLCBmbG9hdGluZykpIHtcbiAgICAgICAgdXBwZXIgPSBmbG9hdGluZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGlmIChmbG9hdGluZyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdXBwZXIgPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgZmxvYXRpbmcgPSB1cHBlcjtcbiAgICAgICAgICB1cHBlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgbG93ZXIgPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgZmxvYXRpbmcgPSBsb3dlcjtcbiAgICAgICAgICBsb3dlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGxvd2VyID09PSB1bmRlZmluZWQgJiYgdXBwZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBsb3dlciA9IDA7XG4gICAgICAgIHVwcGVyID0gMTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBsb3dlciA9IHRvRmluaXRlKGxvd2VyKTtcbiAgICAgICAgaWYgKHVwcGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB1cHBlciA9IGxvd2VyO1xuICAgICAgICAgIGxvd2VyID0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB1cHBlciA9IHRvRmluaXRlKHVwcGVyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGxvd2VyID4gdXBwZXIpIHtcbiAgICAgICAgdmFyIHRlbXAgPSBsb3dlcjtcbiAgICAgICAgbG93ZXIgPSB1cHBlcjtcbiAgICAgICAgdXBwZXIgPSB0ZW1wO1xuICAgICAgfVxuICAgICAgaWYgKGZsb2F0aW5nIHx8IGxvd2VyICUgMSB8fCB1cHBlciAlIDEpIHtcbiAgICAgICAgdmFyIHJhbmQgPSBuYXRpdmVSYW5kb20oKTtcbiAgICAgICAgcmV0dXJuIG5hdGl2ZU1pbihsb3dlciArIChyYW5kICogKHVwcGVyIC0gbG93ZXIgKyBmcmVlUGFyc2VGbG9hdCgnMWUtJyArICgocmFuZCArICcnKS5sZW5ndGggLSAxKSkpKSwgdXBwZXIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VSYW5kb20obG93ZXIsIHVwcGVyKTtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0byBbY2FtZWwgY2FzZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ2FtZWxDYXNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNhbWVsIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jYW1lbENhc2UoJ0ZvbyBCYXInKTtcbiAgICAgKiAvLyA9PiAnZm9vQmFyJ1xuICAgICAqXG4gICAgICogXy5jYW1lbENhc2UoJy0tZm9vLWJhci0tJyk7XG4gICAgICogLy8gPT4gJ2Zvb0JhcidcbiAgICAgKlxuICAgICAqIF8uY2FtZWxDYXNlKCdfX0ZPT19CQVJfXycpO1xuICAgICAqIC8vID0+ICdmb29CYXInXG4gICAgICovXG4gICAgdmFyIGNhbWVsQ2FzZSA9IGNyZWF0ZUNvbXBvdW5kZXIoZnVuY3Rpb24ocmVzdWx0LCB3b3JkLCBpbmRleCkge1xuICAgICAgd29yZCA9IHdvcmQudG9Mb3dlckNhc2UoKTtcbiAgICAgIHJldHVybiByZXN1bHQgKyAoaW5kZXggPyBjYXBpdGFsaXplKHdvcmQpIDogd29yZCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyB0aGUgZmlyc3QgY2hhcmFjdGVyIG9mIGBzdHJpbmdgIHRvIHVwcGVyIGNhc2UgYW5kIHRoZSByZW1haW5pbmdcbiAgICAgKiB0byBsb3dlciBjYXNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNhcGl0YWxpemUuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY2FwaXRhbGl6ZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNhcGl0YWxpemUoJ0ZSRUQnKTtcbiAgICAgKiAvLyA9PiAnRnJlZCdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYXBpdGFsaXplKHN0cmluZykge1xuICAgICAgcmV0dXJuIHVwcGVyRmlyc3QodG9TdHJpbmcoc3RyaW5nKS50b0xvd2VyQ2FzZSgpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZWJ1cnJzIGBzdHJpbmdgIGJ5IGNvbnZlcnRpbmdcbiAgICAgKiBbTGF0aW4tMSBTdXBwbGVtZW50XShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MYXRpbi0xX1N1cHBsZW1lbnRfKFVuaWNvZGVfYmxvY2spI0NoYXJhY3Rlcl90YWJsZSlcbiAgICAgKiBhbmQgW0xhdGluIEV4dGVuZGVkLUFdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xhdGluX0V4dGVuZGVkLUEpXG4gICAgICogbGV0dGVycyB0byBiYXNpYyBMYXRpbiBsZXR0ZXJzIGFuZCByZW1vdmluZ1xuICAgICAqIFtjb21iaW5pbmcgZGlhY3JpdGljYWwgbWFya3NdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NvbWJpbmluZ19EaWFjcml0aWNhbF9NYXJrcykuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gZGVidXJyLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGRlYnVycmVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWJ1cnIoJ2TDqWrDoCB2dScpO1xuICAgICAqIC8vID0+ICdkZWphIHZ1J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRlYnVycihzdHJpbmcpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICByZXR1cm4gc3RyaW5nICYmIHN0cmluZy5yZXBsYWNlKHJlTGF0aW4sIGRlYnVyckxldHRlcikucmVwbGFjZShyZUNvbWJvTWFyaywgJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgc3RyaW5nYCBlbmRzIHdpdGggdGhlIGdpdmVuIHRhcmdldCBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3RhcmdldF0gVGhlIHN0cmluZyB0byBzZWFyY2ggZm9yLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcG9zaXRpb249c3RyaW5nLmxlbmd0aF0gVGhlIHBvc2l0aW9uIHRvIHNlYXJjaCB1cCB0by5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHN0cmluZ2AgZW5kcyB3aXRoIGB0YXJnZXRgLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZW5kc1dpdGgoJ2FiYycsICdjJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5lbmRzV2l0aCgnYWJjJywgJ2InKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5lbmRzV2l0aCgnYWJjJywgJ2InLCAyKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gZW5kc1dpdGgoc3RyaW5nLCB0YXJnZXQsIHBvc2l0aW9uKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgdGFyZ2V0ID0gYmFzZVRvU3RyaW5nKHRhcmdldCk7XG5cbiAgICAgIHZhciBsZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuICAgICAgcG9zaXRpb24gPSBwb3NpdGlvbiA9PT0gdW5kZWZpbmVkXG4gICAgICAgID8gbGVuZ3RoXG4gICAgICAgIDogYmFzZUNsYW1wKHRvSW50ZWdlcihwb3NpdGlvbiksIDAsIGxlbmd0aCk7XG5cbiAgICAgIHZhciBlbmQgPSBwb3NpdGlvbjtcbiAgICAgIHBvc2l0aW9uIC09IHRhcmdldC5sZW5ndGg7XG4gICAgICByZXR1cm4gcG9zaXRpb24gPj0gMCAmJiBzdHJpbmcuc2xpY2UocG9zaXRpb24sIGVuZCkgPT0gdGFyZ2V0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIHRoZSBjaGFyYWN0ZXJzIFwiJlwiLCBcIjxcIiwgXCI+XCIsICdcIicsIGFuZCBcIidcIiBpbiBgc3RyaW5nYCB0byB0aGVpclxuICAgICAqIGNvcnJlc3BvbmRpbmcgSFRNTCBlbnRpdGllcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBObyBvdGhlciBjaGFyYWN0ZXJzIGFyZSBlc2NhcGVkLiBUbyBlc2NhcGUgYWRkaXRpb25hbFxuICAgICAqIGNoYXJhY3RlcnMgdXNlIGEgdGhpcmQtcGFydHkgbGlicmFyeSBsaWtlIFtfaGVfXShodHRwczovL210aHMuYmUvaGUpLlxuICAgICAqXG4gICAgICogVGhvdWdoIHRoZSBcIj5cIiBjaGFyYWN0ZXIgaXMgZXNjYXBlZCBmb3Igc3ltbWV0cnksIGNoYXJhY3RlcnMgbGlrZVxuICAgICAqIFwiPlwiIGFuZCBcIi9cIiBkb24ndCBuZWVkIGVzY2FwaW5nIGluIEhUTUwgYW5kIGhhdmUgbm8gc3BlY2lhbCBtZWFuaW5nXG4gICAgICogdW5sZXNzIHRoZXkncmUgcGFydCBvZiBhIHRhZyBvciB1bnF1b3RlZCBhdHRyaWJ1dGUgdmFsdWUuIFNlZVxuICAgICAqIFtNYXRoaWFzIEJ5bmVucydzIGFydGljbGVdKGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9hbWJpZ3VvdXMtYW1wZXJzYW5kcylcbiAgICAgKiAodW5kZXIgXCJzZW1pLXJlbGF0ZWQgZnVuIGZhY3RcIikgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKlxuICAgICAqIFdoZW4gd29ya2luZyB3aXRoIEhUTUwgeW91IHNob3VsZCBhbHdheXNcbiAgICAgKiBbcXVvdGUgYXR0cmlidXRlIHZhbHVlc10oaHR0cDovL3dvbmtvLmNvbS9wb3N0L2h0bWwtZXNjYXBpbmcpIHRvIHJlZHVjZVxuICAgICAqIFhTUyB2ZWN0b3JzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGVzY2FwZS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBlc2NhcGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5lc2NhcGUoJ2ZyZWQsIGJhcm5leSwgJiBwZWJibGVzJyk7XG4gICAgICogLy8gPT4gJ2ZyZWQsIGJhcm5leSwgJmFtcDsgcGViYmxlcydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlc2NhcGUoc3RyaW5nKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgcmV0dXJuIChzdHJpbmcgJiYgcmVIYXNVbmVzY2FwZWRIdG1sLnRlc3Qoc3RyaW5nKSlcbiAgICAgICAgPyBzdHJpbmcucmVwbGFjZShyZVVuZXNjYXBlZEh0bWwsIGVzY2FwZUh0bWxDaGFyKVxuICAgICAgICA6IHN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFc2NhcGVzIHRoZSBgUmVnRXhwYCBzcGVjaWFsIGNoYXJhY3RlcnMgXCJeXCIsIFwiJFwiLCBcIlxcXCIsIFwiLlwiLCBcIipcIiwgXCIrXCIsXG4gICAgICogXCI/XCIsIFwiKFwiLCBcIilcIiwgXCJbXCIsIFwiXVwiLCBcIntcIiwgXCJ9XCIsIGFuZCBcInxcIiBpbiBgc3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBlc2NhcGUuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZXNjYXBlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZXNjYXBlUmVnRXhwKCdbbG9kYXNoXShodHRwczovL2xvZGFzaC5jb20vKScpO1xuICAgICAqIC8vID0+ICdcXFtsb2Rhc2hcXF1cXChodHRwczovL2xvZGFzaFxcLmNvbS9cXCknXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXNjYXBlUmVnRXhwKHN0cmluZykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHJldHVybiAoc3RyaW5nICYmIHJlSGFzUmVnRXhwQ2hhci50ZXN0KHN0cmluZykpXG4gICAgICAgID8gc3RyaW5nLnJlcGxhY2UocmVSZWdFeHBDaGFyLCAnXFxcXCQmJylcbiAgICAgICAgOiBzdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AgdG9cbiAgICAgKiBba2ViYWIgY2FzZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGV0dGVyX2Nhc2UjU3BlY2lhbF9jYXNlX3N0eWxlcykuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBrZWJhYiBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ua2ViYWJDYXNlKCdGb28gQmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvby1iYXInXG4gICAgICpcbiAgICAgKiBfLmtlYmFiQ2FzZSgnZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvby1iYXInXG4gICAgICpcbiAgICAgKiBfLmtlYmFiQ2FzZSgnX19GT09fQkFSX18nKTtcbiAgICAgKiAvLyA9PiAnZm9vLWJhcidcbiAgICAgKi9cbiAgICB2YXIga2ViYWJDYXNlID0gY3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQsIHdvcmQsIGluZGV4KSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgKGluZGV4ID8gJy0nIDogJycpICsgd29yZC50b0xvd2VyQ2FzZSgpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AsIGFzIHNwYWNlIHNlcGFyYXRlZCB3b3JkcywgdG8gbG93ZXIgY2FzZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGxvd2VyIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5sb3dlckNhc2UoJy0tRm9vLUJhci0tJyk7XG4gICAgICogLy8gPT4gJ2ZvbyBiYXInXG4gICAgICpcbiAgICAgKiBfLmxvd2VyQ2FzZSgnZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ2ZvbyBiYXInXG4gICAgICpcbiAgICAgKiBfLmxvd2VyQ2FzZSgnX19GT09fQkFSX18nKTtcbiAgICAgKiAvLyA9PiAnZm9vIGJhcidcbiAgICAgKi9cbiAgICB2YXIgbG93ZXJDYXNlID0gY3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQsIHdvcmQsIGluZGV4KSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgKGluZGV4ID8gJyAnIDogJycpICsgd29yZC50b0xvd2VyQ2FzZSgpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgdGhlIGZpcnN0IGNoYXJhY3RlciBvZiBgc3RyaW5nYCB0byBsb3dlciBjYXNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5sb3dlckZpcnN0KCdGcmVkJyk7XG4gICAgICogLy8gPT4gJ2ZyZWQnXG4gICAgICpcbiAgICAgKiBfLmxvd2VyRmlyc3QoJ0ZSRUQnKTtcbiAgICAgKiAvLyA9PiAnZlJFRCdcbiAgICAgKi9cbiAgICB2YXIgbG93ZXJGaXJzdCA9IGNyZWF0ZUNhc2VGaXJzdCgndG9Mb3dlckNhc2UnKTtcblxuICAgIC8qKlxuICAgICAqIFBhZHMgYHN0cmluZ2Agb24gdGhlIGxlZnQgYW5kIHJpZ2h0IHNpZGVzIGlmIGl0J3Mgc2hvcnRlciB0aGFuIGBsZW5ndGhgLlxuICAgICAqIFBhZGRpbmcgY2hhcmFjdGVycyBhcmUgdHJ1bmNhdGVkIGlmIHRoZXkgY2FuJ3QgYmUgZXZlbmx5IGRpdmlkZWQgYnkgYGxlbmd0aGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gcGFkLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoPTBdIFRoZSBwYWRkaW5nIGxlbmd0aC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPScgJ10gVGhlIHN0cmluZyB1c2VkIGFzIHBhZGRpbmcuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcGFkZGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5wYWQoJ2FiYycsIDgpO1xuICAgICAqIC8vID0+ICcgIGFiYyAgICdcbiAgICAgKlxuICAgICAqIF8ucGFkKCdhYmMnLCA4LCAnXy0nKTtcbiAgICAgKiAvLyA9PiAnXy1hYmNfLV8nXG4gICAgICpcbiAgICAgKiBfLnBhZCgnYWJjJywgMyk7XG4gICAgICogLy8gPT4gJ2FiYydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwYWQoc3RyaW5nLCBsZW5ndGgsIGNoYXJzKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgbGVuZ3RoID0gdG9JbnRlZ2VyKGxlbmd0aCk7XG5cbiAgICAgIHZhciBzdHJMZW5ndGggPSBsZW5ndGggPyBzdHJpbmdTaXplKHN0cmluZykgOiAwO1xuICAgICAgaWYgKCFsZW5ndGggfHwgc3RyTGVuZ3RoID49IGxlbmd0aCkge1xuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgfVxuICAgICAgdmFyIG1pZCA9IChsZW5ndGggLSBzdHJMZW5ndGgpIC8gMjtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIGNyZWF0ZVBhZGRpbmcobmF0aXZlRmxvb3IobWlkKSwgY2hhcnMpICtcbiAgICAgICAgc3RyaW5nICtcbiAgICAgICAgY3JlYXRlUGFkZGluZyhuYXRpdmVDZWlsKG1pZCksIGNoYXJzKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQYWRzIGBzdHJpbmdgIG9uIHRoZSByaWdodCBzaWRlIGlmIGl0J3Mgc2hvcnRlciB0aGFuIGBsZW5ndGhgLiBQYWRkaW5nXG4gICAgICogY2hhcmFjdGVycyBhcmUgdHJ1bmNhdGVkIGlmIHRoZXkgZXhjZWVkIGBsZW5ndGhgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHBhZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD0wXSBUaGUgcGFkZGluZyBsZW5ndGguXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz0nICddIFRoZSBzdHJpbmcgdXNlZCBhcyBwYWRkaW5nLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHBhZGRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucGFkRW5kKCdhYmMnLCA2KTtcbiAgICAgKiAvLyA9PiAnYWJjICAgJ1xuICAgICAqXG4gICAgICogXy5wYWRFbmQoJ2FiYycsIDYsICdfLScpO1xuICAgICAqIC8vID0+ICdhYmNfLV8nXG4gICAgICpcbiAgICAgKiBfLnBhZEVuZCgnYWJjJywgMyk7XG4gICAgICogLy8gPT4gJ2FiYydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwYWRFbmQoc3RyaW5nLCBsZW5ndGgsIGNoYXJzKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgbGVuZ3RoID0gdG9JbnRlZ2VyKGxlbmd0aCk7XG5cbiAgICAgIHZhciBzdHJMZW5ndGggPSBsZW5ndGggPyBzdHJpbmdTaXplKHN0cmluZykgOiAwO1xuICAgICAgcmV0dXJuIChsZW5ndGggJiYgc3RyTGVuZ3RoIDwgbGVuZ3RoKVxuICAgICAgICA/IChzdHJpbmcgKyBjcmVhdGVQYWRkaW5nKGxlbmd0aCAtIHN0ckxlbmd0aCwgY2hhcnMpKVxuICAgICAgICA6IHN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQYWRzIGBzdHJpbmdgIG9uIHRoZSBsZWZ0IHNpZGUgaWYgaXQncyBzaG9ydGVyIHRoYW4gYGxlbmd0aGAuIFBhZGRpbmdcbiAgICAgKiBjaGFyYWN0ZXJzIGFyZSB0cnVuY2F0ZWQgaWYgdGhleSBleGNlZWQgYGxlbmd0aGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gcGFkLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoPTBdIFRoZSBwYWRkaW5nIGxlbmd0aC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPScgJ10gVGhlIHN0cmluZyB1c2VkIGFzIHBhZGRpbmcuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcGFkZGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5wYWRTdGFydCgnYWJjJywgNik7XG4gICAgICogLy8gPT4gJyAgIGFiYydcbiAgICAgKlxuICAgICAqIF8ucGFkU3RhcnQoJ2FiYycsIDYsICdfLScpO1xuICAgICAqIC8vID0+ICdfLV9hYmMnXG4gICAgICpcbiAgICAgKiBfLnBhZFN0YXJ0KCdhYmMnLCAzKTtcbiAgICAgKiAvLyA9PiAnYWJjJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBhZFN0YXJ0KHN0cmluZywgbGVuZ3RoLCBjaGFycykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIGxlbmd0aCA9IHRvSW50ZWdlcihsZW5ndGgpO1xuXG4gICAgICB2YXIgc3RyTGVuZ3RoID0gbGVuZ3RoID8gc3RyaW5nU2l6ZShzdHJpbmcpIDogMDtcbiAgICAgIHJldHVybiAobGVuZ3RoICYmIHN0ckxlbmd0aCA8IGxlbmd0aClcbiAgICAgICAgPyAoY3JlYXRlUGFkZGluZyhsZW5ndGggLSBzdHJMZW5ndGgsIGNoYXJzKSArIHN0cmluZylcbiAgICAgICAgOiBzdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AgdG8gYW4gaW50ZWdlciBvZiB0aGUgc3BlY2lmaWVkIHJhZGl4LiBJZiBgcmFkaXhgIGlzXG4gICAgICogYHVuZGVmaW5lZGAgb3IgYDBgLCBhIGByYWRpeGAgb2YgYDEwYCBpcyB1c2VkIHVubGVzcyBgdmFsdWVgIGlzIGFcbiAgICAgKiBoZXhhZGVjaW1hbCwgaW4gd2hpY2ggY2FzZSBhIGByYWRpeGAgb2YgYDE2YCBpcyB1c2VkLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGFsaWducyB3aXRoIHRoZVxuICAgICAqIFtFUzUgaW1wbGVtZW50YXRpb25dKGh0dHBzOi8vZXM1LmdpdGh1Yi5pby8jeDE1LjEuMi4yKSBvZiBgcGFyc2VJbnRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMS4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcmFkaXg9MTBdIFRoZSByYWRpeCB0byBpbnRlcnByZXQgYHZhbHVlYCBieS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBpbnRlZ2VyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnBhcnNlSW50KCcwOCcpO1xuICAgICAqIC8vID0+IDhcbiAgICAgKlxuICAgICAqIF8ubWFwKFsnNicsICcwOCcsICcxMCddLCBfLnBhcnNlSW50KTtcbiAgICAgKiAvLyA9PiBbNiwgOCwgMTBdXG4gICAgICovXG4gICAgZnVuY3Rpb24gcGFyc2VJbnQoc3RyaW5nLCByYWRpeCwgZ3VhcmQpIHtcbiAgICAgIGlmIChndWFyZCB8fCByYWRpeCA9PSBudWxsKSB7XG4gICAgICAgIHJhZGl4ID0gMDtcbiAgICAgIH0gZWxzZSBpZiAocmFkaXgpIHtcbiAgICAgICAgcmFkaXggPSArcmFkaXg7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmF0aXZlUGFyc2VJbnQodG9TdHJpbmcoc3RyaW5nKS5yZXBsYWNlKHJlVHJpbVN0YXJ0LCAnJyksIHJhZGl4IHx8IDApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlcGVhdHMgdGhlIGdpdmVuIHN0cmluZyBgbmAgdGltZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gcmVwZWF0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0xXSBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIHJlcGVhdCB0aGUgc3RyaW5nLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcmVwZWF0ZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJlcGVhdCgnKicsIDMpO1xuICAgICAqIC8vID0+ICcqKionXG4gICAgICpcbiAgICAgKiBfLnJlcGVhdCgnYWJjJywgMik7XG4gICAgICogLy8gPT4gJ2FiY2FiYydcbiAgICAgKlxuICAgICAqIF8ucmVwZWF0KCdhYmMnLCAwKTtcbiAgICAgKiAvLyA9PiAnJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlcGVhdChzdHJpbmcsIG4sIGd1YXJkKSB7XG4gICAgICBpZiAoKGd1YXJkID8gaXNJdGVyYXRlZUNhbGwoc3RyaW5nLCBuLCBndWFyZCkgOiBuID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIG4gPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbiA9IHRvSW50ZWdlcihuKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlUmVwZWF0KHRvU3RyaW5nKHN0cmluZyksIG4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlcGxhY2VzIG1hdGNoZXMgZm9yIGBwYXR0ZXJuYCBpbiBgc3RyaW5nYCB3aXRoIGByZXBsYWNlbWVudGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAgICAgKiBbYFN0cmluZyNyZXBsYWNlYF0oaHR0cHM6Ly9tZG4uaW8vU3RyaW5nL3JlcGxhY2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cHxzdHJpbmd9IHBhdHRlcm4gVGhlIHBhdHRlcm4gdG8gcmVwbGFjZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufHN0cmluZ30gcmVwbGFjZW1lbnQgVGhlIG1hdGNoIHJlcGxhY2VtZW50LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIG1vZGlmaWVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yZXBsYWNlKCdIaSBGcmVkJywgJ0ZyZWQnLCAnQmFybmV5Jyk7XG4gICAgICogLy8gPT4gJ0hpIEJhcm5leSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZXBsYWNlKCkge1xuICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgICAgc3RyaW5nID0gdG9TdHJpbmcoYXJnc1swXSk7XG5cbiAgICAgIHJldHVybiBhcmdzLmxlbmd0aCA8IDMgPyBzdHJpbmcgOiBzdHJpbmcucmVwbGFjZShhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0b1xuICAgICAqIFtzbmFrZSBjYXNlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9TbmFrZV9jYXNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHNuYWtlIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zbmFrZUNhc2UoJ0ZvbyBCYXInKTtcbiAgICAgKiAvLyA9PiAnZm9vX2JhcidcbiAgICAgKlxuICAgICAqIF8uc25ha2VDYXNlKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnZm9vX2JhcidcbiAgICAgKlxuICAgICAqIF8uc25ha2VDYXNlKCctLUZPTy1CQVItLScpO1xuICAgICAqIC8vID0+ICdmb29fYmFyJ1xuICAgICAqL1xuICAgIHZhciBzbmFrZUNhc2UgPSBjcmVhdGVDb21wb3VuZGVyKGZ1bmN0aW9uKHJlc3VsdCwgd29yZCwgaW5kZXgpIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAoaW5kZXggPyAnXycgOiAnJykgKyB3b3JkLnRvTG93ZXJDYXNlKCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBTcGxpdHMgYHN0cmluZ2AgYnkgYHNlcGFyYXRvcmAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAgICAgKiBbYFN0cmluZyNzcGxpdGBdKGh0dHBzOi8vbWRuLmlvL1N0cmluZy9zcGxpdCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gc3BsaXQuXG4gICAgICogQHBhcmFtIHtSZWdFeHB8c3RyaW5nfSBzZXBhcmF0b3IgVGhlIHNlcGFyYXRvciBwYXR0ZXJuIHRvIHNwbGl0IGJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbGltaXRdIFRoZSBsZW5ndGggdG8gdHJ1bmNhdGUgcmVzdWx0cyB0by5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHN0cmluZyBzZWdtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zcGxpdCgnYS1iLWMnLCAnLScsIDIpO1xuICAgICAqIC8vID0+IFsnYScsICdiJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzcGxpdChzdHJpbmcsIHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgIGlmIChsaW1pdCAmJiB0eXBlb2YgbGltaXQgIT0gJ251bWJlcicgJiYgaXNJdGVyYXRlZUNhbGwoc3RyaW5nLCBzZXBhcmF0b3IsIGxpbWl0KSkge1xuICAgICAgICBzZXBhcmF0b3IgPSBsaW1pdCA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGxpbWl0ID0gbGltaXQgPT09IHVuZGVmaW5lZCA/IE1BWF9BUlJBWV9MRU5HVEggOiBsaW1pdCA+Pj4gMDtcbiAgICAgIGlmICghbGltaXQpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIGlmIChzdHJpbmcgJiYgKFxuICAgICAgICAgICAgdHlwZW9mIHNlcGFyYXRvciA9PSAnc3RyaW5nJyB8fFxuICAgICAgICAgICAgKHNlcGFyYXRvciAhPSBudWxsICYmICFpc1JlZ0V4cChzZXBhcmF0b3IpKVxuICAgICAgICAgICkpIHtcbiAgICAgICAgc2VwYXJhdG9yID0gYmFzZVRvU3RyaW5nKHNlcGFyYXRvcik7XG4gICAgICAgIGlmICghc2VwYXJhdG9yICYmIGhhc1VuaWNvZGUoc3RyaW5nKSkge1xuICAgICAgICAgIHJldHVybiBjYXN0U2xpY2Uoc3RyaW5nVG9BcnJheShzdHJpbmcpLCAwLCBsaW1pdCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBzdHJpbmcuc3BsaXQoc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AgdG9cbiAgICAgKiBbc3RhcnQgY2FzZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGV0dGVyX2Nhc2UjU3R5bGlzdGljX29yX3NwZWNpYWxpc2VkX3VzYWdlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjEuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHN0YXJ0IGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zdGFydENhc2UoJy0tZm9vLWJhci0tJyk7XG4gICAgICogLy8gPT4gJ0ZvbyBCYXInXG4gICAgICpcbiAgICAgKiBfLnN0YXJ0Q2FzZSgnZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ0ZvbyBCYXInXG4gICAgICpcbiAgICAgKiBfLnN0YXJ0Q2FzZSgnX19GT09fQkFSX18nKTtcbiAgICAgKiAvLyA9PiAnRk9PIEJBUidcbiAgICAgKi9cbiAgICB2YXIgc3RhcnRDYXNlID0gY3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQsIHdvcmQsIGluZGV4KSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgKGluZGV4ID8gJyAnIDogJycpICsgdXBwZXJGaXJzdCh3b3JkKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgc3RyaW5nYCBzdGFydHMgd2l0aCB0aGUgZ2l2ZW4gdGFyZ2V0IHN0cmluZy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbdGFyZ2V0XSBUaGUgc3RyaW5nIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtwb3NpdGlvbj0wXSBUaGUgcG9zaXRpb24gdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBzdHJpbmdgIHN0YXJ0cyB3aXRoIGB0YXJnZXRgLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc3RhcnRzV2l0aCgnYWJjJywgJ2EnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLnN0YXJ0c1dpdGgoJ2FiYycsICdiJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uc3RhcnRzV2l0aCgnYWJjJywgJ2InLCAxKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RhcnRzV2l0aChzdHJpbmcsIHRhcmdldCwgcG9zaXRpb24pIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBwb3NpdGlvbiA9IHBvc2l0aW9uID09IG51bGxcbiAgICAgICAgPyAwXG4gICAgICAgIDogYmFzZUNsYW1wKHRvSW50ZWdlcihwb3NpdGlvbiksIDAsIHN0cmluZy5sZW5ndGgpO1xuXG4gICAgICB0YXJnZXQgPSBiYXNlVG9TdHJpbmcodGFyZ2V0KTtcbiAgICAgIHJldHVybiBzdHJpbmcuc2xpY2UocG9zaXRpb24sIHBvc2l0aW9uICsgdGFyZ2V0Lmxlbmd0aCkgPT0gdGFyZ2V0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjb21waWxlZCB0ZW1wbGF0ZSBmdW5jdGlvbiB0aGF0IGNhbiBpbnRlcnBvbGF0ZSBkYXRhIHByb3BlcnRpZXNcbiAgICAgKiBpbiBcImludGVycG9sYXRlXCIgZGVsaW1pdGVycywgSFRNTC1lc2NhcGUgaW50ZXJwb2xhdGVkIGRhdGEgcHJvcGVydGllcyBpblxuICAgICAqIFwiZXNjYXBlXCIgZGVsaW1pdGVycywgYW5kIGV4ZWN1dGUgSmF2YVNjcmlwdCBpbiBcImV2YWx1YXRlXCIgZGVsaW1pdGVycy4gRGF0YVxuICAgICAqIHByb3BlcnRpZXMgbWF5IGJlIGFjY2Vzc2VkIGFzIGZyZWUgdmFyaWFibGVzIGluIHRoZSB0ZW1wbGF0ZS4gSWYgYSBzZXR0aW5nXG4gICAgICogb2JqZWN0IGlzIGdpdmVuLCBpdCB0YWtlcyBwcmVjZWRlbmNlIG92ZXIgYF8udGVtcGxhdGVTZXR0aW5nc2AgdmFsdWVzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIEluIHRoZSBkZXZlbG9wbWVudCBidWlsZCBgXy50ZW1wbGF0ZWAgdXRpbGl6ZXNcbiAgICAgKiBbc291cmNlVVJMc10oaHR0cDovL3d3dy5odG1sNXJvY2tzLmNvbS9lbi90dXRvcmlhbHMvZGV2ZWxvcGVydG9vbHMvc291cmNlbWFwcy8jdG9jLXNvdXJjZXVybClcbiAgICAgKiBmb3IgZWFzaWVyIGRlYnVnZ2luZy5cbiAgICAgKlxuICAgICAqIEZvciBtb3JlIGluZm9ybWF0aW9uIG9uIHByZWNvbXBpbGluZyB0ZW1wbGF0ZXMgc2VlXG4gICAgICogW2xvZGFzaCdzIGN1c3RvbSBidWlsZHMgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9sb2Rhc2guY29tL2N1c3RvbS1idWlsZHMpLlxuICAgICAqXG4gICAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24gb24gQ2hyb21lIGV4dGVuc2lvbiBzYW5kYm94ZXMgc2VlXG4gICAgICogW0Nocm9tZSdzIGV4dGVuc2lvbnMgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kZXZlbG9wZXIuY2hyb21lLmNvbS9leHRlbnNpb25zL3NhbmRib3hpbmdFdmFsKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHRlbXBsYXRlIHN0cmluZy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cH0gW29wdGlvbnMuZXNjYXBlPV8udGVtcGxhdGVTZXR0aW5ncy5lc2NhcGVdXG4gICAgICogIFRoZSBIVE1MIFwiZXNjYXBlXCIgZGVsaW1pdGVyLlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfSBbb3B0aW9ucy5ldmFsdWF0ZT1fLnRlbXBsYXRlU2V0dGluZ3MuZXZhbHVhdGVdXG4gICAgICogIFRoZSBcImV2YWx1YXRlXCIgZGVsaW1pdGVyLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucy5pbXBvcnRzPV8udGVtcGxhdGVTZXR0aW5ncy5pbXBvcnRzXVxuICAgICAqICBBbiBvYmplY3QgdG8gaW1wb3J0IGludG8gdGhlIHRlbXBsYXRlIGFzIGZyZWUgdmFyaWFibGVzLlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfSBbb3B0aW9ucy5pbnRlcnBvbGF0ZT1fLnRlbXBsYXRlU2V0dGluZ3MuaW50ZXJwb2xhdGVdXG4gICAgICogIFRoZSBcImludGVycG9sYXRlXCIgZGVsaW1pdGVyLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5zb3VyY2VVUkw9J2xvZGFzaC50ZW1wbGF0ZVNvdXJjZXNbbl0nXVxuICAgICAqICBUaGUgc291cmNlVVJMIG9mIHRoZSBjb21waWxlZCB0ZW1wbGF0ZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMudmFyaWFibGU9J29iaiddXG4gICAgICogIFRoZSBkYXRhIG9iamVjdCB2YXJpYWJsZSBuYW1lLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBjb21waWxlZCB0ZW1wbGF0ZSBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBcImludGVycG9sYXRlXCIgZGVsaW1pdGVyIHRvIGNyZWF0ZSBhIGNvbXBpbGVkIHRlbXBsYXRlLlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJ2hlbGxvIDwlPSB1c2VyICU+IScpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3VzZXInOiAnZnJlZCcgfSk7XG4gICAgICogLy8gPT4gJ2hlbGxvIGZyZWQhJ1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBIVE1MIFwiZXNjYXBlXCIgZGVsaW1pdGVyIHRvIGVzY2FwZSBkYXRhIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCc8Yj48JS0gdmFsdWUgJT48L2I+Jyk7XG4gICAgICogY29tcGlsZWQoeyAndmFsdWUnOiAnPHNjcmlwdD4nIH0pO1xuICAgICAqIC8vID0+ICc8Yj4mbHQ7c2NyaXB0Jmd0OzwvYj4nXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIFwiZXZhbHVhdGVcIiBkZWxpbWl0ZXIgdG8gZXhlY3V0ZSBKYXZhU2NyaXB0IGFuZCBnZW5lcmF0ZSBIVE1MLlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJzwlIF8uZm9yRWFjaCh1c2VycywgZnVuY3Rpb24odXNlcikgeyAlPjxsaT48JS0gdXNlciAlPjwvbGk+PCUgfSk7ICU+Jyk7XG4gICAgICogY29tcGlsZWQoeyAndXNlcnMnOiBbJ2ZyZWQnLCAnYmFybmV5J10gfSk7XG4gICAgICogLy8gPT4gJzxsaT5mcmVkPC9saT48bGk+YmFybmV5PC9saT4nXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIGludGVybmFsIGBwcmludGAgZnVuY3Rpb24gaW4gXCJldmFsdWF0ZVwiIGRlbGltaXRlcnMuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnPCUgcHJpbnQoXCJoZWxsbyBcIiArIHVzZXIpOyAlPiEnKTtcbiAgICAgKiBjb21waWxlZCh7ICd1c2VyJzogJ2Jhcm5leScgfSk7XG4gICAgICogLy8gPT4gJ2hlbGxvIGJhcm5leSEnXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIEVTIHRlbXBsYXRlIGxpdGVyYWwgZGVsaW1pdGVyIGFzIGFuIFwiaW50ZXJwb2xhdGVcIiBkZWxpbWl0ZXIuXG4gICAgICogLy8gRGlzYWJsZSBzdXBwb3J0IGJ5IHJlcGxhY2luZyB0aGUgXCJpbnRlcnBvbGF0ZVwiIGRlbGltaXRlci5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCdoZWxsbyAkeyB1c2VyIH0hJyk7XG4gICAgICogY29tcGlsZWQoeyAndXNlcic6ICdwZWJibGVzJyB9KTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gcGViYmxlcyEnXG4gICAgICpcbiAgICAgKiAvLyBVc2UgYmFja3NsYXNoZXMgdG8gdHJlYXQgZGVsaW1pdGVycyBhcyBwbGFpbiB0ZXh0LlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJzwlPSBcIlxcXFw8JS0gdmFsdWUgJVxcXFw+XCIgJT4nKTtcbiAgICAgKiBjb21waWxlZCh7ICd2YWx1ZSc6ICdpZ25vcmVkJyB9KTtcbiAgICAgKiAvLyA9PiAnPCUtIHZhbHVlICU+J1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBgaW1wb3J0c2Agb3B0aW9uIHRvIGltcG9ydCBgalF1ZXJ5YCBhcyBganFgLlxuICAgICAqIHZhciB0ZXh0ID0gJzwlIGpxLmVhY2godXNlcnMsIGZ1bmN0aW9uKHVzZXIpIHsgJT48bGk+PCUtIHVzZXIgJT48L2xpPjwlIH0pOyAlPic7XG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSh0ZXh0LCB7ICdpbXBvcnRzJzogeyAnanEnOiBqUXVlcnkgfSB9KTtcbiAgICAgKiBjb21waWxlZCh7ICd1c2Vycyc6IFsnZnJlZCcsICdiYXJuZXknXSB9KTtcbiAgICAgKiAvLyA9PiAnPGxpPmZyZWQ8L2xpPjxsaT5iYXJuZXk8L2xpPidcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgYHNvdXJjZVVSTGAgb3B0aW9uIHRvIHNwZWNpZnkgYSBjdXN0b20gc291cmNlVVJMIGZvciB0aGUgdGVtcGxhdGUuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnaGVsbG8gPCU9IHVzZXIgJT4hJywgeyAnc291cmNlVVJMJzogJy9iYXNpYy9ncmVldGluZy5qc3QnIH0pO1xuICAgICAqIGNvbXBpbGVkKGRhdGEpO1xuICAgICAqIC8vID0+IEZpbmQgdGhlIHNvdXJjZSBvZiBcImdyZWV0aW5nLmpzdFwiIHVuZGVyIHRoZSBTb3VyY2VzIHRhYiBvciBSZXNvdXJjZXMgcGFuZWwgb2YgdGhlIHdlYiBpbnNwZWN0b3IuXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIGB2YXJpYWJsZWAgb3B0aW9uIHRvIGVuc3VyZSBhIHdpdGgtc3RhdGVtZW50IGlzbid0IHVzZWQgaW4gdGhlIGNvbXBpbGVkIHRlbXBsYXRlLlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJ2hpIDwlPSBkYXRhLnVzZXIgJT4hJywgeyAndmFyaWFibGUnOiAnZGF0YScgfSk7XG4gICAgICogY29tcGlsZWQuc291cmNlO1xuICAgICAqIC8vID0+IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgKiAvLyAgIHZhciBfX3QsIF9fcCA9ICcnO1xuICAgICAqIC8vICAgX19wICs9ICdoaSAnICsgKChfX3QgPSAoIGRhdGEudXNlciApKSA9PSBudWxsID8gJycgOiBfX3QpICsgJyEnO1xuICAgICAqIC8vICAgcmV0dXJuIF9fcDtcbiAgICAgKiAvLyB9XG4gICAgICpcbiAgICAgKiAvLyBVc2UgY3VzdG9tIHRlbXBsYXRlIGRlbGltaXRlcnMuXG4gICAgICogXy50ZW1wbGF0ZVNldHRpbmdzLmludGVycG9sYXRlID0gL3t7KFtcXHNcXFNdKz8pfX0vZztcbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCdoZWxsbyB7eyB1c2VyIH19IScpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3VzZXInOiAnbXVzdGFjaGUnIH0pO1xuICAgICAqIC8vID0+ICdoZWxsbyBtdXN0YWNoZSEnXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIGBzb3VyY2VgIHByb3BlcnR5IHRvIGlubGluZSBjb21waWxlZCB0ZW1wbGF0ZXMgZm9yIG1lYW5pbmdmdWxcbiAgICAgKiAvLyBsaW5lIG51bWJlcnMgaW4gZXJyb3IgbWVzc2FnZXMgYW5kIHN0YWNrIHRyYWNlcy5cbiAgICAgKiBmcy53cml0ZUZpbGVTeW5jKHBhdGguam9pbihwcm9jZXNzLmN3ZCgpLCAnanN0LmpzJyksICdcXFxuICAgICAqICAgdmFyIEpTVCA9IHtcXFxuICAgICAqICAgICBcIm1haW5cIjogJyArIF8udGVtcGxhdGUobWFpblRleHQpLnNvdXJjZSArICdcXFxuICAgICAqICAgfTtcXFxuICAgICAqICcpO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRlbXBsYXRlKHN0cmluZywgb3B0aW9ucywgZ3VhcmQpIHtcbiAgICAgIC8vIEJhc2VkIG9uIEpvaG4gUmVzaWcncyBgdG1wbGAgaW1wbGVtZW50YXRpb25cbiAgICAgIC8vIChodHRwOi8vZWpvaG4ub3JnL2Jsb2cvamF2YXNjcmlwdC1taWNyby10ZW1wbGF0aW5nLylcbiAgICAgIC8vIGFuZCBMYXVyYSBEb2t0b3JvdmEncyBkb1QuanMgKGh0dHBzOi8vZ2l0aHViLmNvbS9vbGFkby9kb1QpLlxuICAgICAgdmFyIHNldHRpbmdzID0gbG9kYXNoLnRlbXBsYXRlU2V0dGluZ3M7XG5cbiAgICAgIGlmIChndWFyZCAmJiBpc0l0ZXJhdGVlQ2FsbChzdHJpbmcsIG9wdGlvbnMsIGd1YXJkKSkge1xuICAgICAgICBvcHRpb25zID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIG9wdGlvbnMgPSBhc3NpZ25JbldpdGgoe30sIG9wdGlvbnMsIHNldHRpbmdzLCBjdXN0b21EZWZhdWx0c0Fzc2lnbkluKTtcblxuICAgICAgdmFyIGltcG9ydHMgPSBhc3NpZ25JbldpdGgoe30sIG9wdGlvbnMuaW1wb3J0cywgc2V0dGluZ3MuaW1wb3J0cywgY3VzdG9tRGVmYXVsdHNBc3NpZ25JbiksXG4gICAgICAgICAgaW1wb3J0c0tleXMgPSBrZXlzKGltcG9ydHMpLFxuICAgICAgICAgIGltcG9ydHNWYWx1ZXMgPSBiYXNlVmFsdWVzKGltcG9ydHMsIGltcG9ydHNLZXlzKTtcblxuICAgICAgdmFyIGlzRXNjYXBpbmcsXG4gICAgICAgICAgaXNFdmFsdWF0aW5nLFxuICAgICAgICAgIGluZGV4ID0gMCxcbiAgICAgICAgICBpbnRlcnBvbGF0ZSA9IG9wdGlvbnMuaW50ZXJwb2xhdGUgfHwgcmVOb01hdGNoLFxuICAgICAgICAgIHNvdXJjZSA9IFwiX19wICs9ICdcIjtcblxuICAgICAgLy8gQ29tcGlsZSB0aGUgcmVnZXhwIHRvIG1hdGNoIGVhY2ggZGVsaW1pdGVyLlxuICAgICAgdmFyIHJlRGVsaW1pdGVycyA9IFJlZ0V4cChcbiAgICAgICAgKG9wdGlvbnMuZXNjYXBlIHx8IHJlTm9NYXRjaCkuc291cmNlICsgJ3wnICtcbiAgICAgICAgaW50ZXJwb2xhdGUuc291cmNlICsgJ3wnICtcbiAgICAgICAgKGludGVycG9sYXRlID09PSByZUludGVycG9sYXRlID8gcmVFc1RlbXBsYXRlIDogcmVOb01hdGNoKS5zb3VyY2UgKyAnfCcgK1xuICAgICAgICAob3B0aW9ucy5ldmFsdWF0ZSB8fCByZU5vTWF0Y2gpLnNvdXJjZSArICd8JCdcbiAgICAgICwgJ2cnKTtcblxuICAgICAgLy8gVXNlIGEgc291cmNlVVJMIGZvciBlYXNpZXIgZGVidWdnaW5nLlxuICAgICAgLy8gVGhlIHNvdXJjZVVSTCBnZXRzIGluamVjdGVkIGludG8gdGhlIHNvdXJjZSB0aGF0J3MgZXZhbC1lZCwgc28gYmUgY2FyZWZ1bFxuICAgICAgLy8gd2l0aCBsb29rdXAgKGluIGNhc2Ugb2YgZS5nLiBwcm90b3R5cGUgcG9sbHV0aW9uKSwgYW5kIHN0cmlwIG5ld2xpbmVzIGlmIGFueS5cbiAgICAgIC8vIEEgbmV3bGluZSB3b3VsZG4ndCBiZSBhIHZhbGlkIHNvdXJjZVVSTCBhbnl3YXksIGFuZCBpdCdkIGVuYWJsZSBjb2RlIGluamVjdGlvbi5cbiAgICAgIHZhciBzb3VyY2VVUkwgPSAnLy8jIHNvdXJjZVVSTD0nICtcbiAgICAgICAgKGhhc093blByb3BlcnR5LmNhbGwob3B0aW9ucywgJ3NvdXJjZVVSTCcpXG4gICAgICAgICAgPyAob3B0aW9ucy5zb3VyY2VVUkwgKyAnJykucmVwbGFjZSgvW1xcclxcbl0vZywgJyAnKVxuICAgICAgICAgIDogKCdsb2Rhc2gudGVtcGxhdGVTb3VyY2VzWycgKyAoKyt0ZW1wbGF0ZUNvdW50ZXIpICsgJ10nKVxuICAgICAgICApICsgJ1xcbic7XG5cbiAgICAgIHN0cmluZy5yZXBsYWNlKHJlRGVsaW1pdGVycywgZnVuY3Rpb24obWF0Y2gsIGVzY2FwZVZhbHVlLCBpbnRlcnBvbGF0ZVZhbHVlLCBlc1RlbXBsYXRlVmFsdWUsIGV2YWx1YXRlVmFsdWUsIG9mZnNldCkge1xuICAgICAgICBpbnRlcnBvbGF0ZVZhbHVlIHx8IChpbnRlcnBvbGF0ZVZhbHVlID0gZXNUZW1wbGF0ZVZhbHVlKTtcblxuICAgICAgICAvLyBFc2NhcGUgY2hhcmFjdGVycyB0aGF0IGNhbid0IGJlIGluY2x1ZGVkIGluIHN0cmluZyBsaXRlcmFscy5cbiAgICAgICAgc291cmNlICs9IHN0cmluZy5zbGljZShpbmRleCwgb2Zmc2V0KS5yZXBsYWNlKHJlVW5lc2NhcGVkU3RyaW5nLCBlc2NhcGVTdHJpbmdDaGFyKTtcblxuICAgICAgICAvLyBSZXBsYWNlIGRlbGltaXRlcnMgd2l0aCBzbmlwcGV0cy5cbiAgICAgICAgaWYgKGVzY2FwZVZhbHVlKSB7XG4gICAgICAgICAgaXNFc2NhcGluZyA9IHRydWU7XG4gICAgICAgICAgc291cmNlICs9IFwiJyArXFxuX19lKFwiICsgZXNjYXBlVmFsdWUgKyBcIikgK1xcbidcIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXZhbHVhdGVWYWx1ZSkge1xuICAgICAgICAgIGlzRXZhbHVhdGluZyA9IHRydWU7XG4gICAgICAgICAgc291cmNlICs9IFwiJztcXG5cIiArIGV2YWx1YXRlVmFsdWUgKyBcIjtcXG5fX3AgKz0gJ1wiO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbnRlcnBvbGF0ZVZhbHVlKSB7XG4gICAgICAgICAgc291cmNlICs9IFwiJyArXFxuKChfX3QgPSAoXCIgKyBpbnRlcnBvbGF0ZVZhbHVlICsgXCIpKSA9PSBudWxsID8gJycgOiBfX3QpICtcXG4nXCI7XG4gICAgICAgIH1cbiAgICAgICAgaW5kZXggPSBvZmZzZXQgKyBtYXRjaC5sZW5ndGg7XG5cbiAgICAgICAgLy8gVGhlIEpTIGVuZ2luZSBlbWJlZGRlZCBpbiBBZG9iZSBwcm9kdWN0cyBuZWVkcyBgbWF0Y2hgIHJldHVybmVkIGluXG4gICAgICAgIC8vIG9yZGVyIHRvIHByb2R1Y2UgdGhlIGNvcnJlY3QgYG9mZnNldGAgdmFsdWUuXG4gICAgICAgIHJldHVybiBtYXRjaDtcbiAgICAgIH0pO1xuXG4gICAgICBzb3VyY2UgKz0gXCInO1xcblwiO1xuXG4gICAgICAvLyBJZiBgdmFyaWFibGVgIGlzIG5vdCBzcGVjaWZpZWQgd3JhcCBhIHdpdGgtc3RhdGVtZW50IGFyb3VuZCB0aGUgZ2VuZXJhdGVkXG4gICAgICAvLyBjb2RlIHRvIGFkZCB0aGUgZGF0YSBvYmplY3QgdG8gdGhlIHRvcCBvZiB0aGUgc2NvcGUgY2hhaW4uXG4gICAgICAvLyBMaWtlIHdpdGggc291cmNlVVJMLCB3ZSB0YWtlIGNhcmUgdG8gbm90IGNoZWNrIHRoZSBvcHRpb24ncyBwcm90b3R5cGUsXG4gICAgICAvLyBhcyB0aGlzIGNvbmZpZ3VyYXRpb24gaXMgYSBjb2RlIGluamVjdGlvbiB2ZWN0b3IuXG4gICAgICB2YXIgdmFyaWFibGUgPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9wdGlvbnMsICd2YXJpYWJsZScpICYmIG9wdGlvbnMudmFyaWFibGU7XG4gICAgICBpZiAoIXZhcmlhYmxlKSB7XG4gICAgICAgIHNvdXJjZSA9ICd3aXRoIChvYmopIHtcXG4nICsgc291cmNlICsgJ1xcbn1cXG4nO1xuICAgICAgfVxuICAgICAgLy8gQ2xlYW51cCBjb2RlIGJ5IHN0cmlwcGluZyBlbXB0eSBzdHJpbmdzLlxuICAgICAgc291cmNlID0gKGlzRXZhbHVhdGluZyA/IHNvdXJjZS5yZXBsYWNlKHJlRW1wdHlTdHJpbmdMZWFkaW5nLCAnJykgOiBzb3VyY2UpXG4gICAgICAgIC5yZXBsYWNlKHJlRW1wdHlTdHJpbmdNaWRkbGUsICckMScpXG4gICAgICAgIC5yZXBsYWNlKHJlRW1wdHlTdHJpbmdUcmFpbGluZywgJyQxOycpO1xuXG4gICAgICAvLyBGcmFtZSBjb2RlIGFzIHRoZSBmdW5jdGlvbiBib2R5LlxuICAgICAgc291cmNlID0gJ2Z1bmN0aW9uKCcgKyAodmFyaWFibGUgfHwgJ29iaicpICsgJykge1xcbicgK1xuICAgICAgICAodmFyaWFibGVcbiAgICAgICAgICA/ICcnXG4gICAgICAgICAgOiAnb2JqIHx8IChvYmogPSB7fSk7XFxuJ1xuICAgICAgICApICtcbiAgICAgICAgXCJ2YXIgX190LCBfX3AgPSAnJ1wiICtcbiAgICAgICAgKGlzRXNjYXBpbmdcbiAgICAgICAgICAgPyAnLCBfX2UgPSBfLmVzY2FwZSdcbiAgICAgICAgICAgOiAnJ1xuICAgICAgICApICtcbiAgICAgICAgKGlzRXZhbHVhdGluZ1xuICAgICAgICAgID8gJywgX19qID0gQXJyYXkucHJvdG90eXBlLmpvaW47XFxuJyArXG4gICAgICAgICAgICBcImZ1bmN0aW9uIHByaW50KCkgeyBfX3AgKz0gX19qLmNhbGwoYXJndW1lbnRzLCAnJykgfVxcblwiXG4gICAgICAgICAgOiAnO1xcbidcbiAgICAgICAgKSArXG4gICAgICAgIHNvdXJjZSArXG4gICAgICAgICdyZXR1cm4gX19wXFxufSc7XG5cbiAgICAgIHZhciByZXN1bHQgPSBhdHRlbXB0KGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gRnVuY3Rpb24oaW1wb3J0c0tleXMsIHNvdXJjZVVSTCArICdyZXR1cm4gJyArIHNvdXJjZSlcbiAgICAgICAgICAuYXBwbHkodW5kZWZpbmVkLCBpbXBvcnRzVmFsdWVzKTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBQcm92aWRlIHRoZSBjb21waWxlZCBmdW5jdGlvbidzIHNvdXJjZSBieSBpdHMgYHRvU3RyaW5nYCBtZXRob2Qgb3JcbiAgICAgIC8vIHRoZSBgc291cmNlYCBwcm9wZXJ0eSBhcyBhIGNvbnZlbmllbmNlIGZvciBpbmxpbmluZyBjb21waWxlZCB0ZW1wbGF0ZXMuXG4gICAgICByZXN1bHQuc291cmNlID0gc291cmNlO1xuICAgICAgaWYgKGlzRXJyb3IocmVzdWx0KSkge1xuICAgICAgICB0aHJvdyByZXN1bHQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgLCBhcyBhIHdob2xlLCB0byBsb3dlciBjYXNlIGp1c3QgbGlrZVxuICAgICAqIFtTdHJpbmcjdG9Mb3dlckNhc2VdKGh0dHBzOi8vbWRuLmlvL3RvTG93ZXJDYXNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGxvd2VyIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b0xvd2VyKCctLUZvby1CYXItLScpO1xuICAgICAqIC8vID0+ICctLWZvby1iYXItLSdcbiAgICAgKlxuICAgICAqIF8udG9Mb3dlcignZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvb2JhcidcbiAgICAgKlxuICAgICAqIF8udG9Mb3dlcignX19GT09fQkFSX18nKTtcbiAgICAgKiAvLyA9PiAnX19mb29fYmFyX18nXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9Mb3dlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRvU3RyaW5nKHZhbHVlKS50b0xvd2VyQ2FzZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgLCBhcyBhIHdob2xlLCB0byB1cHBlciBjYXNlIGp1c3QgbGlrZVxuICAgICAqIFtTdHJpbmcjdG9VcHBlckNhc2VdKGh0dHBzOi8vbWRuLmlvL3RvVXBwZXJDYXNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHVwcGVyIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b1VwcGVyKCctLWZvby1iYXItLScpO1xuICAgICAqIC8vID0+ICctLUZPTy1CQVItLSdcbiAgICAgKlxuICAgICAqIF8udG9VcHBlcignZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ0ZPT0JBUidcbiAgICAgKlxuICAgICAqIF8udG9VcHBlcignX19mb29fYmFyX18nKTtcbiAgICAgKiAvLyA9PiAnX19GT09fQkFSX18nXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9VcHBlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRvU3RyaW5nKHZhbHVlKS50b1VwcGVyQ2FzZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgbGVhZGluZyBhbmQgdHJhaWxpbmcgd2hpdGVzcGFjZSBvciBzcGVjaWZpZWQgY2hhcmFjdGVycyBmcm9tIGBzdHJpbmdgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHRyaW0uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz13aGl0ZXNwYWNlXSBUaGUgY2hhcmFjdGVycyB0byB0cmltLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdHJpbW1lZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udHJpbSgnICBhYmMgICcpO1xuICAgICAqIC8vID0+ICdhYmMnXG4gICAgICpcbiAgICAgKiBfLnRyaW0oJy1fLWFiYy1fLScsICdfLScpO1xuICAgICAqIC8vID0+ICdhYmMnXG4gICAgICpcbiAgICAgKiBfLm1hcChbJyAgZm9vICAnLCAnICBiYXIgICddLCBfLnRyaW0pO1xuICAgICAqIC8vID0+IFsnZm9vJywgJ2JhciddXG4gICAgICovXG4gICAgZnVuY3Rpb24gdHJpbShzdHJpbmcsIGNoYXJzLCBndWFyZCkge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIGlmIChzdHJpbmcgJiYgKGd1YXJkIHx8IGNoYXJzID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZShyZVRyaW0sICcnKTtcbiAgICAgIH1cbiAgICAgIGlmICghc3RyaW5nIHx8ICEoY2hhcnMgPSBiYXNlVG9TdHJpbmcoY2hhcnMpKSkge1xuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgfVxuICAgICAgdmFyIHN0clN5bWJvbHMgPSBzdHJpbmdUb0FycmF5KHN0cmluZyksXG4gICAgICAgICAgY2hyU3ltYm9scyA9IHN0cmluZ1RvQXJyYXkoY2hhcnMpLFxuICAgICAgICAgIHN0YXJ0ID0gY2hhcnNTdGFydEluZGV4KHN0clN5bWJvbHMsIGNoclN5bWJvbHMpLFxuICAgICAgICAgIGVuZCA9IGNoYXJzRW5kSW5kZXgoc3RyU3ltYm9scywgY2hyU3ltYm9scykgKyAxO1xuXG4gICAgICByZXR1cm4gY2FzdFNsaWNlKHN0clN5bWJvbHMsIHN0YXJ0LCBlbmQpLmpvaW4oJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgdHJhaWxpbmcgd2hpdGVzcGFjZSBvciBzcGVjaWZpZWQgY2hhcmFjdGVycyBmcm9tIGBzdHJpbmdgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHRyaW0uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz13aGl0ZXNwYWNlXSBUaGUgY2hhcmFjdGVycyB0byB0cmltLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdHJpbW1lZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udHJpbUVuZCgnICBhYmMgICcpO1xuICAgICAqIC8vID0+ICcgIGFiYydcbiAgICAgKlxuICAgICAqIF8udHJpbUVuZCgnLV8tYWJjLV8tJywgJ18tJyk7XG4gICAgICogLy8gPT4gJy1fLWFiYydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cmltRW5kKHN0cmluZywgY2hhcnMsIGd1YXJkKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgaWYgKHN0cmluZyAmJiAoZ3VhcmQgfHwgY2hhcnMgPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKHJlVHJpbUVuZCwgJycpO1xuICAgICAgfVxuICAgICAgaWYgKCFzdHJpbmcgfHwgIShjaGFycyA9IGJhc2VUb1N0cmluZyhjaGFycykpKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgICB9XG4gICAgICB2YXIgc3RyU3ltYm9scyA9IHN0cmluZ1RvQXJyYXkoc3RyaW5nKSxcbiAgICAgICAgICBlbmQgPSBjaGFyc0VuZEluZGV4KHN0clN5bWJvbHMsIHN0cmluZ1RvQXJyYXkoY2hhcnMpKSArIDE7XG5cbiAgICAgIHJldHVybiBjYXN0U2xpY2Uoc3RyU3ltYm9scywgMCwgZW5kKS5qb2luKCcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGxlYWRpbmcgd2hpdGVzcGFjZSBvciBzcGVjaWZpZWQgY2hhcmFjdGVycyBmcm9tIGBzdHJpbmdgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHRyaW0uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz13aGl0ZXNwYWNlXSBUaGUgY2hhcmFjdGVycyB0byB0cmltLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdHJpbW1lZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udHJpbVN0YXJ0KCcgIGFiYyAgJyk7XG4gICAgICogLy8gPT4gJ2FiYyAgJ1xuICAgICAqXG4gICAgICogXy50cmltU3RhcnQoJy1fLWFiYy1fLScsICdfLScpO1xuICAgICAqIC8vID0+ICdhYmMtXy0nXG4gICAgICovXG4gICAgZnVuY3Rpb24gdHJpbVN0YXJ0KHN0cmluZywgY2hhcnMsIGd1YXJkKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgaWYgKHN0cmluZyAmJiAoZ3VhcmQgfHwgY2hhcnMgPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKHJlVHJpbVN0YXJ0LCAnJyk7XG4gICAgICB9XG4gICAgICBpZiAoIXN0cmluZyB8fCAhKGNoYXJzID0gYmFzZVRvU3RyaW5nKGNoYXJzKSkpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICAgIH1cbiAgICAgIHZhciBzdHJTeW1ib2xzID0gc3RyaW5nVG9BcnJheShzdHJpbmcpLFxuICAgICAgICAgIHN0YXJ0ID0gY2hhcnNTdGFydEluZGV4KHN0clN5bWJvbHMsIHN0cmluZ1RvQXJyYXkoY2hhcnMpKTtcblxuICAgICAgcmV0dXJuIGNhc3RTbGljZShzdHJTeW1ib2xzLCBzdGFydCkuam9pbignJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJ1bmNhdGVzIGBzdHJpbmdgIGlmIGl0J3MgbG9uZ2VyIHRoYW4gdGhlIGdpdmVuIG1heGltdW0gc3RyaW5nIGxlbmd0aC5cbiAgICAgKiBUaGUgbGFzdCBjaGFyYWN0ZXJzIG9mIHRoZSB0cnVuY2F0ZWQgc3RyaW5nIGFyZSByZXBsYWNlZCB3aXRoIHRoZSBvbWlzc2lvblxuICAgICAqIHN0cmluZyB3aGljaCBkZWZhdWx0cyB0byBcIi4uLlwiLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHRydW5jYXRlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5sZW5ndGg9MzBdIFRoZSBtYXhpbXVtIHN0cmluZyBsZW5ndGguXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLm9taXNzaW9uPScuLi4nXSBUaGUgc3RyaW5nIHRvIGluZGljYXRlIHRleHQgaXMgb21pdHRlZC5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cHxzdHJpbmd9IFtvcHRpb25zLnNlcGFyYXRvcl0gVGhlIHNlcGFyYXRvciBwYXR0ZXJuIHRvIHRydW5jYXRlIHRvLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHRydW5jYXRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udHJ1bmNhdGUoJ2hpLWRpZGRseS1obyB0aGVyZSwgbmVpZ2hib3Jpbm8nKTtcbiAgICAgKiAvLyA9PiAnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvLi4uJ1xuICAgICAqXG4gICAgICogXy50cnVuY2F0ZSgnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvcmlubycsIHtcbiAgICAgKiAgICdsZW5ndGgnOiAyNCxcbiAgICAgKiAgICdzZXBhcmF0b3InOiAnICdcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiAnaGktZGlkZGx5LWhvIHRoZXJlLC4uLidcbiAgICAgKlxuICAgICAqIF8udHJ1bmNhdGUoJ2hpLWRpZGRseS1obyB0aGVyZSwgbmVpZ2hib3Jpbm8nLCB7XG4gICAgICogICAnbGVuZ3RoJzogMjQsXG4gICAgICogICAnc2VwYXJhdG9yJzogLyw/ICsvXG4gICAgICogfSk7XG4gICAgICogLy8gPT4gJ2hpLWRpZGRseS1obyB0aGVyZS4uLidcbiAgICAgKlxuICAgICAqIF8udHJ1bmNhdGUoJ2hpLWRpZGRseS1obyB0aGVyZSwgbmVpZ2hib3Jpbm8nLCB7XG4gICAgICogICAnb21pc3Npb24nOiAnIFsuLi5dJ1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+ICdoaS1kaWRkbHktaG8gdGhlcmUsIG5laWcgWy4uLl0nXG4gICAgICovXG4gICAgZnVuY3Rpb24gdHJ1bmNhdGUoc3RyaW5nLCBvcHRpb25zKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gREVGQVVMVF9UUlVOQ19MRU5HVEgsXG4gICAgICAgICAgb21pc3Npb24gPSBERUZBVUxUX1RSVU5DX09NSVNTSU9OO1xuXG4gICAgICBpZiAoaXNPYmplY3Qob3B0aW9ucykpIHtcbiAgICAgICAgdmFyIHNlcGFyYXRvciA9ICdzZXBhcmF0b3InIGluIG9wdGlvbnMgPyBvcHRpb25zLnNlcGFyYXRvciA6IHNlcGFyYXRvcjtcbiAgICAgICAgbGVuZ3RoID0gJ2xlbmd0aCcgaW4gb3B0aW9ucyA/IHRvSW50ZWdlcihvcHRpb25zLmxlbmd0aCkgOiBsZW5ndGg7XG4gICAgICAgIG9taXNzaW9uID0gJ29taXNzaW9uJyBpbiBvcHRpb25zID8gYmFzZVRvU3RyaW5nKG9wdGlvbnMub21pc3Npb24pIDogb21pc3Npb247XG4gICAgICB9XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuXG4gICAgICB2YXIgc3RyTGVuZ3RoID0gc3RyaW5nLmxlbmd0aDtcbiAgICAgIGlmIChoYXNVbmljb2RlKHN0cmluZykpIHtcbiAgICAgICAgdmFyIHN0clN5bWJvbHMgPSBzdHJpbmdUb0FycmF5KHN0cmluZyk7XG4gICAgICAgIHN0ckxlbmd0aCA9IHN0clN5bWJvbHMubGVuZ3RoO1xuICAgICAgfVxuICAgICAgaWYgKGxlbmd0aCA+PSBzdHJMZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICAgIH1cbiAgICAgIHZhciBlbmQgPSBsZW5ndGggLSBzdHJpbmdTaXplKG9taXNzaW9uKTtcbiAgICAgIGlmIChlbmQgPCAxKSB7XG4gICAgICAgIHJldHVybiBvbWlzc2lvbjtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSBzdHJTeW1ib2xzXG4gICAgICAgID8gY2FzdFNsaWNlKHN0clN5bWJvbHMsIDAsIGVuZCkuam9pbignJylcbiAgICAgICAgOiBzdHJpbmcuc2xpY2UoMCwgZW5kKTtcblxuICAgICAgaWYgKHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQgKyBvbWlzc2lvbjtcbiAgICAgIH1cbiAgICAgIGlmIChzdHJTeW1ib2xzKSB7XG4gICAgICAgIGVuZCArPSAocmVzdWx0Lmxlbmd0aCAtIGVuZCk7XG4gICAgICB9XG4gICAgICBpZiAoaXNSZWdFeHAoc2VwYXJhdG9yKSkge1xuICAgICAgICBpZiAoc3RyaW5nLnNsaWNlKGVuZCkuc2VhcmNoKHNlcGFyYXRvcikpIHtcbiAgICAgICAgICB2YXIgbWF0Y2gsXG4gICAgICAgICAgICAgIHN1YnN0cmluZyA9IHJlc3VsdDtcblxuICAgICAgICAgIGlmICghc2VwYXJhdG9yLmdsb2JhbCkge1xuICAgICAgICAgICAgc2VwYXJhdG9yID0gUmVnRXhwKHNlcGFyYXRvci5zb3VyY2UsIHRvU3RyaW5nKHJlRmxhZ3MuZXhlYyhzZXBhcmF0b3IpKSArICdnJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNlcGFyYXRvci5sYXN0SW5kZXggPSAwO1xuICAgICAgICAgIHdoaWxlICgobWF0Y2ggPSBzZXBhcmF0b3IuZXhlYyhzdWJzdHJpbmcpKSkge1xuICAgICAgICAgICAgdmFyIG5ld0VuZCA9IG1hdGNoLmluZGV4O1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQgPSByZXN1bHQuc2xpY2UoMCwgbmV3RW5kID09PSB1bmRlZmluZWQgPyBlbmQgOiBuZXdFbmQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHN0cmluZy5pbmRleE9mKGJhc2VUb1N0cmluZyhzZXBhcmF0b3IpLCBlbmQpICE9IGVuZCkge1xuICAgICAgICB2YXIgaW5kZXggPSByZXN1bHQubGFzdEluZGV4T2Yoc2VwYXJhdG9yKTtcbiAgICAgICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgICAgICByZXN1bHQgPSByZXN1bHQuc2xpY2UoMCwgaW5kZXgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0ICsgb21pc3Npb247XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGludmVyc2Ugb2YgYF8uZXNjYXBlYDsgdGhpcyBtZXRob2QgY29udmVydHMgdGhlIEhUTUwgZW50aXRpZXNcbiAgICAgKiBgJmFtcDtgLCBgJmx0O2AsIGAmZ3Q7YCwgYCZxdW90O2AsIGFuZCBgJiMzOTtgIGluIGBzdHJpbmdgIHRvXG4gICAgICogdGhlaXIgY29ycmVzcG9uZGluZyBjaGFyYWN0ZXJzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE5vIG90aGVyIEhUTUwgZW50aXRpZXMgYXJlIHVuZXNjYXBlZC4gVG8gdW5lc2NhcGUgYWRkaXRpb25hbFxuICAgICAqIEhUTUwgZW50aXRpZXMgdXNlIGEgdGhpcmQtcGFydHkgbGlicmFyeSBsaWtlIFtfaGVfXShodHRwczovL210aHMuYmUvaGUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNi4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHVuZXNjYXBlLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHVuZXNjYXBlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5lc2NhcGUoJ2ZyZWQsIGJhcm5leSwgJmFtcDsgcGViYmxlcycpO1xuICAgICAqIC8vID0+ICdmcmVkLCBiYXJuZXksICYgcGViYmxlcydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bmVzY2FwZShzdHJpbmcpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICByZXR1cm4gKHN0cmluZyAmJiByZUhhc0VzY2FwZWRIdG1sLnRlc3Qoc3RyaW5nKSlcbiAgICAgICAgPyBzdHJpbmcucmVwbGFjZShyZUVzY2FwZWRIdG1sLCB1bmVzY2FwZUh0bWxDaGFyKVxuICAgICAgICA6IHN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCwgYXMgc3BhY2Ugc2VwYXJhdGVkIHdvcmRzLCB0byB1cHBlciBjYXNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdXBwZXIgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVwcGVyQ2FzZSgnLS1mb28tYmFyJyk7XG4gICAgICogLy8gPT4gJ0ZPTyBCQVInXG4gICAgICpcbiAgICAgKiBfLnVwcGVyQ2FzZSgnZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ0ZPTyBCQVInXG4gICAgICpcbiAgICAgKiBfLnVwcGVyQ2FzZSgnX19mb29fYmFyX18nKTtcbiAgICAgKiAvLyA9PiAnRk9PIEJBUidcbiAgICAgKi9cbiAgICB2YXIgdXBwZXJDYXNlID0gY3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQsIHdvcmQsIGluZGV4KSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgKGluZGV4ID8gJyAnIDogJycpICsgd29yZC50b1VwcGVyQ2FzZSgpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgdGhlIGZpcnN0IGNoYXJhY3RlciBvZiBgc3RyaW5nYCB0byB1cHBlciBjYXNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51cHBlckZpcnN0KCdmcmVkJyk7XG4gICAgICogLy8gPT4gJ0ZyZWQnXG4gICAgICpcbiAgICAgKiBfLnVwcGVyRmlyc3QoJ0ZSRUQnKTtcbiAgICAgKiAvLyA9PiAnRlJFRCdcbiAgICAgKi9cbiAgICB2YXIgdXBwZXJGaXJzdCA9IGNyZWF0ZUNhc2VGaXJzdCgndG9VcHBlckNhc2UnKTtcblxuICAgIC8qKlxuICAgICAqIFNwbGl0cyBgc3RyaW5nYCBpbnRvIGFuIGFycmF5IG9mIGl0cyB3b3Jkcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfHN0cmluZ30gW3BhdHRlcm5dIFRoZSBwYXR0ZXJuIHRvIG1hdGNoIHdvcmRzLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB3b3JkcyBvZiBgc3RyaW5nYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy53b3JkcygnZnJlZCwgYmFybmV5LCAmIHBlYmJsZXMnKTtcbiAgICAgKiAvLyA9PiBbJ2ZyZWQnLCAnYmFybmV5JywgJ3BlYmJsZXMnXVxuICAgICAqXG4gICAgICogXy53b3JkcygnZnJlZCwgYmFybmV5LCAmIHBlYmJsZXMnLCAvW14sIF0rL2cpO1xuICAgICAqIC8vID0+IFsnZnJlZCcsICdiYXJuZXknLCAnJicsICdwZWJibGVzJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3b3JkcyhzdHJpbmcsIHBhdHRlcm4sIGd1YXJkKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgcGF0dGVybiA9IGd1YXJkID8gdW5kZWZpbmVkIDogcGF0dGVybjtcblxuICAgICAgaWYgKHBhdHRlcm4gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gaGFzVW5pY29kZVdvcmQoc3RyaW5nKSA/IHVuaWNvZGVXb3JkcyhzdHJpbmcpIDogYXNjaWlXb3JkcyhzdHJpbmcpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHN0cmluZy5tYXRjaChwYXR0ZXJuKSB8fCBbXTtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBBdHRlbXB0cyB0byBpbnZva2UgYGZ1bmNgLCByZXR1cm5pbmcgZWl0aGVyIHRoZSByZXN1bHQgb3IgdGhlIGNhdWdodCBlcnJvclxuICAgICAqIG9iamVjdC4gQW55IGFkZGl0aW9uYWwgYXJndW1lbnRzIGFyZSBwcm92aWRlZCB0byBgZnVuY2Agd2hlbiBpdCdzIGludm9rZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGF0dGVtcHQuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgYGZ1bmNgIHdpdGguXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGBmdW5jYCByZXN1bHQgb3IgZXJyb3Igb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiAvLyBBdm9pZCB0aHJvd2luZyBlcnJvcnMgZm9yIGludmFsaWQgc2VsZWN0b3JzLlxuICAgICAqIHZhciBlbGVtZW50cyA9IF8uYXR0ZW1wdChmdW5jdGlvbihzZWxlY3Rvcikge1xuICAgICAqICAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuICAgICAqIH0sICc+Xz4nKTtcbiAgICAgKlxuICAgICAqIGlmIChfLmlzRXJyb3IoZWxlbWVudHMpKSB7XG4gICAgICogICBlbGVtZW50cyA9IFtdO1xuICAgICAqIH1cbiAgICAgKi9cbiAgICB2YXIgYXR0ZW1wdCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIGFyZ3MpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBhcHBseShmdW5jLCB1bmRlZmluZWQsIGFyZ3MpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gaXNFcnJvcihlKSA/IGUgOiBuZXcgRXJyb3IoZSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBCaW5kcyBtZXRob2RzIG9mIGFuIG9iamVjdCB0byB0aGUgb2JqZWN0IGl0c2VsZiwgb3ZlcndyaXRpbmcgdGhlIGV4aXN0aW5nXG4gICAgICogbWV0aG9kLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGRvZXNuJ3Qgc2V0IHRoZSBcImxlbmd0aFwiIHByb3BlcnR5IG9mIGJvdW5kIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGJpbmQgYW5kIGFzc2lnbiB0aGUgYm91bmQgbWV0aG9kcyB0by5cbiAgICAgKiBAcGFyYW0gey4uLihzdHJpbmd8c3RyaW5nW10pfSBtZXRob2ROYW1lcyBUaGUgb2JqZWN0IG1ldGhvZCBuYW1lcyB0byBiaW5kLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB2aWV3ID0ge1xuICAgICAqICAgJ2xhYmVsJzogJ2RvY3MnLFxuICAgICAqICAgJ2NsaWNrJzogZnVuY3Rpb24oKSB7XG4gICAgICogICAgIGNvbnNvbGUubG9nKCdjbGlja2VkICcgKyB0aGlzLmxhYmVsKTtcbiAgICAgKiAgIH1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogXy5iaW5kQWxsKHZpZXcsIFsnY2xpY2snXSk7XG4gICAgICogalF1ZXJ5KGVsZW1lbnQpLm9uKCdjbGljaycsIHZpZXcuY2xpY2spO1xuICAgICAqIC8vID0+IExvZ3MgJ2NsaWNrZWQgZG9jcycgd2hlbiBjbGlja2VkLlxuICAgICAqL1xuICAgIHZhciBiaW5kQWxsID0gZmxhdFJlc3QoZnVuY3Rpb24ob2JqZWN0LCBtZXRob2ROYW1lcykge1xuICAgICAgYXJyYXlFYWNoKG1ldGhvZE5hbWVzLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAga2V5ID0gdG9LZXkoa2V5KTtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBiaW5kKG9iamVjdFtrZXldLCBvYmplY3QpKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGl0ZXJhdGVzIG92ZXIgYHBhaXJzYCBhbmQgaW52b2tlcyB0aGUgY29ycmVzcG9uZGluZ1xuICAgICAqIGZ1bmN0aW9uIG9mIHRoZSBmaXJzdCBwcmVkaWNhdGUgdG8gcmV0dXJuIHRydXRoeS4gVGhlIHByZWRpY2F0ZS1mdW5jdGlvblxuICAgICAqIHBhaXJzIGFyZSBpbnZva2VkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIGFuZCBhcmd1bWVudHMgb2YgdGhlIGNyZWF0ZWRcbiAgICAgKiBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtBcnJheX0gcGFpcnMgVGhlIHByZWRpY2F0ZS1mdW5jdGlvbiBwYWlycy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb21wb3NpdGUgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBmdW5jID0gXy5jb25kKFtcbiAgICAgKiAgIFtfLm1hdGNoZXMoeyAnYSc6IDEgfSksICAgICAgICAgICBfLmNvbnN0YW50KCdtYXRjaGVzIEEnKV0sXG4gICAgICogICBbXy5jb25mb3Jtcyh7ICdiJzogXy5pc051bWJlciB9KSwgXy5jb25zdGFudCgnbWF0Y2hlcyBCJyldLFxuICAgICAqICAgW18uc3R1YlRydWUsICAgICAgICAgICAgICAgICAgICAgIF8uY29uc3RhbnQoJ25vIG1hdGNoJyldXG4gICAgICogXSk7XG4gICAgICpcbiAgICAgKiBmdW5jKHsgJ2EnOiAxLCAnYic6IDIgfSk7XG4gICAgICogLy8gPT4gJ21hdGNoZXMgQSdcbiAgICAgKlxuICAgICAqIGZ1bmMoeyAnYSc6IDAsICdiJzogMSB9KTtcbiAgICAgKiAvLyA9PiAnbWF0Y2hlcyBCJ1xuICAgICAqXG4gICAgICogZnVuYyh7ICdhJzogJzEnLCAnYic6ICcyJyB9KTtcbiAgICAgKiAvLyA9PiAnbm8gbWF0Y2gnXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29uZChwYWlycykge1xuICAgICAgdmFyIGxlbmd0aCA9IHBhaXJzID09IG51bGwgPyAwIDogcGFpcnMubGVuZ3RoLFxuICAgICAgICAgIHRvSXRlcmF0ZWUgPSBnZXRJdGVyYXRlZSgpO1xuXG4gICAgICBwYWlycyA9ICFsZW5ndGggPyBbXSA6IGFycmF5TWFwKHBhaXJzLCBmdW5jdGlvbihwYWlyKSB7XG4gICAgICAgIGlmICh0eXBlb2YgcGFpclsxXSAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbdG9JdGVyYXRlZShwYWlyWzBdKSwgcGFpclsxXV07XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gLTE7XG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIHBhaXIgPSBwYWlyc1tpbmRleF07XG4gICAgICAgICAgaWYgKGFwcGx5KHBhaXJbMF0sIHRoaXMsIGFyZ3MpKSB7XG4gICAgICAgICAgICByZXR1cm4gYXBwbHkocGFpclsxXSwgdGhpcywgYXJncyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIHRoZSBwcmVkaWNhdGUgcHJvcGVydGllcyBvZiBgc291cmNlYCB3aXRoXG4gICAgICogdGhlIGNvcnJlc3BvbmRpbmcgcHJvcGVydHkgdmFsdWVzIG9mIGEgZ2l2ZW4gb2JqZWN0LCByZXR1cm5pbmcgYHRydWVgIGlmXG4gICAgICogYWxsIHByZWRpY2F0ZXMgcmV0dXJuIHRydXRoeSwgZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoZSBjcmVhdGVkIGZ1bmN0aW9uIGlzIGVxdWl2YWxlbnQgdG8gYF8uY29uZm9ybXNUb2Agd2l0aFxuICAgICAqIGBzb3VyY2VgIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgcHJlZGljYXRlcyB0byBjb25mb3JtIHRvLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW1xuICAgICAqICAgeyAnYSc6IDIsICdiJzogMSB9LFxuICAgICAqICAgeyAnYSc6IDEsICdiJzogMiB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZmlsdGVyKG9iamVjdHMsIF8uY29uZm9ybXMoeyAnYic6IGZ1bmN0aW9uKG4pIHsgcmV0dXJuIG4gPiAxOyB9IH0pKTtcbiAgICAgKiAvLyA9PiBbeyAnYSc6IDEsICdiJzogMiB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbmZvcm1zKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIGJhc2VDb25mb3JtcyhiYXNlQ2xvbmUoc291cmNlLCBDTE9ORV9ERUVQX0ZMQUcpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi40LjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHJldHVybiBmcm9tIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY29uc3RhbnQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gXy50aW1lcygyLCBfLmNvbnN0YW50KHsgJ2EnOiAxIH0pKTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdHMpO1xuICAgICAqIC8vID0+IFt7ICdhJzogMSB9LCB7ICdhJzogMSB9XVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob2JqZWN0c1swXSA9PT0gb2JqZWN0c1sxXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbnN0YW50KHZhbHVlKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGB2YWx1ZWAgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgYSBkZWZhdWx0IHZhbHVlIHNob3VsZCBiZSByZXR1cm5lZCBpblxuICAgICAqIGl0cyBwbGFjZS4gVGhlIGBkZWZhdWx0VmFsdWVgIGlzIHJldHVybmVkIGlmIGB2YWx1ZWAgaXMgYE5hTmAsIGBudWxsYCxcbiAgICAgKiBvciBgdW5kZWZpbmVkYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjE0LjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEBwYXJhbSB7Kn0gZGVmYXVsdFZhbHVlIFRoZSBkZWZhdWx0IHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWZhdWx0VG8oMSwgMTApO1xuICAgICAqIC8vID0+IDFcbiAgICAgKlxuICAgICAqIF8uZGVmYXVsdFRvKHVuZGVmaW5lZCwgMTApO1xuICAgICAqIC8vID0+IDEwXG4gICAgICovXG4gICAgZnVuY3Rpb24gZGVmYXVsdFRvKHZhbHVlLCBkZWZhdWx0VmFsdWUpIHtcbiAgICAgIHJldHVybiAodmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSAhPT0gdmFsdWUpID8gZGVmYXVsdFZhbHVlIDogdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgcmVzdWx0IG9mIGludm9raW5nIHRoZSBnaXZlbiBmdW5jdGlvbnNcbiAgICAgKiB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiB0aGUgY3JlYXRlZCBmdW5jdGlvbiwgd2hlcmUgZWFjaCBzdWNjZXNzaXZlXG4gICAgICogaW52b2NhdGlvbiBpcyBzdXBwbGllZCB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBwcmV2aW91cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXSl9IFtmdW5jc10gVGhlIGZ1bmN0aW9ucyB0byBpbnZva2UuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY29tcG9zaXRlIGZ1bmN0aW9uLlxuICAgICAqIEBzZWUgXy5mbG93UmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgYWRkU3F1YXJlID0gXy5mbG93KFtfLmFkZCwgc3F1YXJlXSk7XG4gICAgICogYWRkU3F1YXJlKDEsIDIpO1xuICAgICAqIC8vID0+IDlcbiAgICAgKi9cbiAgICB2YXIgZmxvdyA9IGNyZWF0ZUZsb3coKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmxvd2AgZXhjZXB0IHRoYXQgaXQgY3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXRcbiAgICAgKiBpbnZva2VzIHRoZSBnaXZlbiBmdW5jdGlvbnMgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW2Z1bmNzXSBUaGUgZnVuY3Rpb25zIHRvIGludm9rZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb21wb3NpdGUgZnVuY3Rpb24uXG4gICAgICogQHNlZSBfLmZsb3dcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgYWRkU3F1YXJlID0gXy5mbG93UmlnaHQoW3NxdWFyZSwgXy5hZGRdKTtcbiAgICAgKiBhZGRTcXVhcmUoMSwgMik7XG4gICAgICogLy8gPT4gOVxuICAgICAqL1xuICAgIHZhciBmbG93UmlnaHQgPSBjcmVhdGVGbG93KHRydWUpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyB0aGUgZmlyc3QgYXJndW1lbnQgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgQW55IHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIGB2YWx1ZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coXy5pZGVudGl0eShvYmplY3QpID09PSBvYmplY3QpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpZGVudGl0eSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggdGhlIGFyZ3VtZW50cyBvZiB0aGUgY3JlYXRlZFxuICAgICAqIGZ1bmN0aW9uLiBJZiBgZnVuY2AgaXMgYSBwcm9wZXJ0eSBuYW1lLCB0aGUgY3JlYXRlZCBmdW5jdGlvbiByZXR1cm5zIHRoZVxuICAgICAqIHByb3BlcnR5IHZhbHVlIGZvciBhIGdpdmVuIGVsZW1lbnQuIElmIGBmdW5jYCBpcyBhbiBhcnJheSBvciBvYmplY3QsIHRoZVxuICAgICAqIGNyZWF0ZWQgZnVuY3Rpb24gcmV0dXJucyBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgY29udGFpbiB0aGUgZXF1aXZhbGVudFxuICAgICAqIHNvdXJjZSBwcm9wZXJ0aWVzLCBvdGhlcndpc2UgaXQgcmV0dXJucyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0geyp9IFtmdW5jPV8uaWRlbnRpdHldIFRoZSB2YWx1ZSB0byBjb252ZXJ0IHRvIGEgY2FsbGJhY2suXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBjYWxsYmFjay5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbHRlcih1c2VycywgXy5pdGVyYXRlZSh7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiB0cnVlIH0pKTtcbiAgICAgKiAvLyA9PiBbeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH1dXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maWx0ZXIodXNlcnMsIF8uaXRlcmF0ZWUoWyd1c2VyJywgJ2ZyZWQnXSkpO1xuICAgICAqIC8vID0+IFt7ICd1c2VyJzogJ2ZyZWQnLCAnYWdlJzogNDAgfV1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ubWFwKHVzZXJzLCBfLml0ZXJhdGVlKCd1c2VyJykpO1xuICAgICAqIC8vID0+IFsnYmFybmV5JywgJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gQ3JlYXRlIGN1c3RvbSBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqIF8uaXRlcmF0ZWUgPSBfLndyYXAoXy5pdGVyYXRlZSwgZnVuY3Rpb24oaXRlcmF0ZWUsIGZ1bmMpIHtcbiAgICAgKiAgIHJldHVybiAhXy5pc1JlZ0V4cChmdW5jKSA/IGl0ZXJhdGVlKGZ1bmMpIDogZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICogICAgIHJldHVybiBmdW5jLnRlc3Qoc3RyaW5nKTtcbiAgICAgKiAgIH07XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBfLmZpbHRlcihbJ2FiYycsICdkZWYnXSwgL2VmLyk7XG4gICAgICogLy8gPT4gWydkZWYnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGl0ZXJhdGVlKGZ1bmMpIHtcbiAgICAgIHJldHVybiBiYXNlSXRlcmF0ZWUodHlwZW9mIGZ1bmMgPT0gJ2Z1bmN0aW9uJyA/IGZ1bmMgOiBiYXNlQ2xvbmUoZnVuYywgQ0xPTkVfREVFUF9GTEFHKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcGVyZm9ybXMgYSBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbiBiZXR3ZWVuIGEgZ2l2ZW5cbiAgICAgKiBvYmplY3QgYW5kIGBzb3VyY2VgLCByZXR1cm5pbmcgYHRydWVgIGlmIHRoZSBnaXZlbiBvYmplY3QgaGFzIGVxdWl2YWxlbnRcbiAgICAgKiBwcm9wZXJ0eSB2YWx1ZXMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGUgY3JlYXRlZCBmdW5jdGlvbiBpcyBlcXVpdmFsZW50IHRvIGBfLmlzTWF0Y2hgIHdpdGggYHNvdXJjZWBcbiAgICAgKiBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKlxuICAgICAqIFBhcnRpYWwgY29tcGFyaXNvbnMgd2lsbCBtYXRjaCBlbXB0eSBhcnJheSBhbmQgZW1wdHkgb2JqZWN0IGBzb3VyY2VgXG4gICAgICogdmFsdWVzIGFnYWluc3QgYW55IGFycmF5IG9yIG9iamVjdCB2YWx1ZSwgcmVzcGVjdGl2ZWx5LiBTZWUgYF8uaXNFcXVhbGBcbiAgICAgKiBmb3IgYSBsaXN0IG9mIHN1cHBvcnRlZCB2YWx1ZSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFtcbiAgICAgKiAgIHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMyB9LFxuICAgICAqICAgeyAnYSc6IDQsICdiJzogNSwgJ2MnOiA2IH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maWx0ZXIob2JqZWN0cywgXy5tYXRjaGVzKHsgJ2EnOiA0LCAnYyc6IDYgfSkpO1xuICAgICAqIC8vID0+IFt7ICdhJzogNCwgJ2InOiA1LCAnYyc6IDYgfV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXRjaGVzKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIGJhc2VNYXRjaGVzKGJhc2VDbG9uZShzb3VyY2UsIENMT05FX0RFRVBfRkxBRykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHBlcmZvcm1zIGEgcGFydGlhbCBkZWVwIGNvbXBhcmlzb24gYmV0d2VlbiB0aGVcbiAgICAgKiB2YWx1ZSBhdCBgcGF0aGAgb2YgYSBnaXZlbiBvYmplY3QgdG8gYHNyY1ZhbHVlYCwgcmV0dXJuaW5nIGB0cnVlYCBpZiB0aGVcbiAgICAgKiBvYmplY3QgdmFsdWUgaXMgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFBhcnRpYWwgY29tcGFyaXNvbnMgd2lsbCBtYXRjaCBlbXB0eSBhcnJheSBhbmQgZW1wdHkgb2JqZWN0XG4gICAgICogYHNyY1ZhbHVlYCB2YWx1ZXMgYWdhaW5zdCBhbnkgYXJyYXkgb3Igb2JqZWN0IHZhbHVlLCByZXNwZWN0aXZlbHkuIFNlZVxuICAgICAqIGBfLmlzRXF1YWxgIGZvciBhIGxpc3Qgb2Ygc3VwcG9ydGVkIHZhbHVlIGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMi4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHZhbHVlIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW1xuICAgICAqICAgeyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzIH0sXG4gICAgICogICB7ICdhJzogNCwgJ2InOiA1LCAnYyc6IDYgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbmQob2JqZWN0cywgXy5tYXRjaGVzUHJvcGVydHkoJ2EnLCA0KSk7XG4gICAgICogLy8gPT4geyAnYSc6IDQsICdiJzogNSwgJ2MnOiA2IH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXRjaGVzUHJvcGVydHkocGF0aCwgc3JjVmFsdWUpIHtcbiAgICAgIHJldHVybiBiYXNlTWF0Y2hlc1Byb3BlcnR5KHBhdGgsIGJhc2VDbG9uZShzcmNWYWx1ZSwgQ0xPTkVfREVFUF9GTEFHKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyB0aGUgbWV0aG9kIGF0IGBwYXRoYCBvZiBhIGdpdmVuIG9iamVjdC5cbiAgICAgKiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHMgYXJlIHByb3ZpZGVkIHRvIHRoZSBpbnZva2VkIG1ldGhvZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjcuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIG1ldGhvZCB0byBpbnZva2UuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgdGhlIG1ldGhvZCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGludm9rZXIgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW1xuICAgICAqICAgeyAnYSc6IHsgJ2InOiBfLmNvbnN0YW50KDIpIH0gfSxcbiAgICAgKiAgIHsgJ2EnOiB7ICdiJzogXy5jb25zdGFudCgxKSB9IH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5tYXAob2JqZWN0cywgXy5tZXRob2QoJ2EuYicpKTtcbiAgICAgKiAvLyA9PiBbMiwgMV1cbiAgICAgKlxuICAgICAqIF8ubWFwKG9iamVjdHMsIF8ubWV0aG9kKFsnYScsICdiJ10pKTtcbiAgICAgKiAvLyA9PiBbMiwgMV1cbiAgICAgKi9cbiAgICB2YXIgbWV0aG9kID0gYmFzZVJlc3QoZnVuY3Rpb24ocGF0aCwgYXJncykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICByZXR1cm4gYmFzZUludm9rZShvYmplY3QsIHBhdGgsIGFyZ3MpO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5tZXRob2RgOyB0aGlzIG1ldGhvZCBjcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzXG4gICAgICogdGhlIG1ldGhvZCBhdCBhIGdpdmVuIHBhdGggb2YgYG9iamVjdGAuIEFueSBhZGRpdGlvbmFsIGFyZ3VtZW50cyBhcmVcbiAgICAgKiBwcm92aWRlZCB0byB0aGUgaW52b2tlZCBtZXRob2QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy43LjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSB0aGUgbWV0aG9kIHdpdGguXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgaW52b2tlciBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gXy50aW1lcygzLCBfLmNvbnN0YW50KSxcbiAgICAgKiAgICAgb2JqZWN0ID0geyAnYSc6IGFycmF5LCAnYic6IGFycmF5LCAnYyc6IGFycmF5IH07XG4gICAgICpcbiAgICAgKiBfLm1hcChbJ2FbMl0nLCAnY1swXSddLCBfLm1ldGhvZE9mKG9iamVjdCkpO1xuICAgICAqIC8vID0+IFsyLCAwXVxuICAgICAqXG4gICAgICogXy5tYXAoW1snYScsICcyJ10sIFsnYycsICcwJ11dLCBfLm1ldGhvZE9mKG9iamVjdCkpO1xuICAgICAqIC8vID0+IFsyLCAwXVxuICAgICAqL1xuICAgIHZhciBtZXRob2RPZiA9IGJhc2VSZXN0KGZ1bmN0aW9uKG9iamVjdCwgYXJncykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VJbnZva2Uob2JqZWN0LCBwYXRoLCBhcmdzKTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGFsbCBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgZnVuY3Rpb24gcHJvcGVydGllcyBvZiBhIHNvdXJjZVxuICAgICAqIG9iamVjdCB0byB0aGUgZGVzdGluYXRpb24gb2JqZWN0LiBJZiBgb2JqZWN0YCBpcyBhIGZ1bmN0aW9uLCB0aGVuIG1ldGhvZHNcbiAgICAgKiBhcmUgYWRkZWQgdG8gaXRzIHByb3RvdHlwZSBhcyB3ZWxsLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVzZSBgXy5ydW5JbkNvbnRleHRgIHRvIGNyZWF0ZSBhIHByaXN0aW5lIGBsb2Rhc2hgIGZ1bmN0aW9uIHRvXG4gICAgICogYXZvaWQgY29uZmxpY3RzIGNhdXNlZCBieSBtb2RpZnlpbmcgdGhlIG9yaWdpbmFsLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdH0gW29iamVjdD1sb2Rhc2hdIFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIGZ1bmN0aW9ucyB0byBhZGQuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5jaGFpbj10cnVlXSBTcGVjaWZ5IHdoZXRoZXIgbWl4aW5zIGFyZSBjaGFpbmFibGUuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufE9iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gdm93ZWxzKHN0cmluZykge1xuICAgICAqICAgcmV0dXJuIF8uZmlsdGVyKHN0cmluZywgZnVuY3Rpb24odikge1xuICAgICAqICAgICByZXR1cm4gL1thZWlvdV0vaS50ZXN0KHYpO1xuICAgICAqICAgfSk7XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5taXhpbih7ICd2b3dlbHMnOiB2b3dlbHMgfSk7XG4gICAgICogXy52b3dlbHMoJ2ZyZWQnKTtcbiAgICAgKiAvLyA9PiBbJ2UnXVxuICAgICAqXG4gICAgICogXygnZnJlZCcpLnZvd2VscygpLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWydlJ11cbiAgICAgKlxuICAgICAqIF8ubWl4aW4oeyAndm93ZWxzJzogdm93ZWxzIH0sIHsgJ2NoYWluJzogZmFsc2UgfSk7XG4gICAgICogXygnZnJlZCcpLnZvd2VscygpO1xuICAgICAqIC8vID0+IFsnZSddXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWl4aW4ob2JqZWN0LCBzb3VyY2UsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBwcm9wcyA9IGtleXMoc291cmNlKSxcbiAgICAgICAgICBtZXRob2ROYW1lcyA9IGJhc2VGdW5jdGlvbnMoc291cmNlLCBwcm9wcyk7XG5cbiAgICAgIGlmIChvcHRpb25zID09IG51bGwgJiZcbiAgICAgICAgICAhKGlzT2JqZWN0KHNvdXJjZSkgJiYgKG1ldGhvZE5hbWVzLmxlbmd0aCB8fCAhcHJvcHMubGVuZ3RoKSkpIHtcbiAgICAgICAgb3B0aW9ucyA9IHNvdXJjZTtcbiAgICAgICAgc291cmNlID0gb2JqZWN0O1xuICAgICAgICBvYmplY3QgPSB0aGlzO1xuICAgICAgICBtZXRob2ROYW1lcyA9IGJhc2VGdW5jdGlvbnMoc291cmNlLCBrZXlzKHNvdXJjZSkpO1xuICAgICAgfVxuICAgICAgdmFyIGNoYWluID0gIShpc09iamVjdChvcHRpb25zKSAmJiAnY2hhaW4nIGluIG9wdGlvbnMpIHx8ICEhb3B0aW9ucy5jaGFpbixcbiAgICAgICAgICBpc0Z1bmMgPSBpc0Z1bmN0aW9uKG9iamVjdCk7XG5cbiAgICAgIGFycmF5RWFjaChtZXRob2ROYW1lcywgZnVuY3Rpb24obWV0aG9kTmFtZSkge1xuICAgICAgICB2YXIgZnVuYyA9IHNvdXJjZVttZXRob2ROYW1lXTtcbiAgICAgICAgb2JqZWN0W21ldGhvZE5hbWVdID0gZnVuYztcbiAgICAgICAgaWYgKGlzRnVuYykge1xuICAgICAgICAgIG9iamVjdC5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBjaGFpbkFsbCA9IHRoaXMuX19jaGFpbl9fO1xuICAgICAgICAgICAgaWYgKGNoYWluIHx8IGNoYWluQWxsKSB7XG4gICAgICAgICAgICAgIHZhciByZXN1bHQgPSBvYmplY3QodGhpcy5fX3dyYXBwZWRfXyksXG4gICAgICAgICAgICAgICAgICBhY3Rpb25zID0gcmVzdWx0Ll9fYWN0aW9uc19fID0gY29weUFycmF5KHRoaXMuX19hY3Rpb25zX18pO1xuXG4gICAgICAgICAgICAgIGFjdGlvbnMucHVzaCh7ICdmdW5jJzogZnVuYywgJ2FyZ3MnOiBhcmd1bWVudHMsICd0aGlzQXJnJzogb2JqZWN0IH0pO1xuICAgICAgICAgICAgICByZXN1bHQuX19jaGFpbl9fID0gY2hhaW5BbGw7XG4gICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZnVuYy5hcHBseShvYmplY3QsIGFycmF5UHVzaChbdGhpcy52YWx1ZSgpXSwgYXJndW1lbnRzKSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV2ZXJ0cyB0aGUgYF9gIHZhcmlhYmxlIHRvIGl0cyBwcmV2aW91cyB2YWx1ZSBhbmQgcmV0dXJucyBhIHJlZmVyZW5jZSB0b1xuICAgICAqIHRoZSBgbG9kYXNoYCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBgbG9kYXNoYCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGxvZGFzaCA9IF8ubm9Db25mbGljdCgpO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIG5vQ29uZmxpY3QoKSB7XG4gICAgICBpZiAocm9vdC5fID09PSB0aGlzKSB7XG4gICAgICAgIHJvb3QuXyA9IG9sZERhc2g7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIGB1bmRlZmluZWRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50aW1lcygyLCBfLm5vb3ApO1xuICAgICAqIC8vID0+IFt1bmRlZmluZWQsIHVuZGVmaW5lZF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBub29wKCkge1xuICAgICAgLy8gTm8gb3BlcmF0aW9uIHBlcmZvcm1lZC5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBnZXRzIHRoZSBhcmd1bWVudCBhdCBpbmRleCBgbmAuIElmIGBuYCBpcyBuZWdhdGl2ZSxcbiAgICAgKiB0aGUgbnRoIGFyZ3VtZW50IGZyb20gdGhlIGVuZCBpcyByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTBdIFRoZSBpbmRleCBvZiB0aGUgYXJndW1lbnQgdG8gcmV0dXJuLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHBhc3MtdGhydSBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLm50aEFyZygxKTtcbiAgICAgKiBmdW5jKCdhJywgJ2InLCAnYycsICdkJyk7XG4gICAgICogLy8gPT4gJ2InXG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8ubnRoQXJnKC0yKTtcbiAgICAgKiBmdW5jKCdhJywgJ2InLCAnYycsICdkJyk7XG4gICAgICogLy8gPT4gJ2MnXG4gICAgICovXG4gICAgZnVuY3Rpb24gbnRoQXJnKG4pIHtcbiAgICAgIG4gPSB0b0ludGVnZXIobik7XG4gICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICAgICAgICByZXR1cm4gYmFzZU50aChhcmdzLCBuKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGl0ZXJhdGVlc2Agd2l0aCB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzXG4gICAgICogYW5kIHJldHVybnMgdGhlaXIgcmVzdWx0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXSl9IFtpdGVyYXRlZXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgaXRlcmF0ZWVzIHRvIGludm9rZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLm92ZXIoW01hdGgubWF4LCBNYXRoLm1pbl0pO1xuICAgICAqXG4gICAgICogZnVuYygxLCAyLCAzLCA0KTtcbiAgICAgKiAvLyA9PiBbNCwgMV1cbiAgICAgKi9cbiAgICB2YXIgb3ZlciA9IGNyZWF0ZU92ZXIoYXJyYXlNYXApO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgY2hlY2tzIGlmICoqYWxsKiogb2YgdGhlIGBwcmVkaWNhdGVzYCByZXR1cm5cbiAgICAgKiB0cnV0aHkgd2hlbiBpbnZva2VkIHdpdGggdGhlIGFyZ3VtZW50cyBpdCByZWNlaXZlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXSl9IFtwcmVkaWNhdGVzPVtfLmlkZW50aXR5XV1cbiAgICAgKiAgVGhlIHByZWRpY2F0ZXMgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBmdW5jID0gXy5vdmVyRXZlcnkoW0Jvb2xlYW4sIGlzRmluaXRlXSk7XG4gICAgICpcbiAgICAgKiBmdW5jKCcxJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogZnVuYyhudWxsKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogZnVuYyhOYU4pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIG92ZXJFdmVyeSA9IGNyZWF0ZU92ZXIoYXJyYXlFdmVyeSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBjaGVja3MgaWYgKiphbnkqKiBvZiB0aGUgYHByZWRpY2F0ZXNgIHJldHVyblxuICAgICAqIHRydXRoeSB3aGVuIGludm9rZWQgd2l0aCB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW3ByZWRpY2F0ZXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgcHJlZGljYXRlcyB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLm92ZXJTb21lKFtCb29sZWFuLCBpc0Zpbml0ZV0pO1xuICAgICAqXG4gICAgICogZnVuYygnMScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIGZ1bmMobnVsbCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogZnVuYyhOYU4pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIG92ZXJTb21lID0gY3JlYXRlT3ZlcihhcnJheVNvbWUpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgdmFsdWUgYXQgYHBhdGhgIG9mIGEgZ2l2ZW4gb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuNC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFtcbiAgICAgKiAgIHsgJ2EnOiB7ICdiJzogMiB9IH0sXG4gICAgICogICB7ICdhJzogeyAnYic6IDEgfSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8ubWFwKG9iamVjdHMsIF8ucHJvcGVydHkoJ2EuYicpKTtcbiAgICAgKiAvLyA9PiBbMiwgMV1cbiAgICAgKlxuICAgICAqIF8ubWFwKF8uc29ydEJ5KG9iamVjdHMsIF8ucHJvcGVydHkoWydhJywgJ2InXSkpLCAnYS5iJyk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gcHJvcGVydHkocGF0aCkge1xuICAgICAgcmV0dXJuIGlzS2V5KHBhdGgpID8gYmFzZVByb3BlcnR5KHRvS2V5KHBhdGgpKSA6IGJhc2VQcm9wZXJ0eURlZXAocGF0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLnByb3BlcnR5YDsgdGhpcyBtZXRob2QgY3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJuc1xuICAgICAqIHRoZSB2YWx1ZSBhdCBhIGdpdmVuIHBhdGggb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzAsIDEsIDJdLFxuICAgICAqICAgICBvYmplY3QgPSB7ICdhJzogYXJyYXksICdiJzogYXJyYXksICdjJzogYXJyYXkgfTtcbiAgICAgKlxuICAgICAqIF8ubWFwKFsnYVsyXScsICdjWzBdJ10sIF8ucHJvcGVydHlPZihvYmplY3QpKTtcbiAgICAgKiAvLyA9PiBbMiwgMF1cbiAgICAgKlxuICAgICAqIF8ubWFwKFtbJ2EnLCAnMiddLCBbJ2MnLCAnMCddXSwgXy5wcm9wZXJ0eU9mKG9iamVjdCkpO1xuICAgICAqIC8vID0+IFsyLCAwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHByb3BlcnR5T2Yob2JqZWN0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ocGF0aCkge1xuICAgICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBiYXNlR2V0KG9iamVjdCwgcGF0aCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgbnVtYmVycyAocG9zaXRpdmUgYW5kL29yIG5lZ2F0aXZlKSBwcm9ncmVzc2luZyBmcm9tXG4gICAgICogYHN0YXJ0YCB1cCB0bywgYnV0IG5vdCBpbmNsdWRpbmcsIGBlbmRgLiBBIHN0ZXAgb2YgYC0xYCBpcyB1c2VkIGlmIGEgbmVnYXRpdmVcbiAgICAgKiBgc3RhcnRgIGlzIHNwZWNpZmllZCB3aXRob3V0IGFuIGBlbmRgIG9yIGBzdGVwYC4gSWYgYGVuZGAgaXMgbm90IHNwZWNpZmllZCxcbiAgICAgKiBpdCdzIHNldCB0byBgc3RhcnRgIHdpdGggYHN0YXJ0YCB0aGVuIHNldCB0byBgMGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogSmF2YVNjcmlwdCBmb2xsb3dzIHRoZSBJRUVFLTc1NCBzdGFuZGFyZCBmb3IgcmVzb2x2aW5nXG4gICAgICogZmxvYXRpbmctcG9pbnQgdmFsdWVzIHdoaWNoIGNhbiBwcm9kdWNlIHVuZXhwZWN0ZWQgcmVzdWx0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGVwPTFdIFRoZSB2YWx1ZSB0byBpbmNyZW1lbnQgb3IgZGVjcmVtZW50IGJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZ2Ugb2YgbnVtYmVycy5cbiAgICAgKiBAc2VlIF8uaW5SYW5nZSwgXy5yYW5nZVJpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoNCk7XG4gICAgICogLy8gPT4gWzAsIDEsIDIsIDNdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKC00KTtcbiAgICAgKiAvLyA9PiBbMCwgLTEsIC0yLCAtM11cbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoMSwgNSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDMsIDRdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKDAsIDIwLCA1KTtcbiAgICAgKiAvLyA9PiBbMCwgNSwgMTAsIDE1XVxuICAgICAqXG4gICAgICogXy5yYW5nZSgwLCAtNCwgLTEpO1xuICAgICAqIC8vID0+IFswLCAtMSwgLTIsIC0zXVxuICAgICAqXG4gICAgICogXy5yYW5nZSgxLCA0LCAwKTtcbiAgICAgKiAvLyA9PiBbMSwgMSwgMV1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoMCk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICB2YXIgcmFuZ2UgPSBjcmVhdGVSYW5nZSgpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5yYW5nZWAgZXhjZXB0IHRoYXQgaXQgcG9wdWxhdGVzIHZhbHVlcyBpblxuICAgICAqIGRlc2NlbmRpbmcgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSBlbmQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RlcD0xXSBUaGUgdmFsdWUgdG8gaW5jcmVtZW50IG9yIGRlY3JlbWVudCBieS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHJhbmdlIG9mIG51bWJlcnMuXG4gICAgICogQHNlZSBfLmluUmFuZ2UsIF8ucmFuZ2VcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KDQpO1xuICAgICAqIC8vID0+IFszLCAyLCAxLCAwXVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KC00KTtcbiAgICAgKiAvLyA9PiBbLTMsIC0yLCAtMSwgMF1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2VSaWdodCgxLCA1KTtcbiAgICAgKiAvLyA9PiBbNCwgMywgMiwgMV1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2VSaWdodCgwLCAyMCwgNSk7XG4gICAgICogLy8gPT4gWzE1LCAxMCwgNSwgMF1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2VSaWdodCgwLCAtNCwgLTEpO1xuICAgICAqIC8vID0+IFstMywgLTIsIC0xLCAwXVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KDEsIDQsIDApO1xuICAgICAqIC8vID0+IFsxLCAxLCAxXVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KDApO1xuICAgICAqIC8vID0+IFtdXG4gICAgICovXG4gICAgdmFyIHJhbmdlUmlnaHQgPSBjcmVhdGVSYW5nZSh0cnVlKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgZW1wdHkgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBlbXB0eSBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5cyA9IF8udGltZXMoMiwgXy5zdHViQXJyYXkpO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXlzKTtcbiAgICAgKiAvLyA9PiBbW10sIFtdXVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXlzWzBdID09PSBhcnJheXNbMV0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3R1YkFycmF5KCkge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEzLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGltZXMoMiwgXy5zdHViRmFsc2UpO1xuICAgICAqIC8vID0+IFtmYWxzZSwgZmFsc2VdXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3R1YkZhbHNlKCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgZW1wdHkgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTMuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGVtcHR5IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBfLnRpbWVzKDIsIF8uc3R1Yk9iamVjdCk7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3RzKTtcbiAgICAgKiAvLyA9PiBbe30sIHt9XVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob2JqZWN0c1swXSA9PT0gb2JqZWN0c1sxXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdHViT2JqZWN0KCkge1xuICAgICAgcmV0dXJuIHt9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgYW4gZW1wdHkgc3RyaW5nLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTMuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZW1wdHkgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRpbWVzKDIsIF8uc3R1YlN0cmluZyk7XG4gICAgICogLy8gPT4gWycnLCAnJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdHViU3RyaW5nKCkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgYHRydWVgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTMuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRpbWVzKDIsIF8uc3R1YlRydWUpO1xuICAgICAqIC8vID0+IFt0cnVlLCB0cnVlXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0dWJUcnVlKCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW52b2tlcyB0aGUgaXRlcmF0ZWUgYG5gIHRpbWVzLCByZXR1cm5pbmcgYW4gYXJyYXkgb2YgdGhlIHJlc3VsdHMgb2ZcbiAgICAgKiBlYWNoIGludm9jYXRpb24uIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OyAoaW5kZXgpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIGludm9rZSBgaXRlcmF0ZWVgLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcmVzdWx0cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50aW1lcygzLCBTdHJpbmcpO1xuICAgICAqIC8vID0+IFsnMCcsICcxJywgJzInXVxuICAgICAqXG4gICAgICogIF8udGltZXMoNCwgXy5jb25zdGFudCgwKSk7XG4gICAgICogLy8gPT4gWzAsIDAsIDAsIDBdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGltZXMobiwgaXRlcmF0ZWUpIHtcbiAgICAgIG4gPSB0b0ludGVnZXIobik7XG4gICAgICBpZiAobiA8IDEgfHwgbiA+IE1BWF9TQUZFX0lOVEVHRVIpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gTUFYX0FSUkFZX0xFTkdUSCxcbiAgICAgICAgICBsZW5ndGggPSBuYXRpdmVNaW4obiwgTUFYX0FSUkFZX0xFTkdUSCk7XG5cbiAgICAgIGl0ZXJhdGVlID0gZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUpO1xuICAgICAgbiAtPSBNQVhfQVJSQVlfTEVOR1RIO1xuXG4gICAgICB2YXIgcmVzdWx0ID0gYmFzZVRpbWVzKGxlbmd0aCwgaXRlcmF0ZWUpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBuKSB7XG4gICAgICAgIGl0ZXJhdGVlKGluZGV4KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIHByb3BlcnR5IHBhdGggYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b1BhdGgoJ2EuYi5jJyk7XG4gICAgICogLy8gPT4gWydhJywgJ2InLCAnYyddXG4gICAgICpcbiAgICAgKiBfLnRvUGF0aCgnYVswXS5iLmMnKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnMCcsICdiJywgJ2MnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvUGF0aCh2YWx1ZSkge1xuICAgICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBhcnJheU1hcCh2YWx1ZSwgdG9LZXkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzU3ltYm9sKHZhbHVlKSA/IFt2YWx1ZV0gOiBjb3B5QXJyYXkoc3RyaW5nVG9QYXRoKHRvU3RyaW5nKHZhbHVlKSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlcyBhIHVuaXF1ZSBJRC4gSWYgYHByZWZpeGAgaXMgZ2l2ZW4sIHRoZSBJRCBpcyBhcHBlbmRlZCB0byBpdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtwcmVmaXg9JyddIFRoZSB2YWx1ZSB0byBwcmVmaXggdGhlIElEIHdpdGguXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdW5pcXVlIElELlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVuaXF1ZUlkKCdjb250YWN0XycpO1xuICAgICAqIC8vID0+ICdjb250YWN0XzEwNCdcbiAgICAgKlxuICAgICAqIF8udW5pcXVlSWQoKTtcbiAgICAgKiAvLyA9PiAnMTA1J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuaXF1ZUlkKHByZWZpeCkge1xuICAgICAgdmFyIGlkID0gKytpZENvdW50ZXI7XG4gICAgICByZXR1cm4gdG9TdHJpbmcocHJlZml4KSArIGlkO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIEFkZHMgdHdvIG51bWJlcnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy40LjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBhdWdlbmQgVGhlIGZpcnN0IG51bWJlciBpbiBhbiBhZGRpdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYWRkZW5kIFRoZSBzZWNvbmQgbnVtYmVyIGluIGFuIGFkZGl0aW9uLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRvdGFsLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmFkZCg2LCA0KTtcbiAgICAgKiAvLyA9PiAxMFxuICAgICAqL1xuICAgIHZhciBhZGQgPSBjcmVhdGVNYXRoT3BlcmF0aW9uKGZ1bmN0aW9uKGF1Z2VuZCwgYWRkZW5kKSB7XG4gICAgICByZXR1cm4gYXVnZW5kICsgYWRkZW5kO1xuICAgIH0sIDApO1xuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgYG51bWJlcmAgcm91bmRlZCB1cCB0byBgcHJlY2lzaW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjEwLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byByb3VuZCB1cC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3ByZWNpc2lvbj0wXSBUaGUgcHJlY2lzaW9uIHRvIHJvdW5kIHVwIHRvLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHJvdW5kZWQgdXAgbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNlaWwoNC4wMDYpO1xuICAgICAqIC8vID0+IDVcbiAgICAgKlxuICAgICAqIF8uY2VpbCg2LjAwNCwgMik7XG4gICAgICogLy8gPT4gNi4wMVxuICAgICAqXG4gICAgICogXy5jZWlsKDYwNDAsIC0yKTtcbiAgICAgKiAvLyA9PiA2MTAwXG4gICAgICovXG4gICAgdmFyIGNlaWwgPSBjcmVhdGVSb3VuZCgnY2VpbCcpO1xuXG4gICAgLyoqXG4gICAgICogRGl2aWRlIHR3byBudW1iZXJzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNy4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZGl2aWRlbmQgVGhlIGZpcnN0IG51bWJlciBpbiBhIGRpdmlzaW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBkaXZpc29yIFRoZSBzZWNvbmQgbnVtYmVyIGluIGEgZGl2aXNpb24uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcXVvdGllbnQuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGl2aWRlKDYsIDQpO1xuICAgICAqIC8vID0+IDEuNVxuICAgICAqL1xuICAgIHZhciBkaXZpZGUgPSBjcmVhdGVNYXRoT3BlcmF0aW9uKGZ1bmN0aW9uKGRpdmlkZW5kLCBkaXZpc29yKSB7XG4gICAgICByZXR1cm4gZGl2aWRlbmQgLyBkaXZpc29yO1xuICAgIH0sIDEpO1xuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgYG51bWJlcmAgcm91bmRlZCBkb3duIHRvIGBwcmVjaXNpb25gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMTAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIHJvdW5kIGRvd24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtwcmVjaXNpb249MF0gVGhlIHByZWNpc2lvbiB0byByb3VuZCBkb3duIHRvLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHJvdW5kZWQgZG93biBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZmxvb3IoNC4wMDYpO1xuICAgICAqIC8vID0+IDRcbiAgICAgKlxuICAgICAqIF8uZmxvb3IoMC4wNDYsIDIpO1xuICAgICAqIC8vID0+IDAuMDRcbiAgICAgKlxuICAgICAqIF8uZmxvb3IoNDA2MCwgLTIpO1xuICAgICAqIC8vID0+IDQwMDBcbiAgICAgKi9cbiAgICB2YXIgZmxvb3IgPSBjcmVhdGVSb3VuZCgnZmxvb3InKTtcblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIHRoZSBtYXhpbXVtIHZhbHVlIG9mIGBhcnJheWAuIElmIGBhcnJheWAgaXMgZW1wdHkgb3IgZmFsc2V5LFxuICAgICAqIGB1bmRlZmluZWRgIGlzIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXhpbXVtIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm1heChbNCwgMiwgOCwgNl0pO1xuICAgICAqIC8vID0+IDhcbiAgICAgKlxuICAgICAqIF8ubWF4KFtdKTtcbiAgICAgKiAvLyA9PiB1bmRlZmluZWRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXgoYXJyYXkpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VFeHRyZW11bShhcnJheSwgaWRlbnRpdHksIGJhc2VHdClcbiAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5tYXhgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBpbiBgYXJyYXlgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb24gYnkgd2hpY2hcbiAgICAgKiB0aGUgdmFsdWUgaXMgcmFua2VkLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1heGltdW0gdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ24nOiAxIH0sIHsgJ24nOiAyIH1dO1xuICAgICAqXG4gICAgICogXy5tYXhCeShvYmplY3RzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLm47IH0pO1xuICAgICAqIC8vID0+IHsgJ24nOiAyIH1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ubWF4Qnkob2JqZWN0cywgJ24nKTtcbiAgICAgKiAvLyA9PiB7ICduJzogMiB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gbWF4QnkoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlRXh0cmVtdW0oYXJyYXksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSwgYmFzZUd0KVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyB0aGUgbWVhbiBvZiB0aGUgdmFsdWVzIGluIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbWVhbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5tZWFuKFs0LCAyLCA4LCA2XSk7XG4gICAgICogLy8gPT4gNVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1lYW4oYXJyYXkpIHtcbiAgICAgIHJldHVybiBiYXNlTWVhbihhcnJheSwgaWRlbnRpdHkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ubWVhbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IGluIGBhcnJheWAgdG8gZ2VuZXJhdGUgdGhlIHZhbHVlIHRvIGJlIGF2ZXJhZ2VkLlxuICAgICAqIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNy4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBtZWFuLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICduJzogNCB9LCB7ICduJzogMiB9LCB7ICduJzogOCB9LCB7ICduJzogNiB9XTtcbiAgICAgKlxuICAgICAqIF8ubWVhbkJ5KG9iamVjdHMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8ubjsgfSk7XG4gICAgICogLy8gPT4gNVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5tZWFuQnkob2JqZWN0cywgJ24nKTtcbiAgICAgKiAvLyA9PiA1XG4gICAgICovXG4gICAgZnVuY3Rpb24gbWVhbkJ5KGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIGJhc2VNZWFuKGFycmF5LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIHRoZSBtaW5pbXVtIHZhbHVlIG9mIGBhcnJheWAuIElmIGBhcnJheWAgaXMgZW1wdHkgb3IgZmFsc2V5LFxuICAgICAqIGB1bmRlZmluZWRgIGlzIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtaW5pbXVtIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm1pbihbNCwgMiwgOCwgNl0pO1xuICAgICAqIC8vID0+IDJcbiAgICAgKlxuICAgICAqIF8ubWluKFtdKTtcbiAgICAgKiAvLyA9PiB1bmRlZmluZWRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtaW4oYXJyYXkpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VFeHRyZW11bShhcnJheSwgaWRlbnRpdHksIGJhc2VMdClcbiAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5taW5gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBpbiBgYXJyYXlgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb24gYnkgd2hpY2hcbiAgICAgKiB0aGUgdmFsdWUgaXMgcmFua2VkLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1pbmltdW0gdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ24nOiAxIH0sIHsgJ24nOiAyIH1dO1xuICAgICAqXG4gICAgICogXy5taW5CeShvYmplY3RzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLm47IH0pO1xuICAgICAqIC8vID0+IHsgJ24nOiAxIH1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ubWluQnkob2JqZWN0cywgJ24nKTtcbiAgICAgKiAvLyA9PiB7ICduJzogMSB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gbWluQnkoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlRXh0cmVtdW0oYXJyYXksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSwgYmFzZUx0KVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNdWx0aXBseSB0d28gbnVtYmVycy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjcuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG11bHRpcGxpZXIgVGhlIGZpcnN0IG51bWJlciBpbiBhIG11bHRpcGxpY2F0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtdWx0aXBsaWNhbmQgVGhlIHNlY29uZCBudW1iZXIgaW4gYSBtdWx0aXBsaWNhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBwcm9kdWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm11bHRpcGx5KDYsIDQpO1xuICAgICAqIC8vID0+IDI0XG4gICAgICovXG4gICAgdmFyIG11bHRpcGx5ID0gY3JlYXRlTWF0aE9wZXJhdGlvbihmdW5jdGlvbihtdWx0aXBsaWVyLCBtdWx0aXBsaWNhbmQpIHtcbiAgICAgIHJldHVybiBtdWx0aXBsaWVyICogbXVsdGlwbGljYW5kO1xuICAgIH0sIDEpO1xuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgYG51bWJlcmAgcm91bmRlZCB0byBgcHJlY2lzaW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjEwLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byByb3VuZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3ByZWNpc2lvbj0wXSBUaGUgcHJlY2lzaW9uIHRvIHJvdW5kIHRvLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHJvdW5kZWQgbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJvdW5kKDQuMDA2KTtcbiAgICAgKiAvLyA9PiA0XG4gICAgICpcbiAgICAgKiBfLnJvdW5kKDQuMDA2LCAyKTtcbiAgICAgKiAvLyA9PiA0LjAxXG4gICAgICpcbiAgICAgKiBfLnJvdW5kKDQwNjAsIC0yKTtcbiAgICAgKiAvLyA9PiA0MTAwXG4gICAgICovXG4gICAgdmFyIHJvdW5kID0gY3JlYXRlUm91bmQoJ3JvdW5kJyk7XG5cbiAgICAvKipcbiAgICAgKiBTdWJ0cmFjdCB0d28gbnVtYmVycy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG1pbnVlbmQgVGhlIGZpcnN0IG51bWJlciBpbiBhIHN1YnRyYWN0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdWJ0cmFoZW5kIFRoZSBzZWNvbmQgbnVtYmVyIGluIGEgc3VidHJhY3Rpb24uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgZGlmZmVyZW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zdWJ0cmFjdCg2LCA0KTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICovXG4gICAgdmFyIHN1YnRyYWN0ID0gY3JlYXRlTWF0aE9wZXJhdGlvbihmdW5jdGlvbihtaW51ZW5kLCBzdWJ0cmFoZW5kKSB7XG4gICAgICByZXR1cm4gbWludWVuZCAtIHN1YnRyYWhlbmQ7XG4gICAgfSwgMCk7XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyB0aGUgc3VtIG9mIHRoZSB2YWx1ZXMgaW4gYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjQuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzdW0uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc3VtKFs0LCAyLCA4LCA2XSk7XG4gICAgICogLy8gPT4gMjBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdW0oYXJyYXkpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VTdW0oYXJyYXksIGlkZW50aXR5KVxuICAgICAgICA6IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5zdW1gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBpbiBgYXJyYXlgIHRvIGdlbmVyYXRlIHRoZSB2YWx1ZSB0byBiZSBzdW1tZWQuXG4gICAgICogVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN1bS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAnbic6IDQgfSwgeyAnbic6IDIgfSwgeyAnbic6IDggfSwgeyAnbic6IDYgfV07XG4gICAgICpcbiAgICAgKiBfLnN1bUJ5KG9iamVjdHMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8ubjsgfSk7XG4gICAgICogLy8gPT4gMjBcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uc3VtQnkob2JqZWN0cywgJ24nKTtcbiAgICAgKiAvLyA9PiAyMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN1bUJ5KGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVN1bShhcnJheSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKVxuICAgICAgICA6IDA7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLy8gQWRkIG1ldGhvZHMgdGhhdCByZXR1cm4gd3JhcHBlZCB2YWx1ZXMgaW4gY2hhaW4gc2VxdWVuY2VzLlxuICAgIGxvZGFzaC5hZnRlciA9IGFmdGVyO1xuICAgIGxvZGFzaC5hcnkgPSBhcnk7XG4gICAgbG9kYXNoLmFzc2lnbiA9IGFzc2lnbjtcbiAgICBsb2Rhc2guYXNzaWduSW4gPSBhc3NpZ25JbjtcbiAgICBsb2Rhc2guYXNzaWduSW5XaXRoID0gYXNzaWduSW5XaXRoO1xuICAgIGxvZGFzaC5hc3NpZ25XaXRoID0gYXNzaWduV2l0aDtcbiAgICBsb2Rhc2guYXQgPSBhdDtcbiAgICBsb2Rhc2guYmVmb3JlID0gYmVmb3JlO1xuICAgIGxvZGFzaC5iaW5kID0gYmluZDtcbiAgICBsb2Rhc2guYmluZEFsbCA9IGJpbmRBbGw7XG4gICAgbG9kYXNoLmJpbmRLZXkgPSBiaW5kS2V5O1xuICAgIGxvZGFzaC5jYXN0QXJyYXkgPSBjYXN0QXJyYXk7XG4gICAgbG9kYXNoLmNoYWluID0gY2hhaW47XG4gICAgbG9kYXNoLmNodW5rID0gY2h1bms7XG4gICAgbG9kYXNoLmNvbXBhY3QgPSBjb21wYWN0O1xuICAgIGxvZGFzaC5jb25jYXQgPSBjb25jYXQ7XG4gICAgbG9kYXNoLmNvbmQgPSBjb25kO1xuICAgIGxvZGFzaC5jb25mb3JtcyA9IGNvbmZvcm1zO1xuICAgIGxvZGFzaC5jb25zdGFudCA9IGNvbnN0YW50O1xuICAgIGxvZGFzaC5jb3VudEJ5ID0gY291bnRCeTtcbiAgICBsb2Rhc2guY3JlYXRlID0gY3JlYXRlO1xuICAgIGxvZGFzaC5jdXJyeSA9IGN1cnJ5O1xuICAgIGxvZGFzaC5jdXJyeVJpZ2h0ID0gY3VycnlSaWdodDtcbiAgICBsb2Rhc2guZGVib3VuY2UgPSBkZWJvdW5jZTtcbiAgICBsb2Rhc2guZGVmYXVsdHMgPSBkZWZhdWx0cztcbiAgICBsb2Rhc2guZGVmYXVsdHNEZWVwID0gZGVmYXVsdHNEZWVwO1xuICAgIGxvZGFzaC5kZWZlciA9IGRlZmVyO1xuICAgIGxvZGFzaC5kZWxheSA9IGRlbGF5O1xuICAgIGxvZGFzaC5kaWZmZXJlbmNlID0gZGlmZmVyZW5jZTtcbiAgICBsb2Rhc2guZGlmZmVyZW5jZUJ5ID0gZGlmZmVyZW5jZUJ5O1xuICAgIGxvZGFzaC5kaWZmZXJlbmNlV2l0aCA9IGRpZmZlcmVuY2VXaXRoO1xuICAgIGxvZGFzaC5kcm9wID0gZHJvcDtcbiAgICBsb2Rhc2guZHJvcFJpZ2h0ID0gZHJvcFJpZ2h0O1xuICAgIGxvZGFzaC5kcm9wUmlnaHRXaGlsZSA9IGRyb3BSaWdodFdoaWxlO1xuICAgIGxvZGFzaC5kcm9wV2hpbGUgPSBkcm9wV2hpbGU7XG4gICAgbG9kYXNoLmZpbGwgPSBmaWxsO1xuICAgIGxvZGFzaC5maWx0ZXIgPSBmaWx0ZXI7XG4gICAgbG9kYXNoLmZsYXRNYXAgPSBmbGF0TWFwO1xuICAgIGxvZGFzaC5mbGF0TWFwRGVlcCA9IGZsYXRNYXBEZWVwO1xuICAgIGxvZGFzaC5mbGF0TWFwRGVwdGggPSBmbGF0TWFwRGVwdGg7XG4gICAgbG9kYXNoLmZsYXR0ZW4gPSBmbGF0dGVuO1xuICAgIGxvZGFzaC5mbGF0dGVuRGVlcCA9IGZsYXR0ZW5EZWVwO1xuICAgIGxvZGFzaC5mbGF0dGVuRGVwdGggPSBmbGF0dGVuRGVwdGg7XG4gICAgbG9kYXNoLmZsaXAgPSBmbGlwO1xuICAgIGxvZGFzaC5mbG93ID0gZmxvdztcbiAgICBsb2Rhc2guZmxvd1JpZ2h0ID0gZmxvd1JpZ2h0O1xuICAgIGxvZGFzaC5mcm9tUGFpcnMgPSBmcm9tUGFpcnM7XG4gICAgbG9kYXNoLmZ1bmN0aW9ucyA9IGZ1bmN0aW9ucztcbiAgICBsb2Rhc2guZnVuY3Rpb25zSW4gPSBmdW5jdGlvbnNJbjtcbiAgICBsb2Rhc2guZ3JvdXBCeSA9IGdyb3VwQnk7XG4gICAgbG9kYXNoLmluaXRpYWwgPSBpbml0aWFsO1xuICAgIGxvZGFzaC5pbnRlcnNlY3Rpb24gPSBpbnRlcnNlY3Rpb247XG4gICAgbG9kYXNoLmludGVyc2VjdGlvbkJ5ID0gaW50ZXJzZWN0aW9uQnk7XG4gICAgbG9kYXNoLmludGVyc2VjdGlvbldpdGggPSBpbnRlcnNlY3Rpb25XaXRoO1xuICAgIGxvZGFzaC5pbnZlcnQgPSBpbnZlcnQ7XG4gICAgbG9kYXNoLmludmVydEJ5ID0gaW52ZXJ0Qnk7XG4gICAgbG9kYXNoLmludm9rZU1hcCA9IGludm9rZU1hcDtcbiAgICBsb2Rhc2guaXRlcmF0ZWUgPSBpdGVyYXRlZTtcbiAgICBsb2Rhc2gua2V5QnkgPSBrZXlCeTtcbiAgICBsb2Rhc2gua2V5cyA9IGtleXM7XG4gICAgbG9kYXNoLmtleXNJbiA9IGtleXNJbjtcbiAgICBsb2Rhc2gubWFwID0gbWFwO1xuICAgIGxvZGFzaC5tYXBLZXlzID0gbWFwS2V5cztcbiAgICBsb2Rhc2gubWFwVmFsdWVzID0gbWFwVmFsdWVzO1xuICAgIGxvZGFzaC5tYXRjaGVzID0gbWF0Y2hlcztcbiAgICBsb2Rhc2gubWF0Y2hlc1Byb3BlcnR5ID0gbWF0Y2hlc1Byb3BlcnR5O1xuICAgIGxvZGFzaC5tZW1vaXplID0gbWVtb2l6ZTtcbiAgICBsb2Rhc2gubWVyZ2UgPSBtZXJnZTtcbiAgICBsb2Rhc2gubWVyZ2VXaXRoID0gbWVyZ2VXaXRoO1xuICAgIGxvZGFzaC5tZXRob2QgPSBtZXRob2Q7XG4gICAgbG9kYXNoLm1ldGhvZE9mID0gbWV0aG9kT2Y7XG4gICAgbG9kYXNoLm1peGluID0gbWl4aW47XG4gICAgbG9kYXNoLm5lZ2F0ZSA9IG5lZ2F0ZTtcbiAgICBsb2Rhc2gubnRoQXJnID0gbnRoQXJnO1xuICAgIGxvZGFzaC5vbWl0ID0gb21pdDtcbiAgICBsb2Rhc2gub21pdEJ5ID0gb21pdEJ5O1xuICAgIGxvZGFzaC5vbmNlID0gb25jZTtcbiAgICBsb2Rhc2gub3JkZXJCeSA9IG9yZGVyQnk7XG4gICAgbG9kYXNoLm92ZXIgPSBvdmVyO1xuICAgIGxvZGFzaC5vdmVyQXJncyA9IG92ZXJBcmdzO1xuICAgIGxvZGFzaC5vdmVyRXZlcnkgPSBvdmVyRXZlcnk7XG4gICAgbG9kYXNoLm92ZXJTb21lID0gb3ZlclNvbWU7XG4gICAgbG9kYXNoLnBhcnRpYWwgPSBwYXJ0aWFsO1xuICAgIGxvZGFzaC5wYXJ0aWFsUmlnaHQgPSBwYXJ0aWFsUmlnaHQ7XG4gICAgbG9kYXNoLnBhcnRpdGlvbiA9IHBhcnRpdGlvbjtcbiAgICBsb2Rhc2gucGljayA9IHBpY2s7XG4gICAgbG9kYXNoLnBpY2tCeSA9IHBpY2tCeTtcbiAgICBsb2Rhc2gucHJvcGVydHkgPSBwcm9wZXJ0eTtcbiAgICBsb2Rhc2gucHJvcGVydHlPZiA9IHByb3BlcnR5T2Y7XG4gICAgbG9kYXNoLnB1bGwgPSBwdWxsO1xuICAgIGxvZGFzaC5wdWxsQWxsID0gcHVsbEFsbDtcbiAgICBsb2Rhc2gucHVsbEFsbEJ5ID0gcHVsbEFsbEJ5O1xuICAgIGxvZGFzaC5wdWxsQWxsV2l0aCA9IHB1bGxBbGxXaXRoO1xuICAgIGxvZGFzaC5wdWxsQXQgPSBwdWxsQXQ7XG4gICAgbG9kYXNoLnJhbmdlID0gcmFuZ2U7XG4gICAgbG9kYXNoLnJhbmdlUmlnaHQgPSByYW5nZVJpZ2h0O1xuICAgIGxvZGFzaC5yZWFyZyA9IHJlYXJnO1xuICAgIGxvZGFzaC5yZWplY3QgPSByZWplY3Q7XG4gICAgbG9kYXNoLnJlbW92ZSA9IHJlbW92ZTtcbiAgICBsb2Rhc2gucmVzdCA9IHJlc3Q7XG4gICAgbG9kYXNoLnJldmVyc2UgPSByZXZlcnNlO1xuICAgIGxvZGFzaC5zYW1wbGVTaXplID0gc2FtcGxlU2l6ZTtcbiAgICBsb2Rhc2guc2V0ID0gc2V0O1xuICAgIGxvZGFzaC5zZXRXaXRoID0gc2V0V2l0aDtcbiAgICBsb2Rhc2guc2h1ZmZsZSA9IHNodWZmbGU7XG4gICAgbG9kYXNoLnNsaWNlID0gc2xpY2U7XG4gICAgbG9kYXNoLnNvcnRCeSA9IHNvcnRCeTtcbiAgICBsb2Rhc2guc29ydGVkVW5pcSA9IHNvcnRlZFVuaXE7XG4gICAgbG9kYXNoLnNvcnRlZFVuaXFCeSA9IHNvcnRlZFVuaXFCeTtcbiAgICBsb2Rhc2guc3BsaXQgPSBzcGxpdDtcbiAgICBsb2Rhc2guc3ByZWFkID0gc3ByZWFkO1xuICAgIGxvZGFzaC50YWlsID0gdGFpbDtcbiAgICBsb2Rhc2gudGFrZSA9IHRha2U7XG4gICAgbG9kYXNoLnRha2VSaWdodCA9IHRha2VSaWdodDtcbiAgICBsb2Rhc2gudGFrZVJpZ2h0V2hpbGUgPSB0YWtlUmlnaHRXaGlsZTtcbiAgICBsb2Rhc2gudGFrZVdoaWxlID0gdGFrZVdoaWxlO1xuICAgIGxvZGFzaC50YXAgPSB0YXA7XG4gICAgbG9kYXNoLnRocm90dGxlID0gdGhyb3R0bGU7XG4gICAgbG9kYXNoLnRocnUgPSB0aHJ1O1xuICAgIGxvZGFzaC50b0FycmF5ID0gdG9BcnJheTtcbiAgICBsb2Rhc2gudG9QYWlycyA9IHRvUGFpcnM7XG4gICAgbG9kYXNoLnRvUGFpcnNJbiA9IHRvUGFpcnNJbjtcbiAgICBsb2Rhc2gudG9QYXRoID0gdG9QYXRoO1xuICAgIGxvZGFzaC50b1BsYWluT2JqZWN0ID0gdG9QbGFpbk9iamVjdDtcbiAgICBsb2Rhc2gudHJhbnNmb3JtID0gdHJhbnNmb3JtO1xuICAgIGxvZGFzaC51bmFyeSA9IHVuYXJ5O1xuICAgIGxvZGFzaC51bmlvbiA9IHVuaW9uO1xuICAgIGxvZGFzaC51bmlvbkJ5ID0gdW5pb25CeTtcbiAgICBsb2Rhc2gudW5pb25XaXRoID0gdW5pb25XaXRoO1xuICAgIGxvZGFzaC51bmlxID0gdW5pcTtcbiAgICBsb2Rhc2gudW5pcUJ5ID0gdW5pcUJ5O1xuICAgIGxvZGFzaC51bmlxV2l0aCA9IHVuaXFXaXRoO1xuICAgIGxvZGFzaC51bnNldCA9IHVuc2V0O1xuICAgIGxvZGFzaC51bnppcCA9IHVuemlwO1xuICAgIGxvZGFzaC51bnppcFdpdGggPSB1bnppcFdpdGg7XG4gICAgbG9kYXNoLnVwZGF0ZSA9IHVwZGF0ZTtcbiAgICBsb2Rhc2gudXBkYXRlV2l0aCA9IHVwZGF0ZVdpdGg7XG4gICAgbG9kYXNoLnZhbHVlcyA9IHZhbHVlcztcbiAgICBsb2Rhc2gudmFsdWVzSW4gPSB2YWx1ZXNJbjtcbiAgICBsb2Rhc2gud2l0aG91dCA9IHdpdGhvdXQ7XG4gICAgbG9kYXNoLndvcmRzID0gd29yZHM7XG4gICAgbG9kYXNoLndyYXAgPSB3cmFwO1xuICAgIGxvZGFzaC54b3IgPSB4b3I7XG4gICAgbG9kYXNoLnhvckJ5ID0geG9yQnk7XG4gICAgbG9kYXNoLnhvcldpdGggPSB4b3JXaXRoO1xuICAgIGxvZGFzaC56aXAgPSB6aXA7XG4gICAgbG9kYXNoLnppcE9iamVjdCA9IHppcE9iamVjdDtcbiAgICBsb2Rhc2guemlwT2JqZWN0RGVlcCA9IHppcE9iamVjdERlZXA7XG4gICAgbG9kYXNoLnppcFdpdGggPSB6aXBXaXRoO1xuXG4gICAgLy8gQWRkIGFsaWFzZXMuXG4gICAgbG9kYXNoLmVudHJpZXMgPSB0b1BhaXJzO1xuICAgIGxvZGFzaC5lbnRyaWVzSW4gPSB0b1BhaXJzSW47XG4gICAgbG9kYXNoLmV4dGVuZCA9IGFzc2lnbkluO1xuICAgIGxvZGFzaC5leHRlbmRXaXRoID0gYXNzaWduSW5XaXRoO1xuXG4gICAgLy8gQWRkIG1ldGhvZHMgdG8gYGxvZGFzaC5wcm90b3R5cGVgLlxuICAgIG1peGluKGxvZGFzaCwgbG9kYXNoKTtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8vIEFkZCBtZXRob2RzIHRoYXQgcmV0dXJuIHVud3JhcHBlZCB2YWx1ZXMgaW4gY2hhaW4gc2VxdWVuY2VzLlxuICAgIGxvZGFzaC5hZGQgPSBhZGQ7XG4gICAgbG9kYXNoLmF0dGVtcHQgPSBhdHRlbXB0O1xuICAgIGxvZGFzaC5jYW1lbENhc2UgPSBjYW1lbENhc2U7XG4gICAgbG9kYXNoLmNhcGl0YWxpemUgPSBjYXBpdGFsaXplO1xuICAgIGxvZGFzaC5jZWlsID0gY2VpbDtcbiAgICBsb2Rhc2guY2xhbXAgPSBjbGFtcDtcbiAgICBsb2Rhc2guY2xvbmUgPSBjbG9uZTtcbiAgICBsb2Rhc2guY2xvbmVEZWVwID0gY2xvbmVEZWVwO1xuICAgIGxvZGFzaC5jbG9uZURlZXBXaXRoID0gY2xvbmVEZWVwV2l0aDtcbiAgICBsb2Rhc2guY2xvbmVXaXRoID0gY2xvbmVXaXRoO1xuICAgIGxvZGFzaC5jb25mb3Jtc1RvID0gY29uZm9ybXNUbztcbiAgICBsb2Rhc2guZGVidXJyID0gZGVidXJyO1xuICAgIGxvZGFzaC5kZWZhdWx0VG8gPSBkZWZhdWx0VG87XG4gICAgbG9kYXNoLmRpdmlkZSA9IGRpdmlkZTtcbiAgICBsb2Rhc2guZW5kc1dpdGggPSBlbmRzV2l0aDtcbiAgICBsb2Rhc2guZXEgPSBlcTtcbiAgICBsb2Rhc2guZXNjYXBlID0gZXNjYXBlO1xuICAgIGxvZGFzaC5lc2NhcGVSZWdFeHAgPSBlc2NhcGVSZWdFeHA7XG4gICAgbG9kYXNoLmV2ZXJ5ID0gZXZlcnk7XG4gICAgbG9kYXNoLmZpbmQgPSBmaW5kO1xuICAgIGxvZGFzaC5maW5kSW5kZXggPSBmaW5kSW5kZXg7XG4gICAgbG9kYXNoLmZpbmRLZXkgPSBmaW5kS2V5O1xuICAgIGxvZGFzaC5maW5kTGFzdCA9IGZpbmRMYXN0O1xuICAgIGxvZGFzaC5maW5kTGFzdEluZGV4ID0gZmluZExhc3RJbmRleDtcbiAgICBsb2Rhc2guZmluZExhc3RLZXkgPSBmaW5kTGFzdEtleTtcbiAgICBsb2Rhc2guZmxvb3IgPSBmbG9vcjtcbiAgICBsb2Rhc2guZm9yRWFjaCA9IGZvckVhY2g7XG4gICAgbG9kYXNoLmZvckVhY2hSaWdodCA9IGZvckVhY2hSaWdodDtcbiAgICBsb2Rhc2guZm9ySW4gPSBmb3JJbjtcbiAgICBsb2Rhc2guZm9ySW5SaWdodCA9IGZvckluUmlnaHQ7XG4gICAgbG9kYXNoLmZvck93biA9IGZvck93bjtcbiAgICBsb2Rhc2guZm9yT3duUmlnaHQgPSBmb3JPd25SaWdodDtcbiAgICBsb2Rhc2guZ2V0ID0gZ2V0O1xuICAgIGxvZGFzaC5ndCA9IGd0O1xuICAgIGxvZGFzaC5ndGUgPSBndGU7XG4gICAgbG9kYXNoLmhhcyA9IGhhcztcbiAgICBsb2Rhc2guaGFzSW4gPSBoYXNJbjtcbiAgICBsb2Rhc2guaGVhZCA9IGhlYWQ7XG4gICAgbG9kYXNoLmlkZW50aXR5ID0gaWRlbnRpdHk7XG4gICAgbG9kYXNoLmluY2x1ZGVzID0gaW5jbHVkZXM7XG4gICAgbG9kYXNoLmluZGV4T2YgPSBpbmRleE9mO1xuICAgIGxvZGFzaC5pblJhbmdlID0gaW5SYW5nZTtcbiAgICBsb2Rhc2guaW52b2tlID0gaW52b2tlO1xuICAgIGxvZGFzaC5pc0FyZ3VtZW50cyA9IGlzQXJndW1lbnRzO1xuICAgIGxvZGFzaC5pc0FycmF5ID0gaXNBcnJheTtcbiAgICBsb2Rhc2guaXNBcnJheUJ1ZmZlciA9IGlzQXJyYXlCdWZmZXI7XG4gICAgbG9kYXNoLmlzQXJyYXlMaWtlID0gaXNBcnJheUxpa2U7XG4gICAgbG9kYXNoLmlzQXJyYXlMaWtlT2JqZWN0ID0gaXNBcnJheUxpa2VPYmplY3Q7XG4gICAgbG9kYXNoLmlzQm9vbGVhbiA9IGlzQm9vbGVhbjtcbiAgICBsb2Rhc2guaXNCdWZmZXIgPSBpc0J1ZmZlcjtcbiAgICBsb2Rhc2guaXNEYXRlID0gaXNEYXRlO1xuICAgIGxvZGFzaC5pc0VsZW1lbnQgPSBpc0VsZW1lbnQ7XG4gICAgbG9kYXNoLmlzRW1wdHkgPSBpc0VtcHR5O1xuICAgIGxvZGFzaC5pc0VxdWFsID0gaXNFcXVhbDtcbiAgICBsb2Rhc2guaXNFcXVhbFdpdGggPSBpc0VxdWFsV2l0aDtcbiAgICBsb2Rhc2guaXNFcnJvciA9IGlzRXJyb3I7XG4gICAgbG9kYXNoLmlzRmluaXRlID0gaXNGaW5pdGU7XG4gICAgbG9kYXNoLmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xuICAgIGxvZGFzaC5pc0ludGVnZXIgPSBpc0ludGVnZXI7XG4gICAgbG9kYXNoLmlzTGVuZ3RoID0gaXNMZW5ndGg7XG4gICAgbG9kYXNoLmlzTWFwID0gaXNNYXA7XG4gICAgbG9kYXNoLmlzTWF0Y2ggPSBpc01hdGNoO1xuICAgIGxvZGFzaC5pc01hdGNoV2l0aCA9IGlzTWF0Y2hXaXRoO1xuICAgIGxvZGFzaC5pc05hTiA9IGlzTmFOO1xuICAgIGxvZGFzaC5pc05hdGl2ZSA9IGlzTmF0aXZlO1xuICAgIGxvZGFzaC5pc05pbCA9IGlzTmlsO1xuICAgIGxvZGFzaC5pc051bGwgPSBpc051bGw7XG4gICAgbG9kYXNoLmlzTnVtYmVyID0gaXNOdW1iZXI7XG4gICAgbG9kYXNoLmlzT2JqZWN0ID0gaXNPYmplY3Q7XG4gICAgbG9kYXNoLmlzT2JqZWN0TGlrZSA9IGlzT2JqZWN0TGlrZTtcbiAgICBsb2Rhc2guaXNQbGFpbk9iamVjdCA9IGlzUGxhaW5PYmplY3Q7XG4gICAgbG9kYXNoLmlzUmVnRXhwID0gaXNSZWdFeHA7XG4gICAgbG9kYXNoLmlzU2FmZUludGVnZXIgPSBpc1NhZmVJbnRlZ2VyO1xuICAgIGxvZGFzaC5pc1NldCA9IGlzU2V0O1xuICAgIGxvZGFzaC5pc1N0cmluZyA9IGlzU3RyaW5nO1xuICAgIGxvZGFzaC5pc1N5bWJvbCA9IGlzU3ltYm9sO1xuICAgIGxvZGFzaC5pc1R5cGVkQXJyYXkgPSBpc1R5cGVkQXJyYXk7XG4gICAgbG9kYXNoLmlzVW5kZWZpbmVkID0gaXNVbmRlZmluZWQ7XG4gICAgbG9kYXNoLmlzV2Vha01hcCA9IGlzV2Vha01hcDtcbiAgICBsb2Rhc2guaXNXZWFrU2V0ID0gaXNXZWFrU2V0O1xuICAgIGxvZGFzaC5qb2luID0gam9pbjtcbiAgICBsb2Rhc2gua2ViYWJDYXNlID0ga2ViYWJDYXNlO1xuICAgIGxvZGFzaC5sYXN0ID0gbGFzdDtcbiAgICBsb2Rhc2gubGFzdEluZGV4T2YgPSBsYXN0SW5kZXhPZjtcbiAgICBsb2Rhc2gubG93ZXJDYXNlID0gbG93ZXJDYXNlO1xuICAgIGxvZGFzaC5sb3dlckZpcnN0ID0gbG93ZXJGaXJzdDtcbiAgICBsb2Rhc2gubHQgPSBsdDtcbiAgICBsb2Rhc2gubHRlID0gbHRlO1xuICAgIGxvZGFzaC5tYXggPSBtYXg7XG4gICAgbG9kYXNoLm1heEJ5ID0gbWF4Qnk7XG4gICAgbG9kYXNoLm1lYW4gPSBtZWFuO1xuICAgIGxvZGFzaC5tZWFuQnkgPSBtZWFuQnk7XG4gICAgbG9kYXNoLm1pbiA9IG1pbjtcbiAgICBsb2Rhc2gubWluQnkgPSBtaW5CeTtcbiAgICBsb2Rhc2guc3R1YkFycmF5ID0gc3R1YkFycmF5O1xuICAgIGxvZGFzaC5zdHViRmFsc2UgPSBzdHViRmFsc2U7XG4gICAgbG9kYXNoLnN0dWJPYmplY3QgPSBzdHViT2JqZWN0O1xuICAgIGxvZGFzaC5zdHViU3RyaW5nID0gc3R1YlN0cmluZztcbiAgICBsb2Rhc2guc3R1YlRydWUgPSBzdHViVHJ1ZTtcbiAgICBsb2Rhc2gubXVsdGlwbHkgPSBtdWx0aXBseTtcbiAgICBsb2Rhc2gubnRoID0gbnRoO1xuICAgIGxvZGFzaC5ub0NvbmZsaWN0ID0gbm9Db25mbGljdDtcbiAgICBsb2Rhc2gubm9vcCA9IG5vb3A7XG4gICAgbG9kYXNoLm5vdyA9IG5vdztcbiAgICBsb2Rhc2gucGFkID0gcGFkO1xuICAgIGxvZGFzaC5wYWRFbmQgPSBwYWRFbmQ7XG4gICAgbG9kYXNoLnBhZFN0YXJ0ID0gcGFkU3RhcnQ7XG4gICAgbG9kYXNoLnBhcnNlSW50ID0gcGFyc2VJbnQ7XG4gICAgbG9kYXNoLnJhbmRvbSA9IHJhbmRvbTtcbiAgICBsb2Rhc2gucmVkdWNlID0gcmVkdWNlO1xuICAgIGxvZGFzaC5yZWR1Y2VSaWdodCA9IHJlZHVjZVJpZ2h0O1xuICAgIGxvZGFzaC5yZXBlYXQgPSByZXBlYXQ7XG4gICAgbG9kYXNoLnJlcGxhY2UgPSByZXBsYWNlO1xuICAgIGxvZGFzaC5yZXN1bHQgPSByZXN1bHQ7XG4gICAgbG9kYXNoLnJvdW5kID0gcm91bmQ7XG4gICAgbG9kYXNoLnJ1bkluQ29udGV4dCA9IHJ1bkluQ29udGV4dDtcbiAgICBsb2Rhc2guc2FtcGxlID0gc2FtcGxlO1xuICAgIGxvZGFzaC5zaXplID0gc2l6ZTtcbiAgICBsb2Rhc2guc25ha2VDYXNlID0gc25ha2VDYXNlO1xuICAgIGxvZGFzaC5zb21lID0gc29tZTtcbiAgICBsb2Rhc2guc29ydGVkSW5kZXggPSBzb3J0ZWRJbmRleDtcbiAgICBsb2Rhc2guc29ydGVkSW5kZXhCeSA9IHNvcnRlZEluZGV4Qnk7XG4gICAgbG9kYXNoLnNvcnRlZEluZGV4T2YgPSBzb3J0ZWRJbmRleE9mO1xuICAgIGxvZGFzaC5zb3J0ZWRMYXN0SW5kZXggPSBzb3J0ZWRMYXN0SW5kZXg7XG4gICAgbG9kYXNoLnNvcnRlZExhc3RJbmRleEJ5ID0gc29ydGVkTGFzdEluZGV4Qnk7XG4gICAgbG9kYXNoLnNvcnRlZExhc3RJbmRleE9mID0gc29ydGVkTGFzdEluZGV4T2Y7XG4gICAgbG9kYXNoLnN0YXJ0Q2FzZSA9IHN0YXJ0Q2FzZTtcbiAgICBsb2Rhc2guc3RhcnRzV2l0aCA9IHN0YXJ0c1dpdGg7XG4gICAgbG9kYXNoLnN1YnRyYWN0ID0gc3VidHJhY3Q7XG4gICAgbG9kYXNoLnN1bSA9IHN1bTtcbiAgICBsb2Rhc2guc3VtQnkgPSBzdW1CeTtcbiAgICBsb2Rhc2gudGVtcGxhdGUgPSB0ZW1wbGF0ZTtcbiAgICBsb2Rhc2gudGltZXMgPSB0aW1lcztcbiAgICBsb2Rhc2gudG9GaW5pdGUgPSB0b0Zpbml0ZTtcbiAgICBsb2Rhc2gudG9JbnRlZ2VyID0gdG9JbnRlZ2VyO1xuICAgIGxvZGFzaC50b0xlbmd0aCA9IHRvTGVuZ3RoO1xuICAgIGxvZGFzaC50b0xvd2VyID0gdG9Mb3dlcjtcbiAgICBsb2Rhc2gudG9OdW1iZXIgPSB0b051bWJlcjtcbiAgICBsb2Rhc2gudG9TYWZlSW50ZWdlciA9IHRvU2FmZUludGVnZXI7XG4gICAgbG9kYXNoLnRvU3RyaW5nID0gdG9TdHJpbmc7XG4gICAgbG9kYXNoLnRvVXBwZXIgPSB0b1VwcGVyO1xuICAgIGxvZGFzaC50cmltID0gdHJpbTtcbiAgICBsb2Rhc2gudHJpbUVuZCA9IHRyaW1FbmQ7XG4gICAgbG9kYXNoLnRyaW1TdGFydCA9IHRyaW1TdGFydDtcbiAgICBsb2Rhc2gudHJ1bmNhdGUgPSB0cnVuY2F0ZTtcbiAgICBsb2Rhc2gudW5lc2NhcGUgPSB1bmVzY2FwZTtcbiAgICBsb2Rhc2gudW5pcXVlSWQgPSB1bmlxdWVJZDtcbiAgICBsb2Rhc2gudXBwZXJDYXNlID0gdXBwZXJDYXNlO1xuICAgIGxvZGFzaC51cHBlckZpcnN0ID0gdXBwZXJGaXJzdDtcblxuICAgIC8vIEFkZCBhbGlhc2VzLlxuICAgIGxvZGFzaC5lYWNoID0gZm9yRWFjaDtcbiAgICBsb2Rhc2guZWFjaFJpZ2h0ID0gZm9yRWFjaFJpZ2h0O1xuICAgIGxvZGFzaC5maXJzdCA9IGhlYWQ7XG5cbiAgICBtaXhpbihsb2Rhc2gsIChmdW5jdGlvbigpIHtcbiAgICAgIHZhciBzb3VyY2UgPSB7fTtcbiAgICAgIGJhc2VGb3JPd24obG9kYXNoLCBmdW5jdGlvbihmdW5jLCBtZXRob2ROYW1lKSB7XG4gICAgICAgIGlmICghaGFzT3duUHJvcGVydHkuY2FsbChsb2Rhc2gucHJvdG90eXBlLCBtZXRob2ROYW1lKSkge1xuICAgICAgICAgIHNvdXJjZVttZXRob2ROYW1lXSA9IGZ1bmM7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHNvdXJjZTtcbiAgICB9KCkpLCB7ICdjaGFpbic6IGZhbHNlIH0pO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogVGhlIHNlbWFudGljIHZlcnNpb24gbnVtYmVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICBsb2Rhc2guVkVSU0lPTiA9IFZFUlNJT047XG5cbiAgICAvLyBBc3NpZ24gZGVmYXVsdCBwbGFjZWhvbGRlcnMuXG4gICAgYXJyYXlFYWNoKFsnYmluZCcsICdiaW5kS2V5JywgJ2N1cnJ5JywgJ2N1cnJ5UmlnaHQnLCAncGFydGlhbCcsICdwYXJ0aWFsUmlnaHQnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSkge1xuICAgICAgbG9kYXNoW21ldGhvZE5hbWVdLnBsYWNlaG9sZGVyID0gbG9kYXNoO1xuICAgIH0pO1xuXG4gICAgLy8gQWRkIGBMYXp5V3JhcHBlcmAgbWV0aG9kcyBmb3IgYF8uZHJvcGAgYW5kIGBfLnRha2VgIHZhcmlhbnRzLlxuICAgIGFycmF5RWFjaChbJ2Ryb3AnLCAndGFrZSddLCBmdW5jdGlvbihtZXRob2ROYW1lLCBpbmRleCkge1xuICAgICAgTGF6eVdyYXBwZXIucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24obikge1xuICAgICAgICBuID0gbiA9PT0gdW5kZWZpbmVkID8gMSA6IG5hdGl2ZU1heCh0b0ludGVnZXIobiksIDApO1xuXG4gICAgICAgIHZhciByZXN1bHQgPSAodGhpcy5fX2ZpbHRlcmVkX18gJiYgIWluZGV4KVxuICAgICAgICAgID8gbmV3IExhenlXcmFwcGVyKHRoaXMpXG4gICAgICAgICAgOiB0aGlzLmNsb25lKCk7XG5cbiAgICAgICAgaWYgKHJlc3VsdC5fX2ZpbHRlcmVkX18pIHtcbiAgICAgICAgICByZXN1bHQuX190YWtlQ291bnRfXyA9IG5hdGl2ZU1pbihuLCByZXN1bHQuX190YWtlQ291bnRfXyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzdWx0Ll9fdmlld3NfXy5wdXNoKHtcbiAgICAgICAgICAgICdzaXplJzogbmF0aXZlTWluKG4sIE1BWF9BUlJBWV9MRU5HVEgpLFxuICAgICAgICAgICAgJ3R5cGUnOiBtZXRob2ROYW1lICsgKHJlc3VsdC5fX2Rpcl9fIDwgMCA/ICdSaWdodCcgOiAnJylcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcblxuICAgICAgTGF6eVdyYXBwZXIucHJvdG90eXBlW21ldGhvZE5hbWUgKyAnUmlnaHQnXSA9IGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmV2ZXJzZSgpW21ldGhvZE5hbWVdKG4pLnJldmVyc2UoKTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgYExhenlXcmFwcGVyYCBtZXRob2RzIHRoYXQgYWNjZXB0IGFuIGBpdGVyYXRlZWAgdmFsdWUuXG4gICAgYXJyYXlFYWNoKFsnZmlsdGVyJywgJ21hcCcsICd0YWtlV2hpbGUnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSwgaW5kZXgpIHtcbiAgICAgIHZhciB0eXBlID0gaW5kZXggKyAxLFxuICAgICAgICAgIGlzRmlsdGVyID0gdHlwZSA9PSBMQVpZX0ZJTFRFUl9GTEFHIHx8IHR5cGUgPT0gTEFaWV9XSElMRV9GTEFHO1xuXG4gICAgICBMYXp5V3JhcHBlci5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbihpdGVyYXRlZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5jbG9uZSgpO1xuICAgICAgICByZXN1bHQuX19pdGVyYXRlZXNfXy5wdXNoKHtcbiAgICAgICAgICAnaXRlcmF0ZWUnOiBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMyksXG4gICAgICAgICAgJ3R5cGUnOiB0eXBlXG4gICAgICAgIH0pO1xuICAgICAgICByZXN1bHQuX19maWx0ZXJlZF9fID0gcmVzdWx0Ll9fZmlsdGVyZWRfXyB8fCBpc0ZpbHRlcjtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgYExhenlXcmFwcGVyYCBtZXRob2RzIGZvciBgXy5oZWFkYCBhbmQgYF8ubGFzdGAuXG4gICAgYXJyYXlFYWNoKFsnaGVhZCcsICdsYXN0J10sIGZ1bmN0aW9uKG1ldGhvZE5hbWUsIGluZGV4KSB7XG4gICAgICB2YXIgdGFrZU5hbWUgPSAndGFrZScgKyAoaW5kZXggPyAnUmlnaHQnIDogJycpO1xuXG4gICAgICBMYXp5V3JhcHBlci5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbdGFrZU5hbWVdKDEpLnZhbHVlKClbMF07XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgLy8gQWRkIGBMYXp5V3JhcHBlcmAgbWV0aG9kcyBmb3IgYF8uaW5pdGlhbGAgYW5kIGBfLnRhaWxgLlxuICAgIGFycmF5RWFjaChbJ2luaXRpYWwnLCAndGFpbCddLCBmdW5jdGlvbihtZXRob2ROYW1lLCBpbmRleCkge1xuICAgICAgdmFyIGRyb3BOYW1lID0gJ2Ryb3AnICsgKGluZGV4ID8gJycgOiAnUmlnaHQnKTtcblxuICAgICAgTGF6eVdyYXBwZXIucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9fZmlsdGVyZWRfXyA/IG5ldyBMYXp5V3JhcHBlcih0aGlzKSA6IHRoaXNbZHJvcE5hbWVdKDEpO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5jb21wYWN0ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5maWx0ZXIoaWRlbnRpdHkpO1xuICAgIH07XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUuZmluZCA9IGZ1bmN0aW9uKHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyKHByZWRpY2F0ZSkuaGVhZCgpO1xuICAgIH07XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUuZmluZExhc3QgPSBmdW5jdGlvbihwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiB0aGlzLnJldmVyc2UoKS5maW5kKHByZWRpY2F0ZSk7XG4gICAgfTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5pbnZva2VNYXAgPSBiYXNlUmVzdChmdW5jdGlvbihwYXRoLCBhcmdzKSB7XG4gICAgICBpZiAodHlwZW9mIHBhdGggPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gbmV3IExhenlXcmFwcGVyKHRoaXMpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBiYXNlSW52b2tlKHZhbHVlLCBwYXRoLCBhcmdzKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLnJlamVjdCA9IGZ1bmN0aW9uKHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyKG5lZ2F0ZShnZXRJdGVyYXRlZShwcmVkaWNhdGUpKSk7XG4gICAgfTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICAgIHN0YXJ0ID0gdG9JbnRlZ2VyKHN0YXJ0KTtcblxuICAgICAgdmFyIHJlc3VsdCA9IHRoaXM7XG4gICAgICBpZiAocmVzdWx0Ll9fZmlsdGVyZWRfXyAmJiAoc3RhcnQgPiAwIHx8IGVuZCA8IDApKSB7XG4gICAgICAgIHJldHVybiBuZXcgTGF6eVdyYXBwZXIocmVzdWx0KTtcbiAgICAgIH1cbiAgICAgIGlmIChzdGFydCA8IDApIHtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0LnRha2VSaWdodCgtc3RhcnQpO1xuICAgICAgfSBlbHNlIGlmIChzdGFydCkge1xuICAgICAgICByZXN1bHQgPSByZXN1bHQuZHJvcChzdGFydCk7XG4gICAgICB9XG4gICAgICBpZiAoZW5kICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZW5kID0gdG9JbnRlZ2VyKGVuZCk7XG4gICAgICAgIHJlc3VsdCA9IGVuZCA8IDAgPyByZXN1bHQuZHJvcFJpZ2h0KC1lbmQpIDogcmVzdWx0LnRha2UoZW5kIC0gc3RhcnQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLnRha2VSaWdodFdoaWxlID0gZnVuY3Rpb24ocHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXZlcnNlKCkudGFrZVdoaWxlKHByZWRpY2F0ZSkucmV2ZXJzZSgpO1xuICAgIH07XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUudG9BcnJheSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMudGFrZShNQVhfQVJSQVlfTEVOR1RIKTtcbiAgICB9O1xuXG4gICAgLy8gQWRkIGBMYXp5V3JhcHBlcmAgbWV0aG9kcyB0byBgbG9kYXNoLnByb3RvdHlwZWAuXG4gICAgYmFzZUZvck93bihMYXp5V3JhcHBlci5wcm90b3R5cGUsIGZ1bmN0aW9uKGZ1bmMsIG1ldGhvZE5hbWUpIHtcbiAgICAgIHZhciBjaGVja0l0ZXJhdGVlID0gL14oPzpmaWx0ZXJ8ZmluZHxtYXB8cmVqZWN0KXxXaGlsZSQvLnRlc3QobWV0aG9kTmFtZSksXG4gICAgICAgICAgaXNUYWtlciA9IC9eKD86aGVhZHxsYXN0KSQvLnRlc3QobWV0aG9kTmFtZSksXG4gICAgICAgICAgbG9kYXNoRnVuYyA9IGxvZGFzaFtpc1Rha2VyID8gKCd0YWtlJyArIChtZXRob2ROYW1lID09ICdsYXN0JyA/ICdSaWdodCcgOiAnJykpIDogbWV0aG9kTmFtZV0sXG4gICAgICAgICAgcmV0VW53cmFwcGVkID0gaXNUYWtlciB8fCAvXmZpbmQvLnRlc3QobWV0aG9kTmFtZSk7XG5cbiAgICAgIGlmICghbG9kYXNoRnVuYykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBsb2Rhc2gucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHRoaXMuX193cmFwcGVkX18sXG4gICAgICAgICAgICBhcmdzID0gaXNUYWtlciA/IFsxXSA6IGFyZ3VtZW50cyxcbiAgICAgICAgICAgIGlzTGF6eSA9IHZhbHVlIGluc3RhbmNlb2YgTGF6eVdyYXBwZXIsXG4gICAgICAgICAgICBpdGVyYXRlZSA9IGFyZ3NbMF0sXG4gICAgICAgICAgICB1c2VMYXp5ID0gaXNMYXp5IHx8IGlzQXJyYXkodmFsdWUpO1xuXG4gICAgICAgIHZhciBpbnRlcmNlcHRvciA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgdmFyIHJlc3VsdCA9IGxvZGFzaEZ1bmMuYXBwbHkobG9kYXNoLCBhcnJheVB1c2goW3ZhbHVlXSwgYXJncykpO1xuICAgICAgICAgIHJldHVybiAoaXNUYWtlciAmJiBjaGFpbkFsbCkgPyByZXN1bHRbMF0gOiByZXN1bHQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKHVzZUxhenkgJiYgY2hlY2tJdGVyYXRlZSAmJiB0eXBlb2YgaXRlcmF0ZWUgPT0gJ2Z1bmN0aW9uJyAmJiBpdGVyYXRlZS5sZW5ndGggIT0gMSkge1xuICAgICAgICAgIC8vIEF2b2lkIGxhenkgdXNlIGlmIHRoZSBpdGVyYXRlZSBoYXMgYSBcImxlbmd0aFwiIHZhbHVlIG90aGVyIHRoYW4gYDFgLlxuICAgICAgICAgIGlzTGF6eSA9IHVzZUxhenkgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY2hhaW5BbGwgPSB0aGlzLl9fY2hhaW5fXyxcbiAgICAgICAgICAgIGlzSHlicmlkID0gISF0aGlzLl9fYWN0aW9uc19fLmxlbmd0aCxcbiAgICAgICAgICAgIGlzVW53cmFwcGVkID0gcmV0VW53cmFwcGVkICYmICFjaGFpbkFsbCxcbiAgICAgICAgICAgIG9ubHlMYXp5ID0gaXNMYXp5ICYmICFpc0h5YnJpZDtcblxuICAgICAgICBpZiAoIXJldFVud3JhcHBlZCAmJiB1c2VMYXp5KSB7XG4gICAgICAgICAgdmFsdWUgPSBvbmx5TGF6eSA/IHZhbHVlIDogbmV3IExhenlXcmFwcGVyKHRoaXMpO1xuICAgICAgICAgIHZhciByZXN1bHQgPSBmdW5jLmFwcGx5KHZhbHVlLCBhcmdzKTtcbiAgICAgICAgICByZXN1bHQuX19hY3Rpb25zX18ucHVzaCh7ICdmdW5jJzogdGhydSwgJ2FyZ3MnOiBbaW50ZXJjZXB0b3JdLCAndGhpc0FyZyc6IHVuZGVmaW5lZCB9KTtcbiAgICAgICAgICByZXR1cm4gbmV3IExvZGFzaFdyYXBwZXIocmVzdWx0LCBjaGFpbkFsbCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzVW53cmFwcGVkICYmIG9ubHlMYXp5KSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0ID0gdGhpcy50aHJ1KGludGVyY2VwdG9yKTtcbiAgICAgICAgcmV0dXJuIGlzVW53cmFwcGVkID8gKGlzVGFrZXIgPyByZXN1bHQudmFsdWUoKVswXSA6IHJlc3VsdC52YWx1ZSgpKSA6IHJlc3VsdDtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgYEFycmF5YCBtZXRob2RzIHRvIGBsb2Rhc2gucHJvdG90eXBlYC5cbiAgICBhcnJheUVhY2goWydwb3AnLCAncHVzaCcsICdzaGlmdCcsICdzb3J0JywgJ3NwbGljZScsICd1bnNoaWZ0J10sIGZ1bmN0aW9uKG1ldGhvZE5hbWUpIHtcbiAgICAgIHZhciBmdW5jID0gYXJyYXlQcm90b1ttZXRob2ROYW1lXSxcbiAgICAgICAgICBjaGFpbk5hbWUgPSAvXig/OnB1c2h8c29ydHx1bnNoaWZ0KSQvLnRlc3QobWV0aG9kTmFtZSkgPyAndGFwJyA6ICd0aHJ1JyxcbiAgICAgICAgICByZXRVbndyYXBwZWQgPSAvXig/OnBvcHxzaGlmdCkkLy50ZXN0KG1ldGhvZE5hbWUpO1xuXG4gICAgICBsb2Rhc2gucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgICBpZiAocmV0VW53cmFwcGVkICYmICF0aGlzLl9fY2hhaW5fXykge1xuICAgICAgICAgIHZhciB2YWx1ZSA9IHRoaXMudmFsdWUoKTtcbiAgICAgICAgICByZXR1cm4gZnVuYy5hcHBseShpc0FycmF5KHZhbHVlKSA/IHZhbHVlIDogW10sIGFyZ3MpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzW2NoYWluTmFtZV0oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gZnVuYy5hcHBseShpc0FycmF5KHZhbHVlKSA/IHZhbHVlIDogW10sIGFyZ3MpO1xuICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvLyBNYXAgbWluaWZpZWQgbWV0aG9kIG5hbWVzIHRvIHRoZWlyIHJlYWwgbmFtZXMuXG4gICAgYmFzZUZvck93bihMYXp5V3JhcHBlci5wcm90b3R5cGUsIGZ1bmN0aW9uKGZ1bmMsIG1ldGhvZE5hbWUpIHtcbiAgICAgIHZhciBsb2Rhc2hGdW5jID0gbG9kYXNoW21ldGhvZE5hbWVdO1xuICAgICAgaWYgKGxvZGFzaEZ1bmMpIHtcbiAgICAgICAgdmFyIGtleSA9IGxvZGFzaEZ1bmMubmFtZSArICcnO1xuICAgICAgICBpZiAoIWhhc093blByb3BlcnR5LmNhbGwocmVhbE5hbWVzLCBrZXkpKSB7XG4gICAgICAgICAgcmVhbE5hbWVzW2tleV0gPSBbXTtcbiAgICAgICAgfVxuICAgICAgICByZWFsTmFtZXNba2V5XS5wdXNoKHsgJ25hbWUnOiBtZXRob2ROYW1lLCAnZnVuYyc6IGxvZGFzaEZ1bmMgfSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZWFsTmFtZXNbY3JlYXRlSHlicmlkKHVuZGVmaW5lZCwgV1JBUF9CSU5EX0tFWV9GTEFHKS5uYW1lXSA9IFt7XG4gICAgICAnbmFtZSc6ICd3cmFwcGVyJyxcbiAgICAgICdmdW5jJzogdW5kZWZpbmVkXG4gICAgfV07XG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0byBgTGF6eVdyYXBwZXJgLlxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5jbG9uZSA9IGxhenlDbG9uZTtcbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUucmV2ZXJzZSA9IGxhenlSZXZlcnNlO1xuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS52YWx1ZSA9IGxhenlWYWx1ZTtcblxuICAgIC8vIEFkZCBjaGFpbiBzZXF1ZW5jZSBtZXRob2RzIHRvIHRoZSBgbG9kYXNoYCB3cmFwcGVyLlxuICAgIGxvZGFzaC5wcm90b3R5cGUuYXQgPSB3cmFwcGVyQXQ7XG4gICAgbG9kYXNoLnByb3RvdHlwZS5jaGFpbiA9IHdyYXBwZXJDaGFpbjtcbiAgICBsb2Rhc2gucHJvdG90eXBlLmNvbW1pdCA9IHdyYXBwZXJDb21taXQ7XG4gICAgbG9kYXNoLnByb3RvdHlwZS5uZXh0ID0gd3JhcHBlck5leHQ7XG4gICAgbG9kYXNoLnByb3RvdHlwZS5wbGFudCA9IHdyYXBwZXJQbGFudDtcbiAgICBsb2Rhc2gucHJvdG90eXBlLnJldmVyc2UgPSB3cmFwcGVyUmV2ZXJzZTtcbiAgICBsb2Rhc2gucHJvdG90eXBlLnRvSlNPTiA9IGxvZGFzaC5wcm90b3R5cGUudmFsdWVPZiA9IGxvZGFzaC5wcm90b3R5cGUudmFsdWUgPSB3cmFwcGVyVmFsdWU7XG5cbiAgICAvLyBBZGQgbGF6eSBhbGlhc2VzLlxuICAgIGxvZGFzaC5wcm90b3R5cGUuZmlyc3QgPSBsb2Rhc2gucHJvdG90eXBlLmhlYWQ7XG5cbiAgICBpZiAoc3ltSXRlcmF0b3IpIHtcbiAgICAgIGxvZGFzaC5wcm90b3R5cGVbc3ltSXRlcmF0b3JdID0gd3JhcHBlclRvSXRlcmF0b3I7XG4gICAgfVxuICAgIHJldHVybiBsb2Rhc2g7XG4gIH0pO1xuXG4gIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gIC8vIEV4cG9ydCBsb2Rhc2guXG4gIHZhciBfID0gcnVuSW5Db250ZXh0KCk7XG5cbiAgLy8gU29tZSBBTUQgYnVpbGQgb3B0aW1pemVycywgbGlrZSByLmpzLCBjaGVjayBmb3IgY29uZGl0aW9uIHBhdHRlcm5zIGxpa2U6XG4gIGlmICh0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGRlZmluZS5hbWQgPT0gJ29iamVjdCcgJiYgZGVmaW5lLmFtZCkge1xuICAgIC8vIEV4cG9zZSBMb2Rhc2ggb24gdGhlIGdsb2JhbCBvYmplY3QgdG8gcHJldmVudCBlcnJvcnMgd2hlbiBMb2Rhc2ggaXNcbiAgICAvLyBsb2FkZWQgYnkgYSBzY3JpcHQgdGFnIGluIHRoZSBwcmVzZW5jZSBvZiBhbiBBTUQgbG9hZGVyLlxuICAgIC8vIFNlZSBodHRwOi8vcmVxdWlyZWpzLm9yZy9kb2NzL2Vycm9ycy5odG1sI21pc21hdGNoIGZvciBtb3JlIGRldGFpbHMuXG4gICAgLy8gVXNlIGBfLm5vQ29uZmxpY3RgIHRvIHJlbW92ZSBMb2Rhc2ggZnJvbSB0aGUgZ2xvYmFsIG9iamVjdC5cbiAgICByb290Ll8gPSBfO1xuXG4gICAgLy8gRGVmaW5lIGFzIGFuIGFub255bW91cyBtb2R1bGUgc28sIHRocm91Z2ggcGF0aCBtYXBwaW5nLCBpdCBjYW4gYmVcbiAgICAvLyByZWZlcmVuY2VkIGFzIHRoZSBcInVuZGVyc2NvcmVcIiBtb2R1bGUuXG4gICAgZGVmaW5lKGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIF87XG4gICAgfSk7XG4gIH1cbiAgLy8gQ2hlY2sgZm9yIGBleHBvcnRzYCBhZnRlciBgZGVmaW5lYCBpbiBjYXNlIGEgYnVpbGQgb3B0aW1pemVyIGFkZHMgaXQuXG4gIGVsc2UgaWYgKGZyZWVNb2R1bGUpIHtcbiAgICAvLyBFeHBvcnQgZm9yIE5vZGUuanMuXG4gICAgKGZyZWVNb2R1bGUuZXhwb3J0cyA9IF8pLl8gPSBfO1xuICAgIC8vIEV4cG9ydCBmb3IgQ29tbW9uSlMgc3VwcG9ydC5cbiAgICBmcmVlRXhwb3J0cy5fID0gXztcbiAgfVxuICBlbHNlIHtcbiAgICAvLyBFeHBvcnQgdG8gdGhlIGdsb2JhbCBvYmplY3QuXG4gICAgcm9vdC5fID0gXztcbiAgfVxufS5jYWxsKHRoaXMpKTtcbiIsInZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2xlc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vaW9zLWh0bWwtZWRpdG9yLmxlc3NcIik7XG5cbmlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xufVxuXG52YXIgb3B0aW9ucyA9IHt9XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmIChjb250ZW50LmxvY2Fscykge1xuICBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xufVxuIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIikoZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIuaHRtbC1lZGl0b3Ige1xcbiAgd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICBwYWRkaW5nOiAxMHB4O1xcbn1cXG4uaHRtbC1lZGl0b3IgaWZyYW1lIHtcXG4gIHdpZHRoOiA5NSU7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbn1cXG5AbWVkaWEgKHByZWZlcnMtY29sb3Itc2NoZW1lOiBkYXJrKSB7XFxuICAuaHRtbC1lZGl0b3IgPiBpZnJhbWUgPiBodG1sIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzAwMDAwMDtcXG4gICAgY29sb3I6ICNmZmZmZmY7XFxuICB9XFxufVxcblwiLCBcIlwiXSk7XG4iLCJ2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9sZXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2h5YnJpZC5sZXNzXCIpO1xuXG5pZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbn1cblxudmFyIG9wdGlvbnMgPSB7fVxuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZiAoY29udGVudC5sb2NhbHMpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbn1cbiIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiaHRtbCB7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICB3aWR0aDogMTAwJTtcXG59XFxuYm9keSB7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICB3aWR0aDogMTAwJTtcXG4gIG1hcmdpbjogMDtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxuICBvdmVyZmxvdy15OiBhdXRvO1xcbn1cXG5AbWVkaWEgKHByZWZlcnMtY29sb3Itc2NoZW1lOiBkYXJrKSB7XFxuICBib2R5IHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzAwMDAwMDtcXG4gICAgY29sb3I6ICNmZmZmZmY7XFxuICB9XFxufVxcbiNib2R5IHtcXG4gIGhlaWdodDogMTAwJTtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG59XFxuKiB7XFxuICBvdXRsaW5lOiAwcHggc29saWQgdHJhbnNwYXJlbnQ7XFxuICAtd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMCk7XFxuICAtd2Via2l0LXRvdWNoLWNhbGxvdXQ6IG5vbmU7XFxufVxcblwiLCBcIlwiXSk7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IEh0bWxFZGl0b3IgZnJvbSAnLi4vLi4vY29tcG9uZW50cy9pbnRlcmFjdGlvbi9odG1sLWVkaXRvci9odG1sLWVkaXRvci5qcyc7XG5pbXBvcnQgJy4vaW9zLWh0bWwtZWRpdG9yLmxlc3MnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSW9zSHRtbEVkaXRvciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgY29udGVudDogUHJvcFR5cGVzLnN0cmluZ1xuICB9O1xuXG4gIGxhc3RDdXJzb3JZID0gLTE7XG5cbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGNvbnRlbnQ6IHByb3BzLmNvbnRlbnRcbiAgICB9XG4gIH1cblxuICBVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXdQcm9wcykge1xuICAgIGlmIChuZXdQcm9wcy5hY3Rpb24pIHtcbiAgICAgIHRoaXMuaGFuZGxlQWN0aW9uKG5ld1Byb3BzLmFjdGlvbik7XG4gICAgfVxuXG4gICAgaWYgKG5ld1Byb3BzLmNvbnRlbnQpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBjb250ZW50OiBuZXdQcm9wcy5jb250ZW50XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxIdG1sRWRpdG9yXG4gICAgICAgIGNvbnRlbnQ9e3RoaXMuc3RhdGUuY29udGVudH1cbiAgICAgICAgcGxhY2Vob2xkZXI9XCJUeXBlIHlvdXIgdGV4dCBoZXJlXCJcbiAgICAgICAgb25Cb3VuZD17dGhpcy5oYW5kbGVCb3VuZC5iaW5kKHRoaXMpfVxuICAgICAgICBvbkNoYW5nZT17dGhpcy5oYW5kbGVDb250ZW50Q2hhbmdlLmJpbmQodGhpcyl9XG4gICAgICAgIG9uQ3Vyc29yQ2hhbmdlPXt0aGlzLmhhbmRsZUN1cnNvckNoYW5nZS5iaW5kKHRoaXMpfVxuICAgICAgICBvbkZvY3VzPXt0aGlzLmhhbmRsZUZvY3VzLmJpbmQodGhpcyl9XG4gICAgICAvPlxuICAgICk7XG4gIH1cblxuICBoYW5kbGVCb3VuZChlZGl0b3I6SHRtbEVkaXRvcikge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgZWRpdG9yOiBlZGl0b3JcbiAgICB9KTtcbiAgfVxuXG4gIGhhbmRsZUNvbnRlbnRDaGFuZ2UobmV3Q29udGVudCkge1xuICAgIHRoaXMubmV3Q29udGVudCA9IG5ld0NvbnRlbnQ7XG5cbiAgICAvLyBTZW5kIGZpcnN0IGV2ZW50IGRpcmVjdGx5LiBPdGhlcndpc2Ugd2UgZGVib3VuY2VcbiAgICBpZiAoIXRoaXMub25jZVJlcG9ydGVkKSB7XG4gICAgICB0aGlzLm9uY2VSZXBvcnRlZCA9IHRydWU7XG4gICAgICBzZW5kSW9zKHtcbiAgICAgICAgY29udGVudDogbmV3Q29udGVudFxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGRlYm91bmNlcyBldmVudCB0byBpb3NcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBpZiAodGhpcy5uZXdDb250ZW50ID09PSBuZXdDb250ZW50KSB7XG4gICAgICAgICAgc2VuZElvcyh7XG4gICAgICAgICAgICBjb250ZW50OiBuZXdDb250ZW50XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0sIDUwMCk7XG4gICAgfVxuXG4gICAgdGhpcy5zZW5kQ3Vyc29yKCk7XG4gIH1cblxuICBoYW5kbGVDdXJzb3JDaGFuZ2UoKSB7XG4gICAgdGhpcy5zZW5kQ3Vyc29yKCk7XG4gIH1cblxuICBoYW5kbGVGb2N1cyhlKSB7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aGlzLmhhbmRsZUN1cnNvckNoYW5nZSgpO1xuICAgIH0sIDEwMCk7XG4gIH1cblxuICBzZW5kQ3Vyc29yKCkge1xuICAgIGxldCBjb250ZW50RG9jID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2lmcmFtZScpWzBdLmNvbnRlbnREb2N1bWVudDtcbiAgICBpZiAoY29udGVudERvYykge1xuICAgICAgbGV0IHJhbmdlID0gY29udGVudERvYy5nZXRTZWxlY3Rpb24oKS5nZXRSYW5nZUF0KDApO1xuICAgICAgbGV0IHJlY3RzID0gcmFuZ2UuZ2V0Q2xpZW50UmVjdHMoKTtcbiAgICAgIGlmICghXy5pc0VtcHR5KHJlY3RzKSkge1xuICAgICAgICBsZXQgY3Vyc29yWSA9IHJlY3RzWzBdLnRvcDtcbiAgICAgICAgaWYgKHRoaXMubGFzdEN1cnNvclkgIT0gY3Vyc29yWSkge1xuICAgICAgICAgIHNlbmRJb3Moe1xuICAgICAgICAgICAgY3Vyc29yWTogY3Vyc29yWVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHRoaXMubGFzdEN1cnNvclkgPSBjdXJzb3JZO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaGFuZGxlQWN0aW9uKG5hbWUpIHtcbiAgICBzd2l0Y2ggKG5hbWUpIHtcbiAgICBjYXNlICdib2xkJzpcbiAgICAgIHRoaXMuc3RhdGUuZWRpdG9yLnRvZ2dsZVNlbGVjdGlvblRhZygnYicpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnaXRhbGljJzpcbiAgICAgIHRoaXMuc3RhdGUuZWRpdG9yLnRvZ2dsZVNlbGVjdGlvblRhZygnaScpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnbGlzdC11bCc6XG4gICAgICB0aGlzLnN0YXRlLmVkaXRvci5tYWtlVW5vcmRlcmVkTGlzdCgpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnbGlzdC1vbCc6XG4gICAgICB0aGlzLnN0YXRlLmVkaXRvci5tYWtlT3JkZXJlZExpc3QoKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2luZGVudCc6XG4gICAgICB0aGlzLnN0YXRlLmVkaXRvci5pbmRlbnQoKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ291dGRlbnQnOlxuICAgICAgdGhpcy5zdGF0ZS5lZGl0b3Iub3V0ZGVudCgpO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIGNvbnNvbGUubG9nKCdVbmhhbmRsZWQgYWN0aW9uICcgKyBuYW1lKTtcbiAgICB9XG4gIH1cblxufVxuXG4iLCJcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgSW9zSHRtbEVkaXRvciBmcm9tICcuL2lvcy1odG1sLWVkaXRvci9pb3MtaHRtbC1lZGl0b3InO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZWFjdEJyaWRnZSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuXG4gICAgd2luZG93LnNldERhdGEgPSAoZGF0YSkgPT4ge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGRhdGE6IGRhdGEgfSk7XG4gICAgfTtcbiAgICB0aGlzLnN0YXRlID0geyBjb21wb25lbnQ6IHdpbmRvdy5jb21wb25lbnQsIGRhdGE6IG51bGwgfTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBpZiAodGhpcy5zdGF0ZS5jb21wb25lbnQgPT09ICdodG1sLWVkaXRvcicpIHtcbiAgICAgIHJldHVybiA8SW9zSHRtbEVkaXRvciB7Li4udGhpcy5zdGF0ZS5kYXRhfSAvPjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIDxkaXY+VW5rbm93biBjb21wb25lbnQge3RoaXMuc3RhdGUuY29tcG9uZW50fTwvZGl2PjtcbiAgICB9XG4gIH1cbn1cblxuIiwiXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgUmVhY3RCcmlkZ2UgZnJvbSAnLi9yZWFjdC1icmlkZ2UuanMnO1xuaW1wb3J0ICcuL2h5YnJpZC5sZXNzJztcblxuLy8gY29tbXVuaWNhdGlvbiB0byBpT1MgYXBwXG53aW5kb3cudG9Jb3NEYXRhSWQgPSAwO1xud2luZG93LnRvSW9zRGF0YSA9IHt9O1xuXG53aW5kb3cuc2VuZElvcyA9IChkYXRhKSA9PiB7XG4gIGxldCBpZCA9IHdpbmRvdy50b0lvc0RhdGFJZCsrO1xuICB3aW5kb3cudG9Jb3NEYXRhW2lkXSA9IGRhdGE7XG4gIHdpbmRvdy5sb2NhdGlvbiA9ICdleG9taW5kOi8vJyArIGlkO1xufTtcblxuLy8gRm9yIHNvbWUgcmVhc29uLCBSZWFjdCBuZWVkcyB0byBiZSBpbXBvcnRlZCBmaXJzdFxuLy8gVGhpcyBwcmV2ZW50cyB1bnVzZWQgd2FybmluZ1xud2luZG93Lm5vb3AgPSBSZWFjdDtcblxud2luZG93LmdldERhdGEgPSAoZGF0YUlkKSA9PiB7XG4gIGxldCBkYXRhID0gd2luZG93LnRvSW9zRGF0YVtkYXRhSWRdO1xuICBkZWxldGUgd2luZG93LnRvSW9zRGF0YVtkYXRhSWRdO1xuICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoZGF0YSk7XG59O1xuXG53aW5kb3cuX3N0YXJ0Q29tcG9uZW50ID0gKCkgPT4ge1xuICB0cnkge1xuICAgIFJlYWN0RE9NLnJlbmRlcig8UmVhY3RCcmlkZ2UgLz4sIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdib2R5JykpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgYWxlcnQoZSk7XG4gICAgdGhyb3coZSk7XG4gIH1cbn07XG5cbi8vIHJ1biB0aGUgYXBwbGljYXRpb24gd2hlbiBib3RoIERPTSBpcyByZWFkeSBhbmQgcGFnZSBjb250ZW50IGlzIGxvYWRlZFxuUHJvbWlzZS5hbGwoW1xuICBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgIGlmICh3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCByZXNvbHZlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgd2luZG93LmF0dGFjaEV2ZW50KCdvbmxvYWQnLCByZXNvbHZlKTtcbiAgICB9XG4gIH0pXG5dKS50aGVuKCgpID0+IHtcbiAgLy8gd2luZG93LmNvbXBvbmVudCA9ICdodG1sLWVkaXRvcic7XG4gIHdpbmRvdy5fc3RhcnRDb21wb25lbnQoKTtcbiAgc2VuZElvcygncmVhZHknKTtcbn0pO1xuXG4iLCIvKlxub2JqZWN0LWFzc2lnblxuKGMpIFNpbmRyZSBTb3JodXNcbkBsaWNlbnNlIE1JVFxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBwcm9wSXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuZnVuY3Rpb24gdG9PYmplY3QodmFsKSB7XG5cdGlmICh2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuYXNzaWduIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBudWxsIG9yIHVuZGVmaW5lZCcpO1xuXHR9XG5cblx0cmV0dXJuIE9iamVjdCh2YWwpO1xufVxuXG5mdW5jdGlvbiBzaG91bGRVc2VOYXRpdmUoKSB7XG5cdHRyeSB7XG5cdFx0aWYgKCFPYmplY3QuYXNzaWduKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZWN0IGJ1Z2d5IHByb3BlcnR5IGVudW1lcmF0aW9uIG9yZGVyIGluIG9sZGVyIFY4IHZlcnNpb25zLlxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9NDExOFxuXHRcdHZhciB0ZXN0MSA9IG5ldyBTdHJpbmcoJ2FiYycpOyAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctd3JhcHBlcnNcblx0XHR0ZXN0MVs1XSA9ICdkZSc7XG5cdFx0aWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QxKVswXSA9PT0gJzUnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MiA9IHt9O1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgMTA7IGkrKykge1xuXHRcdFx0dGVzdDJbJ18nICsgU3RyaW5nLmZyb21DaGFyQ29kZShpKV0gPSBpO1xuXHRcdH1cblx0XHR2YXIgb3JkZXIyID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDIpLm1hcChmdW5jdGlvbiAobikge1xuXHRcdFx0cmV0dXJuIHRlc3QyW25dO1xuXHRcdH0pO1xuXHRcdGlmIChvcmRlcjIuam9pbignJykgIT09ICcwMTIzNDU2Nzg5Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDMgPSB7fTtcblx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChsZXR0ZXIpIHtcblx0XHRcdHRlc3QzW2xldHRlcl0gPSBsZXR0ZXI7XG5cdFx0fSk7XG5cdFx0aWYgKE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIHRlc3QzKSkuam9pbignJykgIT09XG5cdFx0XHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0Ly8gV2UgZG9uJ3QgZXhwZWN0IGFueSBvZiB0aGUgYWJvdmUgdG8gdGhyb3csIGJ1dCBiZXR0ZXIgdG8gYmUgc2FmZS5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaG91bGRVc2VOYXRpdmUoKSA/IE9iamVjdC5hc3NpZ24gOiBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcblx0dmFyIGZyb207XG5cdHZhciB0byA9IHRvT2JqZWN0KHRhcmdldCk7XG5cdHZhciBzeW1ib2xzO1xuXG5cdGZvciAodmFyIHMgPSAxOyBzIDwgYXJndW1lbnRzLmxlbmd0aDsgcysrKSB7XG5cdFx0ZnJvbSA9IE9iamVjdChhcmd1bWVudHNbc10pO1xuXG5cdFx0Zm9yICh2YXIga2V5IGluIGZyb20pIHtcblx0XHRcdGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGZyb20sIGtleSkpIHtcblx0XHRcdFx0dG9ba2V5XSA9IGZyb21ba2V5XTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG5cdFx0XHRzeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGZyb20pO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzeW1ib2xzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmIChwcm9wSXNFbnVtZXJhYmxlLmNhbGwoZnJvbSwgc3ltYm9sc1tpXSkpIHtcblx0XHRcdFx0XHR0b1tzeW1ib2xzW2ldXSA9IGZyb21bc3ltYm9sc1tpXV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdG87XG59O1xuIiwiIWZ1bmN0aW9uKGUsdCl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gbihlLHQsbil7dGhpcy5yb290PXRoaXMuY3VycmVudE5vZGU9ZSx0aGlzLm5vZGVUeXBlPXQsdGhpcy5maWx0ZXI9bnx8Y2V9ZnVuY3Rpb24gbyhlLHQpe2Zvcih2YXIgbj1lLmxlbmd0aDtuLS07KWlmKCF0KGVbbl0pKXJldHVybiExO3JldHVybiEwfWZ1bmN0aW9uIGkoZSl7cmV0dXJuIGUubm9kZVR5cGU9PT13JiYhIXVlW2Uubm9kZU5hbWVdfWZ1bmN0aW9uIHIoZSl7c3dpdGNoKGUubm9kZVR5cGUpe2Nhc2UgRjpyZXR1cm4gcGU7Y2FzZSB3OmNhc2UgSDppZihhZSYmdmUuaGFzKGUpKXJldHVybiB2ZS5nZXQoZSk7YnJlYWs7ZGVmYXVsdDpyZXR1cm4gZmV9dmFyIHQ7cmV0dXJuIHQ9byhlLmNoaWxkTm9kZXMsYSk/aGUudGVzdChlLm5vZGVOYW1lKT9wZTpnZTptZSxhZSYmdmUuc2V0KGUsdCksdH1mdW5jdGlvbiBhKGUpe3JldHVybiByKGUpPT09cGV9ZnVuY3Rpb24gcyhlKXtyZXR1cm4gcihlKT09PWdlfWZ1bmN0aW9uIGQoZSl7cmV0dXJuIHIoZSk9PT1tZX1mdW5jdGlvbiBsKGUsdCl7dmFyIG89bmV3IG4odCxXLHMpO3JldHVybiBvLmN1cnJlbnROb2RlPWUsb31mdW5jdGlvbiBjKGUsdCl7cmV0dXJuIGU9bChlLHQpLnByZXZpb3VzTm9kZSgpLGUhPT10P2U6bnVsbH1mdW5jdGlvbiBoKGUsdCl7cmV0dXJuIGU9bChlLHQpLm5leHROb2RlKCksZSE9PXQ/ZTpudWxsfWZ1bmN0aW9uIHUoZSl7cmV0dXJuIWUudGV4dENvbnRlbnQmJiFlLnF1ZXJ5U2VsZWN0b3IoXCJJTUdcIil9ZnVuY3Rpb24gZihlLHQpe3JldHVybiFpKGUpJiZlLm5vZGVUeXBlPT09dC5ub2RlVHlwZSYmZS5ub2RlTmFtZT09PXQubm9kZU5hbWUmJlwiQVwiIT09ZS5ub2RlTmFtZSYmZS5jbGFzc05hbWU9PT10LmNsYXNzTmFtZSYmKCFlLnN0eWxlJiYhdC5zdHlsZXx8ZS5zdHlsZS5jc3NUZXh0PT09dC5zdHlsZS5jc3NUZXh0KX1mdW5jdGlvbiBwKGUsdCxuKXtpZihlLm5vZGVOYW1lIT09dClyZXR1cm4hMTtmb3IodmFyIG8gaW4gbilpZihlLmdldEF0dHJpYnV0ZShvKSE9PW5bb10pcmV0dXJuITE7cmV0dXJuITB9ZnVuY3Rpb24gZyhlLHQsbixvKXtmb3IoO2UmJmUhPT10Oyl7aWYocChlLG4sbykpcmV0dXJuIGU7ZT1lLnBhcmVudE5vZGV9cmV0dXJuIG51bGx9ZnVuY3Rpb24gbShlLHQpe2Zvcig7dDspe2lmKHQ9PT1lKXJldHVybiEwO3Q9dC5wYXJlbnROb2RlfXJldHVybiExfWZ1bmN0aW9uIHYoZSx0LG4pe3ZhciBvLGkscixhLHMsZD1cIlwiO3JldHVybiBlJiZlIT09dCYmKGQ9dihlLnBhcmVudE5vZGUsdCxuKSxlLm5vZGVUeXBlPT09dyYmKGQrPShkP1wiPlwiOlwiXCIpK2Uubm9kZU5hbWUsKG89ZS5pZCkmJihkKz1cIiNcIitvKSwoaT1lLmNsYXNzTmFtZS50cmltKCkpJiYocj1pLnNwbGl0KC9cXHNcXHMqLyksci5zb3J0KCksZCs9XCIuXCIsZCs9ci5qb2luKFwiLlwiKSksKGE9ZS5kaXIpJiYoZCs9XCJbZGlyPVwiK2ErXCJdXCIpLHImJihzPW4uY2xhc3NOYW1lcyxkZS5jYWxsKHIscy5oaWdobGlnaHQpPi0xJiYoZCs9XCJbYmFja2dyb3VuZENvbG9yPVwiK2Uuc3R5bGUuYmFja2dyb3VuZENvbG9yLnJlcGxhY2UoLyAvZyxcIlwiKStcIl1cIiksZGUuY2FsbChyLHMuY29sb3VyKT4tMSYmKGQrPVwiW2NvbG9yPVwiK2Uuc3R5bGUuY29sb3IucmVwbGFjZSgvIC9nLFwiXCIpK1wiXVwiKSxkZS5jYWxsKHIscy5mb250RmFtaWx5KT4tMSYmKGQrPVwiW2ZvbnRGYW1pbHk9XCIrZS5zdHlsZS5mb250RmFtaWx5LnJlcGxhY2UoLyAvZyxcIlwiKStcIl1cIiksZGUuY2FsbChyLHMuZm9udFNpemUpPi0xJiYoZCs9XCJbZm9udFNpemU9XCIrZS5zdHlsZS5mb250U2l6ZStcIl1cIikpKSksZH1mdW5jdGlvbiBDKGUpe3ZhciB0PWUubm9kZVR5cGU7cmV0dXJuIHQ9PT13fHx0PT09SD9lLmNoaWxkTm9kZXMubGVuZ3RoOmUubGVuZ3RofHwwfWZ1bmN0aW9uIF8oZSl7dmFyIHQ9ZS5wYXJlbnROb2RlO3JldHVybiB0JiZ0LnJlbW92ZUNoaWxkKGUpLGV9ZnVuY3Rpb24gTihlLHQpe3ZhciBuPWUucGFyZW50Tm9kZTtuJiZuLnJlcGxhY2VDaGlsZCh0LGUpfWZ1bmN0aW9uIFMoZSl7Zm9yKHZhciB0PWUub3duZXJEb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksbj1lLmNoaWxkTm9kZXMsbz1uP24ubGVuZ3RoOjA7by0tOyl0LmFwcGVuZENoaWxkKGUuZmlyc3RDaGlsZCk7cmV0dXJuIHR9ZnVuY3Rpb24geShlLG4sbyxpKXt2YXIgcixhLHMsZD1lLmNyZWF0ZUVsZW1lbnQobik7aWYobyBpbnN0YW5jZW9mIEFycmF5JiYoaT1vLG89bnVsbCksbylmb3IociBpbiBvKW9bcl0hPT10JiZkLnNldEF0dHJpYnV0ZShyLG9bcl0pO2lmKGkpZm9yKGE9MCxzPWkubGVuZ3RoO2E8czthKz0xKWQuYXBwZW5kQ2hpbGQoaVthXSk7cmV0dXJuIGR9ZnVuY3Rpb24gVChlLHQpe3ZhciBuLG8scj10Ll9fc3F1aXJlX18scz1lLm93bmVyRG9jdW1lbnQsZD1lO2lmKGU9PT10JiYoKG89ZS5maXJzdENoaWxkKSYmXCJCUlwiIT09by5ub2RlTmFtZXx8KG49ci5jcmVhdGVEZWZhdWx0QmxvY2soKSxvP2UucmVwbGFjZUNoaWxkKG4sbyk6ZS5hcHBlbmRDaGlsZChuKSxlPW4sbj1udWxsKSksZS5ub2RlVHlwZT09PUYpcmV0dXJuIGQ7aWYoYShlKSl7Zm9yKG89ZS5maXJzdENoaWxkO29lJiZvJiZvLm5vZGVUeXBlPT09RiYmIW8uZGF0YTspZS5yZW1vdmVDaGlsZChvKSxvPWUuZmlyc3RDaGlsZDtvfHwob2U/KG49cy5jcmVhdGVUZXh0Tm9kZSh6KSxyLl9kaWRBZGRaV1MoKSk6bj1zLmNyZWF0ZVRleHROb2RlKFwiXCIpKX1lbHNlIGlmKG5lKXtmb3IoO2Uubm9kZVR5cGUhPT1GJiYhaShlKTspe2lmKCEobz1lLmZpcnN0Q2hpbGQpKXtuPXMuY3JlYXRlVGV4dE5vZGUoXCJcIik7YnJlYWt9ZT1vfWUubm9kZVR5cGU9PT1GPy9eICskLy50ZXN0KGUuZGF0YSkmJihlLmRhdGE9XCJcIik6aShlKSYmZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShzLmNyZWF0ZVRleHROb2RlKFwiXCIpLGUpfWVsc2UgaWYoIWUucXVlcnlTZWxlY3RvcihcIkJSXCIpKWZvcihuPXkocyxcIkJSXCIpOyhvPWUubGFzdEVsZW1lbnRDaGlsZCkmJiFhKG8pOyllPW87aWYobil0cnl7ZS5hcHBlbmRDaGlsZChuKX1jYXRjaCh0KXtyLmRpZEVycm9yKHtuYW1lOlwiU3F1aXJlOiBmaXhDdXJzb3Ig4oCTwqBcIit0LG1lc3NhZ2U6XCJQYXJlbnQ6IFwiK2Uubm9kZU5hbWUrXCIvXCIrZS5pbm5lckhUTUwrXCIgYXBwZW5kQ2hpbGQ6IFwiK24ubm9kZU5hbWV9KX1yZXR1cm4gZH1mdW5jdGlvbiBFKGUsdCl7dmFyIG4sbyxpLHIscz1lLmNoaWxkTm9kZXMsbD1lLm93bmVyRG9jdW1lbnQsYz1udWxsLGg9dC5fX3NxdWlyZV9fLl9jb25maWc7Zm9yKG49MCxvPXMubGVuZ3RoO248bztuKz0xKWk9c1tuXSxyPVwiQlJcIj09PWkubm9kZU5hbWUsIXImJmEoaSk/KGN8fChjPXkobCxoLmJsb2NrVGFnLGguYmxvY2tBdHRyaWJ1dGVzKSksYy5hcHBlbmRDaGlsZChpKSxuLT0xLG8tPTEpOihyfHxjKSYmKGN8fChjPXkobCxoLmJsb2NrVGFnLGguYmxvY2tBdHRyaWJ1dGVzKSksVChjLHQpLHI/ZS5yZXBsYWNlQ2hpbGQoYyxpKTooZS5pbnNlcnRCZWZvcmUoYyxpKSxuKz0xLG8rPTEpLGM9bnVsbCksZChpKSYmRShpLHQpO3JldHVybiBjJiZlLmFwcGVuZENoaWxkKFQoYyx0KSksZX1mdW5jdGlvbiBiKGUsdCxuLG8pe3ZhciBpLHIsYSxzPWUubm9kZVR5cGU7aWYocz09PUYmJmUhPT1uKXJldHVybiBiKGUucGFyZW50Tm9kZSxlLnNwbGl0VGV4dCh0KSxuLG8pO2lmKHM9PT13KXtpZihcIm51bWJlclwiPT10eXBlb2YgdCYmKHQ9dDxlLmNoaWxkTm9kZXMubGVuZ3RoP2UuY2hpbGROb2Rlc1t0XTpudWxsKSxlPT09bilyZXR1cm4gdDtmb3IoaT1lLnBhcmVudE5vZGUscj1lLmNsb25lTm9kZSghMSk7dDspYT10Lm5leHRTaWJsaW5nLHIuYXBwZW5kQ2hpbGQodCksdD1hO3JldHVyblwiT0xcIj09PWUubm9kZU5hbWUmJmcoZSxvLFwiQkxPQ0tRVU9URVwiKSYmKHIuc3RhcnQ9KCtlLnN0YXJ0fHwxKStlLmNoaWxkTm9kZXMubGVuZ3RoLTEpLFQoZSxvKSxUKHIsbyksKGE9ZS5uZXh0U2libGluZyk/aS5pbnNlcnRCZWZvcmUocixhKTppLmFwcGVuZENoaWxkKHIpLGIoaSxyLG4sbyl9cmV0dXJuIHR9ZnVuY3Rpb24geChlLHQpe2Zvcih2YXIgbixvLGkscj1lLmNoaWxkTm9kZXMscz1yLmxlbmd0aCxkPVtdO3MtLTspaWYobj1yW3NdLG89cyYmcltzLTFdLHMmJmEobikmJmYobixvKSYmIXVlW24ubm9kZU5hbWVdKXQuc3RhcnRDb250YWluZXI9PT1uJiYodC5zdGFydENvbnRhaW5lcj1vLHQuc3RhcnRPZmZzZXQrPUMobykpLHQuZW5kQ29udGFpbmVyPT09biYmKHQuZW5kQ29udGFpbmVyPW8sdC5lbmRPZmZzZXQrPUMobykpLHQuc3RhcnRDb250YWluZXI9PT1lJiYodC5zdGFydE9mZnNldD5zP3Quc3RhcnRPZmZzZXQtPTE6dC5zdGFydE9mZnNldD09PXMmJih0LnN0YXJ0Q29udGFpbmVyPW8sdC5zdGFydE9mZnNldD1DKG8pKSksdC5lbmRDb250YWluZXI9PT1lJiYodC5lbmRPZmZzZXQ+cz90LmVuZE9mZnNldC09MTp0LmVuZE9mZnNldD09PXMmJih0LmVuZENvbnRhaW5lcj1vLHQuZW5kT2Zmc2V0PUMobykpKSxfKG4pLG4ubm9kZVR5cGU9PT1GP28uYXBwZW5kRGF0YShuLmRhdGEpOmQucHVzaChTKG4pKTtlbHNlIGlmKG4ubm9kZVR5cGU9PT13KXtmb3IoaT1kLmxlbmd0aDtpLS07KW4uYXBwZW5kQ2hpbGQoZC5wb3AoKSk7eChuLHQpfX1mdW5jdGlvbiBrKGUsdCl7aWYoZS5ub2RlVHlwZT09PUYmJihlPWUucGFyZW50Tm9kZSksZS5ub2RlVHlwZT09PXcpe3ZhciBuPXtzdGFydENvbnRhaW5lcjp0LnN0YXJ0Q29udGFpbmVyLHN0YXJ0T2Zmc2V0OnQuc3RhcnRPZmZzZXQsZW5kQ29udGFpbmVyOnQuZW5kQ29udGFpbmVyLGVuZE9mZnNldDp0LmVuZE9mZnNldH07eChlLG4pLHQuc2V0U3RhcnQobi5zdGFydENvbnRhaW5lcixuLnN0YXJ0T2Zmc2V0KSx0LnNldEVuZChuLmVuZENvbnRhaW5lcixuLmVuZE9mZnNldCl9fWZ1bmN0aW9uIEEoZSx0LG4sbyl7Zm9yKHZhciBpLHIsYSxzPXQ7KGk9cy5wYXJlbnROb2RlKSYmaSE9PW8mJmkubm9kZVR5cGU9PT13JiYxPT09aS5jaGlsZE5vZGVzLmxlbmd0aDspcz1pO18ocyksYT1lLmNoaWxkTm9kZXMubGVuZ3RoLHI9ZS5sYXN0Q2hpbGQsciYmXCJCUlwiPT09ci5ub2RlTmFtZSYmKGUucmVtb3ZlQ2hpbGQociksYS09MSksZS5hcHBlbmRDaGlsZChTKHQpKSxuLnNldFN0YXJ0KGUsYSksbi5jb2xsYXBzZSghMCksayhlLG4pLFkmJihyPWUubGFzdENoaWxkKSYmXCJCUlwiPT09ci5ub2RlTmFtZSYmZS5yZW1vdmVDaGlsZChyKX1mdW5jdGlvbiBMKGUsdCl7dmFyIG4sbyxpPWUucHJldmlvdXNTaWJsaW5nLHI9ZS5maXJzdENoaWxkLGE9ZS5vd25lckRvY3VtZW50LHM9XCJMSVwiPT09ZS5ub2RlTmFtZTtpZighc3x8ciYmL15bT1VdTCQvLnRlc3Qoci5ub2RlTmFtZSkpaWYoaSYmZihpLGUpKXtpZighZChpKSl7aWYoIXMpcmV0dXJuO289eShhLFwiRElWXCIpLG8uYXBwZW5kQ2hpbGQoUyhpKSksaS5hcHBlbmRDaGlsZChvKX1fKGUpLG49IWQoZSksaS5hcHBlbmRDaGlsZChTKGUpKSxuJiZFKGksdCksciYmTChyLHQpfWVsc2UgcyYmKGk9eShhLFwiRElWXCIpLGUuaW5zZXJ0QmVmb3JlKGksciksVChpLHQpKX1mdW5jdGlvbiBCKGUpe3RoaXMuaXNTaGlmdERvd249ZS5zaGlmdEtleX1mdW5jdGlvbiBPKGUsdCxuKXt2YXIgbyxpO2lmKGV8fChlPXt9KSx0KWZvcihvIGluIHQpIW4mJm8gaW4gZXx8KGk9dFtvXSxlW29dPWkmJmkuY29uc3RydWN0b3I9PT1PYmplY3Q/TyhlW29dLGksbik6aSk7cmV0dXJuIGV9ZnVuY3Rpb24gUihlLHQpe2Uubm9kZVR5cGU9PT1NJiYoZT1lLmJvZHkpO3ZhciBuLG89ZS5vd25lckRvY3VtZW50LGk9by5kZWZhdWx0Vmlldzt0aGlzLl93aW49aSx0aGlzLl9kb2M9byx0aGlzLl9yb290PWUsdGhpcy5fZXZlbnRzPXt9LHRoaXMuX2lzRm9jdXNlZD0hMSx0aGlzLl9sYXN0U2VsZWN0aW9uPW51bGwsaWUmJnRoaXMuYWRkRXZlbnRMaXN0ZW5lcihcImJlZm9yZWRlYWN0aXZhdGVcIix0aGlzLmdldFNlbGVjdGlvbiksdGhpcy5faGFzWldTPSExLHRoaXMuX2xhc3RBbmNob3JOb2RlPW51bGwsdGhpcy5fbGFzdEZvY3VzTm9kZT1udWxsLHRoaXMuX3BhdGg9XCJcIix0aGlzLl93aWxsVXBkYXRlUGF0aD0hMSxcIm9uc2VsZWN0aW9uY2hhbmdlXCJpbiBvP3RoaXMuYWRkRXZlbnRMaXN0ZW5lcihcInNlbGVjdGlvbmNoYW5nZVwiLHRoaXMuX3VwZGF0ZVBhdGhPbkV2ZW50KToodGhpcy5hZGRFdmVudExpc3RlbmVyKFwia2V5dXBcIix0aGlzLl91cGRhdGVQYXRoT25FdmVudCksdGhpcy5hZGRFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLHRoaXMuX3VwZGF0ZVBhdGhPbkV2ZW50KSksdGhpcy5fdW5kb0luZGV4PS0xLHRoaXMuX3VuZG9TdGFjaz1bXSx0aGlzLl91bmRvU3RhY2tMZW5ndGg9MCx0aGlzLl9pc0luVW5kb1N0YXRlPSExLHRoaXMuX2lnbm9yZUNoYW5nZT0hMSx0aGlzLl9pZ25vcmVBbGxDaGFuZ2VzPSExLHJlPyhuPW5ldyBNdXRhdGlvbk9ic2VydmVyKHRoaXMuX2RvY1dhc0NoYW5nZWQuYmluZCh0aGlzKSksbi5vYnNlcnZlKGUse2NoaWxkTGlzdDohMCxhdHRyaWJ1dGVzOiEwLGNoYXJhY3RlckRhdGE6ITAsc3VidHJlZTohMH0pLHRoaXMuX211dGF0aW9uPW4pOnRoaXMuYWRkRXZlbnRMaXN0ZW5lcihcImtleXVwXCIsdGhpcy5fa2V5VXBEZXRlY3RDaGFuZ2UpLHRoaXMuX3Jlc3RvcmVTZWxlY3Rpb249ITEsdGhpcy5hZGRFdmVudExpc3RlbmVyKFwiYmx1clwiLEQpLHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLFApLHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoc3RhcnRcIixQKSx0aGlzLmFkZEV2ZW50TGlzdGVuZXIoXCJmb2N1c1wiLFUpLHRoaXMuX2F3YWl0aW5nUGFzdGU9ITEsdGhpcy5hZGRFdmVudExpc3RlbmVyKFY/XCJiZWZvcmVjdXRcIjpcImN1dFwiLEplKSx0aGlzLmFkZEV2ZW50TGlzdGVuZXIoXCJjb3B5XCIsZXQpLHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIixCKSx0aGlzLmFkZEV2ZW50TGlzdGVuZXIoXCJrZXl1cFwiLEIpLHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihWP1wiYmVmb3JlcGFzdGVcIjpcInBhc3RlXCIsdHQpLHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihcImRyb3BcIixudCksdGhpcy5hZGRFdmVudExpc3RlbmVyKFk/XCJrZXlwcmVzc1wiOlwia2V5ZG93blwiLFBlKSx0aGlzLl9rZXlIYW5kbGVycz1PYmplY3QuY3JlYXRlKEZlKSx0aGlzLnNldENvbmZpZyh0KSxWJiYoaS5UZXh0LnByb3RvdHlwZS5zcGxpdFRleHQ9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5vd25lckRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHRoaXMuZGF0YS5zbGljZShlKSksbj10aGlzLm5leHRTaWJsaW5nLG89dGhpcy5wYXJlbnROb2RlLGk9dGhpcy5sZW5ndGgtZTtyZXR1cm4gbj9vLmluc2VydEJlZm9yZSh0LG4pOm8uYXBwZW5kQ2hpbGQodCksaSYmdGhpcy5kZWxldGVEYXRhKGUsaSksdH0pLGUuc2V0QXR0cmlidXRlKFwiY29udGVudGVkaXRhYmxlXCIsXCJ0cnVlXCIpO3RyeXtvLmV4ZWNDb21tYW5kKFwiZW5hYmxlT2JqZWN0UmVzaXppbmdcIiwhMSxcImZhbHNlXCIpLG8uZXhlY0NvbW1hbmQoXCJlbmFibGVJbmxpbmVUYWJsZUVkaXRpbmdcIiwhMSxcImZhbHNlXCIpfWNhdGNoKGUpe31lLl9fc3F1aXJlX189dGhpcyx0aGlzLnNldEhUTUwoXCJcIil9ZnVuY3Rpb24gRCgpe3RoaXMuX3Jlc3RvcmVTZWxlY3Rpb249ITB9ZnVuY3Rpb24gUCgpe3RoaXMuX3Jlc3RvcmVTZWxlY3Rpb249ITF9ZnVuY3Rpb24gVSgpe3RoaXMuX3Jlc3RvcmVTZWxlY3Rpb24mJnRoaXMuc2V0U2VsZWN0aW9uKHRoaXMuX2xhc3RTZWxlY3Rpb24pfWZ1bmN0aW9uIEkoZSx0LG4pe3ZhciBvLGk7Zm9yKG89dC5maXJzdENoaWxkO287bz1pKXtpZihpPW8ubmV4dFNpYmxpbmcsYShvKSl7aWYoby5ub2RlVHlwZT09PUZ8fFwiQlJcIj09PW8ubm9kZU5hbWV8fFwiSU1HXCI9PT1vLm5vZGVOYW1lKXtuLmFwcGVuZENoaWxkKG8pO2NvbnRpbnVlfX1lbHNlIGlmKHMobykpe24uYXBwZW5kQ2hpbGQoZS5jcmVhdGVEZWZhdWx0QmxvY2soW0koZSxvLGUuX2RvYy5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCkpXSkpO2NvbnRpbnVlfUkoZSxvLG4pfXJldHVybiBufXZhciB3PTEsRj0zLE09OSxIPTExLFc9MSx6PVwi4oCLXCIscT1lLmRlZmF1bHRWaWV3LEs9bmF2aWdhdG9yLnVzZXJBZ2VudCxHPS9BbmRyb2lkLy50ZXN0KEspLFo9L2lQKD86YWR8aG9uZXxvZCkvLnRlc3QoSyksaj0vTWFjIE9TIFgvLnRlc3QoSyksJD0vV2luZG93cyBOVC8udGVzdChLKSxRPS9HZWNrb1xcLy8udGVzdChLKSxWPS9UcmlkZW50XFwvWzQ1Nl1cXC4vLnRlc3QoSyksWT0hIXEub3BlcmEsWD0vRWRnZVxcLy8udGVzdChLKSxKPSFYJiYvV2ViS2l0XFwvLy50ZXN0KEspLGVlPS9UcmlkZW50XFwvWzQ1NjddXFwuLy50ZXN0KEspLHRlPWo/XCJtZXRhLVwiOlwiY3RybC1cIixuZT1WfHxZLG9lPVZ8fEosaWU9VixyZT1cInVuZGVmaW5lZFwiIT10eXBlb2YgTXV0YXRpb25PYnNlcnZlcixhZT1cInVuZGVmaW5lZFwiIT10eXBlb2YgV2Vha01hcCxzZT0vW14gXFx0XFxyXFxuXS8sZGU9QXJyYXkucHJvdG90eXBlLmluZGV4T2Y7T2JqZWN0LmNyZWF0ZXx8KE9iamVjdC5jcmVhdGU9ZnVuY3Rpb24oZSl7dmFyIHQ9ZnVuY3Rpb24oKXt9O3JldHVybiB0LnByb3RvdHlwZT1lLG5ldyB0fSk7dmFyIGxlPXsxOjEsMjoyLDM6NCw4OjEyOCw5OjI1NiwxMToxMDI0fSxjZT1mdW5jdGlvbigpe3JldHVybiEwfTtuLnByb3RvdHlwZS5uZXh0Tm9kZT1mdW5jdGlvbigpe2Zvcih2YXIgZSx0PXRoaXMuY3VycmVudE5vZGUsbj10aGlzLnJvb3Qsbz10aGlzLm5vZGVUeXBlLGk9dGhpcy5maWx0ZXI7Oyl7Zm9yKGU9dC5maXJzdENoaWxkOyFlJiZ0JiZ0IT09bjspKGU9dC5uZXh0U2libGluZyl8fCh0PXQucGFyZW50Tm9kZSk7aWYoIWUpcmV0dXJuIG51bGw7aWYobGVbZS5ub2RlVHlwZV0mbyYmaShlKSlyZXR1cm4gdGhpcy5jdXJyZW50Tm9kZT1lLGU7dD1lfX0sbi5wcm90b3R5cGUucHJldmlvdXNOb2RlPWZ1bmN0aW9uKCl7Zm9yKHZhciBlLHQ9dGhpcy5jdXJyZW50Tm9kZSxuPXRoaXMucm9vdCxvPXRoaXMubm9kZVR5cGUsaT10aGlzLmZpbHRlcjs7KXtpZih0PT09bilyZXR1cm4gbnVsbDtpZihlPXQucHJldmlvdXNTaWJsaW5nKWZvcig7dD1lLmxhc3RDaGlsZDspZT10O2Vsc2UgZT10LnBhcmVudE5vZGU7aWYoIWUpcmV0dXJuIG51bGw7aWYobGVbZS5ub2RlVHlwZV0mbyYmaShlKSlyZXR1cm4gdGhpcy5jdXJyZW50Tm9kZT1lLGU7dD1lfX0sbi5wcm90b3R5cGUucHJldmlvdXNQT05vZGU9ZnVuY3Rpb24oKXtmb3IodmFyIGUsdD10aGlzLmN1cnJlbnROb2RlLG49dGhpcy5yb290LG89dGhpcy5ub2RlVHlwZSxpPXRoaXMuZmlsdGVyOzspe2ZvcihlPXQubGFzdENoaWxkOyFlJiZ0JiZ0IT09bjspKGU9dC5wcmV2aW91c1NpYmxpbmcpfHwodD10LnBhcmVudE5vZGUpO2lmKCFlKXJldHVybiBudWxsO2lmKGxlW2Uubm9kZVR5cGVdJm8mJmkoZSkpcmV0dXJuIHRoaXMuY3VycmVudE5vZGU9ZSxlO3Q9ZX19O3ZhciBoZT0vXig/OiN0ZXh0fEEoPzpCQlJ8Q1JPTllNKT98Qig/OlJ8RFtJT10pP3xDKD86SVRFfE9ERSl8RCg/OkFUQXxFTHxGTil8RU18Rk9OVHxIUnxJKD86RlJBTUV8TUd8TlBVVHxOUyk/fEtCRHxRfFIoPzpQfFR8VUJZKXxTKD86QU1QfE1BTEx8UEFOfFRSKD86SUtFfE9ORyl8VVtCUF0pP3xUSU1FfFV8VkFSfFdCUikkLyx1ZT17QlI6MSxIUjoxLElGUkFNRToxLElNRzoxLElOUFVUOjF9LGZlPTAscGU9MSxnZT0yLG1lPTMsdmU9YWU/bmV3IFdlYWtNYXA6bnVsbCxDZT1mdW5jdGlvbihlLHQpe2Zvcih2YXIgbj1lLmNoaWxkTm9kZXM7dCYmZS5ub2RlVHlwZT09PXc7KWU9blt0LTFdLG49ZS5jaGlsZE5vZGVzLHQ9bi5sZW5ndGg7cmV0dXJuIGV9LF9lPWZ1bmN0aW9uKGUsdCl7aWYoZS5ub2RlVHlwZT09PXcpe3ZhciBuPWUuY2hpbGROb2RlcztpZih0PG4ubGVuZ3RoKWU9blt0XTtlbHNle2Zvcig7ZSYmIWUubmV4dFNpYmxpbmc7KWU9ZS5wYXJlbnROb2RlO2UmJihlPWUubmV4dFNpYmxpbmcpfX1yZXR1cm4gZX0sTmU9ZnVuY3Rpb24oZSx0KXt2YXIgbixvLGkscixhPWUuc3RhcnRDb250YWluZXIscz1lLnN0YXJ0T2Zmc2V0LGQ9ZS5lbmRDb250YWluZXIsbD1lLmVuZE9mZnNldDthLm5vZGVUeXBlPT09Rj8obj1hLnBhcmVudE5vZGUsbz1uLmNoaWxkTm9kZXMscz09PWEubGVuZ3RoPyhzPWRlLmNhbGwobyxhKSsxLGUuY29sbGFwc2VkJiYoZD1uLGw9cykpOihzJiYocj1hLnNwbGl0VGV4dChzKSxkPT09YT8obC09cyxkPXIpOmQ9PT1uJiYobCs9MSksYT1yKSxzPWRlLmNhbGwobyxhKSksYT1uKTpvPWEuY2hpbGROb2RlcyxpPW8ubGVuZ3RoLHM9PT1pP2EuYXBwZW5kQ2hpbGQodCk6YS5pbnNlcnRCZWZvcmUodCxvW3NdKSxhPT09ZCYmKGwrPW8ubGVuZ3RoLWkpLGUuc2V0U3RhcnQoYSxzKSxlLnNldEVuZChkLGwpfSxTZT1mdW5jdGlvbihlLHQsbil7dmFyIG89ZS5zdGFydENvbnRhaW5lcixpPWUuc3RhcnRPZmZzZXQscj1lLmVuZENvbnRhaW5lcixhPWUuZW5kT2Zmc2V0O3R8fCh0PWUuY29tbW9uQW5jZXN0b3JDb250YWluZXIpLHQubm9kZVR5cGU9PT1GJiYodD10LnBhcmVudE5vZGUpO2Zvcih2YXIgcyxkLGwsYyxoLHU9YihyLGEsdCxuKSxmPWIobyxpLHQsbikscD10Lm93bmVyRG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO2YhPT11OylzPWYubmV4dFNpYmxpbmcscC5hcHBlbmRDaGlsZChmKSxmPXM7cmV0dXJuIG89dCxpPXU/ZGUuY2FsbCh0LmNoaWxkTm9kZXMsdSk6dC5jaGlsZE5vZGVzLmxlbmd0aCxsPXQuY2hpbGROb2Rlc1tpXSxkPWwmJmwucHJldmlvdXNTaWJsaW5nLGQmJmQubm9kZVR5cGU9PT1GJiZsLm5vZGVUeXBlPT09RiYmKG89ZCxpPWQubGVuZ3RoLGM9ZC5kYXRhLGg9bC5kYXRhLFwiIFwiPT09Yy5jaGFyQXQoYy5sZW5ndGgtMSkmJlwiIFwiPT09aC5jaGFyQXQoMCkmJihoPVwiwqBcIitoLnNsaWNlKDEpKSxkLmFwcGVuZERhdGEoaCksXyhsKSksZS5zZXRTdGFydChvLGkpLGUuY29sbGFwc2UoITApLFQodCxuKSxwfSx5ZT1mdW5jdGlvbihlLHQpe3ZhciBuLG8saT1rZShlLHQpLHI9QWUoZSx0KSxhPWkhPT1yO3JldHVybiBiZShlKSx4ZShlLGkscix0KSxuPVNlKGUsbnVsbCx0KSxiZShlKSxhJiYocj1BZShlLHQpLGkmJnImJmkhPT1yJiZBKGkscixlLHQpKSxpJiZUKGksdCksbz10LmZpcnN0Q2hpbGQsbyYmXCJCUlwiIT09by5ub2RlTmFtZT9lLmNvbGxhcHNlKCEwKTooVCh0LHQpLGUuc2VsZWN0Tm9kZUNvbnRlbnRzKHQuZmlyc3RDaGlsZCkpLG59LFRlPWZ1bmN0aW9uKGUsdCxuKXt2YXIgbyxpLHIscyxsLGYscCxtLHYsTixTO2ZvcihFKHQsbiksbz10O289aChvLG4pOylUKG8sbik7aWYoZS5jb2xsYXBzZWR8fHllKGUsbiksYmUoZSksZS5jb2xsYXBzZSghMSkscz1nKGUuZW5kQ29udGFpbmVyLG4sXCJCTE9DS1FVT1RFXCIpfHxuLGk9a2UoZSxuKSxtPWgodCx0KSxwPSEhaSYmdShpKSxpJiZtJiYhcCYmIWcobSx0LFwiUFJFXCIpJiYhZyhtLHQsXCJUQUJMRVwiKSl7aWYoeGUoZSxpLGksbiksZS5jb2xsYXBzZSghMCksbD1lLmVuZENvbnRhaW5lcixmPWUuZW5kT2Zmc2V0LFllKGksbiwhMSksYShsKSYmKHY9YihsLGYsYyhsLG4pLG4pLGw9di5wYXJlbnROb2RlLGY9ZGUuY2FsbChsLmNoaWxkTm9kZXMsdikpLGYhPT1DKGwpKWZvcihyPW4ub3duZXJEb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7bz1sLmNoaWxkTm9kZXNbZl07KXIuYXBwZW5kQ2hpbGQobyk7QShsLG0sZSxuKSxmPWRlLmNhbGwobC5wYXJlbnROb2RlLmNoaWxkTm9kZXMsbCkrMSxsPWwucGFyZW50Tm9kZSxlLnNldEVuZChsLGYpfUModCkmJihwJiYoZS5zZXRFbmRCZWZvcmUoaSksZS5jb2xsYXBzZSghMSksXyhpKSkseGUoZSxzLHMsbiksdj1iKGUuZW5kQ29udGFpbmVyLGUuZW5kT2Zmc2V0LHMsbiksTj12P3YucHJldmlvdXNTaWJsaW5nOnMubGFzdENoaWxkLHMuaW5zZXJ0QmVmb3JlKHQsdiksdj9lLnNldEVuZEJlZm9yZSh2KTplLnNldEVuZChzLEMocykpLGk9QWUoZSxuKSxiZShlKSxsPWUuZW5kQ29udGFpbmVyLGY9ZS5lbmRPZmZzZXQsdiYmZCh2KSYmTCh2LG4pLHY9TiYmTi5uZXh0U2libGluZyx2JiZkKHYpJiZMKHYsbiksZS5zZXRFbmQobCxmKSksciYmKFM9ZS5jbG9uZVJhbmdlKCksQShpLHIsUyxuKSxlLnNldEVuZChTLmVuZENvbnRhaW5lcixTLmVuZE9mZnNldCkpLGJlKGUpfSxFZT1mdW5jdGlvbihlLHQsbil7dmFyIG89dC5vd25lckRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7aWYoby5zZWxlY3ROb2RlKHQpLG4pe3ZhciBpPWUuY29tcGFyZUJvdW5kYXJ5UG9pbnRzKDMsbyk+LTEscj1lLmNvbXBhcmVCb3VuZGFyeVBvaW50cygxLG8pPDE7cmV0dXJuIWkmJiFyfXZhciBhPWUuY29tcGFyZUJvdW5kYXJ5UG9pbnRzKDAsbyk8MSxzPWUuY29tcGFyZUJvdW5kYXJ5UG9pbnRzKDIsbyk+LTE7cmV0dXJuIGEmJnN9LGJlPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdCxuPWUuc3RhcnRDb250YWluZXIsbz1lLnN0YXJ0T2Zmc2V0LHI9ZS5lbmRDb250YWluZXIsYT1lLmVuZE9mZnNldCxzPSEwO24ubm9kZVR5cGUhPT1GJiYodD1uLmNoaWxkTm9kZXNbb10pJiYhaSh0KTspbj10LG89MDtpZihhKWZvcig7ci5ub2RlVHlwZSE9PUY7KXtpZighKHQ9ci5jaGlsZE5vZGVzW2EtMV0pfHxpKHQpKXtpZihzJiZ0JiZcIkJSXCI9PT10Lm5vZGVOYW1lKXthLT0xLHM9ITE7Y29udGludWV9YnJlYWt9cj10LGE9QyhyKX1lbHNlIGZvcig7ci5ub2RlVHlwZSE9PUYmJih0PXIuZmlyc3RDaGlsZCkmJiFpKHQpOylyPXQ7ZS5jb2xsYXBzZWQ/KGUuc2V0U3RhcnQocixhKSxlLnNldEVuZChuLG8pKTooZS5zZXRTdGFydChuLG8pLGUuc2V0RW5kKHIsYSkpfSx4ZT1mdW5jdGlvbihlLHQsbixvKXt2YXIgaSxyPWUuc3RhcnRDb250YWluZXIsYT1lLnN0YXJ0T2Zmc2V0LHM9ZS5lbmRDb250YWluZXIsZD1lLmVuZE9mZnNldCxsPSEwO2Zvcih0fHwodD1lLmNvbW1vbkFuY2VzdG9yQ29udGFpbmVyKSxufHwobj10KTshYSYmciE9PXQmJnIhPT1vOylpPXIucGFyZW50Tm9kZSxhPWRlLmNhbGwoaS5jaGlsZE5vZGVzLHIpLHI9aTtmb3IoOzspe2lmKGwmJnMubm9kZVR5cGUhPT1GJiZzLmNoaWxkTm9kZXNbZF0mJlwiQlJcIj09PXMuY2hpbGROb2Rlc1tkXS5ub2RlTmFtZSYmKGQrPTEsbD0hMSkscz09PW58fHM9PT1vfHxkIT09QyhzKSlicmVhaztpPXMucGFyZW50Tm9kZSxkPWRlLmNhbGwoaS5jaGlsZE5vZGVzLHMpKzEscz1pfWUuc2V0U3RhcnQocixhKSxlLnNldEVuZChzLGQpfSxrZT1mdW5jdGlvbihlLHQpe3ZhciBuLG89ZS5zdGFydENvbnRhaW5lcjtyZXR1cm4gYShvKT9uPWMobyx0KTpvIT09dCYmcyhvKT9uPW86KG49Q2UobyxlLnN0YXJ0T2Zmc2V0KSxuPWgobix0KSksbiYmRWUoZSxuLCEwKT9uOm51bGx9LEFlPWZ1bmN0aW9uKGUsdCl7dmFyIG4sbyxpPWUuZW5kQ29udGFpbmVyO2lmKGEoaSkpbj1jKGksdCk7ZWxzZSBpZihpIT09dCYmcyhpKSluPWk7ZWxzZXtpZighKG49X2UoaSxlLmVuZE9mZnNldCkpfHwhbSh0LG4pKWZvcihuPXQ7bz1uLmxhc3RDaGlsZDspbj1vO249YyhuLHQpfXJldHVybiBuJiZFZShlLG4sITApP246bnVsbH0sTGU9bmV3IG4obnVsbCw0fFcsZnVuY3Rpb24oZSl7cmV0dXJuIGUubm9kZVR5cGU9PT1GP3NlLnRlc3QoZS5kYXRhKTpcIklNR1wiPT09ZS5ub2RlTmFtZX0pLEJlPWZ1bmN0aW9uKGUsdCl7dmFyIG4sbz1lLnN0YXJ0Q29udGFpbmVyLGk9ZS5zdGFydE9mZnNldDtpZihMZS5yb290PW51bGwsby5ub2RlVHlwZT09PUYpe2lmKGkpcmV0dXJuITE7bj1vfWVsc2UgaWYobj1fZShvLGkpLG4mJiFtKHQsbikmJihuPW51bGwpLCFuJiYobj1DZShvLGkpLG4ubm9kZVR5cGU9PT1GJiZuLmxlbmd0aCkpcmV0dXJuITE7cmV0dXJuIExlLmN1cnJlbnROb2RlPW4sTGUucm9vdD1rZShlLHQpLCFMZS5wcmV2aW91c05vZGUoKX0sT2U9ZnVuY3Rpb24oZSx0KXt2YXIgbixvPWUuZW5kQ29udGFpbmVyLGk9ZS5lbmRPZmZzZXQ7aWYoTGUucm9vdD1udWxsLG8ubm9kZVR5cGU9PT1GKXtpZigobj1vLmRhdGEubGVuZ3RoKSYmaTxuKXJldHVybiExO0xlLmN1cnJlbnROb2RlPW99ZWxzZSBMZS5jdXJyZW50Tm9kZT1DZShvLGkpO3JldHVybiBMZS5yb290PUFlKGUsdCksIUxlLm5leHROb2RlKCl9LFJlPWZ1bmN0aW9uKGUsdCl7dmFyIG4sbz1rZShlLHQpLGk9QWUoZSx0KTtvJiZpJiYobj1vLnBhcmVudE5vZGUsZS5zZXRTdGFydChuLGRlLmNhbGwobi5jaGlsZE5vZGVzLG8pKSxuPWkucGFyZW50Tm9kZSxlLnNldEVuZChuLGRlLmNhbGwobi5jaGlsZE5vZGVzLGkpKzEpKX0sRGU9ezg6XCJiYWNrc3BhY2VcIiw5OlwidGFiXCIsMTM6XCJlbnRlclwiLDMyOlwic3BhY2VcIiwzMzpcInBhZ2V1cFwiLDM0OlwicGFnZWRvd25cIiwzNzpcImxlZnRcIiwzOTpcInJpZ2h0XCIsNDY6XCJkZWxldGVcIiwyMTk6XCJbXCIsMjIxOlwiXVwifSxQZT1mdW5jdGlvbihlKXt2YXIgdD1lLmtleUNvZGUsbj1EZVt0XSxvPVwiXCIsaT10aGlzLmdldFNlbGVjdGlvbigpO2UuZGVmYXVsdFByZXZlbnRlZHx8KG58fChuPVN0cmluZy5mcm9tQ2hhckNvZGUodCkudG9Mb3dlckNhc2UoKSwvXltBLVphLXowLTldJC8udGVzdChuKXx8KG49XCJcIikpLFkmJjQ2PT09ZS53aGljaCYmKG49XCIuXCIpLDExMTx0JiZ0PDEyNCYmKG49XCJmXCIrKHQtMTExKSksXCJiYWNrc3BhY2VcIiE9PW4mJlwiZGVsZXRlXCIhPT1uJiYoZS5hbHRLZXkmJihvKz1cImFsdC1cIiksZS5jdHJsS2V5JiYobys9XCJjdHJsLVwiKSxlLm1ldGFLZXkmJihvKz1cIm1ldGEtXCIpKSxlLnNoaWZ0S2V5JiYobys9XCJzaGlmdC1cIiksbj1vK24sdGhpcy5fa2V5SGFuZGxlcnNbbl0/dGhpcy5fa2V5SGFuZGxlcnNbbl0odGhpcyxlLGkpOmkuY29sbGFwc2VkfHxlLmlzQ29tcG9zaW5nfHxlLmN0cmxLZXl8fGUubWV0YUtleXx8MSE9PShlLmtleXx8bikubGVuZ3RofHwodGhpcy5zYXZlVW5kb1N0YXRlKGkpLHllKGksdGhpcy5fcm9vdCksdGhpcy5fZW5zdXJlQm90dG9tTGluZSgpLHRoaXMuc2V0U2VsZWN0aW9uKGkpLHRoaXMuX3VwZGF0ZVBhdGgoaSwhMCkpKX0sVWU9ZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKHQsbil7bi5wcmV2ZW50RGVmYXVsdCgpLHRbZV0oKX19LEllPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQ9dHx8bnVsbCxmdW5jdGlvbihuLG8pe28ucHJldmVudERlZmF1bHQoKTt2YXIgaT1uLmdldFNlbGVjdGlvbigpO24uaGFzRm9ybWF0KGUsbnVsbCxpKT9uLmNoYW5nZUZvcm1hdChudWxsLHt0YWc6ZX0saSk6bi5jaGFuZ2VGb3JtYXQoe3RhZzplfSx0LGkpfX0sd2U9ZnVuY3Rpb24oZSx0KXt0cnl7dHx8KHQ9ZS5nZXRTZWxlY3Rpb24oKSk7dmFyIG4sbz10LnN0YXJ0Q29udGFpbmVyO2ZvcihvLm5vZGVUeXBlPT09RiYmKG89by5wYXJlbnROb2RlKSxuPW87YShuKSYmKCFuLnRleHRDb250ZW50fHxuLnRleHRDb250ZW50PT09eik7KW89bixuPW8ucGFyZW50Tm9kZTtvIT09biYmKHQuc2V0U3RhcnQobixkZS5jYWxsKG4uY2hpbGROb2RlcyxvKSksdC5jb2xsYXBzZSghMCksbi5yZW1vdmVDaGlsZChvKSxzKG4pfHwobj1jKG4sZS5fcm9vdCkpLFQobixlLl9yb290KSxiZSh0KSksbz09PWUuX3Jvb3QmJihvPW8uZmlyc3RDaGlsZCkmJlwiQlJcIj09PW8ubm9kZU5hbWUmJl8obyksZS5fZW5zdXJlQm90dG9tTGluZSgpLGUuc2V0U2VsZWN0aW9uKHQpLGUuX3VwZGF0ZVBhdGgodCwhMCl9Y2F0Y2godCl7ZS5kaWRFcnJvcih0KX19LEZlPXtlbnRlcjpmdW5jdGlvbihlLHQsbil7dmFyIG8saSxyLGEscyxkPWUuX3Jvb3Q7aWYodC5wcmV2ZW50RGVmYXVsdCgpLGUuX3JlY29yZFVuZG9TdGF0ZShuKSxfdChuLnN0YXJ0Q29udGFpbmVyLGQsZSksZS5fcmVtb3ZlWldTKCksZS5fZ2V0UmFuZ2VBbmRSZW1vdmVCb29rbWFyayhuKSxuLmNvbGxhcHNlZHx8eWUobixkKSwobz1rZShuLGQpKSYmKGk9ZyhvLGQsXCJQUkVcIikpKXJldHVybiBiZShuKSxyPW4uc3RhcnRDb250YWluZXIsYT1uLnN0YXJ0T2Zmc2V0LHIubm9kZVR5cGUhPT1GJiYocj1lLl9kb2MuY3JlYXRlVGV4dE5vZGUoXCJcIiksaS5pbnNlcnRCZWZvcmUocixpLmZpcnN0Q2hpbGQpKSx0LnNoaWZ0S2V5fHxcIlxcblwiIT09ci5kYXRhLmNoYXJBdChhLTEpJiYhQmUobixkKXx8XCJcXG5cIiE9PXIuZGF0YS5jaGFyQXQoYSkmJiFPZShuLGQpPyhyLmluc2VydERhdGEoYSxcIlxcblwiKSxUKGksZCksci5sZW5ndGg9PT1hKzE/bi5zZXRTdGFydEFmdGVyKHIpOm4uc2V0U3RhcnQocixhKzEpKTooci5kZWxldGVEYXRhKGEmJmEtMSxhPzI6MSkscz1iKHIsYSYmYS0xLGQsZCkscj1zLnByZXZpb3VzU2libGluZyxyLnRleHRDb250ZW50fHxfKHIpLHI9ZS5jcmVhdGVEZWZhdWx0QmxvY2soKSxzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHIscykscy50ZXh0Q29udGVudHx8XyhzKSxuLnNldFN0YXJ0KHIsMCkpLG4uY29sbGFwc2UoITApLGUuc2V0U2VsZWN0aW9uKG4pLGUuX3VwZGF0ZVBhdGgobiwhMCksdm9pZCBlLl9kb2NXYXNDaGFuZ2VkKCk7aWYoIW98fHQuc2hpZnRLZXl8fC9eVFtIRF0kLy50ZXN0KG8ubm9kZU5hbWUpKXJldHVybiBpPWcobi5lbmRDb250YWluZXIsZCxcIkFcIiksaSYmKGk9aS5wYXJlbnROb2RlLHhlKG4saSxpLGQpLG4uY29sbGFwc2UoITEpKSxOZShuLGUuY3JlYXRlRWxlbWVudChcIkJSXCIpKSxuLmNvbGxhcHNlKCExKSxlLnNldFNlbGVjdGlvbihuKSx2b2lkIGUuX3VwZGF0ZVBhdGgobiwhMCk7aWYoKGk9ZyhvLGQsXCJMSVwiKSkmJihvPWkpLHUobykpe2lmKGcobyxkLFwiVUxcIil8fGcobyxkLFwiT0xcIikpcmV0dXJuIGUuZGVjcmVhc2VMaXN0TGV2ZWwobik7aWYoZyhvLGQsXCJCTE9DS1FVT1RFXCIpKXJldHVybiBlLm1vZGlmeUJsb2NrcyhmdCxuKX1mb3Iocz1jdChlLG8sbi5zdGFydENvbnRhaW5lcixuLnN0YXJ0T2Zmc2V0KSxzdChvKSwkZShvKSxUKG8sZCk7cy5ub2RlVHlwZT09PXc7KXt2YXIgbCxjPXMuZmlyc3RDaGlsZDtpZihcIkFcIj09PXMubm9kZU5hbWUmJighcy50ZXh0Q29udGVudHx8cy50ZXh0Q29udGVudD09PXopKXtjPWUuX2RvYy5jcmVhdGVUZXh0Tm9kZShcIlwiKSxOKHMsYykscz1jO2JyZWFrfWZvcig7YyYmYy5ub2RlVHlwZT09PUYmJiFjLmRhdGEmJihsPWMubmV4dFNpYmxpbmcpJiZcIkJSXCIhPT1sLm5vZGVOYW1lOylfKGMpLGM9bDtpZighY3x8XCJCUlwiPT09Yy5ub2RlTmFtZXx8Yy5ub2RlVHlwZT09PUYmJiFZKWJyZWFrO3M9Y31uPWUuY3JlYXRlUmFuZ2UocywwKSxlLnNldFNlbGVjdGlvbihuKSxlLl91cGRhdGVQYXRoKG4sITApfSxcInNoaWZ0LWVudGVyXCI6ZnVuY3Rpb24oZSx0LG4pe3JldHVybiBlLl9rZXlIYW5kbGVycy5lbnRlcihlLHQsbil9LGJhY2tzcGFjZTpmdW5jdGlvbihlLHQsbil7dmFyIG89ZS5fcm9vdDtpZihlLl9yZW1vdmVaV1MoKSxlLnNhdmVVbmRvU3RhdGUobiksbi5jb2xsYXBzZWQpaWYoQmUobixvKSl7dC5wcmV2ZW50RGVmYXVsdCgpO3ZhciBpLHI9a2UobixvKTtpZighcilyZXR1cm47aWYoRShyLnBhcmVudE5vZGUsbyksaT1jKHIsbykpe2lmKCFpLmlzQ29udGVudEVkaXRhYmxlKXJldHVybiB2b2lkIF8oaSk7Zm9yKEEoaSxyLG4sbykscj1pLnBhcmVudE5vZGU7ciE9PW8mJiFyLm5leHRTaWJsaW5nOylyPXIucGFyZW50Tm9kZTtyIT09byYmKHI9ci5uZXh0U2libGluZykmJkwocixvKSxlLnNldFNlbGVjdGlvbihuKX1lbHNlIGlmKHIpe2lmKGcocixvLFwiVUxcIil8fGcocixvLFwiT0xcIikpcmV0dXJuIGUuZGVjcmVhc2VMaXN0TGV2ZWwobik7aWYoZyhyLG8sXCJCTE9DS1FVT1RFXCIpKXJldHVybiBlLm1vZGlmeUJsb2Nrcyh1dCxuKTtlLnNldFNlbGVjdGlvbihuKSxlLl91cGRhdGVQYXRoKG4sITApfX1lbHNlIGUuc2V0U2VsZWN0aW9uKG4pLHNldFRpbWVvdXQoZnVuY3Rpb24oKXt3ZShlKX0sMCk7ZWxzZSB0LnByZXZlbnREZWZhdWx0KCkseWUobixvKSx3ZShlLG4pfSxkZWxldGU6ZnVuY3Rpb24oZSx0LG4pe3ZhciBvLGkscixhLHMsZCxsPWUuX3Jvb3Q7aWYoZS5fcmVtb3ZlWldTKCksZS5zYXZlVW5kb1N0YXRlKG4pLG4uY29sbGFwc2VkKWlmKE9lKG4sbCkpe2lmKHQucHJldmVudERlZmF1bHQoKSwhKG89a2UobixsKSkpcmV0dXJuO2lmKEUoby5wYXJlbnROb2RlLGwpLGk9aChvLGwpKXtpZighaS5pc0NvbnRlbnRFZGl0YWJsZSlyZXR1cm4gdm9pZCBfKGkpO2ZvcihBKG8saSxuLGwpLGk9by5wYXJlbnROb2RlO2khPT1sJiYhaS5uZXh0U2libGluZzspaT1pLnBhcmVudE5vZGU7aSE9PWwmJihpPWkubmV4dFNpYmxpbmcpJiZMKGksbCksZS5zZXRTZWxlY3Rpb24obiksZS5fdXBkYXRlUGF0aChuLCEwKX19ZWxzZXtpZihyPW4uY2xvbmVSYW5nZSgpLHhlKG4sbCxsLGwpLGE9bi5lbmRDb250YWluZXIscz1uLmVuZE9mZnNldCxhLm5vZGVUeXBlPT09dyYmKGQ9YS5jaGlsZE5vZGVzW3NdKSYmXCJJTUdcIj09PWQubm9kZU5hbWUpcmV0dXJuIHQucHJldmVudERlZmF1bHQoKSxfKGQpLGJlKG4pLHZvaWQgd2UoZSxuKTtlLnNldFNlbGVjdGlvbihyKSxzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7d2UoZSl9LDApfWVsc2UgdC5wcmV2ZW50RGVmYXVsdCgpLHllKG4sbCksd2UoZSxuKX0sdGFiOmZ1bmN0aW9uKGUsdCxuKXt2YXIgbyxpLHI9ZS5fcm9vdDtpZihlLl9yZW1vdmVaV1MoKSxuLmNvbGxhcHNlZCYmQmUobixyKSlmb3Iobz1rZShuLHIpO2k9by5wYXJlbnROb2RlOyl7aWYoXCJVTFwiPT09aS5ub2RlTmFtZXx8XCJPTFwiPT09aS5ub2RlTmFtZSl7dC5wcmV2ZW50RGVmYXVsdCgpLGUuaW5jcmVhc2VMaXN0TGV2ZWwobik7YnJlYWt9bz1pfX0sXCJzaGlmdC10YWJcIjpmdW5jdGlvbihlLHQsbil7dmFyIG8saT1lLl9yb290O2UuX3JlbW92ZVpXUygpLG4uY29sbGFwc2VkJiZCZShuLGkpJiYobz1uLnN0YXJ0Q29udGFpbmVyLChnKG8saSxcIlVMXCIpfHxnKG8saSxcIk9MXCIpKSYmKHQucHJldmVudERlZmF1bHQoKSxlLmRlY3JlYXNlTGlzdExldmVsKG4pKSl9LHNwYWNlOmZ1bmN0aW9uKGUsdCxuKXt2YXIgbyxpPWUuX3Jvb3Q7aWYoZS5fcmVjb3JkVW5kb1N0YXRlKG4pLF90KG4uc3RhcnRDb250YWluZXIsaSxlKSxlLl9nZXRSYW5nZUFuZFJlbW92ZUJvb2ttYXJrKG4pLG89bi5lbmRDb250YWluZXIsbi5jb2xsYXBzZWQmJm4uZW5kT2Zmc2V0PT09QyhvKSlkb3tpZihcIkFcIj09PW8ubm9kZU5hbWUpe24uc2V0U3RhcnRBZnRlcihvKTticmVha319d2hpbGUoIW8ubmV4dFNpYmxpbmcmJihvPW8ucGFyZW50Tm9kZSkmJm8hPT1pKTtuLmNvbGxhcHNlZHx8KHllKG4saSksZS5fZW5zdXJlQm90dG9tTGluZSgpLGUuc2V0U2VsZWN0aW9uKG4pLGUuX3VwZGF0ZVBhdGgobiwhMCkpLGUuc2V0U2VsZWN0aW9uKG4pfSxsZWZ0OmZ1bmN0aW9uKGUpe2UuX3JlbW92ZVpXUygpfSxyaWdodDpmdW5jdGlvbihlKXtlLl9yZW1vdmVaV1MoKX19O2omJlEmJihGZVtcIm1ldGEtbGVmdFwiXT1mdW5jdGlvbihlLHQpe3QucHJldmVudERlZmF1bHQoKTt2YXIgbj1hdChlKTtuJiZuLm1vZGlmeSYmbi5tb2RpZnkoXCJtb3ZlXCIsXCJiYWNrd2FyZFwiLFwibGluZWJvdW5kYXJ5XCIpfSxGZVtcIm1ldGEtcmlnaHRcIl09ZnVuY3Rpb24oZSx0KXt0LnByZXZlbnREZWZhdWx0KCk7dmFyIG49YXQoZSk7biYmbi5tb2RpZnkmJm4ubW9kaWZ5KFwibW92ZVwiLFwiZm9yd2FyZFwiLFwibGluZWJvdW5kYXJ5XCIpfSksanx8KEZlLnBhZ2V1cD1mdW5jdGlvbihlKXtlLm1vdmVDdXJzb3JUb1N0YXJ0KCl9LEZlLnBhZ2Vkb3duPWZ1bmN0aW9uKGUpe2UubW92ZUN1cnNvclRvRW5kKCl9KSxGZVt0ZStcImJcIl09SWUoXCJCXCIpLEZlW3RlK1wiaVwiXT1JZShcIklcIiksRmVbdGUrXCJ1XCJdPUllKFwiVVwiKSxGZVt0ZStcInNoaWZ0LTdcIl09SWUoXCJTXCIpLEZlW3RlK1wic2hpZnQtNVwiXT1JZShcIlNVQlwiLHt0YWc6XCJTVVBcIn0pLEZlW3RlK1wic2hpZnQtNlwiXT1JZShcIlNVUFwiLHt0YWc6XCJTVUJcIn0pLEZlW3RlK1wic2hpZnQtOFwiXT1VZShcIm1ha2VVbm9yZGVyZWRMaXN0XCIpLEZlW3RlK1wic2hpZnQtOVwiXT1VZShcIm1ha2VPcmRlcmVkTGlzdFwiKSxGZVt0ZStcIltcIl09VWUoXCJkZWNyZWFzZVF1b3RlTGV2ZWxcIiksRmVbdGUrXCJdXCJdPVVlKFwiaW5jcmVhc2VRdW90ZUxldmVsXCIpLEZlW3RlK1wiZFwiXT1VZShcInRvZ2dsZUNvZGVcIiksRmVbdGUrXCJ5XCJdPVVlKFwicmVkb1wiKSxGZVt0ZStcInpcIl09VWUoXCJ1bmRvXCIpLEZlW3RlK1wic2hpZnQtelwiXT1VZShcInJlZG9cIik7dmFyIE1lPXsxOjEwLDI6MTMsMzoxNiw0OjE4LDU6MjQsNjozMiw3OjQ4fSxIZT17YmFja2dyb3VuZENvbG9yOntyZWdleHA6c2UscmVwbGFjZTpmdW5jdGlvbihlLHQsbil7cmV0dXJuIHkoZSxcIlNQQU5cIix7Y2xhc3M6dC5oaWdobGlnaHQsc3R5bGU6XCJiYWNrZ3JvdW5kLWNvbG9yOlwiK259KX19LGNvbG9yOntyZWdleHA6c2UscmVwbGFjZTpmdW5jdGlvbihlLHQsbil7cmV0dXJuIHkoZSxcIlNQQU5cIix7Y2xhc3M6dC5jb2xvdXIsc3R5bGU6XCJjb2xvcjpcIitufSl9fSxmb250V2VpZ2h0OntyZWdleHA6L15ib2xkfF43MDAvaSxyZXBsYWNlOmZ1bmN0aW9uKGUpe3JldHVybiB5KGUsXCJCXCIpfX0sZm9udFN0eWxlOntyZWdleHA6L15pdGFsaWMvaSxyZXBsYWNlOmZ1bmN0aW9uKGUpe3JldHVybiB5KGUsXCJJXCIpfX0sZm9udEZhbWlseTp7cmVnZXhwOnNlLHJlcGxhY2U6ZnVuY3Rpb24oZSx0LG4pe3JldHVybiB5KGUsXCJTUEFOXCIse2NsYXNzOnQuZm9udEZhbWlseSxzdHlsZTpcImZvbnQtZmFtaWx5OlwiK259KX19LGZvbnRTaXplOntyZWdleHA6c2UscmVwbGFjZTpmdW5jdGlvbihlLHQsbil7cmV0dXJuIHkoZSxcIlNQQU5cIix7Y2xhc3M6dC5mb250U2l6ZSxzdHlsZTpcImZvbnQtc2l6ZTpcIitufSl9fSx0ZXh0RGVjb3JhdGlvbjp7cmVnZXhwOi9edW5kZXJsaW5lL2kscmVwbGFjZTpmdW5jdGlvbihlKXtyZXR1cm4geShlLFwiVVwiKX19fSxXZT1mdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24odCxuKXt2YXIgbz15KHQub3duZXJEb2N1bWVudCxlKTtyZXR1cm4gbi5yZXBsYWNlQ2hpbGQobyx0KSxvLmFwcGVuZENoaWxkKFModCkpLG99fSx6ZT1mdW5jdGlvbihlLHQsbil7dmFyIG8saSxyLGEscyxkLGw9ZS5zdHlsZSxjPWUub3duZXJEb2N1bWVudDtmb3IobyBpbiBIZSlpPUhlW29dLChyPWxbb10pJiZpLnJlZ2V4cC50ZXN0KHIpJiYoZD1pLnJlcGxhY2UoYyxuLmNsYXNzTmFtZXMsciksc3x8KHM9ZCksYSYmYS5hcHBlbmRDaGlsZChkKSxhPWQsZS5zdHlsZVtvXT1cIlwiKTtyZXR1cm4gcyYmKGEuYXBwZW5kQ2hpbGQoUyhlKSksXCJTUEFOXCI9PT1lLm5vZGVOYW1lP3QucmVwbGFjZUNoaWxkKHMsZSk6ZS5hcHBlbmRDaGlsZChzKSksYXx8ZX0scWU9e1A6emUsU1BBTjp6ZSxTVFJPTkc6V2UoXCJCXCIpLEVNOldlKFwiSVwiKSxJTlM6V2UoXCJVXCIpLFNUUklLRTpXZShcIlNcIiksRk9OVDpmdW5jdGlvbihlLHQsbil7dmFyIG8saSxyLGEscyxkPWUuZmFjZSxsPWUuc2l6ZSxjPWUuY29sb3IsaD1lLm93bmVyRG9jdW1lbnQsdT1uLmNsYXNzTmFtZXM7cmV0dXJuIGQmJihvPXkoaCxcIlNQQU5cIix7Y2xhc3M6dS5mb250RmFtaWx5LHN0eWxlOlwiZm9udC1mYW1pbHk6XCIrZH0pLHM9byxhPW8pLGwmJihpPXkoaCxcIlNQQU5cIix7Y2xhc3M6dS5mb250U2l6ZSxzdHlsZTpcImZvbnQtc2l6ZTpcIitNZVtsXStcInB4XCJ9KSxzfHwocz1pKSxhJiZhLmFwcGVuZENoaWxkKGkpLGE9aSksYyYmL14jPyhbXFxkQS1GXXszfSl7MSwyfSQvaS50ZXN0KGMpJiYoXCIjXCIhPT1jLmNoYXJBdCgwKSYmKGM9XCIjXCIrYykscj15KGgsXCJTUEFOXCIse2NsYXNzOnUuY29sb3VyLHN0eWxlOlwiY29sb3I6XCIrY30pLHN8fChzPXIpLGEmJmEuYXBwZW5kQ2hpbGQociksYT1yKSxzfHwocz1hPXkoaCxcIlNQQU5cIikpLHQucmVwbGFjZUNoaWxkKHMsZSksYS5hcHBlbmRDaGlsZChTKGUpKSxhfSxUVDpmdW5jdGlvbihlLHQsbil7dmFyIG89eShlLm93bmVyRG9jdW1lbnQsXCJTUEFOXCIse2NsYXNzOm4uY2xhc3NOYW1lcy5mb250RmFtaWx5LHN0eWxlOidmb250LWZhbWlseTptZW5sbyxjb25zb2xhcyxcImNvdXJpZXIgbmV3XCIsbW9ub3NwYWNlJ30pO3JldHVybiB0LnJlcGxhY2VDaGlsZChvLGUpLG8uYXBwZW5kQ2hpbGQoUyhlKSksb319LEtlPS9eKD86QSg/OkREUkVTU3xSVElDTEV8U0lERXxVRElPKXxCTE9DS1FVT1RFfENBUFRJT058RCg/OltETFRdfElWKXxGKD86SUdVUkV8SUdDQVBUSU9OfE9PVEVSKXxIWzEtNl18SEVBREVSfEwoPzpBQkVMfEVHRU5EfEkpfE8oPzpMfFVUUFVUKXxQKD86UkUpP3xTRUNUSU9OfFQoPzpBQkxFfEJPRFl8RHxGT09UfEh8SEVBRHxSKXxDT0woPzpHUk9VUCk/fFVMKSQvLEdlPS9eKD86SEVBRHxNRVRBfFNUWUxFKS8sWmU9bmV3IG4obnVsbCw0fFcpLGplPWZ1bmN0aW9uIGUodCxuLG8pe3ZhciBpLHIscyxkLGwsYyxoLHUsZixwLGcsbSx2PXQuY2hpbGROb2Rlcztmb3IoaT10O2EoaSk7KWk9aS5wYXJlbnROb2RlO2ZvcihaZS5yb290PWkscj0wLHM9di5sZW5ndGg7cjxzO3IrPTEpaWYoZD12W3JdLGw9ZC5ub2RlTmFtZSxjPWQubm9kZVR5cGUsaD1xZVtsXSxjPT09dyl7aWYodT1kLmNoaWxkTm9kZXMubGVuZ3RoLGgpZD1oKGQsdCxuKTtlbHNle2lmKEdlLnRlc3QobCkpe3QucmVtb3ZlQ2hpbGQoZCksci09MSxzLT0xO2NvbnRpbnVlfWlmKCFLZS50ZXN0KGwpJiYhYShkKSl7ci09MSxzKz11LTEsdC5yZXBsYWNlQ2hpbGQoUyhkKSxkKTtjb250aW51ZX19dSYmZShkLG4sb3x8XCJQUkVcIj09PWwpfWVsc2V7aWYoYz09PUYpe2lmKGc9ZC5kYXRhLGY9IXNlLnRlc3QoZy5jaGFyQXQoMCkpLHA9IXNlLnRlc3QoZy5jaGFyQXQoZy5sZW5ndGgtMSkpLG98fCFmJiYhcCljb250aW51ZTtpZihmKXtmb3IoWmUuY3VycmVudE5vZGU9ZDsobT1aZS5wcmV2aW91c1BPTm9kZSgpKSYmIShcIklNR1wiPT09KGw9bS5ub2RlTmFtZSl8fFwiI3RleHRcIj09PWwmJnNlLnRlc3QobS5kYXRhKSk7KWlmKCFhKG0pKXttPW51bGw7YnJlYWt9Zz1nLnJlcGxhY2UoL15bIFxcdFxcclxcbl0rL2csbT9cIiBcIjpcIlwiKX1pZihwKXtmb3IoWmUuY3VycmVudE5vZGU9ZDsobT1aZS5uZXh0Tm9kZSgpKSYmIShcIklNR1wiPT09bHx8XCIjdGV4dFwiPT09bCYmc2UudGVzdChtLmRhdGEpKTspaWYoIWEobSkpe209bnVsbDticmVha31nPWcucmVwbGFjZSgvWyBcXHRcXHJcXG5dKyQvZyxtP1wiIFwiOlwiXCIpfWlmKGcpe2QuZGF0YT1nO2NvbnRpbnVlfX10LnJlbW92ZUNoaWxkKGQpLHItPTEscy09MX1yZXR1cm4gdH0sJGU9ZnVuY3Rpb24gZSh0KXtmb3IodmFyIG4sbz10LmNoaWxkTm9kZXMscj1vLmxlbmd0aDtyLS07KW49b1tyXSxuLm5vZGVUeXBlIT09d3x8aShuKT9uLm5vZGVUeXBlIT09Rnx8bi5kYXRhfHx0LnJlbW92ZUNoaWxkKG4pOihlKG4pLGEobikmJiFuLmZpcnN0Q2hpbGQmJnQucmVtb3ZlQ2hpbGQobikpfSxRZT1mdW5jdGlvbihlKXtyZXR1cm4gZS5ub2RlVHlwZT09PXc/XCJCUlwiPT09ZS5ub2RlTmFtZTpzZS50ZXN0KGUuZGF0YSl9LFZlPWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBvLGk9ZS5wYXJlbnROb2RlO2EoaSk7KWk9aS5wYXJlbnROb2RlO3JldHVybiBvPW5ldyBuKGksNHxXLFFlKSxvLmN1cnJlbnROb2RlPWUsISFvLm5leHROb2RlKCl8fHQmJiFvLnByZXZpb3VzTm9kZSgpfSxZZT1mdW5jdGlvbihlLHQsbil7dmFyIG8saSxyLHM9ZS5xdWVyeVNlbGVjdG9yQWxsKFwiQlJcIiksZD1bXSxsPXMubGVuZ3RoO2ZvcihvPTA7bzxsO28rPTEpZFtvXT1WZShzW29dLG4pO2Zvcig7bC0tOylpPXNbbF0sKHI9aS5wYXJlbnROb2RlKSYmKGRbbF0/YShyKXx8RShyLHQpOl8oaSkpfSxYZT1mdW5jdGlvbihlLHQsbixvKXt2YXIgaSxyLGE9dC5vd25lckRvY3VtZW50LmJvZHkscz1vLndpbGxDdXRDb3B5O1llKHQsbiwhMCksdC5zZXRBdHRyaWJ1dGUoXCJzdHlsZVwiLFwicG9zaXRpb246Zml4ZWQ7b3ZlcmZsb3c6aGlkZGVuO2JvdHRvbToxMDAlO3JpZ2h0OjEwMCU7XCIpLGEuYXBwZW5kQ2hpbGQodCksaT10LmlubmVySFRNTCxyPXQuaW5uZXJUZXh0fHx0LnRleHRDb250ZW50LHMmJihpPXMoaSkpLCQmJihyPXIucmVwbGFjZSgvXFxyP1xcbi9nLFwiXFxyXFxuXCIpKSxlLnNldERhdGEoXCJ0ZXh0L2h0bWxcIixpKSxlLnNldERhdGEoXCJ0ZXh0L3BsYWluXCIsciksYS5yZW1vdmVDaGlsZCh0KX0sSmU9ZnVuY3Rpb24oZSl7dmFyIHQsbixvLGkscixhLHMsZD1lLmNsaXBib2FyZERhdGEsbD10aGlzLmdldFNlbGVjdGlvbigpLGM9dGhpcy5fcm9vdCxoPXRoaXM7aWYobC5jb2xsYXBzZWQpcmV0dXJuIHZvaWQgZS5wcmV2ZW50RGVmYXVsdCgpO2lmKHRoaXMuc2F2ZVVuZG9TdGF0ZShsKSxYfHxafHwhZClzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dHJ5e2guX2Vuc3VyZUJvdHRvbUxpbmUoKX1jYXRjaChlKXtoLmRpZEVycm9yKGUpfX0sMCk7ZWxzZXtmb3IodD1rZShsLGMpLG49QWUobCxjKSxvPXQ9PT1uJiZ0fHxjLGk9eWUobCxjKSxyPWwuY29tbW9uQW5jZXN0b3JDb250YWluZXIsci5ub2RlVHlwZT09PUYmJihyPXIucGFyZW50Tm9kZSk7ciYmciE9PW87KWE9ci5jbG9uZU5vZGUoITEpLGEuYXBwZW5kQ2hpbGQoaSksaT1hLHI9ci5wYXJlbnROb2RlO3M9dGhpcy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLHMuYXBwZW5kQ2hpbGQoaSksWGUoZCxzLGMsdGhpcy5fY29uZmlnKSxlLnByZXZlbnREZWZhdWx0KCl9dGhpcy5zZXRTZWxlY3Rpb24obCl9LGV0PWZ1bmN0aW9uKGUpe3ZhciB0LG4sbyxpLHIsYSxzLGQ9ZS5jbGlwYm9hcmREYXRhLGw9dGhpcy5nZXRTZWxlY3Rpb24oKSxjPXRoaXMuX3Jvb3Q7aWYoIVgmJiFaJiZkKXtmb3IodD1rZShsLGMpLG49QWUobCxjKSxvPXQ9PT1uJiZ0fHxjLGw9bC5jbG9uZVJhbmdlKCksYmUobCkseGUobCxvLG8sYyksaT1sLmNsb25lQ29udGVudHMoKSxyPWwuY29tbW9uQW5jZXN0b3JDb250YWluZXIsci5ub2RlVHlwZT09PUYmJihyPXIucGFyZW50Tm9kZSk7ciYmciE9PW87KWE9ci5jbG9uZU5vZGUoITEpLGEuYXBwZW5kQ2hpbGQoaSksaT1hLHI9ci5wYXJlbnROb2RlO3M9dGhpcy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLHMuYXBwZW5kQ2hpbGQoaSksWGUoZCxzLGMsdGhpcy5fY29uZmlnKSxlLnByZXZlbnREZWZhdWx0KCl9fSx0dD1mdW5jdGlvbihlKXt2YXIgdCxuLG8saSxyLGE9ZS5jbGlwYm9hcmREYXRhLHM9YSYmYS5pdGVtcyxkPXRoaXMuaXNTaGlmdERvd24sbD0hMSxjPSExLGg9bnVsbCx1PXRoaXM7aWYoWCYmcyl7Zm9yKHQ9cy5sZW5ndGg7dC0tOykhZCYmL15pbWFnZVxcLy4qLy50ZXN0KHNbdF0udHlwZSkmJihjPSEwKTtjfHwocz1udWxsKX1pZihzKXtmb3IoZS5wcmV2ZW50RGVmYXVsdCgpLHQ9cy5sZW5ndGg7dC0tOyl7aWYobj1zW3RdLG89bi50eXBlLCFkJiZcInRleHQvaHRtbFwiPT09bylyZXR1cm4gdm9pZCBuLmdldEFzU3RyaW5nKGZ1bmN0aW9uKGUpe3UuaW5zZXJ0SFRNTChlLCEwKX0pO1widGV4dC9wbGFpblwiPT09byYmKGg9biksIWQmJi9eaW1hZ2VcXC8uKi8udGVzdChvKSYmKGM9ITApfXJldHVybiB2b2lkKGM/KHRoaXMuZmlyZUV2ZW50KFwiZHJhZ292ZXJcIix7ZGF0YVRyYW5zZmVyOmEscHJldmVudERlZmF1bHQ6ZnVuY3Rpb24oKXtsPSEwfX0pLGwmJnRoaXMuZmlyZUV2ZW50KFwiZHJvcFwiLHtkYXRhVHJhbnNmZXI6YX0pKTpoJiZoLmdldEFzU3RyaW5nKGZ1bmN0aW9uKGUpe3UuaW5zZXJ0UGxhaW5UZXh0KGUsITApfSkpfWlmKGk9YSYmYS50eXBlcywhWCYmaSYmKGRlLmNhbGwoaSxcInRleHQvaHRtbFwiKT4tMXx8IVEmJmRlLmNhbGwoaSxcInRleHQvcGxhaW5cIik+LTEmJmRlLmNhbGwoaSxcInRleHQvcnRmXCIpPDApKXJldHVybiBlLnByZXZlbnREZWZhdWx0KCksdm9pZCghZCYmKHI9YS5nZXREYXRhKFwidGV4dC9odG1sXCIpKT90aGlzLmluc2VydEhUTUwociwhMCk6KChyPWEuZ2V0RGF0YShcInRleHQvcGxhaW5cIikpfHwocj1hLmdldERhdGEoXCJ0ZXh0L3VyaS1saXN0XCIpKSkmJnRoaXMuaW5zZXJ0UGxhaW5UZXh0KHIsITApKTt0aGlzLl9hd2FpdGluZ1Bhc3RlPSEwO3ZhciBmPXRoaXMuX2RvYy5ib2R5LHA9dGhpcy5nZXRTZWxlY3Rpb24oKSxnPXAuc3RhcnRDb250YWluZXIsbT1wLnN0YXJ0T2Zmc2V0LHY9cC5lbmRDb250YWluZXIsQz1wLmVuZE9mZnNldCxOPXRoaXMuY3JlYXRlRWxlbWVudChcIkRJVlwiLHtjb250ZW50ZWRpdGFibGU6XCJ0cnVlXCIsc3R5bGU6XCJwb3NpdGlvbjpmaXhlZDsgb3ZlcmZsb3c6aGlkZGVuOyB0b3A6MDsgcmlnaHQ6MTAwJTsgd2lkdGg6MXB4OyBoZWlnaHQ6MXB4O1wifSk7Zi5hcHBlbmRDaGlsZChOKSxwLnNlbGVjdE5vZGVDb250ZW50cyhOKSx0aGlzLnNldFNlbGVjdGlvbihwKSxzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dHJ5e3UuX2F3YWl0aW5nUGFzdGU9ITE7Zm9yKHZhciBlLHQsbj1cIlwiLG89TjtOPW87KW89Ti5uZXh0U2libGluZyxfKE4pLGU9Ti5maXJzdENoaWxkLGUmJmU9PT1OLmxhc3RDaGlsZCYmXCJESVZcIj09PWUubm9kZU5hbWUmJihOPWUpLG4rPU4uaW5uZXJIVE1MO3Q9dS5jcmVhdGVSYW5nZShnLG0sdixDKSx1LnNldFNlbGVjdGlvbih0KSxuJiZ1Lmluc2VydEhUTUwobiwhMCl9Y2F0Y2goZSl7dS5kaWRFcnJvcihlKX19LDApfSxudD1mdW5jdGlvbihlKXtmb3IodmFyIHQ9ZS5kYXRhVHJhbnNmZXIudHlwZXMsbj10Lmxlbmd0aCxvPSExLGk9ITE7bi0tOylzd2l0Y2godFtuXSl7Y2FzZVwidGV4dC9wbGFpblwiOm89ITA7YnJlYWs7Y2FzZVwidGV4dC9odG1sXCI6aT0hMDticmVhaztkZWZhdWx0OnJldHVybn0oaXx8bykmJnRoaXMuc2F2ZVVuZG9TdGF0ZSgpfSxvdD1SLnByb3RvdHlwZSxpdD1mdW5jdGlvbihlLHQsbil7dmFyIG89bi5fZG9jLGk9ZT9ET01QdXJpZnkuc2FuaXRpemUoZSx7QUxMT1dfVU5LTk9XTl9QUk9UT0NPTFM6ITAsV0hPTEVfRE9DVU1FTlQ6ITEsUkVUVVJOX0RPTTohMCxSRVRVUk5fRE9NX0ZSQUdNRU5UOiEwfSk6bnVsbDtyZXR1cm4gaT9vLmltcG9ydE5vZGUoaSwhMCk6by5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCl9O290LnNldENvbmZpZz1mdW5jdGlvbihlKXtyZXR1cm4gZT1PKHtibG9ja1RhZzpcIkRJVlwiLGJsb2NrQXR0cmlidXRlczpudWxsLHRhZ0F0dHJpYnV0ZXM6e2Jsb2NrcXVvdGU6bnVsbCx1bDpudWxsLG9sOm51bGwsbGk6bnVsbCxhOm51bGx9LGNsYXNzTmFtZXM6e2NvbG91cjpcImNvbG91clwiLGZvbnRGYW1pbHk6XCJmb250XCIsZm9udFNpemU6XCJzaXplXCIsaGlnaGxpZ2h0OlwiaGlnaGxpZ2h0XCJ9LGxlYWZOb2RlTmFtZXM6dWUsdW5kbzp7ZG9jdW1lbnRTaXplVGhyZXNob2xkOi0xLHVuZG9MaW1pdDotMX0saXNJbnNlcnRlZEhUTUxTYW5pdGl6ZWQ6ITAsaXNTZXRIVE1MU2FuaXRpemVkOiEwLHNhbml0aXplVG9ET01GcmFnbWVudDpcInVuZGVmaW5lZFwiIT10eXBlb2YgRE9NUHVyaWZ5JiZET01QdXJpZnkuaXNTdXBwb3J0ZWQ/aXQ6bnVsbCx3aWxsQ3V0Q29weTpudWxsfSxlLCEwKSxlLmJsb2NrVGFnPWUuYmxvY2tUYWcudG9VcHBlckNhc2UoKSx0aGlzLl9jb25maWc9ZSx0aGlzfSxvdC5jcmVhdGVFbGVtZW50PWZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4geSh0aGlzLl9kb2MsZSx0LG4pfSxvdC5jcmVhdGVEZWZhdWx0QmxvY2s9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5fY29uZmlnO3JldHVybiBUKHRoaXMuY3JlYXRlRWxlbWVudCh0LmJsb2NrVGFnLHQuYmxvY2tBdHRyaWJ1dGVzLGUpLHRoaXMuX3Jvb3QpfSxvdC5kaWRFcnJvcj1mdW5jdGlvbihlKXtjb25zb2xlLmxvZyhlKX0sb3QuZ2V0RG9jdW1lbnQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fZG9jfSxvdC5nZXRSb290PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3Jvb3R9LG90Lm1vZGlmeURvY3VtZW50PWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuX211dGF0aW9uO3QmJih0LnRha2VSZWNvcmRzKCkubGVuZ3RoJiZ0aGlzLl9kb2NXYXNDaGFuZ2VkKCksdC5kaXNjb25uZWN0KCkpLHRoaXMuX2lnbm9yZUFsbENoYW5nZXM9ITAsZSgpLHRoaXMuX2lnbm9yZUFsbENoYW5nZXM9ITEsdCYmKHQub2JzZXJ2ZSh0aGlzLl9yb290LHtjaGlsZExpc3Q6ITAsYXR0cmlidXRlczohMCxjaGFyYWN0ZXJEYXRhOiEwLHN1YnRyZWU6ITB9KSx0aGlzLl9pZ25vcmVDaGFuZ2U9ITEpfTt2YXIgcnQ9e3BhdGhDaGFuZ2U6MSxzZWxlY3Q6MSxpbnB1dDoxLHVuZG9TdGF0ZUNoYW5nZToxfTtvdC5maXJlRXZlbnQ9ZnVuY3Rpb24oZSx0KXt2YXIgbixvLGkscj10aGlzLl9ldmVudHNbZV07aWYoL14oPzpmb2N1c3xibHVyKS8udGVzdChlKSlpZihuPXRoaXMuX3Jvb3Q9PT10aGlzLl9kb2MuYWN0aXZlRWxlbWVudCxcImZvY3VzXCI9PT1lKXtpZighbnx8dGhpcy5faXNGb2N1c2VkKXJldHVybiB0aGlzO3RoaXMuX2lzRm9jdXNlZD0hMH1lbHNle2lmKG58fCF0aGlzLl9pc0ZvY3VzZWQpcmV0dXJuIHRoaXM7dGhpcy5faXNGb2N1c2VkPSExfWlmKHIpZm9yKHR8fCh0PXt9KSx0LnR5cGUhPT1lJiYodC50eXBlPWUpLHI9ci5zbGljZSgpLG89ci5sZW5ndGg7by0tOyl7aT1yW29dO3RyeXtpLmhhbmRsZUV2ZW50P2kuaGFuZGxlRXZlbnQodCk6aS5jYWxsKHRoaXMsdCl9Y2F0Y2godCl7dC5kZXRhaWxzPVwiU3F1aXJlOiBmaXJlRXZlbnQgZXJyb3IuIEV2ZW50IHR5cGU6IFwiK2UsdGhpcy5kaWRFcnJvcih0KX19cmV0dXJuIHRoaXN9LG90LmRlc3Ryb3k9ZnVuY3Rpb24oKXt2YXIgZSx0PXRoaXMuX2V2ZW50cztmb3IoZSBpbiB0KXRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihlKTt0aGlzLl9tdXRhdGlvbiYmdGhpcy5fbXV0YXRpb24uZGlzY29ubmVjdCgpLGRlbGV0ZSB0aGlzLl9yb290Ll9fc3F1aXJlX18sdGhpcy5fdW5kb0luZGV4PS0xLHRoaXMuX3VuZG9TdGFjaz1bXSx0aGlzLl91bmRvU3RhY2tMZW5ndGg9MH0sb3QuaGFuZGxlRXZlbnQ9ZnVuY3Rpb24oZSl7dGhpcy5maXJlRXZlbnQoZS50eXBlLGUpfSxvdC5hZGRFdmVudExpc3RlbmVyPWZ1bmN0aW9uKGUsdCl7dmFyIG49dGhpcy5fZXZlbnRzW2VdLG89dGhpcy5fcm9vdDtyZXR1cm4gdD8obnx8KG49dGhpcy5fZXZlbnRzW2VdPVtdLHJ0W2VdfHwoXCJzZWxlY3Rpb25jaGFuZ2VcIj09PWUmJihvPXRoaXMuX2RvYyksby5hZGRFdmVudExpc3RlbmVyKGUsdGhpcywhMCkpKSxuLnB1c2godCksdGhpcyk6KHRoaXMuZGlkRXJyb3Ioe25hbWU6XCJTcXVpcmU6IGFkZEV2ZW50TGlzdGVuZXIgd2l0aCBudWxsIG9yIHVuZGVmaW5lZCBmblwiLG1lc3NhZ2U6XCJFdmVudCB0eXBlOiBcIitlfSksdGhpcyl9LG90LnJlbW92ZUV2ZW50TGlzdGVuZXI9ZnVuY3Rpb24oZSx0KXt2YXIgbixvPXRoaXMuX2V2ZW50c1tlXSxpPXRoaXMuX3Jvb3Q7aWYobyl7aWYodClmb3Iobj1vLmxlbmd0aDtuLS07KW9bbl09PT10JiZvLnNwbGljZShuLDEpO2Vsc2Ugby5sZW5ndGg9MDtvLmxlbmd0aHx8KGRlbGV0ZSB0aGlzLl9ldmVudHNbZV0scnRbZV18fChcInNlbGVjdGlvbmNoYW5nZVwiPT09ZSYmKGk9dGhpcy5fZG9jKSxpLnJlbW92ZUV2ZW50TGlzdGVuZXIoZSx0aGlzLCEwKSkpfXJldHVybiB0aGlzfSxvdC5jcmVhdGVSYW5nZT1mdW5jdGlvbihlLHQsbixvKXtpZihlIGluc3RhbmNlb2YgdGhpcy5fd2luLlJhbmdlKXJldHVybiBlLmNsb25lUmFuZ2UoKTt2YXIgaT10aGlzLl9kb2MuY3JlYXRlUmFuZ2UoKTtyZXR1cm4gaS5zZXRTdGFydChlLHQpLG4/aS5zZXRFbmQobixvKTppLnNldEVuZChlLHQpLGl9LG90LmdldEN1cnNvclBvc2l0aW9uPWZ1bmN0aW9uKGUpe2lmKCFlJiYhKGU9dGhpcy5nZXRTZWxlY3Rpb24oKSl8fCFlLmdldEJvdW5kaW5nQ2xpZW50UmVjdClyZXR1cm4gbnVsbDt2YXIgdCxuLG89ZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtyZXR1cm4gbyYmIW8udG9wJiYodGhpcy5faWdub3JlQ2hhbmdlPSEwLHQ9dGhpcy5fZG9jLmNyZWF0ZUVsZW1lbnQoXCJTUEFOXCIpLHQudGV4dENvbnRlbnQ9eixOZShlLHQpLG89dC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxuPXQucGFyZW50Tm9kZSxuLnJlbW92ZUNoaWxkKHQpLGsobixlKSksb30sb3QuX21vdmVDdXJzb3JUbz1mdW5jdGlvbihlKXt2YXIgdD10aGlzLl9yb290LG49dGhpcy5jcmVhdGVSYW5nZSh0LGU/MDp0LmNoaWxkTm9kZXMubGVuZ3RoKTtyZXR1cm4gYmUobiksdGhpcy5zZXRTZWxlY3Rpb24obiksdGhpc30sb3QubW92ZUN1cnNvclRvU3RhcnQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fbW92ZUN1cnNvclRvKCEwKX0sb3QubW92ZUN1cnNvclRvRW5kPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX21vdmVDdXJzb3JUbyghMSl9O3ZhciBhdD1mdW5jdGlvbihlKXtyZXR1cm4gZS5fd2luLmdldFNlbGVjdGlvbigpfHxudWxsfTtvdC5zZXRTZWxlY3Rpb249ZnVuY3Rpb24oZSl7aWYoZSlpZih0aGlzLl9sYXN0U2VsZWN0aW9uPWUsdGhpcy5faXNGb2N1c2VkKWlmKEcmJiF0aGlzLl9yZXN0b3JlU2VsZWN0aW9uKUQuY2FsbCh0aGlzKSx0aGlzLmJsdXIoKSx0aGlzLmZvY3VzKCk7ZWxzZXtaJiZ0aGlzLl93aW4uZm9jdXMoKTt2YXIgdD1hdCh0aGlzKTt0JiYodC5yZW1vdmVBbGxSYW5nZXMoKSx0LmFkZFJhbmdlKGUpKX1lbHNlIEQuY2FsbCh0aGlzKTtyZXR1cm4gdGhpc30sb3QuZ2V0U2VsZWN0aW9uPWZ1bmN0aW9uKCl7dmFyIGUsdCxuLG8scj1hdCh0aGlzKSxhPXRoaXMuX3Jvb3Q7cmV0dXJuIHRoaXMuX2lzRm9jdXNlZCYmciYmci5yYW5nZUNvdW50JiYoZT1yLmdldFJhbmdlQXQoMCkuY2xvbmVSYW5nZSgpLHQ9ZS5zdGFydENvbnRhaW5lcixuPWUuZW5kQ29udGFpbmVyLHQmJmkodCkmJmUuc2V0U3RhcnRCZWZvcmUodCksbiYmaShuKSYmZS5zZXRFbmRCZWZvcmUobikpLGUmJm0oYSxlLmNvbW1vbkFuY2VzdG9yQ29udGFpbmVyKT90aGlzLl9sYXN0U2VsZWN0aW9uPWU6KGU9dGhpcy5fbGFzdFNlbGVjdGlvbixvPWUuY29tbW9uQW5jZXN0b3JDb250YWluZXIsbShvLm93bmVyRG9jdW1lbnQsbyl8fChlPW51bGwpKSxlfHwoZT10aGlzLmNyZWF0ZVJhbmdlKGEuZmlyc3RDaGlsZCwwKSksZX0sb3QuZ2V0U2VsZWN0ZWRUZXh0PWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5nZXRTZWxlY3Rpb24oKTtpZighZXx8ZS5jb2xsYXBzZWQpcmV0dXJuXCJcIjt2YXIgdCxvPW5ldyBuKGUuY29tbW9uQW5jZXN0b3JDb250YWluZXIsNHxXLGZ1bmN0aW9uKHQpe3JldHVybiBFZShlLHQsITApfSksaT1lLnN0YXJ0Q29udGFpbmVyLHI9ZS5lbmRDb250YWluZXIscz1vLmN1cnJlbnROb2RlPWksZD1cIlwiLGw9ITE7Zm9yKG8uZmlsdGVyKHMpfHwocz1vLm5leHROb2RlKCkpO3M7KXMubm9kZVR5cGU9PT1GPyh0PXMuZGF0YSkmJi9cXFMvLnRlc3QodCkmJihzPT09ciYmKHQ9dC5zbGljZSgwLGUuZW5kT2Zmc2V0KSkscz09PWkmJih0PXQuc2xpY2UoZS5zdGFydE9mZnNldCkpLGQrPXQsbD0hMCk6KFwiQlJcIj09PXMubm9kZU5hbWV8fGwmJiFhKHMpKSYmKGQrPVwiXFxuXCIsbD0hMSkscz1vLm5leHROb2RlKCk7cmV0dXJuIGR9LG90LmdldFBhdGg9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fcGF0aH07dmFyIHN0PWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBvLGkscixzPW5ldyBuKGUsNCk7aT1zLm5leHROb2RlKCk7KWZvcig7KHI9aS5kYXRhLmluZGV4T2YoeikpPi0xJiYoIXR8fGkucGFyZW50Tm9kZSE9PXQpOyl7aWYoMT09PWkubGVuZ3RoKXtkb3tvPWkucGFyZW50Tm9kZSxvLnJlbW92ZUNoaWxkKGkpLGk9byxzLmN1cnJlbnROb2RlPW99d2hpbGUoYShpKSYmIUMoaSkpO2JyZWFrfWkuZGVsZXRlRGF0YShyLDEpfX07b3QuX2RpZEFkZFpXUz1mdW5jdGlvbigpe3RoaXMuX2hhc1pXUz0hMH0sb3QuX3JlbW92ZVpXUz1mdW5jdGlvbigpe3RoaXMuX2hhc1pXUyYmKHN0KHRoaXMuX3Jvb3QpLHRoaXMuX2hhc1pXUz0hMSl9LG90Ll91cGRhdGVQYXRoPWZ1bmN0aW9uKGUsdCl7aWYoZSl7dmFyIG4sbz1lLnN0YXJ0Q29udGFpbmVyLGk9ZS5lbmRDb250YWluZXI7KHR8fG8hPT10aGlzLl9sYXN0QW5jaG9yTm9kZXx8aSE9PXRoaXMuX2xhc3RGb2N1c05vZGUpJiYodGhpcy5fbGFzdEFuY2hvck5vZGU9byx0aGlzLl9sYXN0Rm9jdXNOb2RlPWksbj1vJiZpP289PT1pP3YoaSx0aGlzLl9yb290LHRoaXMuX2NvbmZpZyk6XCIoc2VsZWN0aW9uKVwiOlwiXCIsdGhpcy5fcGF0aCE9PW4mJih0aGlzLl9wYXRoPW4sdGhpcy5maXJlRXZlbnQoXCJwYXRoQ2hhbmdlXCIse3BhdGg6bn0pKSksdGhpcy5maXJlRXZlbnQoZS5jb2xsYXBzZWQ/XCJjdXJzb3JcIjpcInNlbGVjdFwiLHtyYW5nZTplfSl9fSxvdC5fdXBkYXRlUGF0aE9uRXZlbnQ9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpczt0Ll9pc0ZvY3VzZWQmJiF0Ll93aWxsVXBkYXRlUGF0aCYmKHQuX3dpbGxVcGRhdGVQYXRoPSEwLHNldFRpbWVvdXQoZnVuY3Rpb24oKXt0Ll93aWxsVXBkYXRlUGF0aD0hMSx0Ll91cGRhdGVQYXRoKHQuZ2V0U2VsZWN0aW9uKCkpfSwwKSl9LG90LmZvY3VzPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3Jvb3QuZm9jdXMoKSxlZSYmdGhpcy5maXJlRXZlbnQoXCJmb2N1c1wiKSx0aGlzfSxvdC5ibHVyPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3Jvb3QuYmx1cigpLGVlJiZ0aGlzLmZpcmVFdmVudChcImJsdXJcIiksdGhpc307dmFyIGR0PVwic3F1aXJlLXNlbGVjdGlvbi1lbmRcIlxuO290Ll9zYXZlUmFuZ2VUb0Jvb2ttYXJrPWZ1bmN0aW9uKGUpe3ZhciB0LG49dGhpcy5jcmVhdGVFbGVtZW50KFwiSU5QVVRcIix7aWQ6XCJzcXVpcmUtc2VsZWN0aW9uLXN0YXJ0XCIsdHlwZTpcImhpZGRlblwifSksbz10aGlzLmNyZWF0ZUVsZW1lbnQoXCJJTlBVVFwiLHtpZDpkdCx0eXBlOlwiaGlkZGVuXCJ9KTtOZShlLG4pLGUuY29sbGFwc2UoITEpLE5lKGUsbyksMiZuLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKG8pJiYobi5pZD1kdCxvLmlkPVwic3F1aXJlLXNlbGVjdGlvbi1zdGFydFwiLHQ9bixuPW8sbz10KSxlLnNldFN0YXJ0QWZ0ZXIobiksZS5zZXRFbmRCZWZvcmUobyl9LG90Ll9nZXRSYW5nZUFuZFJlbW92ZUJvb2ttYXJrPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuX3Jvb3Qsbj10LnF1ZXJ5U2VsZWN0b3IoXCIjc3F1aXJlLXNlbGVjdGlvbi1zdGFydFwiKSxvPXQucXVlcnlTZWxlY3RvcihcIiNcIitkdCk7aWYobiYmbyl7dmFyIGk9bi5wYXJlbnROb2RlLHI9by5wYXJlbnROb2RlLGE9ZGUuY2FsbChpLmNoaWxkTm9kZXMsbikscz1kZS5jYWxsKHIuY2hpbGROb2RlcyxvKTtpPT09ciYmKHMtPTEpLF8obiksXyhvKSxlfHwoZT10aGlzLl9kb2MuY3JlYXRlUmFuZ2UoKSksZS5zZXRTdGFydChpLGEpLGUuc2V0RW5kKHIscyksayhpLGUpLGkhPT1yJiZrKHIsZSksZS5jb2xsYXBzZWQmJihpPWUuc3RhcnRDb250YWluZXIsaS5ub2RlVHlwZT09PUYmJihyPWkuY2hpbGROb2Rlc1tlLnN0YXJ0T2Zmc2V0XSxyJiZyLm5vZGVUeXBlPT09Rnx8KHI9aS5jaGlsZE5vZGVzW2Uuc3RhcnRPZmZzZXQtMV0pLHImJnIubm9kZVR5cGU9PT1GJiYoZS5zZXRTdGFydChyLDApLGUuY29sbGFwc2UoITApKSkpfXJldHVybiBlfHxudWxsfSxvdC5fa2V5VXBEZXRlY3RDaGFuZ2U9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5rZXlDb2RlO2UuY3RybEtleXx8ZS5tZXRhS2V5fHxlLmFsdEtleXx8ISh0PDE2fHx0PjIwKXx8ISh0PDMzfHx0PjQ1KXx8dGhpcy5fZG9jV2FzQ2hhbmdlZCgpfSxvdC5fZG9jV2FzQ2hhbmdlZD1mdW5jdGlvbigpe2lmKGFlJiYodmU9bmV3IFdlYWtNYXApLCF0aGlzLl9pZ25vcmVBbGxDaGFuZ2VzKXtpZihyZSYmdGhpcy5faWdub3JlQ2hhbmdlKXJldHVybiB2b2lkKHRoaXMuX2lnbm9yZUNoYW5nZT0hMSk7dGhpcy5faXNJblVuZG9TdGF0ZSYmKHRoaXMuX2lzSW5VbmRvU3RhdGU9ITEsdGhpcy5maXJlRXZlbnQoXCJ1bmRvU3RhdGVDaGFuZ2VcIix7Y2FuVW5kbzohMCxjYW5SZWRvOiExfSkpLHRoaXMuZmlyZUV2ZW50KFwiaW5wdXRcIil9fSxvdC5fcmVjb3JkVW5kb1N0YXRlPWZ1bmN0aW9uKGUsdCl7aWYoIXRoaXMuX2lzSW5VbmRvU3RhdGV8fHQpe3ZhciBuLG89dGhpcy5fdW5kb0luZGV4LGk9dGhpcy5fdW5kb1N0YWNrLHI9dGhpcy5fY29uZmlnLnVuZG8sYT1yLmRvY3VtZW50U2l6ZVRocmVzaG9sZCxzPXIudW5kb0xpbWl0O3R8fChvKz0xKSxvPHRoaXMuX3VuZG9TdGFja0xlbmd0aCYmKGkubGVuZ3RoPXRoaXMuX3VuZG9TdGFja0xlbmd0aD1vKSxlJiZ0aGlzLl9zYXZlUmFuZ2VUb0Jvb2ttYXJrKGUpLG49dGhpcy5fZ2V0SFRNTCgpLGE+LTEmJjIqbi5sZW5ndGg+YSYmcz4tMSYmbz5zJiYoaS5zcGxpY2UoMCxvLXMpLG89cyx0aGlzLl91bmRvU3RhY2tMZW5ndGg9cyksaVtvXT1uLHRoaXMuX3VuZG9JbmRleD1vLHRoaXMuX3VuZG9TdGFja0xlbmd0aCs9MSx0aGlzLl9pc0luVW5kb1N0YXRlPSEwfX0sb3Quc2F2ZVVuZG9TdGF0ZT1mdW5jdGlvbihlKXtyZXR1cm4gZT09PXQmJihlPXRoaXMuZ2V0U2VsZWN0aW9uKCkpLHRoaXMuX3JlY29yZFVuZG9TdGF0ZShlLHRoaXMuX2lzSW5VbmRvU3RhdGUpLHRoaXMuX2dldFJhbmdlQW5kUmVtb3ZlQm9va21hcmsoZSksdGhpc30sb3QudW5kbz1mdW5jdGlvbigpe2lmKDAhPT10aGlzLl91bmRvSW5kZXh8fCF0aGlzLl9pc0luVW5kb1N0YXRlKXt0aGlzLl9yZWNvcmRVbmRvU3RhdGUodGhpcy5nZXRTZWxlY3Rpb24oKSwhMSksdGhpcy5fdW5kb0luZGV4LT0xLHRoaXMuX3NldEhUTUwodGhpcy5fdW5kb1N0YWNrW3RoaXMuX3VuZG9JbmRleF0pO3ZhciBlPXRoaXMuX2dldFJhbmdlQW5kUmVtb3ZlQm9va21hcmsoKTtlJiZ0aGlzLnNldFNlbGVjdGlvbihlKSx0aGlzLl9pc0luVW5kb1N0YXRlPSEwLHRoaXMuZmlyZUV2ZW50KFwidW5kb1N0YXRlQ2hhbmdlXCIse2NhblVuZG86MCE9PXRoaXMuX3VuZG9JbmRleCxjYW5SZWRvOiEwfSksdGhpcy5maXJlRXZlbnQoXCJpbnB1dFwiKX1yZXR1cm4gdGhpc30sb3QucmVkbz1mdW5jdGlvbigpe3ZhciBlPXRoaXMuX3VuZG9JbmRleCx0PXRoaXMuX3VuZG9TdGFja0xlbmd0aDtpZihlKzE8dCYmdGhpcy5faXNJblVuZG9TdGF0ZSl7dGhpcy5fdW5kb0luZGV4Kz0xLHRoaXMuX3NldEhUTUwodGhpcy5fdW5kb1N0YWNrW3RoaXMuX3VuZG9JbmRleF0pO3ZhciBuPXRoaXMuX2dldFJhbmdlQW5kUmVtb3ZlQm9va21hcmsoKTtuJiZ0aGlzLnNldFNlbGVjdGlvbihuKSx0aGlzLmZpcmVFdmVudChcInVuZG9TdGF0ZUNoYW5nZVwiLHtjYW5VbmRvOiEwLGNhblJlZG86ZSsyPHR9KSx0aGlzLmZpcmVFdmVudChcImlucHV0XCIpfXJldHVybiB0aGlzfSxvdC5oYXNGb3JtYXQ9ZnVuY3Rpb24oZSx0LG8pe2lmKGU9ZS50b1VwcGVyQ2FzZSgpLHR8fCh0PXt9KSwhbyYmIShvPXRoaXMuZ2V0U2VsZWN0aW9uKCkpKXJldHVybiExOyFvLmNvbGxhcHNlZCYmby5zdGFydENvbnRhaW5lci5ub2RlVHlwZT09PUYmJm8uc3RhcnRPZmZzZXQ9PT1vLnN0YXJ0Q29udGFpbmVyLmxlbmd0aCYmby5zdGFydENvbnRhaW5lci5uZXh0U2libGluZyYmby5zZXRTdGFydEJlZm9yZShvLnN0YXJ0Q29udGFpbmVyLm5leHRTaWJsaW5nKSwhby5jb2xsYXBzZWQmJm8uZW5kQ29udGFpbmVyLm5vZGVUeXBlPT09RiYmMD09PW8uZW5kT2Zmc2V0JiZvLmVuZENvbnRhaW5lci5wcmV2aW91c1NpYmxpbmcmJm8uc2V0RW5kQWZ0ZXIoby5lbmRDb250YWluZXIucHJldmlvdXNTaWJsaW5nKTt2YXIgaSxyLGE9dGhpcy5fcm9vdCxzPW8uY29tbW9uQW5jZXN0b3JDb250YWluZXI7aWYoZyhzLGEsZSx0KSlyZXR1cm4hMDtpZihzLm5vZGVUeXBlPT09RilyZXR1cm4hMTtpPW5ldyBuKHMsNCxmdW5jdGlvbihlKXtyZXR1cm4gRWUobyxlLCEwKX0pO2Zvcih2YXIgZD0hMTtyPWkubmV4dE5vZGUoKTspe2lmKCFnKHIsYSxlLHQpKXJldHVybiExO2Q9ITB9cmV0dXJuIGR9LG90LmdldEZvbnRJbmZvPWZ1bmN0aW9uKGUpe3ZhciBuLG8saSxyPXtjb2xvcjp0LGJhY2tncm91bmRDb2xvcjp0LGZhbWlseTp0LHNpemU6dH0sYT0wO2lmKCFlJiYhKGU9dGhpcy5nZXRTZWxlY3Rpb24oKSkpcmV0dXJuIHI7aWYobj1lLmNvbW1vbkFuY2VzdG9yQ29udGFpbmVyLGUuY29sbGFwc2VkfHxuLm5vZGVUeXBlPT09Rilmb3Iobi5ub2RlVHlwZT09PUYmJihuPW4ucGFyZW50Tm9kZSk7YTw0JiZuOykobz1uLnN0eWxlKSYmKCFyLmNvbG9yJiYoaT1vLmNvbG9yKSYmKHIuY29sb3I9aSxhKz0xKSwhci5iYWNrZ3JvdW5kQ29sb3ImJihpPW8uYmFja2dyb3VuZENvbG9yKSYmKHIuYmFja2dyb3VuZENvbG9yPWksYSs9MSksIXIuZmFtaWx5JiYoaT1vLmZvbnRGYW1pbHkpJiYoci5mYW1pbHk9aSxhKz0xKSwhci5zaXplJiYoaT1vLmZvbnRTaXplKSYmKHIuc2l6ZT1pLGErPTEpKSxuPW4ucGFyZW50Tm9kZTtyZXR1cm4gcn0sb3QuX2FkZEZvcm1hdD1mdW5jdGlvbihlLHQsbyl7dmFyIGkscixzLGQsbCxjLGgsdSxmPXRoaXMuX3Jvb3Q7aWYoby5jb2xsYXBzZWQpe2ZvcihpPVQodGhpcy5jcmVhdGVFbGVtZW50KGUsdCksZiksTmUobyxpKSxvLnNldFN0YXJ0KGkuZmlyc3RDaGlsZCxpLmZpcnN0Q2hpbGQubGVuZ3RoKSxvLmNvbGxhcHNlKCEwKSx1PWk7YSh1KTspdT11LnBhcmVudE5vZGU7c3QodSxpKX1lbHNle2lmKHI9bmV3IG4oby5jb21tb25BbmNlc3RvckNvbnRhaW5lciw0fFcsZnVuY3Rpb24oZSl7cmV0dXJuKGUubm9kZVR5cGU9PT1GfHxcIkJSXCI9PT1lLm5vZGVOYW1lfHxcIklNR1wiPT09ZS5ub2RlTmFtZSkmJkVlKG8sZSwhMCl9KSxzPW8uc3RhcnRDb250YWluZXIsbD1vLnN0YXJ0T2Zmc2V0LGQ9by5lbmRDb250YWluZXIsYz1vLmVuZE9mZnNldCxyLmN1cnJlbnROb2RlPXMsci5maWx0ZXIocyl8fChzPXIubmV4dE5vZGUoKSxsPTApLCFzKXJldHVybiBvO2Rve2g9ci5jdXJyZW50Tm9kZSwhZyhoLGYsZSx0KSYmKGg9PT1kJiZoLmxlbmd0aD5jJiZoLnNwbGl0VGV4dChjKSxoPT09cyYmbCYmKGg9aC5zcGxpdFRleHQobCksZD09PXMmJihkPWgsYy09bCkscz1oLGw9MCksaT10aGlzLmNyZWF0ZUVsZW1lbnQoZSx0KSxOKGgsaSksaS5hcHBlbmRDaGlsZChoKSl9d2hpbGUoci5uZXh0Tm9kZSgpKTtkLm5vZGVUeXBlIT09RiYmKGgubm9kZVR5cGU9PT1GPyhkPWgsYz1oLmxlbmd0aCk6KGQ9aC5wYXJlbnROb2RlLGM9MSkpLG89dGhpcy5jcmVhdGVSYW5nZShzLGwsZCxjKX1yZXR1cm4gb30sb3QuX3JlbW92ZUZvcm1hdD1mdW5jdGlvbihlLHQsbixvKXt0aGlzLl9zYXZlUmFuZ2VUb0Jvb2ttYXJrKG4pO3ZhciBpLHI9dGhpcy5fZG9jO24uY29sbGFwc2VkJiYob2U/KGk9ci5jcmVhdGVUZXh0Tm9kZSh6KSx0aGlzLl9kaWRBZGRaV1MoKSk6aT1yLmNyZWF0ZVRleHROb2RlKFwiXCIpLE5lKG4saSkpO2Zvcih2YXIgcz1uLmNvbW1vbkFuY2VzdG9yQ29udGFpbmVyO2Eocyk7KXM9cy5wYXJlbnROb2RlO3ZhciBkPW4uc3RhcnRDb250YWluZXIsbD1uLnN0YXJ0T2Zmc2V0LGM9bi5lbmRDb250YWluZXIsaD1uLmVuZE9mZnNldCx1PVtdLGY9ZnVuY3Rpb24oZSx0KXtpZighRWUobixlLCExKSl7dmFyIG8saSxyPWUubm9kZVR5cGU9PT1GO2lmKCFFZShuLGUsITApKXJldHVybiB2b2lkKFwiSU5QVVRcIj09PWUubm9kZU5hbWV8fHImJiFlLmRhdGF8fHUucHVzaChbdCxlXSkpO2lmKHIpZT09PWMmJmghPT1lLmxlbmd0aCYmdS5wdXNoKFt0LGUuc3BsaXRUZXh0KGgpXSksZT09PWQmJmwmJihlLnNwbGl0VGV4dChsKSx1LnB1c2goW3QsZV0pKTtlbHNlIGZvcihvPWUuZmlyc3RDaGlsZDtvO289aSlpPW8ubmV4dFNpYmxpbmcsZihvLHQpfX0sZz1BcnJheS5wcm90b3R5cGUuZmlsdGVyLmNhbGwocy5nZXRFbGVtZW50c0J5VGFnTmFtZShlKSxmdW5jdGlvbihvKXtyZXR1cm4gRWUobixvLCEwKSYmcChvLGUsdCl9KTtyZXR1cm4gb3x8Zy5mb3JFYWNoKGZ1bmN0aW9uKGUpe2YoZSxlKX0pLHUuZm9yRWFjaChmdW5jdGlvbihlKXt2YXIgdD1lWzBdLmNsb25lTm9kZSghMSksbj1lWzFdO04obix0KSx0LmFwcGVuZENoaWxkKG4pfSksZy5mb3JFYWNoKGZ1bmN0aW9uKGUpe04oZSxTKGUpKX0pLHRoaXMuX2dldFJhbmdlQW5kUmVtb3ZlQm9va21hcmsobiksaSYmbi5jb2xsYXBzZSghMSksayhzLG4pLG59LG90LmNoYW5nZUZvcm1hdD1mdW5jdGlvbihlLHQsbixvKXtyZXR1cm4gbnx8KG49dGhpcy5nZXRTZWxlY3Rpb24oKSk/KHRoaXMuc2F2ZVVuZG9TdGF0ZShuKSx0JiYobj10aGlzLl9yZW1vdmVGb3JtYXQodC50YWcudG9VcHBlckNhc2UoKSx0LmF0dHJpYnV0ZXN8fHt9LG4sbykpLGUmJihuPXRoaXMuX2FkZEZvcm1hdChlLnRhZy50b1VwcGVyQ2FzZSgpLGUuYXR0cmlidXRlc3x8e30sbikpLHRoaXMuc2V0U2VsZWN0aW9uKG4pLHRoaXMuX3VwZGF0ZVBhdGgobiwhMCkscmV8fHRoaXMuX2RvY1dhc0NoYW5nZWQoKSx0aGlzKTp0aGlzfTt2YXIgbHQ9e0RUOlwiRERcIixERDpcIkRUXCIsTEk6XCJMSVwiLFBSRTpcIlBSRVwifSxjdD1mdW5jdGlvbihlLHQsbixvKXt2YXIgaT1sdFt0Lm5vZGVOYW1lXSxyPW51bGwsYT1iKG4sbyx0LnBhcmVudE5vZGUsZS5fcm9vdCkscz1lLl9jb25maWc7cmV0dXJuIGl8fChpPXMuYmxvY2tUYWcscj1zLmJsb2NrQXR0cmlidXRlcykscChhLGkscil8fCh0PXkoYS5vd25lckRvY3VtZW50LGksciksYS5kaXImJih0LmRpcj1hLmRpciksTihhLHQpLHQuYXBwZW5kQ2hpbGQoUyhhKSksYT10KSxhfTtvdC5mb3JFYWNoQmxvY2s9ZnVuY3Rpb24oZSx0LG4pe2lmKCFuJiYhKG49dGhpcy5nZXRTZWxlY3Rpb24oKSkpcmV0dXJuIHRoaXM7dCYmdGhpcy5zYXZlVW5kb1N0YXRlKG4pO3ZhciBvPXRoaXMuX3Jvb3QsaT1rZShuLG8pLHI9QWUobixvKTtpZihpJiZyKWRve2lmKGUoaSl8fGk9PT1yKWJyZWFrfXdoaWxlKGk9aChpLG8pKTtyZXR1cm4gdCYmKHRoaXMuc2V0U2VsZWN0aW9uKG4pLHRoaXMuX3VwZGF0ZVBhdGgobiwhMCkscmV8fHRoaXMuX2RvY1dhc0NoYW5nZWQoKSksdGhpc30sb3QubW9kaWZ5QmxvY2tzPWZ1bmN0aW9uKGUsdCl7aWYoIXQmJiEodD10aGlzLmdldFNlbGVjdGlvbigpKSlyZXR1cm4gdGhpczt0aGlzLl9yZWNvcmRVbmRvU3RhdGUodCx0aGlzLl9pc0luVW5kb1N0YXRlKTt2YXIgbixvPXRoaXMuX3Jvb3Q7cmV0dXJuIFJlKHQsbykseGUodCxvLG8sbyksbj1TZSh0LG8sbyksTmUodCxlLmNhbGwodGhpcyxuKSksdC5lbmRPZmZzZXQ8dC5lbmRDb250YWluZXIuY2hpbGROb2Rlcy5sZW5ndGgmJkwodC5lbmRDb250YWluZXIuY2hpbGROb2Rlc1t0LmVuZE9mZnNldF0sbyksTCh0LnN0YXJ0Q29udGFpbmVyLmNoaWxkTm9kZXNbdC5zdGFydE9mZnNldF0sbyksdGhpcy5fZ2V0UmFuZ2VBbmRSZW1vdmVCb29rbWFyayh0KSx0aGlzLnNldFNlbGVjdGlvbih0KSx0aGlzLl91cGRhdGVQYXRoKHQsITApLHJlfHx0aGlzLl9kb2NXYXNDaGFuZ2VkKCksdGhpc307dmFyIGh0PWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmNyZWF0ZUVsZW1lbnQoXCJCTE9DS1FVT1RFXCIsdGhpcy5fY29uZmlnLnRhZ0F0dHJpYnV0ZXMuYmxvY2txdW90ZSxbZV0pfSx1dD1mdW5jdGlvbihlKXt2YXIgdD10aGlzLl9yb290LG49ZS5xdWVyeVNlbGVjdG9yQWxsKFwiYmxvY2txdW90ZVwiKTtyZXR1cm4gQXJyYXkucHJvdG90eXBlLmZpbHRlci5jYWxsKG4sZnVuY3Rpb24oZSl7cmV0dXJuIWcoZS5wYXJlbnROb2RlLHQsXCJCTE9DS1FVT1RFXCIpfSkuZm9yRWFjaChmdW5jdGlvbihlKXtOKGUsUyhlKSl9KSxlfSxmdD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmNyZWF0ZURlZmF1bHRCbG9jayhbdGhpcy5jcmVhdGVFbGVtZW50KFwiSU5QVVRcIix7aWQ6XCJzcXVpcmUtc2VsZWN0aW9uLXN0YXJ0XCIsdHlwZTpcImhpZGRlblwifSksdGhpcy5jcmVhdGVFbGVtZW50KFwiSU5QVVRcIix7aWQ6ZHQsdHlwZTpcImhpZGRlblwifSldKX0scHQ9ZnVuY3Rpb24oZSx0LG4pe2Zvcih2YXIgbyxpLHIsYSxzPWwodCxlLl9yb290KSxkPWUuX2NvbmZpZy50YWdBdHRyaWJ1dGVzLGM9ZFtuLnRvTG93ZXJDYXNlKCldLGg9ZC5saTtvPXMubmV4dE5vZGUoKTspXCJMSVwiPT09by5wYXJlbnROb2RlLm5vZGVOYW1lJiYobz1vLnBhcmVudE5vZGUscy5jdXJyZW50Tm9kZT1vLmxhc3RDaGlsZCksXCJMSVwiIT09by5ub2RlTmFtZT8oYT1lLmNyZWF0ZUVsZW1lbnQoXCJMSVwiLGgpLG8uZGlyJiYoYS5kaXI9by5kaXIpLChyPW8ucHJldmlvdXNTaWJsaW5nKSYmci5ub2RlTmFtZT09PW4/KHIuYXBwZW5kQ2hpbGQoYSksXyhvKSk6TihvLGUuY3JlYXRlRWxlbWVudChuLGMsW2FdKSksYS5hcHBlbmRDaGlsZChTKG8pKSxzLmN1cnJlbnROb2RlPWEpOihvPW8ucGFyZW50Tm9kZSwoaT1vLm5vZGVOYW1lKSE9PW4mJi9eW09VXUwkLy50ZXN0KGkpJiZOKG8sZS5jcmVhdGVFbGVtZW50KG4sYyxbUyhvKV0pKSl9LGd0PWZ1bmN0aW9uKGUpe3JldHVybiBwdCh0aGlzLGUsXCJVTFwiKSxlfSxtdD1mdW5jdGlvbihlKXtyZXR1cm4gcHQodGhpcyxlLFwiT0xcIiksZX0sdnQ9ZnVuY3Rpb24oZSl7dmFyIHQsbixvLGkscixhPWUucXVlcnlTZWxlY3RvckFsbChcIlVMLCBPTFwiKSxkPWUucXVlcnlTZWxlY3RvckFsbChcIkxJXCIpLGw9dGhpcy5fcm9vdDtmb3IodD0wLG49YS5sZW5ndGg7dDxuO3QrPTEpbz1hW3RdLGk9UyhvKSxFKGksbCksTihvLGkpO2Zvcih0PTAsbj1kLmxlbmd0aDt0PG47dCs9MSlyPWRbdF0scyhyKT9OKHIsdGhpcy5jcmVhdGVEZWZhdWx0QmxvY2soW1MocildKSk6KEUocixsKSxOKHIsUyhyKSkpO3JldHVybiBlfSxDdD1mdW5jdGlvbihlLHQpe2Zvcih2YXIgbj1lLmNvbW1vbkFuY2VzdG9yQ29udGFpbmVyLG89ZS5zdGFydENvbnRhaW5lcixpPWUuZW5kQ29udGFpbmVyO24mJm4hPT10JiYhL15bT1VdTCQvLnRlc3Qobi5ub2RlTmFtZSk7KW49bi5wYXJlbnROb2RlO2lmKCFufHxuPT09dClyZXR1cm4gbnVsbDtmb3Iobz09PW4mJihvPW8uY2hpbGROb2Rlc1tlLnN0YXJ0T2Zmc2V0XSksaT09PW4mJihpPWkuY2hpbGROb2Rlc1tlLmVuZE9mZnNldF0pO28mJm8ucGFyZW50Tm9kZSE9PW47KW89by5wYXJlbnROb2RlO2Zvcig7aSYmaS5wYXJlbnROb2RlIT09bjspaT1pLnBhcmVudE5vZGU7cmV0dXJuW24sbyxpXX07b3QuaW5jcmVhc2VMaXN0TGV2ZWw9ZnVuY3Rpb24oZSl7aWYoIWUmJiEoZT10aGlzLmdldFNlbGVjdGlvbigpKSlyZXR1cm4gdGhpcy5mb2N1cygpO3ZhciB0PXRoaXMuX3Jvb3Qsbj1DdChlLHQpO2lmKCFuKXJldHVybiB0aGlzLmZvY3VzKCk7dmFyIG89blswXSxpPW5bMV0scj1uWzJdO2lmKCFpfHxpPT09by5maXJzdENoaWxkKXJldHVybiB0aGlzLmZvY3VzKCk7dGhpcy5fcmVjb3JkVW5kb1N0YXRlKGUsdGhpcy5faXNJblVuZG9TdGF0ZSk7dmFyIGEscyxkPW8ubm9kZU5hbWUsbD1pLnByZXZpb3VzU2libGluZztsLm5vZGVOYW1lIT09ZCYmKGE9dGhpcy5fY29uZmlnLnRhZ0F0dHJpYnV0ZXNbZC50b0xvd2VyQ2FzZSgpXSxsPXRoaXMuY3JlYXRlRWxlbWVudChkLGEpLG8uaW5zZXJ0QmVmb3JlKGwsaSkpO2Rve3M9aT09PXI/bnVsbDppLm5leHRTaWJsaW5nLGwuYXBwZW5kQ2hpbGQoaSl9d2hpbGUoaT1zKTtyZXR1cm4gcz1sLm5leHRTaWJsaW5nLHMmJkwocyx0KSx0aGlzLl9nZXRSYW5nZUFuZFJlbW92ZUJvb2ttYXJrKGUpLHRoaXMuc2V0U2VsZWN0aW9uKGUpLHRoaXMuX3VwZGF0ZVBhdGgoZSwhMCkscmV8fHRoaXMuX2RvY1dhc0NoYW5nZWQoKSx0aGlzLmZvY3VzKCl9LG90LmRlY3JlYXNlTGlzdExldmVsPWZ1bmN0aW9uKGUpe2lmKCFlJiYhKGU9dGhpcy5nZXRTZWxlY3Rpb24oKSkpcmV0dXJuIHRoaXMuZm9jdXMoKTt2YXIgdD10aGlzLl9yb290LG49Q3QoZSx0KTtpZighbilyZXR1cm4gdGhpcy5mb2N1cygpO3ZhciBvPW5bMF0saT1uWzFdLHI9blsyXTtpfHwoaT1vLmZpcnN0Q2hpbGQpLHJ8fChyPW8ubGFzdENoaWxkKSx0aGlzLl9yZWNvcmRVbmRvU3RhdGUoZSx0aGlzLl9pc0luVW5kb1N0YXRlKTt2YXIgYSxzPW8ucGFyZW50Tm9kZSxkPXIubmV4dFNpYmxpbmc/YihvLHIubmV4dFNpYmxpbmcscyx0KTpvLm5leHRTaWJsaW5nO2lmKHMhPT10JiZcIkxJXCI9PT1zLm5vZGVOYW1lKXtmb3Iocz1zLnBhcmVudE5vZGU7ZDspYT1kLm5leHRTaWJsaW5nLHIuYXBwZW5kQ2hpbGQoZCksZD1hO2Q9by5wYXJlbnROb2RlLm5leHRTaWJsaW5nfXZhciBsPSEvXltPVV1MJC8udGVzdChzLm5vZGVOYW1lKTtkb3thPWk9PT1yP251bGw6aS5uZXh0U2libGluZyxvLnJlbW92ZUNoaWxkKGkpLGwmJlwiTElcIj09PWkubm9kZU5hbWUmJihpPXRoaXMuY3JlYXRlRGVmYXVsdEJsb2NrKFtTKGkpXSkpLHMuaW5zZXJ0QmVmb3JlKGksZCl9d2hpbGUoaT1hKTtyZXR1cm4gby5maXJzdENoaWxkfHxfKG8pLGQmJkwoZCx0KSx0aGlzLl9nZXRSYW5nZUFuZFJlbW92ZUJvb2ttYXJrKGUpLHRoaXMuc2V0U2VsZWN0aW9uKGUpLHRoaXMuX3VwZGF0ZVBhdGgoZSwhMCkscmV8fHRoaXMuX2RvY1dhc0NoYW5nZWQoKSx0aGlzLmZvY3VzKCl9LG90Ll9lbnN1cmVCb3R0b21MaW5lPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5fcm9vdCx0PWUubGFzdEVsZW1lbnRDaGlsZDt0JiZ0Lm5vZGVOYW1lPT09dGhpcy5fY29uZmlnLmJsb2NrVGFnJiZzKHQpfHxlLmFwcGVuZENoaWxkKHRoaXMuY3JlYXRlRGVmYXVsdEJsb2NrKCkpfSxvdC5zZXRLZXlIYW5kbGVyPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMuX2tleUhhbmRsZXJzW2VdPXQsdGhpc30sb3QuX2dldEhUTUw9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fcm9vdC5pbm5lckhUTUx9LG90Ll9zZXRIVE1MPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuX3Jvb3Qsbj10O24uaW5uZXJIVE1MPWU7ZG97VChuLHQpfXdoaWxlKG49aChuLHQpKTt0aGlzLl9pZ25vcmVDaGFuZ2U9ITB9LG90LmdldEhUTUw9ZnVuY3Rpb24oZSl7dmFyIHQsbixvLGkscixhLHM9W107aWYoZSYmKGE9dGhpcy5nZXRTZWxlY3Rpb24oKSkmJnRoaXMuX3NhdmVSYW5nZVRvQm9va21hcmsoYSksbmUpZm9yKHQ9dGhpcy5fcm9vdCxuPXQ7bj1oKG4sdCk7KW4udGV4dENvbnRlbnR8fG4ucXVlcnlTZWxlY3RvcihcIkJSXCIpfHwobz10aGlzLmNyZWF0ZUVsZW1lbnQoXCJCUlwiKSxuLmFwcGVuZENoaWxkKG8pLHMucHVzaChvKSk7aWYoaT10aGlzLl9nZXRIVE1MKCkucmVwbGFjZSgvXFx1MjAwQi9nLFwiXCIpLG5lKWZvcihyPXMubGVuZ3RoO3ItLTspXyhzW3JdKTtyZXR1cm4gYSYmdGhpcy5fZ2V0UmFuZ2VBbmRSZW1vdmVCb29rbWFyayhhKSxpfSxvdC5zZXRIVE1MPWZ1bmN0aW9uKGUpe3ZhciB0LG4sbyxpPXRoaXMuX2NvbmZpZyxyPWkuaXNTZXRIVE1MU2FuaXRpemVkP2kuc2FuaXRpemVUb0RPTUZyYWdtZW50Om51bGwsYT10aGlzLl9yb290O1wiZnVuY3Rpb25cIj09dHlwZW9mIHI/bj1yKGUsITEsdGhpcyk6KHQ9dGhpcy5jcmVhdGVFbGVtZW50KFwiRElWXCIpLHQuaW5uZXJIVE1MPWUsbj10aGlzLl9kb2MuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLG4uYXBwZW5kQ2hpbGQoUyh0KSkpLGplKG4saSksWWUobixhLCExKSxFKG4sYSk7Zm9yKHZhciBzPW47cz1oKHMsYSk7KVQocyxhKTtmb3IodGhpcy5faWdub3JlQ2hhbmdlPSEwO289YS5sYXN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQobyk7YS5hcHBlbmRDaGlsZChuKSxUKGEsYSksdGhpcy5fdW5kb0luZGV4PS0xLHRoaXMuX3VuZG9TdGFjay5sZW5ndGg9MCx0aGlzLl91bmRvU3RhY2tMZW5ndGg9MCx0aGlzLl9pc0luVW5kb1N0YXRlPSExO3ZhciBkPXRoaXMuX2dldFJhbmdlQW5kUmVtb3ZlQm9va21hcmsoKXx8dGhpcy5jcmVhdGVSYW5nZShhLmZpcnN0Q2hpbGQsMCk7cmV0dXJuIHRoaXMuc2F2ZVVuZG9TdGF0ZShkKSx0aGlzLl9sYXN0U2VsZWN0aW9uPWQsRC5jYWxsKHRoaXMpLHRoaXMuX3VwZGF0ZVBhdGgoZCwhMCksdGhpc30sb3QuaW5zZXJ0RWxlbWVudD1mdW5jdGlvbihlLHQpe2lmKHR8fCh0PXRoaXMuZ2V0U2VsZWN0aW9uKCkpLHQuY29sbGFwc2UoITApLGEoZSkpTmUodCxlKSx0LnNldFN0YXJ0QWZ0ZXIoZSk7ZWxzZXtmb3IodmFyIG4sbyxpPXRoaXMuX3Jvb3Qscj1rZSh0LGkpfHxpO3IhPT1pJiYhci5uZXh0U2libGluZzspcj1yLnBhcmVudE5vZGU7ciE9PWkmJihuPXIucGFyZW50Tm9kZSxvPWIobixyLm5leHRTaWJsaW5nLGksaSkpLG8/aS5pbnNlcnRCZWZvcmUoZSxvKTooaS5hcHBlbmRDaGlsZChlKSxvPXRoaXMuY3JlYXRlRGVmYXVsdEJsb2NrKCksaS5hcHBlbmRDaGlsZChvKSksdC5zZXRTdGFydChvLDApLHQuc2V0RW5kKG8sMCksYmUodCl9cmV0dXJuIHRoaXMuZm9jdXMoKSx0aGlzLnNldFNlbGVjdGlvbih0KSx0aGlzLl91cGRhdGVQYXRoKHQpLHJlfHx0aGlzLl9kb2NXYXNDaGFuZ2VkKCksdGhpc30sb3QuaW5zZXJ0SW1hZ2U9ZnVuY3Rpb24oZSx0KXt2YXIgbj10aGlzLmNyZWF0ZUVsZW1lbnQoXCJJTUdcIixPKHtzcmM6ZX0sdCwhMCkpO3JldHVybiB0aGlzLmluc2VydEVsZW1lbnQobiksbn0sb3QubGlua1JlZ0V4cD0vXFxiKCg/Oig/Omh0fGYpdHBzPzpcXC9cXC98d3d3XFxkezAsM31bLl18W2EtejAtOS5cXC1dK1suXVthLXpdezIsfVxcLykoPzpbXlxccygpPD5dK3xcXChbXlxccygpPD5dK1xcKSkrKD86XFwoKD86W15cXHMoKTw+XSt8KD86XFwoW15cXHMoKTw+XStcXCkpKSpcXCl8W15cXHNgISgpXFxbXFxde307OidcIi4sPD4/wqvCu+KAnOKAneKAmOKAmV0pKXwoW1xcd1xcLS4lK10rQCg/OltcXHdcXC1dK1xcLikrW0EtWl17Mix9XFxiKSg/OlxcP1teJj9cXHNdKz1bXiY/XFxzXSsoPzomW14mP1xcc10rPVteJj9cXHNdKykqKT8vaTt2YXIgX3Q9ZnVuY3Rpb24oZSx0LG8pe3ZhciBpLHIsYSxzLGQsbCxjLGg9ZS5vd25lckRvY3VtZW50LHU9bmV3IG4oZSw0LGZ1bmN0aW9uKGUpe3JldHVybiFnKGUsdCxcIkFcIil9KSxmPW8ubGlua1JlZ0V4cCxwPW8uX2NvbmZpZy50YWdBdHRyaWJ1dGVzLmE7aWYoZilmb3IoO2k9dS5uZXh0Tm9kZSgpOylmb3Iocj1pLmRhdGEsYT1pLnBhcmVudE5vZGU7cz1mLmV4ZWMocik7KWQ9cy5pbmRleCxsPWQrc1swXS5sZW5ndGgsZCYmKGM9aC5jcmVhdGVUZXh0Tm9kZShyLnNsaWNlKDAsZCkpLGEuaW5zZXJ0QmVmb3JlKGMsaSkpLGM9by5jcmVhdGVFbGVtZW50KFwiQVwiLE8oe2hyZWY6c1sxXT8vXig/Omh0fGYpdHBzPzovaS50ZXN0KHNbMV0pP3NbMV06XCJodHRwOi8vXCIrc1sxXTpcIm1haWx0bzpcIitzWzBdfSxwLCExKSksYy50ZXh0Q29udGVudD1yLnNsaWNlKGQsbCksYS5pbnNlcnRCZWZvcmUoYyxpKSxpLmRhdGE9cj1yLnNsaWNlKGwpfTtvdC5pbnNlcnRIVE1MPWZ1bmN0aW9uKGUsdCl7dmFyIG4sbyxpLHIsYSxzLGQsbD10aGlzLl9jb25maWcsYz1sLmlzSW5zZXJ0ZWRIVE1MU2FuaXRpemVkP2wuc2FuaXRpemVUb0RPTUZyYWdtZW50Om51bGwsdT10aGlzLmdldFNlbGVjdGlvbigpLGY9dGhpcy5fZG9jO1wiZnVuY3Rpb25cIj09dHlwZW9mIGM/cj1jKGUsdCx0aGlzKToodCYmKG49ZS5pbmRleE9mKFwiXFx4M2MhLS1TdGFydEZyYWdtZW50LS1cXHgzZVwiKSxvPWUubGFzdEluZGV4T2YoXCJcXHgzYyEtLUVuZEZyYWdtZW50LS1cXHgzZVwiKSxuPi0xJiZvPi0xJiYoZT1lLnNsaWNlKG4rMjAsbykpKSwvPFxcL3RkPigoPyE8XFwvdHI+KVtcXHNcXFNdKSokL2kudGVzdChlKSYmKGU9XCI8VFI+XCIrZStcIjwvVFI+XCIpLC88XFwvdHI+KCg/ITxcXC90YWJsZT4pW1xcc1xcU10pKiQvaS50ZXN0KGUpJiYoZT1cIjxUQUJMRT5cIitlK1wiPC9UQUJMRT5cIiksaT10aGlzLmNyZWF0ZUVsZW1lbnQoXCJESVZcIiksaS5pbm5lckhUTUw9ZSxyPWYuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLHIuYXBwZW5kQ2hpbGQoUyhpKSkpLHRoaXMuc2F2ZVVuZG9TdGF0ZSh1KTt0cnl7Zm9yKGE9dGhpcy5fcm9vdCxzPXIsZD17ZnJhZ21lbnQ6cixwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe3RoaXMuZGVmYXVsdFByZXZlbnRlZD0hMH0sZGVmYXVsdFByZXZlbnRlZDohMX0sX3QocixyLHRoaXMpLGplKHIsbCksWWUocixhLCExKSwkZShyKSxyLm5vcm1hbGl6ZSgpO3M9aChzLHIpOylUKHMsYSk7dCYmdGhpcy5maXJlRXZlbnQoXCJ3aWxsUGFzdGVcIixkKSxkLmRlZmF1bHRQcmV2ZW50ZWR8fChUZSh1LGQuZnJhZ21lbnQsYSkscmV8fHRoaXMuX2RvY1dhc0NoYW5nZWQoKSx1LmNvbGxhcHNlKCExKSx0aGlzLl9lbnN1cmVCb3R0b21MaW5lKCkpLHRoaXMuc2V0U2VsZWN0aW9uKHUpLHRoaXMuX3VwZGF0ZVBhdGgodSwhMCksdCYmdGhpcy5mb2N1cygpfWNhdGNoKGUpe3RoaXMuZGlkRXJyb3IoZSl9cmV0dXJuIHRoaXN9O3ZhciBOdD1mdW5jdGlvbihlKXtyZXR1cm4gZS5zcGxpdChcIiZcIikuam9pbihcIiZhbXA7XCIpLnNwbGl0KFwiPFwiKS5qb2luKFwiJmx0O1wiKS5zcGxpdChcIj5cIikuam9pbihcIiZndDtcIikuc3BsaXQoJ1wiJykuam9pbihcIiZxdW90O1wiKX07b3QuaW5zZXJ0UGxhaW5UZXh0PWZ1bmN0aW9uKGUsdCl7dmFyIG49dGhpcy5nZXRTZWxlY3Rpb24oKTtpZihuLmNvbGxhcHNlZCYmZyhuLnN0YXJ0Q29udGFpbmVyLHRoaXMuX3Jvb3QsXCJQUkVcIikpe3ZhciBvLGkscj1uLnN0YXJ0Q29udGFpbmVyLGE9bi5zdGFydE9mZnNldDtyZXR1cm4gciYmci5ub2RlVHlwZT09PUZ8fChvPXRoaXMuX2RvYy5jcmVhdGVUZXh0Tm9kZShcIlwiKSxyLmluc2VydEJlZm9yZShvLHIuY2hpbGROb2Rlc1thXSkscj1vLGE9MCksaT17dGV4dDplLHByZXZlbnREZWZhdWx0OmZ1bmN0aW9uKCl7dGhpcy5kZWZhdWx0UHJldmVudGVkPSEwfSxkZWZhdWx0UHJldmVudGVkOiExfSx0JiZ0aGlzLmZpcmVFdmVudChcIndpbGxQYXN0ZVwiLGkpLGkuZGVmYXVsdFByZXZlbnRlZHx8KGU9aS50ZXh0LHIuaW5zZXJ0RGF0YShhLGUpLG4uc2V0U3RhcnQocixhK2UubGVuZ3RoKSxuLmNvbGxhcHNlKCEwKSksdGhpcy5zZXRTZWxlY3Rpb24obiksdGhpc312YXIgcyxkLGwsYyxoPWUuc3BsaXQoXCJcXG5cIiksdT10aGlzLl9jb25maWcsZj11LmJsb2NrVGFnLHA9dS5ibG9ja0F0dHJpYnV0ZXMsbT1cIjwvXCIrZitcIj5cIix2PVwiPFwiK2Y7Zm9yKHMgaW4gcCl2Kz1cIiBcIitzKyc9XCInK050KHBbc10pKydcIic7Zm9yKHYrPVwiPlwiLGQ9MCxsPWgubGVuZ3RoO2Q8bDtkKz0xKWM9aFtkXSxjPU50KGMpLnJlcGxhY2UoLyAoPz0gKS9nLFwiJm5ic3A7XCIpLGhbZF09disoY3x8XCI8QlI+XCIpK207cmV0dXJuIHRoaXMuaW5zZXJ0SFRNTChoLmpvaW4oXCJcIiksdCl9O3ZhciBTdD1mdW5jdGlvbihlLHQsbil7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIHRoaXNbZV0odCxuKSx0aGlzLmZvY3VzKCl9fTtvdC5hZGRTdHlsZXM9ZnVuY3Rpb24oZSl7aWYoZSl7dmFyIHQ9dGhpcy5fZG9jLmRvY3VtZW50RWxlbWVudC5maXJzdENoaWxkLG49dGhpcy5jcmVhdGVFbGVtZW50KFwiU1RZTEVcIix7dHlwZTpcInRleHQvY3NzXCJ9KTtuLmFwcGVuZENoaWxkKHRoaXMuX2RvYy5jcmVhdGVUZXh0Tm9kZShlKSksdC5hcHBlbmRDaGlsZChuKX1yZXR1cm4gdGhpc30sb3QuYm9sZD1TdChcImNoYW5nZUZvcm1hdFwiLHt0YWc6XCJCXCJ9KSxvdC5pdGFsaWM9U3QoXCJjaGFuZ2VGb3JtYXRcIix7dGFnOlwiSVwifSksb3QudW5kZXJsaW5lPVN0KFwiY2hhbmdlRm9ybWF0XCIse3RhZzpcIlVcIn0pLG90LnN0cmlrZXRocm91Z2g9U3QoXCJjaGFuZ2VGb3JtYXRcIix7dGFnOlwiU1wifSksb3Quc3Vic2NyaXB0PVN0KFwiY2hhbmdlRm9ybWF0XCIse3RhZzpcIlNVQlwifSx7dGFnOlwiU1VQXCJ9KSxvdC5zdXBlcnNjcmlwdD1TdChcImNoYW5nZUZvcm1hdFwiLHt0YWc6XCJTVVBcIn0se3RhZzpcIlNVQlwifSksb3QucmVtb3ZlQm9sZD1TdChcImNoYW5nZUZvcm1hdFwiLG51bGwse3RhZzpcIkJcIn0pLG90LnJlbW92ZUl0YWxpYz1TdChcImNoYW5nZUZvcm1hdFwiLG51bGwse3RhZzpcIklcIn0pLG90LnJlbW92ZVVuZGVybGluZT1TdChcImNoYW5nZUZvcm1hdFwiLG51bGwse3RhZzpcIlVcIn0pLG90LnJlbW92ZVN0cmlrZXRocm91Z2g9U3QoXCJjaGFuZ2VGb3JtYXRcIixudWxsLHt0YWc6XCJTXCJ9KSxvdC5yZW1vdmVTdWJzY3JpcHQ9U3QoXCJjaGFuZ2VGb3JtYXRcIixudWxsLHt0YWc6XCJTVUJcIn0pLG90LnJlbW92ZVN1cGVyc2NyaXB0PVN0KFwiY2hhbmdlRm9ybWF0XCIsbnVsbCx7dGFnOlwiU1VQXCJ9KSxvdC5tYWtlTGluaz1mdW5jdGlvbihlLHQpe3ZhciBuPXRoaXMuZ2V0U2VsZWN0aW9uKCk7aWYobi5jb2xsYXBzZWQpe3ZhciBvPWUuaW5kZXhPZihcIjpcIikrMTtpZihvKWZvcig7XCIvXCI9PT1lW29dOylvKz0xO05lKG4sdGhpcy5fZG9jLmNyZWF0ZVRleHROb2RlKGUuc2xpY2UobykpKX1yZXR1cm4gdD1PKE8oe2hyZWY6ZX0sdCwhMCksdGhpcy5fY29uZmlnLnRhZ0F0dHJpYnV0ZXMuYSwhMSksdGhpcy5jaGFuZ2VGb3JtYXQoe3RhZzpcIkFcIixhdHRyaWJ1dGVzOnR9LHt0YWc6XCJBXCJ9LG4pLHRoaXMuZm9jdXMoKX0sb3QucmVtb3ZlTGluaz1mdW5jdGlvbigpe3JldHVybiB0aGlzLmNoYW5nZUZvcm1hdChudWxsLHt0YWc6XCJBXCJ9LHRoaXMuZ2V0U2VsZWN0aW9uKCksITApLHRoaXMuZm9jdXMoKX0sb3Quc2V0Rm9udEZhY2U9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5fY29uZmlnLmNsYXNzTmFtZXMuZm9udEZhbWlseTtyZXR1cm4gdGhpcy5jaGFuZ2VGb3JtYXQoZT97dGFnOlwiU1BBTlwiLGF0dHJpYnV0ZXM6e2NsYXNzOnQsc3R5bGU6XCJmb250LWZhbWlseTogXCIrZStcIiwgc2Fucy1zZXJpZjtcIn19Om51bGwse3RhZzpcIlNQQU5cIixhdHRyaWJ1dGVzOntjbGFzczp0fX0pLHRoaXMuZm9jdXMoKX0sb3Quc2V0Rm9udFNpemU9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5fY29uZmlnLmNsYXNzTmFtZXMuZm9udFNpemU7cmV0dXJuIHRoaXMuY2hhbmdlRm9ybWF0KGU/e3RhZzpcIlNQQU5cIixhdHRyaWJ1dGVzOntjbGFzczp0LHN0eWxlOlwiZm9udC1zaXplOiBcIisoXCJudW1iZXJcIj09dHlwZW9mIGU/ZStcInB4XCI6ZSl9fTpudWxsLHt0YWc6XCJTUEFOXCIsYXR0cmlidXRlczp7Y2xhc3M6dH19KSx0aGlzLmZvY3VzKCl9LG90LnNldFRleHRDb2xvdXI9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5fY29uZmlnLmNsYXNzTmFtZXMuY29sb3VyO3JldHVybiB0aGlzLmNoYW5nZUZvcm1hdChlP3t0YWc6XCJTUEFOXCIsYXR0cmlidXRlczp7Y2xhc3M6dCxzdHlsZTpcImNvbG9yOlwiK2V9fTpudWxsLHt0YWc6XCJTUEFOXCIsYXR0cmlidXRlczp7Y2xhc3M6dH19KSx0aGlzLmZvY3VzKCl9LG90LnNldEhpZ2hsaWdodENvbG91cj1mdW5jdGlvbihlKXt2YXIgdD10aGlzLl9jb25maWcuY2xhc3NOYW1lcy5oaWdobGlnaHQ7cmV0dXJuIHRoaXMuY2hhbmdlRm9ybWF0KGU/e3RhZzpcIlNQQU5cIixhdHRyaWJ1dGVzOntjbGFzczp0LHN0eWxlOlwiYmFja2dyb3VuZC1jb2xvcjpcIitlfX06ZSx7dGFnOlwiU1BBTlwiLGF0dHJpYnV0ZXM6e2NsYXNzOnR9fSksdGhpcy5mb2N1cygpfSxvdC5zZXRUZXh0QWxpZ25tZW50PWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmZvckVhY2hCbG9jayhmdW5jdGlvbih0KXt2YXIgbj10LmNsYXNzTmFtZS5zcGxpdCgvXFxzKy8pLmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm4hIWUmJiEvXmFsaWduLy50ZXN0KGUpfSkuam9pbihcIiBcIik7ZT8odC5jbGFzc05hbWU9bitcIiBhbGlnbi1cIitlLHQuc3R5bGUudGV4dEFsaWduPWUpOih0LmNsYXNzTmFtZT1uLHQuc3R5bGUudGV4dEFsaWduPVwiXCIpfSwhMCksdGhpcy5mb2N1cygpfSxvdC5zZXRUZXh0RGlyZWN0aW9uPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmZvckVhY2hCbG9jayhmdW5jdGlvbih0KXtlP3QuZGlyPWU6dC5yZW1vdmVBdHRyaWJ1dGUoXCJkaXJcIil9LCEwKSx0aGlzLmZvY3VzKCl9O3ZhciB5dD1mdW5jdGlvbihlKXtmb3IodmFyIHQsbz10aGlzLl9yb290LGk9dGhpcy5fZG9jLHI9aS5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksYT1sKGUsbyk7dD1hLm5leHROb2RlKCk7KXt2YXIgcyxkLGM9dC5xdWVyeVNlbGVjdG9yQWxsKFwiQlJcIiksaD1bXSx1PWMubGVuZ3RoO2ZvcihzPTA7czx1O3MrPTEpaFtzXT1WZShjW3NdLCExKTtmb3IoO3UtLTspZD1jW3VdLGhbdV0/TihkLGkuY3JlYXRlVGV4dE5vZGUoXCJcXG5cIikpOl8oZCk7Zm9yKGM9dC5xdWVyeVNlbGVjdG9yQWxsKFwiQ09ERVwiKSx1PWMubGVuZ3RoO3UtLTspXyhjW3VdKTtyLmNoaWxkTm9kZXMubGVuZ3RoJiZyLmFwcGVuZENoaWxkKGkuY3JlYXRlVGV4dE5vZGUoXCJcXG5cIikpLHIuYXBwZW5kQ2hpbGQoUyh0KSl9Zm9yKGE9bmV3IG4ociw0KTt0PWEubmV4dE5vZGUoKTspdC5kYXRhPXQuZGF0YS5yZXBsYWNlKC/CoC9nLFwiIFwiKTtyZXR1cm4gci5ub3JtYWxpemUoKSxUKHRoaXMuY3JlYXRlRWxlbWVudChcIlBSRVwiLHRoaXMuX2NvbmZpZy50YWdBdHRyaWJ1dGVzLnByZSxbcl0pLG8pfSxUdD1mdW5jdGlvbihlKXtmb3IodmFyIHQsbyxpLHIsYSxzLGQ9dGhpcy5fZG9jLGw9dGhpcy5fcm9vdCxjPWUucXVlcnlTZWxlY3RvckFsbChcIlBSRVwiKSxoPWMubGVuZ3RoO2gtLTspe2Zvcih0PWNbaF0sbz1uZXcgbih0LDQpO2k9by5uZXh0Tm9kZSgpOyl7Zm9yKHI9aS5kYXRhLHI9ci5yZXBsYWNlKC8gKD89ICkvZyxcIsKgXCIpLGE9ZC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7KHM9ci5pbmRleE9mKFwiXFxuXCIpKT4tMTspYS5hcHBlbmRDaGlsZChkLmNyZWF0ZVRleHROb2RlKHIuc2xpY2UoMCxzKSkpLGEuYXBwZW5kQ2hpbGQoZC5jcmVhdGVFbGVtZW50KFwiQlJcIikpLHI9ci5zbGljZShzKzEpO2kucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYSxpKSxpLmRhdGE9cn1FKHQsbCksTih0LFModCkpfXJldHVybiBlfTtvdC5jb2RlPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5nZXRTZWxlY3Rpb24oKTtyZXR1cm4gZS5jb2xsYXBzZWR8fGQoZS5jb21tb25BbmNlc3RvckNvbnRhaW5lcik/dGhpcy5tb2RpZnlCbG9ja3MoeXQsZSk6dGhpcy5jaGFuZ2VGb3JtYXQoe3RhZzpcIkNPREVcIixhdHRyaWJ1dGVzOnRoaXMuX2NvbmZpZy50YWdBdHRyaWJ1dGVzLmNvZGV9LG51bGwsZSksdGhpcy5mb2N1cygpfSxvdC5yZW1vdmVDb2RlPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5nZXRTZWxlY3Rpb24oKTtyZXR1cm4gZyhlLmNvbW1vbkFuY2VzdG9yQ29udGFpbmVyLHRoaXMuX3Jvb3QsXCJQUkVcIik/dGhpcy5tb2RpZnlCbG9ja3MoVHQsZSk6dGhpcy5jaGFuZ2VGb3JtYXQobnVsbCx7dGFnOlwiQ09ERVwifSxlKSx0aGlzLmZvY3VzKCl9LG90LnRvZ2dsZUNvZGU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5oYXNGb3JtYXQoXCJQUkVcIil8fHRoaXMuaGFzRm9ybWF0KFwiQ09ERVwiKT90aGlzLnJlbW92ZUNvZGUoKTp0aGlzLmNvZGUoKSx0aGlzfSxvdC5yZW1vdmVBbGxGb3JtYXR0aW5nPWZ1bmN0aW9uKGUpe2lmKCFlJiYhKGU9dGhpcy5nZXRTZWxlY3Rpb24oKSl8fGUuY29sbGFwc2VkKXJldHVybiB0aGlzO2Zvcih2YXIgdD10aGlzLl9yb290LG49ZS5jb21tb25BbmNlc3RvckNvbnRhaW5lcjtuJiYhcyhuKTspbj1uLnBhcmVudE5vZGU7aWYobnx8KFJlKGUsdCksbj10KSxuLm5vZGVUeXBlPT09RilyZXR1cm4gdGhpczt0aGlzLnNhdmVVbmRvU3RhdGUoZSkseGUoZSxuLG4sdCk7Zm9yKHZhciBvLGkscj1uLm93bmVyRG9jdW1lbnQsYT1lLnN0YXJ0Q29udGFpbmVyLGQ9ZS5zdGFydE9mZnNldCxsPWUuZW5kQ29udGFpbmVyLGM9ZS5lbmRPZmZzZXQsaD1yLmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSx1PXIuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLGY9YihsLGMsbix0KSxwPWIoYSxkLG4sdCk7cCE9PWY7KW89cC5uZXh0U2libGluZyxoLmFwcGVuZENoaWxkKHApLHA9bztyZXR1cm4gSSh0aGlzLGgsdSksdS5ub3JtYWxpemUoKSxwPXUuZmlyc3RDaGlsZCxvPXUubGFzdENoaWxkLGk9bi5jaGlsZE5vZGVzLHA/KG4uaW5zZXJ0QmVmb3JlKHUsZiksZD1kZS5jYWxsKGkscCksYz1kZS5jYWxsKGksbykrMSk6KGQ9ZGUuY2FsbChpLGYpLGM9ZCksZS5zZXRTdGFydChuLGQpLGUuc2V0RW5kKG4sYyksayhuLGUpLGJlKGUpLHRoaXMuc2V0U2VsZWN0aW9uKGUpLHRoaXMuX3VwZGF0ZVBhdGgoZSwhMCksdGhpcy5mb2N1cygpfSxvdC5pbmNyZWFzZVF1b3RlTGV2ZWw9U3QoXCJtb2RpZnlCbG9ja3NcIixodCksb3QuZGVjcmVhc2VRdW90ZUxldmVsPVN0KFwibW9kaWZ5QmxvY2tzXCIsdXQpLG90Lm1ha2VVbm9yZGVyZWRMaXN0PVN0KFwibW9kaWZ5QmxvY2tzXCIsZ3QpLG90Lm1ha2VPcmRlcmVkTGlzdD1TdChcIm1vZGlmeUJsb2Nrc1wiLG10KSxvdC5yZW1vdmVMaXN0PVN0KFwibW9kaWZ5QmxvY2tzXCIsdnQpLFIuaXNJbmxpbmU9YSxSLmlzQmxvY2s9cyxSLmlzQ29udGFpbmVyPWQsUi5nZXRCbG9ja1dhbGtlcj1sLFIuZ2V0UHJldmlvdXNCbG9jaz1jLFIuZ2V0TmV4dEJsb2NrPWgsUi5hcmVBbGlrZT1mLFIuaGFzVGFnQXR0cmlidXRlcz1wLFIuZ2V0TmVhcmVzdD1nLFIuaXNPckNvbnRhaW5zPW0sUi5kZXRhY2g9XyxSLnJlcGxhY2VXaXRoPU4sUi5lbXB0eT1TLFIuZ2V0Tm9kZUJlZm9yZT1DZSxSLmdldE5vZGVBZnRlcj1fZSxSLmluc2VydE5vZGVJblJhbmdlPU5lLFIuZXh0cmFjdENvbnRlbnRzT2ZSYW5nZT1TZSxSLmRlbGV0ZUNvbnRlbnRzT2ZSYW5nZT15ZSxSLmluc2VydFRyZWVGcmFnbWVudEludG9SYW5nZT1UZSxSLmlzTm9kZUNvbnRhaW5lZEluUmFuZ2U9RWUsUi5tb3ZlUmFuZ2VCb3VuZGFyaWVzRG93blRyZWU9YmUsUi5tb3ZlUmFuZ2VCb3VuZGFyaWVzVXBUcmVlPXhlLFIuZ2V0U3RhcnRCbG9ja09mUmFuZ2U9a2UsUi5nZXRFbmRCbG9ja09mUmFuZ2U9QWUsUi5jb250ZW50V2Fsa2VyPUxlLFIucmFuZ2VEb2VzU3RhcnRBdEJsb2NrQm91bmRhcnk9QmUsUi5yYW5nZURvZXNFbmRBdEJsb2NrQm91bmRhcnk9T2UsUi5leHBhbmRSYW5nZVRvQmxvY2tCb3VuZGFyaWVzPVJlLFIub25QYXN0ZT10dCxSLmFkZExpbmtzPV90LFIuc3BsaXRCbG9jaz1jdCxSLnN0YXJ0U2VsZWN0aW9uSWQ9XCJzcXVpcmUtc2VsZWN0aW9uLXN0YXJ0XCIsUi5lbmRTZWxlY3Rpb25JZD1kdCxcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cz9tb2R1bGUuZXhwb3J0cz1SOlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoZnVuY3Rpb24oKXtyZXR1cm4gUn0pOihxLlNxdWlyZT1SLHRvcCE9PXEmJlwidHJ1ZVwiPT09ZS5kb2N1bWVudEVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS1zcXVpcmVpbml0XCIpJiYocS5lZGl0b3I9bmV3IFIoZSkscS5vbkVkaXRvckxvYWQmJihxLm9uRWRpdG9yTG9hZChxLmVkaXRvcikscS5vbkVkaXRvckxvYWQ9bnVsbCkpKX0oZG9jdW1lbnQpOyIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY2hlY2tEQ0UoKSB7XG4gIC8qIGdsb2JhbCBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gKi9cbiAgaWYgKFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRSAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBUaGlzIGJyYW5jaCBpcyB1bnJlYWNoYWJsZSBiZWNhdXNlIHRoaXMgZnVuY3Rpb24gaXMgb25seSBjYWxsZWRcbiAgICAvLyBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGNvbmRpdGlvbiBpcyB0cnVlIG9ubHkgaW4gZGV2ZWxvcG1lbnQuXG4gICAgLy8gVGhlcmVmb3JlIGlmIHRoZSBicmFuY2ggaXMgc3RpbGwgaGVyZSwgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIHdhc24ndFxuICAgIC8vIHByb3Blcmx5IGFwcGxpZWQuXG4gICAgLy8gRG9uJ3QgY2hhbmdlIHRoZSBtZXNzYWdlLiBSZWFjdCBEZXZUb29scyByZWxpZXMgb24gaXQuIEFsc28gbWFrZSBzdXJlXG4gICAgLy8gdGhpcyBtZXNzYWdlIGRvZXNuJ3Qgb2NjdXIgZWxzZXdoZXJlIGluIHRoaXMgZnVuY3Rpb24sIG9yIGl0IHdpbGwgY2F1c2VcbiAgICAvLyBhIGZhbHNlIHBvc2l0aXZlLlxuICAgIHRocm93IG5ldyBFcnJvcignXl9eJyk7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBWZXJpZnkgdGhhdCB0aGUgY29kZSBhYm92ZSBoYXMgYmVlbiBkZWFkIGNvZGUgZWxpbWluYXRlZCAoRENFJ2QpLlxuICAgIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRShjaGVja0RDRSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIERldlRvb2xzIHNob3VsZG4ndCBjcmFzaCBSZWFjdCwgbm8gbWF0dGVyIHdoYXQuXG4gICAgLy8gV2Ugc2hvdWxkIHN0aWxsIHJlcG9ydCBpbiBjYXNlIHdlIGJyZWFrIHRoaXMgY29kZS5cbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gRENFIGNoZWNrIHNob3VsZCBoYXBwZW4gYmVmb3JlIFJlYWN0RE9NIGJ1bmRsZSBleGVjdXRlcyBzbyB0aGF0XG4gIC8vIERldlRvb2xzIGNhbiByZXBvcnQgYmFkIG1pbmlmaWNhdGlvbiBkdXJpbmcgaW5qZWN0aW9uLlxuICBjaGVja0RDRSgpO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuOS4wXG4gKiByZWFjdC5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0Jzt2YXIgaD1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxuPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IscD1uP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLHE9bj9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LHI9bj9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsdD1uP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCx1PW4/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LHY9bj9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksdz1uP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLHg9bj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIseT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxhYT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpOjYwMTIwLGJhPW4/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6XG42MDExNSxjYT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2O24mJlN5bWJvbC5mb3IoXCJyZWFjdC5mdW5kYW1lbnRhbFwiKTtuJiZTeW1ib2wuZm9yKFwicmVhY3QucmVzcG9uZGVyXCIpO3ZhciB6PVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtcbmZ1bmN0aW9uIEEoYSl7Zm9yKHZhciBiPWEubWVzc2FnZSxkPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYixjPTE7Yzxhcmd1bWVudHMubGVuZ3RoO2MrKylkKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjXSk7YS5tZXNzYWdlPVwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2IrXCI7IHZpc2l0IFwiK2QrXCIgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLiBcIjtyZXR1cm4gYX12YXIgQj17aXNNb3VudGVkOmZ1bmN0aW9uKCl7cmV0dXJuITF9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKCl7fX0sQz17fTtcbmZ1bmN0aW9uIEQoYSxiLGQpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9Qzt0aGlzLnVwZGF0ZXI9ZHx8Qn1ELnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PXt9O0QucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKGEsYil7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmbnVsbCE9YSl0aHJvdyBBKEVycm9yKDg1KSk7dGhpcy51cGRhdGVyLmVucXVldWVTZXRTdGF0ZSh0aGlzLGEsYixcInNldFN0YXRlXCIpfTtELnByb3RvdHlwZS5mb3JjZVVwZGF0ZT1mdW5jdGlvbihhKXt0aGlzLnVwZGF0ZXIuZW5xdWV1ZUZvcmNlVXBkYXRlKHRoaXMsYSxcImZvcmNlVXBkYXRlXCIpfTtmdW5jdGlvbiBFKCl7fUUucHJvdG90eXBlPUQucHJvdG90eXBlO2Z1bmN0aW9uIEYoYSxiLGQpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9Qzt0aGlzLnVwZGF0ZXI9ZHx8Qn12YXIgRz1GLnByb3RvdHlwZT1uZXcgRTtcbkcuY29uc3RydWN0b3I9RjtoKEcsRC5wcm90b3R5cGUpO0cuaXNQdXJlUmVhY3RDb21wb25lbnQ9ITA7dmFyIEg9e2N1cnJlbnQ6bnVsbH0sST17c3VzcGVuc2U6bnVsbH0sSj17Y3VycmVudDpudWxsfSxLPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksTD17a2V5OiEwLHJlZjohMCxfX3NlbGY6ITAsX19zb3VyY2U6ITB9O1xuZnVuY3Rpb24gTShhLGIsZCl7dmFyIGM9dm9pZCAwLGU9e30sZz1udWxsLGs9bnVsbDtpZihudWxsIT1iKWZvcihjIGluIHZvaWQgMCE9PWIucmVmJiYoaz1iLnJlZiksdm9pZCAwIT09Yi5rZXkmJihnPVwiXCIrYi5rZXkpLGIpSy5jYWxsKGIsYykmJiFMLmhhc093blByb3BlcnR5KGMpJiYoZVtjXT1iW2NdKTt2YXIgZj1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWYpZS5jaGlsZHJlbj1kO2Vsc2UgaWYoMTxmKXtmb3IodmFyIGw9QXJyYXkoZiksbT0wO208ZjttKyspbFttXT1hcmd1bWVudHNbbSsyXTtlLmNoaWxkcmVuPWx9aWYoYSYmYS5kZWZhdWx0UHJvcHMpZm9yKGMgaW4gZj1hLmRlZmF1bHRQcm9wcyxmKXZvaWQgMD09PWVbY10mJihlW2NdPWZbY10pO3JldHVybnskJHR5cGVvZjpwLHR5cGU6YSxrZXk6ZyxyZWY6ayxwcm9wczplLF9vd25lcjpKLmN1cnJlbnR9fVxuZnVuY3Rpb24gZGEoYSxiKXtyZXR1cm57JCR0eXBlb2Y6cCx0eXBlOmEudHlwZSxrZXk6YixyZWY6YS5yZWYscHJvcHM6YS5wcm9wcyxfb3duZXI6YS5fb3duZXJ9fWZ1bmN0aW9uIE4oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PXB9ZnVuY3Rpb24gZXNjYXBlKGEpe3ZhciBiPXtcIj1cIjpcIj0wXCIsXCI6XCI6XCI9MlwifTtyZXR1cm5cIiRcIisoXCJcIithKS5yZXBsYWNlKC9bPTpdL2csZnVuY3Rpb24oYSl7cmV0dXJuIGJbYV19KX12YXIgTz0vXFwvKy9nLFA9W107ZnVuY3Rpb24gUShhLGIsZCxjKXtpZihQLmxlbmd0aCl7dmFyIGU9UC5wb3AoKTtlLnJlc3VsdD1hO2Uua2V5UHJlZml4PWI7ZS5mdW5jPWQ7ZS5jb250ZXh0PWM7ZS5jb3VudD0wO3JldHVybiBlfXJldHVybntyZXN1bHQ6YSxrZXlQcmVmaXg6YixmdW5jOmQsY29udGV4dDpjLGNvdW50OjB9fVxuZnVuY3Rpb24gUihhKXthLnJlc3VsdD1udWxsO2Eua2V5UHJlZml4PW51bGw7YS5mdW5jPW51bGw7YS5jb250ZXh0PW51bGw7YS5jb3VudD0wOzEwPlAubGVuZ3RoJiZQLnB1c2goYSl9XG5mdW5jdGlvbiBTKGEsYixkLGMpe3ZhciBlPXR5cGVvZiBhO2lmKFwidW5kZWZpbmVkXCI9PT1lfHxcImJvb2xlYW5cIj09PWUpYT1udWxsO3ZhciBnPSExO2lmKG51bGw9PT1hKWc9ITA7ZWxzZSBzd2l0Y2goZSl7Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJudW1iZXJcIjpnPSEwO2JyZWFrO2Nhc2UgXCJvYmplY3RcIjpzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBwOmNhc2UgcTpnPSEwfX1pZihnKXJldHVybiBkKGMsYSxcIlwiPT09Yj9cIi5cIitUKGEsMCk6YiksMTtnPTA7Yj1cIlwiPT09Yj9cIi5cIjpiK1wiOlwiO2lmKEFycmF5LmlzQXJyYXkoYSkpZm9yKHZhciBrPTA7azxhLmxlbmd0aDtrKyspe2U9YVtrXTt2YXIgZj1iK1QoZSxrKTtnKz1TKGUsZixkLGMpfWVsc2UgaWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYT9mPW51bGw6KGY9eiYmYVt6XXx8YVtcIkBAaXRlcmF0b3JcIl0sZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgZj9mOm51bGwpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmKWZvcihhPWYuY2FsbChhKSxrPVxuMDshKGU9YS5uZXh0KCkpLmRvbmU7KWU9ZS52YWx1ZSxmPWIrVChlLGsrKyksZys9UyhlLGYsZCxjKTtlbHNlIGlmKFwib2JqZWN0XCI9PT1lKXRocm93IGQ9XCJcIithLEEoRXJyb3IoMzEpLFwiW29iamVjdCBPYmplY3RdXCI9PT1kP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYSkuam9pbihcIiwgXCIpK1wifVwiOmQsXCJcIik7cmV0dXJuIGd9ZnVuY3Rpb24gVShhLGIsZCl7cmV0dXJuIG51bGw9PWE/MDpTKGEsXCJcIixiLGQpfWZ1bmN0aW9uIFQoYSxiKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZudWxsIT1hLmtleT9lc2NhcGUoYS5rZXkpOmIudG9TdHJpbmcoMzYpfWZ1bmN0aW9uIGVhKGEsYil7YS5mdW5jLmNhbGwoYS5jb250ZXh0LGIsYS5jb3VudCsrKX1cbmZ1bmN0aW9uIGZhKGEsYixkKXt2YXIgYz1hLnJlc3VsdCxlPWEua2V5UHJlZml4O2E9YS5mdW5jLmNhbGwoYS5jb250ZXh0LGIsYS5jb3VudCsrKTtBcnJheS5pc0FycmF5KGEpP1YoYSxjLGQsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KTpudWxsIT1hJiYoTihhKSYmKGE9ZGEoYSxlKyghYS5rZXl8fGImJmIua2V5PT09YS5rZXk/XCJcIjooXCJcIithLmtleSkucmVwbGFjZShPLFwiJCYvXCIpK1wiL1wiKStkKSksYy5wdXNoKGEpKX1mdW5jdGlvbiBWKGEsYixkLGMsZSl7dmFyIGc9XCJcIjtudWxsIT1kJiYoZz0oXCJcIitkKS5yZXBsYWNlKE8sXCIkJi9cIikrXCIvXCIpO2I9UShiLGcsYyxlKTtVKGEsZmEsYik7UihiKX1mdW5jdGlvbiBXKCl7dmFyIGE9SC5jdXJyZW50O2lmKG51bGw9PT1hKXRocm93IEEoRXJyb3IoMzIxKSk7cmV0dXJuIGF9XG52YXIgWD17Q2hpbGRyZW46e21hcDpmdW5jdGlvbihhLGIsZCl7aWYobnVsbD09YSlyZXR1cm4gYTt2YXIgYz1bXTtWKGEsYyxudWxsLGIsZCk7cmV0dXJuIGN9LGZvckVhY2g6ZnVuY3Rpb24oYSxiLGQpe2lmKG51bGw9PWEpcmV0dXJuIGE7Yj1RKG51bGwsbnVsbCxiLGQpO1UoYSxlYSxiKTtSKGIpfSxjb3VudDpmdW5jdGlvbihhKXtyZXR1cm4gVShhLGZ1bmN0aW9uKCl7cmV0dXJuIG51bGx9LG51bGwpfSx0b0FycmF5OmZ1bmN0aW9uKGEpe3ZhciBiPVtdO1YoYSxiLG51bGwsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KTtyZXR1cm4gYn0sb25seTpmdW5jdGlvbihhKXtpZighTihhKSl0aHJvdyBBKEVycm9yKDE0MykpO3JldHVybiBhfX0sY3JlYXRlUmVmOmZ1bmN0aW9uKCl7cmV0dXJue2N1cnJlbnQ6bnVsbH19LENvbXBvbmVudDpELFB1cmVDb21wb25lbnQ6RixjcmVhdGVDb250ZXh0OmZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YiYmKGI9bnVsbCk7YT17JCR0eXBlb2Y6dyxfY2FsY3VsYXRlQ2hhbmdlZEJpdHM6Yixcbl9jdXJyZW50VmFsdWU6YSxfY3VycmVudFZhbHVlMjphLF90aHJlYWRDb3VudDowLFByb3ZpZGVyOm51bGwsQ29uc3VtZXI6bnVsbH07YS5Qcm92aWRlcj17JCR0eXBlb2Y6dixfY29udGV4dDphfTtyZXR1cm4gYS5Db25zdW1lcj1hfSxmb3J3YXJkUmVmOmZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjp4LHJlbmRlcjphfX0sbGF6eTpmdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6Y2EsX2N0b3I6YSxfc3RhdHVzOi0xLF9yZXN1bHQ6bnVsbH19LG1lbW86ZnVuY3Rpb24oYSxiKXtyZXR1cm57JCR0eXBlb2Y6YmEsdHlwZTphLGNvbXBhcmU6dm9pZCAwPT09Yj9udWxsOmJ9fSx1c2VDYWxsYmFjazpmdW5jdGlvbihhLGIpe3JldHVybiBXKCkudXNlQ2FsbGJhY2soYSxiKX0sdXNlQ29udGV4dDpmdW5jdGlvbihhLGIpe3JldHVybiBXKCkudXNlQ29udGV4dChhLGIpfSx1c2VFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVygpLnVzZUVmZmVjdChhLGIpfSx1c2VJbXBlcmF0aXZlSGFuZGxlOmZ1bmN0aW9uKGEsXG5iLGQpe3JldHVybiBXKCkudXNlSW1wZXJhdGl2ZUhhbmRsZShhLGIsZCl9LHVzZURlYnVnVmFsdWU6ZnVuY3Rpb24oKXt9LHVzZUxheW91dEVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBXKCkudXNlTGF5b3V0RWZmZWN0KGEsYil9LHVzZU1lbW86ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVygpLnVzZU1lbW8oYSxiKX0sdXNlUmVkdWNlcjpmdW5jdGlvbihhLGIsZCl7cmV0dXJuIFcoKS51c2VSZWR1Y2VyKGEsYixkKX0sdXNlUmVmOmZ1bmN0aW9uKGEpe3JldHVybiBXKCkudXNlUmVmKGEpfSx1c2VTdGF0ZTpmdW5jdGlvbihhKXtyZXR1cm4gVygpLnVzZVN0YXRlKGEpfSxGcmFnbWVudDpyLFByb2ZpbGVyOnUsU3RyaWN0TW9kZTp0LFN1c3BlbnNlOnksdW5zdGFibGVfU3VzcGVuc2VMaXN0OmFhLGNyZWF0ZUVsZW1lbnQ6TSxjbG9uZUVsZW1lbnQ6ZnVuY3Rpb24oYSxiLGQpe2lmKG51bGw9PT1hfHx2b2lkIDA9PT1hKXRocm93IEEoRXJyb3IoMjY3KSxhKTt2YXIgYz12b2lkIDAsZT1cbmgoe30sYS5wcm9wcyksZz1hLmtleSxrPWEucmVmLGY9YS5fb3duZXI7aWYobnVsbCE9Yil7dm9pZCAwIT09Yi5yZWYmJihrPWIucmVmLGY9Si5jdXJyZW50KTt2b2lkIDAhPT1iLmtleSYmKGc9XCJcIitiLmtleSk7dmFyIGw9dm9pZCAwO2EudHlwZSYmYS50eXBlLmRlZmF1bHRQcm9wcyYmKGw9YS50eXBlLmRlZmF1bHRQcm9wcyk7Zm9yKGMgaW4gYilLLmNhbGwoYixjKSYmIUwuaGFzT3duUHJvcGVydHkoYykmJihlW2NdPXZvaWQgMD09PWJbY10mJnZvaWQgMCE9PWw/bFtjXTpiW2NdKX1jPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09YyllLmNoaWxkcmVuPWQ7ZWxzZSBpZigxPGMpe2w9QXJyYXkoYyk7Zm9yKHZhciBtPTA7bTxjO20rKylsW21dPWFyZ3VtZW50c1ttKzJdO2UuY2hpbGRyZW49bH1yZXR1cm57JCR0eXBlb2Y6cCx0eXBlOmEudHlwZSxrZXk6ZyxyZWY6ayxwcm9wczplLF9vd25lcjpmfX0sY3JlYXRlRmFjdG9yeTpmdW5jdGlvbihhKXt2YXIgYj1NLmJpbmQobnVsbCxhKTtcbmIudHlwZT1hO3JldHVybiBifSxpc1ZhbGlkRWxlbWVudDpOLHZlcnNpb246XCIxNi45LjBcIix1bnN0YWJsZV93aXRoU3VzcGVuc2VDb25maWc6ZnVuY3Rpb24oYSxiKXt2YXIgZD1JLnN1c3BlbnNlO0kuc3VzcGVuc2U9dm9pZCAwPT09Yj9udWxsOmI7dHJ5e2EoKX1maW5hbGx5e0kuc3VzcGVuc2U9ZH19LF9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEOntSZWFjdEN1cnJlbnREaXNwYXRjaGVyOkgsUmVhY3RDdXJyZW50QmF0Y2hDb25maWc6SSxSZWFjdEN1cnJlbnRPd25lcjpKLElzU29tZVJlbmRlcmVyQWN0aW5nOntjdXJyZW50OiExfSxhc3NpZ246aH19LFk9e2RlZmF1bHQ6WH0sWj1ZJiZYfHxZO21vZHVsZS5leHBvcnRzPVouZGVmYXVsdHx8WjtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSByZXF1aXJlKCcuL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldCcpO1xuXG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uKCkge31cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQoKSB7fVxuZW1wdHlGdW5jdGlvbldpdGhSZXNldC5yZXNldFdhcm5pbmdDYWNoZSA9IGVtcHR5RnVuY3Rpb247XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIHNoaW0ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCBzZWNyZXQpIHtcbiAgICBpZiAoc2VjcmV0ID09PSBSZWFjdFByb3BUeXBlc1NlY3JldCkge1xuICAgICAgLy8gSXQgaXMgc3RpbGwgc2FmZSB3aGVuIGNhbGxlZCBmcm9tIFJlYWN0LlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKFxuICAgICAgJ0NhbGxpbmcgUHJvcFR5cGVzIHZhbGlkYXRvcnMgZGlyZWN0bHkgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYHByb3AtdHlwZXNgIHBhY2thZ2UuICcgK1xuICAgICAgJ1VzZSBQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMoKSB0byBjYWxsIHRoZW0uICcgK1xuICAgICAgJ1JlYWQgbW9yZSBhdCBodHRwOi8vZmIubWUvdXNlLWNoZWNrLXByb3AtdHlwZXMnXG4gICAgKTtcbiAgICBlcnIubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB0aHJvdyBlcnI7XG4gIH07XG4gIHNoaW0uaXNSZXF1aXJlZCA9IHNoaW07XG4gIGZ1bmN0aW9uIGdldFNoaW0oKSB7XG4gICAgcmV0dXJuIHNoaW07XG4gIH07XG4gIC8vIEltcG9ydGFudCFcbiAgLy8gS2VlcCB0aGlzIGxpc3QgaW4gc3luYyB3aXRoIHByb2R1Y3Rpb24gdmVyc2lvbiBpbiBgLi9mYWN0b3J5V2l0aFR5cGVDaGVja2Vycy5qc2AuXG4gIHZhciBSZWFjdFByb3BUeXBlcyA9IHtcbiAgICBhcnJheTogc2hpbSxcbiAgICBib29sOiBzaGltLFxuICAgIGZ1bmM6IHNoaW0sXG4gICAgbnVtYmVyOiBzaGltLFxuICAgIG9iamVjdDogc2hpbSxcbiAgICBzdHJpbmc6IHNoaW0sXG4gICAgc3ltYm9sOiBzaGltLFxuXG4gICAgYW55OiBzaGltLFxuICAgIGFycmF5T2Y6IGdldFNoaW0sXG4gICAgZWxlbWVudDogc2hpbSxcbiAgICBlbGVtZW50VHlwZTogc2hpbSxcbiAgICBpbnN0YW5jZU9mOiBnZXRTaGltLFxuICAgIG5vZGU6IHNoaW0sXG4gICAgb2JqZWN0T2Y6IGdldFNoaW0sXG4gICAgb25lT2Y6IGdldFNoaW0sXG4gICAgb25lT2ZUeXBlOiBnZXRTaGltLFxuICAgIHNoYXBlOiBnZXRTaGltLFxuICAgIGV4YWN0OiBnZXRTaGltLFxuXG4gICAgY2hlY2tQcm9wVHlwZXM6IGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQsXG4gICAgcmVzZXRXYXJuaW5nQ2FjaGU6IGVtcHR5RnVuY3Rpb25cbiAgfTtcblxuICBSZWFjdFByb3BUeXBlcy5Qcm9wVHlwZXMgPSBSZWFjdFByb3BUeXBlcztcblxuICByZXR1cm4gUmVhY3RQcm9wVHlwZXM7XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9ICdTRUNSRVRfRE9fTk9UX1BBU1NfVEhJU19PUl9ZT1VfV0lMTF9CRV9GSVJFRCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZXNTZWNyZXQ7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbi8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodXNlU291cmNlTWFwKSB7XG4gIHZhciBsaXN0ID0gW107IC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblxuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKTtcblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgcmV0dXJuIFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIntcIikuY29uY2F0KGNvbnRlbnQsIFwifVwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbignJyk7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiAobW9kdWxlcywgbWVkaWFRdWVyeSkge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgJyddXTtcbiAgICB9XG5cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmdcbiAgICAgIHZhciBpZCA9IHRoaXNbaV1bMF07XG5cbiAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbW9kdWxlcy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBpdGVtID0gbW9kdWxlc1tfaV07IC8vIHNraXAgYWxyZWFkeSBpbXBvcnRlZCBtb2R1bGVcbiAgICAgIC8vIHRoaXMgaW1wbGVtZW50YXRpb24gaXMgbm90IDEwMCUgcGVyZmVjdCBmb3Igd2VpcmQgbWVkaWEgcXVlcnkgY29tYmluYXRpb25zXG4gICAgICAvLyB3aGVuIGEgbW9kdWxlIGlzIGltcG9ydGVkIG11bHRpcGxlIHRpbWVzIHdpdGggZGlmZmVyZW50IG1lZGlhIHF1ZXJpZXMuXG4gICAgICAvLyBJIGhvcGUgdGhpcyB3aWxsIG5ldmVyIG9jY3VyIChIZXkgdGhpcyB3YXkgd2UgaGF2ZSBzbWFsbGVyIGJ1bmRsZXMpXG5cbiAgICAgIGlmIChpdGVtWzBdID09IG51bGwgfHwgIWFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgaWYgKG1lZGlhUXVlcnkgJiYgIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWFRdWVyeTtcbiAgICAgICAgfSBlbHNlIGlmIChtZWRpYVF1ZXJ5KSB7XG4gICAgICAgICAgaXRlbVsyXSA9IFwiKFwiLmNvbmNhdChpdGVtWzJdLCBcIikgYW5kIChcIikuY29uY2F0KG1lZGlhUXVlcnksIFwiKVwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGxpc3Q7XG59O1xuXG5mdW5jdGlvbiBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV0gfHwgJyc7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZ1xuXG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblxuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuXG4gIGlmICh1c2VTb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IHRvQ29tbWVudChjc3NNYXBwaW5nKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290KS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKCdcXG4nKTtcbiAgfVxuXG4gIHJldHVybiBbY29udGVudF0uam9pbignXFxuJyk7XG59IC8vIEFkYXB0ZWQgZnJvbSBjb252ZXJ0LXNvdXJjZS1tYXAgKE1JVClcblxuXG5mdW5jdGlvbiB0b0NvbW1lbnQoc291cmNlTWFwKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKTtcbiAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICByZXR1cm4gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xufSJdLCJzb3VyY2VSb290IjoiIn0=